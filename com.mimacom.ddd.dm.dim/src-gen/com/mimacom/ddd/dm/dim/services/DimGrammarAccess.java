/*
 * generated by Xtext 2.17.1
 */
package com.mimacom.ddd.dm.dim.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import com.mimacom.ddd.dm.dmx.services.DmxGrammarAccess;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class DimGrammarAccess extends AbstractGrammarElementFinder {
	
	public class DDomainElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.dim.Dim.DDomain");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cImportsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cImportsDImportParserRuleCall_0_0 = (RuleCall)cImportsAssignment_0.eContents().get(0);
		private final Keyword cDomainKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameDQualifiedNameParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cAliasKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cAliasesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cAliasesIDTerminalRuleCall_3_1_0 = (RuleCall)cAliasesAssignment_3_1.eContents().get(0);
		private final Assignment cDescriptionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cDescriptionDRichTextParserRuleCall_4_0 = (RuleCall)cDescriptionAssignment_4.eContents().get(0);
		private final Alternatives cAlternatives_5 = (Alternatives)cGroup.eContents().get(5);
		private final Assignment cTypesAssignment_5_0 = (Assignment)cAlternatives_5.eContents().get(0);
		private final RuleCall cTypesDTypeParserRuleCall_5_0_0 = (RuleCall)cTypesAssignment_5_0.eContents().get(0);
		private final Assignment cAggregatesAssignment_5_1 = (Assignment)cAlternatives_5.eContents().get(1);
		private final RuleCall cAggregatesDAggregateParserRuleCall_5_1_0 = (RuleCall)cAggregatesAssignment_5_1.eContents().get(0);
		private final Assignment cApplicationsAssignment_5_2 = (Assignment)cAlternatives_5.eContents().get(2);
		private final RuleCall cApplicationsDExistingApplicationParserRuleCall_5_2_0 = (RuleCall)cApplicationsAssignment_5_2.eContents().get(0);
		private final Assignment cActorsAssignment_5_3 = (Assignment)cAlternatives_5.eContents().get(3);
		private final RuleCall cActorsDServiceParserRuleCall_5_3_0 = (RuleCall)cActorsAssignment_5_3.eContents().get(0);
		
		///*
		// * MODEL STRUCTURE
		// */ DDomain:
		//	imports+=DImport*
		//	'domain'
		//	name=DQualifiedName ('alias' aliases+=ID)*
		//	description=DRichText? (types+=DType | aggregates+=DAggregate | applications+=DExistingApplication |
		//	actors+=DService)*;
		@Override public ParserRule getRule() { return rule; }
		
		//imports+=DImport* 'domain' name=DQualifiedName ('alias' aliases+=ID)* description=DRichText? (types+=DType |
		//aggregates+=DAggregate | applications+=DExistingApplication | actors+=DService)*
		public Group getGroup() { return cGroup; }
		
		//imports+=DImport*
		public Assignment getImportsAssignment_0() { return cImportsAssignment_0; }
		
		//DImport
		public RuleCall getImportsDImportParserRuleCall_0_0() { return cImportsDImportParserRuleCall_0_0; }
		
		//'domain'
		public Keyword getDomainKeyword_1() { return cDomainKeyword_1; }
		
		//name=DQualifiedName
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//DQualifiedName
		public RuleCall getNameDQualifiedNameParserRuleCall_2_0() { return cNameDQualifiedNameParserRuleCall_2_0; }
		
		//('alias' aliases+=ID)*
		public Group getGroup_3() { return cGroup_3; }
		
		//'alias'
		public Keyword getAliasKeyword_3_0() { return cAliasKeyword_3_0; }
		
		//aliases+=ID
		public Assignment getAliasesAssignment_3_1() { return cAliasesAssignment_3_1; }
		
		//ID
		public RuleCall getAliasesIDTerminalRuleCall_3_1_0() { return cAliasesIDTerminalRuleCall_3_1_0; }
		
		//description=DRichText?
		public Assignment getDescriptionAssignment_4() { return cDescriptionAssignment_4; }
		
		//DRichText
		public RuleCall getDescriptionDRichTextParserRuleCall_4_0() { return cDescriptionDRichTextParserRuleCall_4_0; }
		
		//(types+=DType | aggregates+=DAggregate | applications+=DExistingApplication | actors+=DService)*
		public Alternatives getAlternatives_5() { return cAlternatives_5; }
		
		//types+=DType
		public Assignment getTypesAssignment_5_0() { return cTypesAssignment_5_0; }
		
		//DType
		public RuleCall getTypesDTypeParserRuleCall_5_0_0() { return cTypesDTypeParserRuleCall_5_0_0; }
		
		//aggregates+=DAggregate
		public Assignment getAggregatesAssignment_5_1() { return cAggregatesAssignment_5_1; }
		
		//DAggregate
		public RuleCall getAggregatesDAggregateParserRuleCall_5_1_0() { return cAggregatesDAggregateParserRuleCall_5_1_0; }
		
		//applications+=DExistingApplication
		public Assignment getApplicationsAssignment_5_2() { return cApplicationsAssignment_5_2; }
		
		//DExistingApplication
		public RuleCall getApplicationsDExistingApplicationParserRuleCall_5_2_0() { return cApplicationsDExistingApplicationParserRuleCall_5_2_0; }
		
		//actors+=DService
		public Assignment getActorsAssignment_5_3() { return cActorsAssignment_5_3; }
		
		//DService
		public RuleCall getActorsDServiceParserRuleCall_5_3_0() { return cActorsDServiceParserRuleCall_5_3_0; }
	}
	public class DAggregateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.dim.Dim.DAggregate");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDAggregateAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cAggregateKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cDescriptionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDescriptionDRichTextParserRuleCall_2_0 = (RuleCall)cDescriptionAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTypesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cTypesDTypeParserRuleCall_4_0 = (RuleCall)cTypesAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//DAggregate:
		//	{DAggregate}
		//	'aggregate'
		//	description=DRichText?
		//	'{'
		//	types+=DType*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{DAggregate} 'aggregate' description=DRichText? '{' types+=DType* '}'
		public Group getGroup() { return cGroup; }
		
		//{DAggregate}
		public Action getDAggregateAction_0() { return cDAggregateAction_0; }
		
		//'aggregate'
		public Keyword getAggregateKeyword_1() { return cAggregateKeyword_1; }
		
		//description=DRichText?
		public Assignment getDescriptionAssignment_2() { return cDescriptionAssignment_2; }
		
		//DRichText
		public RuleCall getDescriptionDRichTextParserRuleCall_2_0() { return cDescriptionDRichTextParserRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//types+=DType*
		public Assignment getTypesAssignment_4() { return cTypesAssignment_4; }
		
		//DType
		public RuleCall getTypesDTypeParserRuleCall_4_0() { return cTypesDTypeParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class DTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.dim.Dim.DType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDPrimitiveParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDEnumerationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cDEntityTypeParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cDRelationshipParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cDDetailTypeParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		///*
		// * TYPES
		// */ DType:
		//	DPrimitive | DEnumeration | DEntityType | DRelationship | DDetailType;
		@Override public ParserRule getRule() { return rule; }
		
		//DPrimitive | DEnumeration | DEntityType | DRelationship | DDetailType
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//DPrimitive
		public RuleCall getDPrimitiveParserRuleCall_0() { return cDPrimitiveParserRuleCall_0; }
		
		//DEnumeration
		public RuleCall getDEnumerationParserRuleCall_1() { return cDEnumerationParserRuleCall_1; }
		
		//DEntityType
		public RuleCall getDEntityTypeParserRuleCall_2() { return cDEntityTypeParserRuleCall_2; }
		
		//DRelationship
		public RuleCall getDRelationshipParserRuleCall_3() { return cDRelationshipParserRuleCall_3; }
		
		//DDetailType
		public RuleCall getDDetailTypeParserRuleCall_4() { return cDDetailTypeParserRuleCall_4; }
	}
	public class DConstraintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.dim.Dim.DConstraint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cConstraintKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cAliasKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cAliasesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cAliasesIDTerminalRuleCall_2_1_0 = (RuleCall)cAliasesAssignment_2_1.eContents().get(0);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cConditionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cConditionDExpressionParserRuleCall_4_0 = (RuleCall)cConditionAssignment_4.eContents().get(0);
		private final Assignment cDescriptionAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cDescriptionDRichTextParserRuleCall_5_0 = (RuleCall)cDescriptionAssignment_5.eContents().get(0);
		
		//DConstraint DCondition:
		//	'constraint'
		//	name=ID ('alias' aliases+=ID)*
		//	':'
		//	condition=DExpression
		//	description=DRichText?;
		@Override public ParserRule getRule() { return rule; }
		
		//'constraint' name=ID ('alias' aliases+=ID)* ':' condition=DExpression description=DRichText?
		public Group getGroup() { return cGroup; }
		
		//'constraint'
		public Keyword getConstraintKeyword_0() { return cConstraintKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//('alias' aliases+=ID)*
		public Group getGroup_2() { return cGroup_2; }
		
		//'alias'
		public Keyword getAliasKeyword_2_0() { return cAliasKeyword_2_0; }
		
		//aliases+=ID
		public Assignment getAliasesAssignment_2_1() { return cAliasesAssignment_2_1; }
		
		//ID
		public RuleCall getAliasesIDTerminalRuleCall_2_1_0() { return cAliasesIDTerminalRuleCall_2_1_0; }
		
		//':'
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }
		
		//condition=DExpression
		public Assignment getConditionAssignment_4() { return cConditionAssignment_4; }
		
		//DExpression
		public RuleCall getConditionDExpressionParserRuleCall_4_0() { return cConditionDExpressionParserRuleCall_4_0; }
		
		//description=DRichText?
		public Assignment getDescriptionAssignment_5() { return cDescriptionAssignment_5; }
		
		//DRichText
		public RuleCall getDescriptionDRichTextParserRuleCall_5_0() { return cDescriptionDRichTextParserRuleCall_5_0; }
	}
	public class DPrimitiveElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.dim.Dim.DPrimitive");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPrimitiveKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cAliasKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cAliasesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cAliasesIDTerminalRuleCall_2_1_0 = (RuleCall)cAliasesAssignment_2_1.eContents().get(0);
		private final Keyword cRedefinesKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cRedefinesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cRedefinesDmxArchetypeCrossReference_4_0 = (CrossReference)cRedefinesAssignment_4.eContents().get(0);
		private final RuleCall cRedefinesDmxArchetypeIDTerminalRuleCall_4_0_1 = (RuleCall)cRedefinesDmxArchetypeCrossReference_4_0.eContents().get(1);
		private final Assignment cDescriptionAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cDescriptionDRichTextParserRuleCall_5_0 = (RuleCall)cDescriptionAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cLeftCurlyBracketKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cConstraintsAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cConstraintsDConstraintParserRuleCall_6_1_0 = (RuleCall)cConstraintsAssignment_6_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6_2 = (Keyword)cGroup_6.eContents().get(2);
		
		//DPrimitive:
		//	'primitive'
		//	name=ID ('alias' aliases+=ID)*
		//	'redefines' redefines=[DmxArchetype] description=DRichText? ('{'
		//	constraints+=DConstraint+
		//	'}')?;
		@Override public ParserRule getRule() { return rule; }
		
		//'primitive' name=ID ('alias' aliases+=ID)* 'redefines' redefines=[DmxArchetype] description=DRichText? ('{'
		//constraints+=DConstraint+ '}')?
		public Group getGroup() { return cGroup; }
		
		//'primitive'
		public Keyword getPrimitiveKeyword_0() { return cPrimitiveKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//('alias' aliases+=ID)*
		public Group getGroup_2() { return cGroup_2; }
		
		//'alias'
		public Keyword getAliasKeyword_2_0() { return cAliasKeyword_2_0; }
		
		//aliases+=ID
		public Assignment getAliasesAssignment_2_1() { return cAliasesAssignment_2_1; }
		
		//ID
		public RuleCall getAliasesIDTerminalRuleCall_2_1_0() { return cAliasesIDTerminalRuleCall_2_1_0; }
		
		//'redefines'
		public Keyword getRedefinesKeyword_3() { return cRedefinesKeyword_3; }
		
		//redefines=[DmxArchetype]
		public Assignment getRedefinesAssignment_4() { return cRedefinesAssignment_4; }
		
		//[DmxArchetype]
		public CrossReference getRedefinesDmxArchetypeCrossReference_4_0() { return cRedefinesDmxArchetypeCrossReference_4_0; }
		
		//ID
		public RuleCall getRedefinesDmxArchetypeIDTerminalRuleCall_4_0_1() { return cRedefinesDmxArchetypeIDTerminalRuleCall_4_0_1; }
		
		//description=DRichText?
		public Assignment getDescriptionAssignment_5() { return cDescriptionAssignment_5; }
		
		//DRichText
		public RuleCall getDescriptionDRichTextParserRuleCall_5_0() { return cDescriptionDRichTextParserRuleCall_5_0; }
		
		//('{' constraints+=DConstraint+ '}')?
		public Group getGroup_6() { return cGroup_6; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_6_0() { return cLeftCurlyBracketKeyword_6_0; }
		
		//constraints+=DConstraint+
		public Assignment getConstraintsAssignment_6_1() { return cConstraintsAssignment_6_1; }
		
		//DConstraint
		public RuleCall getConstraintsDConstraintParserRuleCall_6_1_0() { return cConstraintsDConstraintParserRuleCall_6_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6_2() { return cRightCurlyBracketKeyword_6_2; }
	}
	public class DEnumerationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.dim.Dim.DEnumeration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEnumerationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cAliasKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cAliasesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cAliasesIDTerminalRuleCall_2_1_0 = (RuleCall)cAliasesAssignment_2_1.eContents().get(0);
		private final Assignment cDescriptionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDescriptionDRichTextParserRuleCall_3_0 = (RuleCall)cDescriptionAssignment_3.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Assignment cLiteralsAssignment_5_0 = (Assignment)cGroup_5.eContents().get(0);
		private final RuleCall cLiteralsDLiteralParserRuleCall_5_0_0 = (RuleCall)cLiteralsAssignment_5_0.eContents().get(0);
		private final Group cGroup_5_1 = (Group)cGroup_5.eContents().get(1);
		private final Keyword cCommaKeyword_5_1_0 = (Keyword)cGroup_5_1.eContents().get(0);
		private final Assignment cLiteralsAssignment_5_1_1 = (Assignment)cGroup_5_1.eContents().get(1);
		private final RuleCall cLiteralsDLiteralParserRuleCall_5_1_1_0 = (RuleCall)cLiteralsAssignment_5_1_1.eContents().get(0);
		private final Assignment cConstraintsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cConstraintsDConstraintParserRuleCall_6_0 = (RuleCall)cConstraintsAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//DEnumeration:
		//	'enumeration'
		//	name=ID ('alias' aliases+=ID)*
		//	description=DRichText?
		//	'{' (literals+=DLiteral (',' literals+=DLiteral)*)?
		//	constraints+=DConstraint*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'enumeration' name=ID ('alias' aliases+=ID)* description=DRichText? '{' (literals+=DLiteral (',' literals+=DLiteral)*)?
		//constraints+=DConstraint* '}'
		public Group getGroup() { return cGroup; }
		
		//'enumeration'
		public Keyword getEnumerationKeyword_0() { return cEnumerationKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//('alias' aliases+=ID)*
		public Group getGroup_2() { return cGroup_2; }
		
		//'alias'
		public Keyword getAliasKeyword_2_0() { return cAliasKeyword_2_0; }
		
		//aliases+=ID
		public Assignment getAliasesAssignment_2_1() { return cAliasesAssignment_2_1; }
		
		//ID
		public RuleCall getAliasesIDTerminalRuleCall_2_1_0() { return cAliasesIDTerminalRuleCall_2_1_0; }
		
		//description=DRichText?
		public Assignment getDescriptionAssignment_3() { return cDescriptionAssignment_3; }
		
		//DRichText
		public RuleCall getDescriptionDRichTextParserRuleCall_3_0() { return cDescriptionDRichTextParserRuleCall_3_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//(literals+=DLiteral (',' literals+=DLiteral)*)?
		public Group getGroup_5() { return cGroup_5; }
		
		//literals+=DLiteral
		public Assignment getLiteralsAssignment_5_0() { return cLiteralsAssignment_5_0; }
		
		//DLiteral
		public RuleCall getLiteralsDLiteralParserRuleCall_5_0_0() { return cLiteralsDLiteralParserRuleCall_5_0_0; }
		
		//(',' literals+=DLiteral)*
		public Group getGroup_5_1() { return cGroup_5_1; }
		
		//','
		public Keyword getCommaKeyword_5_1_0() { return cCommaKeyword_5_1_0; }
		
		//literals+=DLiteral
		public Assignment getLiteralsAssignment_5_1_1() { return cLiteralsAssignment_5_1_1; }
		
		//DLiteral
		public RuleCall getLiteralsDLiteralParserRuleCall_5_1_1_0() { return cLiteralsDLiteralParserRuleCall_5_1_1_0; }
		
		//constraints+=DConstraint*
		public Assignment getConstraintsAssignment_6() { return cConstraintsAssignment_6; }
		
		//DConstraint
		public RuleCall getConstraintsDConstraintParserRuleCall_6_0() { return cConstraintsDConstraintParserRuleCall_6_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	public class DLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.dim.Dim.DLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cAliasKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cAliasesAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cAliasesIDTerminalRuleCall_1_1_0 = (RuleCall)cAliasesAssignment_1_1.eContents().get(0);
		private final Assignment cDescriptionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDescriptionDRichTextParserRuleCall_2_0 = (RuleCall)cDescriptionAssignment_2.eContents().get(0);
		
		//DLiteral:
		//	name=ID ('alias' aliases+=ID)*
		//	description=DRichText?;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID ('alias' aliases+=ID)* description=DRichText?
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//('alias' aliases+=ID)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'alias'
		public Keyword getAliasKeyword_1_0() { return cAliasKeyword_1_0; }
		
		//aliases+=ID
		public Assignment getAliasesAssignment_1_1() { return cAliasesAssignment_1_1; }
		
		//ID
		public RuleCall getAliasesIDTerminalRuleCall_1_1_0() { return cAliasesIDTerminalRuleCall_1_1_0; }
		
		//description=DRichText?
		public Assignment getDescriptionAssignment_2() { return cDescriptionAssignment_2; }
		
		//DRichText
		public RuleCall getDescriptionDRichTextParserRuleCall_2_0() { return cDescriptionDRichTextParserRuleCall_2_0; }
	}
	public class DEntityTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.dim.Dim.DEntityType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAbstractAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cAbstractAbstractKeyword_0_0 = (Keyword)cAbstractAssignment_0.eContents().get(0);
		private final Assignment cRootAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cRootRootKeyword_1_0 = (Keyword)cRootAssignment_1.eContents().get(0);
		private final Keyword cEntityKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cDComplexTypeParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//DEntityType:
		//	abstract?='abstract'?
		//	root?='root'?
		//	'entity'
		//	DComplexType;
		@Override public ParserRule getRule() { return rule; }
		
		//abstract?='abstract'? root?='root'? 'entity' DComplexType
		public Group getGroup() { return cGroup; }
		
		//abstract?='abstract'?
		public Assignment getAbstractAssignment_0() { return cAbstractAssignment_0; }
		
		//'abstract'
		public Keyword getAbstractAbstractKeyword_0_0() { return cAbstractAbstractKeyword_0_0; }
		
		//root?='root'?
		public Assignment getRootAssignment_1() { return cRootAssignment_1; }
		
		//'root'
		public Keyword getRootRootKeyword_1_0() { return cRootRootKeyword_1_0; }
		
		//'entity'
		public Keyword getEntityKeyword_2() { return cEntityKeyword_2; }
		
		//DComplexType
		public RuleCall getDComplexTypeParserRuleCall_3() { return cDComplexTypeParserRuleCall_3; }
	}
	public class DRelationshipElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.dim.Dim.DRelationship");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAbstractAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cAbstractAbstractKeyword_0_0 = (Keyword)cAbstractAssignment_0.eContents().get(0);
		private final Assignment cRootAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cRootRootKeyword_1_0 = (Keyword)cRootAssignment_1.eContents().get(0);
		private final Keyword cRelationshipKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cDComplexTypeParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//DRelationship:
		//	abstract?='abstract'?
		//	root?='root'?
		//	'relationship'
		//	DComplexType;
		@Override public ParserRule getRule() { return rule; }
		
		//abstract?='abstract'? root?='root'? 'relationship' DComplexType
		public Group getGroup() { return cGroup; }
		
		//abstract?='abstract'?
		public Assignment getAbstractAssignment_0() { return cAbstractAssignment_0; }
		
		//'abstract'
		public Keyword getAbstractAbstractKeyword_0_0() { return cAbstractAbstractKeyword_0_0; }
		
		//root?='root'?
		public Assignment getRootAssignment_1() { return cRootAssignment_1; }
		
		//'root'
		public Keyword getRootRootKeyword_1_0() { return cRootRootKeyword_1_0; }
		
		//'relationship'
		public Keyword getRelationshipKeyword_2() { return cRelationshipKeyword_2; }
		
		//DComplexType
		public RuleCall getDComplexTypeParserRuleCall_3() { return cDComplexTypeParserRuleCall_3; }
	}
	public class DDetailTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.dim.Dim.DDetailType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAbstractAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cAbstractAbstractKeyword_0_0 = (Keyword)cAbstractAssignment_0.eContents().get(0);
		private final Keyword cDetailKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cDComplexTypeParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//DDetailType:
		//	abstract?='abstract'?
		//	'detail'
		//	DComplexType;
		@Override public ParserRule getRule() { return rule; }
		
		//abstract?='abstract'? 'detail' DComplexType
		public Group getGroup() { return cGroup; }
		
		//abstract?='abstract'?
		public Assignment getAbstractAssignment_0() { return cAbstractAssignment_0; }
		
		//'abstract'
		public Keyword getAbstractAbstractKeyword_0_0() { return cAbstractAbstractKeyword_0_0; }
		
		//'detail'
		public Keyword getDetailKeyword_1() { return cDetailKeyword_1; }
		
		//DComplexType
		public RuleCall getDComplexTypeParserRuleCall_2() { return cDComplexTypeParserRuleCall_2; }
	}
	public class DComplexTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.dim.Dim.DComplexType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cAliasKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cAliasesAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cAliasesIDTerminalRuleCall_1_1_0 = (RuleCall)cAliasesAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cExtendsKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cSuperTypeAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cSuperTypeDComplexTypeCrossReference_2_1_0 = (CrossReference)cSuperTypeAssignment_2_1.eContents().get(0);
		private final RuleCall cSuperTypeDComplexTypeIDTerminalRuleCall_2_1_0_1 = (RuleCall)cSuperTypeDComplexTypeCrossReference_2_1_0.eContents().get(1);
		private final Assignment cDescriptionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDescriptionDRichTextParserRuleCall_3_0 = (RuleCall)cDescriptionAssignment_3.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Alternatives cAlternatives_5 = (Alternatives)cGroup.eContents().get(5);
		private final Assignment cFeaturesAssignment_5_0 = (Assignment)cAlternatives_5.eContents().get(0);
		private final RuleCall cFeaturesDFeatureParserRuleCall_5_0_0 = (RuleCall)cFeaturesAssignment_5_0.eContents().get(0);
		private final Assignment cConstraintsAssignment_5_1 = (Assignment)cAlternatives_5.eContents().get(1);
		private final RuleCall cConstraintsDConstraintParserRuleCall_5_1_0 = (RuleCall)cConstraintsAssignment_5_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//fragment DComplexType:
		//	name=ID ('alias' aliases+=ID)* ('extends' superType=[DComplexType])?
		//	description=DRichText?
		//	'{' (features+=DFeature | constraints+=DConstraint)*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID ('alias' aliases+=ID)* ('extends' superType=[DComplexType])? description=DRichText? '{' (features+=DFeature |
		//constraints+=DConstraint)* '}'
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//('alias' aliases+=ID)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'alias'
		public Keyword getAliasKeyword_1_0() { return cAliasKeyword_1_0; }
		
		//aliases+=ID
		public Assignment getAliasesAssignment_1_1() { return cAliasesAssignment_1_1; }
		
		//ID
		public RuleCall getAliasesIDTerminalRuleCall_1_1_0() { return cAliasesIDTerminalRuleCall_1_1_0; }
		
		//('extends' superType=[DComplexType])?
		public Group getGroup_2() { return cGroup_2; }
		
		//'extends'
		public Keyword getExtendsKeyword_2_0() { return cExtendsKeyword_2_0; }
		
		//superType=[DComplexType]
		public Assignment getSuperTypeAssignment_2_1() { return cSuperTypeAssignment_2_1; }
		
		//[DComplexType]
		public CrossReference getSuperTypeDComplexTypeCrossReference_2_1_0() { return cSuperTypeDComplexTypeCrossReference_2_1_0; }
		
		//ID
		public RuleCall getSuperTypeDComplexTypeIDTerminalRuleCall_2_1_0_1() { return cSuperTypeDComplexTypeIDTerminalRuleCall_2_1_0_1; }
		
		//description=DRichText?
		public Assignment getDescriptionAssignment_3() { return cDescriptionAssignment_3; }
		
		//DRichText
		public RuleCall getDescriptionDRichTextParserRuleCall_3_0() { return cDescriptionDRichTextParserRuleCall_3_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//(features+=DFeature | constraints+=DConstraint)*
		public Alternatives getAlternatives_5() { return cAlternatives_5; }
		
		//features+=DFeature
		public Assignment getFeaturesAssignment_5_0() { return cFeaturesAssignment_5_0; }
		
		//DFeature
		public RuleCall getFeaturesDFeatureParserRuleCall_5_0_0() { return cFeaturesDFeatureParserRuleCall_5_0_0; }
		
		//constraints+=DConstraint
		public Assignment getConstraintsAssignment_5_1() { return cConstraintsAssignment_5_1; }
		
		//DConstraint
		public RuleCall getConstraintsDConstraintParserRuleCall_5_1_0() { return cConstraintsDConstraintParserRuleCall_5_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class DFeatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.dim.Dim.DFeature");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDAssociationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDAttributeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cDQueryParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//DFeature:
		//	DAssociation | DAttribute | DQuery;
		@Override public ParserRule getRule() { return rule; }
		
		//DAssociation | DAttribute | DQuery
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//DAssociation
		public RuleCall getDAssociationParserRuleCall_0() { return cDAssociationParserRuleCall_0; }
		
		//DAttribute
		public RuleCall getDAttributeParserRuleCall_1() { return cDAttributeParserRuleCall_1; }
		
		//DQuery
		public RuleCall getDQueryParserRuleCall_2() { return cDQueryParserRuleCall_2; }
	}
	public class DAssociationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.dim.Dim.DAssociation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDerivedAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cDerivedDerivedKeyword_0_0 = (Keyword)cDerivedAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cKindAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cKindDAssociationKindEnumRuleCall_1_0_0 = (RuleCall)cKindAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Assignment cKindAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final RuleCall cKindDAssociationKindInverseEnumRuleCall_1_1_0_0 = (RuleCall)cKindAssignment_1_1_0.eContents().get(0);
		private final Keyword cCompositeKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cAliasKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cAliasesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cAliasesIDTerminalRuleCall_3_1_0 = (RuleCall)cAliasesAssignment_3_1.eContents().get(0);
		private final Keyword cColonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cTypeAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cTypeDEntityTypeCrossReference_5_0 = (CrossReference)cTypeAssignment_5.eContents().get(0);
		private final RuleCall cTypeDEntityTypeIDTerminalRuleCall_5_0_1 = (RuleCall)cTypeDEntityTypeCrossReference_5_0.eContents().get(1);
		private final Assignment cMultiplicityAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cMultiplicityDMultiplicityParserRuleCall_6_0 = (RuleCall)cMultiplicityAssignment_6.eContents().get(0);
		private final Assignment cDescriptionAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cDescriptionDRichTextParserRuleCall_7_0 = (RuleCall)cDescriptionAssignment_7.eContents().get(0);
		
		//DAssociation:
		//	derived?='derived'? (kind=DAssociationKind | kind=DAssociationKindInverse "composite") name=ID ('alias' aliases+=ID)*
		//	':'
		//	type=[DEntityType] multiplicity=DMultiplicity?
		//	description=DRichText?;
		@Override public ParserRule getRule() { return rule; }
		
		//derived?='derived'? (kind=DAssociationKind | kind=DAssociationKindInverse "composite") name=ID ('alias' aliases+=ID)*
		//':' type=[DEntityType] multiplicity=DMultiplicity? description=DRichText?
		public Group getGroup() { return cGroup; }
		
		//derived?='derived'?
		public Assignment getDerivedAssignment_0() { return cDerivedAssignment_0; }
		
		//'derived'
		public Keyword getDerivedDerivedKeyword_0_0() { return cDerivedDerivedKeyword_0_0; }
		
		//kind=DAssociationKind | kind=DAssociationKindInverse "composite"
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//kind=DAssociationKind
		public Assignment getKindAssignment_1_0() { return cKindAssignment_1_0; }
		
		//DAssociationKind
		public RuleCall getKindDAssociationKindEnumRuleCall_1_0_0() { return cKindDAssociationKindEnumRuleCall_1_0_0; }
		
		//kind=DAssociationKindInverse "composite"
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//kind=DAssociationKindInverse
		public Assignment getKindAssignment_1_1_0() { return cKindAssignment_1_1_0; }
		
		//DAssociationKindInverse
		public RuleCall getKindDAssociationKindInverseEnumRuleCall_1_1_0_0() { return cKindDAssociationKindInverseEnumRuleCall_1_1_0_0; }
		
		//"composite"
		public Keyword getCompositeKeyword_1_1_1() { return cCompositeKeyword_1_1_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//('alias' aliases+=ID)*
		public Group getGroup_3() { return cGroup_3; }
		
		//'alias'
		public Keyword getAliasKeyword_3_0() { return cAliasKeyword_3_0; }
		
		//aliases+=ID
		public Assignment getAliasesAssignment_3_1() { return cAliasesAssignment_3_1; }
		
		//ID
		public RuleCall getAliasesIDTerminalRuleCall_3_1_0() { return cAliasesIDTerminalRuleCall_3_1_0; }
		
		//':'
		public Keyword getColonKeyword_4() { return cColonKeyword_4; }
		
		//type=[DEntityType]
		public Assignment getTypeAssignment_5() { return cTypeAssignment_5; }
		
		//[DEntityType]
		public CrossReference getTypeDEntityTypeCrossReference_5_0() { return cTypeDEntityTypeCrossReference_5_0; }
		
		//ID
		public RuleCall getTypeDEntityTypeIDTerminalRuleCall_5_0_1() { return cTypeDEntityTypeIDTerminalRuleCall_5_0_1; }
		
		//multiplicity=DMultiplicity?
		public Assignment getMultiplicityAssignment_6() { return cMultiplicityAssignment_6; }
		
		//DMultiplicity
		public RuleCall getMultiplicityDMultiplicityParserRuleCall_6_0() { return cMultiplicityDMultiplicityParserRuleCall_6_0; }
		
		//description=DRichText?
		public Assignment getDescriptionAssignment_7() { return cDescriptionAssignment_7; }
		
		//DRichText
		public RuleCall getDescriptionDRichTextParserRuleCall_7_0() { return cDescriptionDRichTextParserRuleCall_7_0; }
	}
	public class DAttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.dim.Dim.DAttribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDetailAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cDetailDetailKeyword_0_0 = (Keyword)cDetailAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_1_0_0 = (RuleCall)cNameAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cAliasKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cAliasesAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cAliasesIDTerminalRuleCall_1_1_1_0 = (RuleCall)cAliasesAssignment_1_1_1.eContents().get(0);
		private final Keyword cColonKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cTypeAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final CrossReference cTypeDTypeCrossReference_1_3_0 = (CrossReference)cTypeAssignment_1_3.eContents().get(0);
		private final RuleCall cTypeDTypeIDTerminalRuleCall_1_3_0_1 = (RuleCall)cTypeDTypeCrossReference_1_3_0.eContents().get(1);
		private final Assignment cMultiplicityAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cMultiplicityDMultiplicityParserRuleCall_2_0 = (RuleCall)cMultiplicityAssignment_2.eContents().get(0);
		private final Assignment cKeyAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Keyword cKeyKeyKeyword_3_0 = (Keyword)cKeyAssignment_3.eContents().get(0);
		private final Assignment cDescriptionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cDescriptionDRichTextParserRuleCall_4_0 = (RuleCall)cDescriptionAssignment_4.eContents().get(0);
		
		//DAttribute:
		//	detail?='detail'? (name=ID ('alias' aliases+=ID)*
		//	':'
		//	type=[DType]) multiplicity=DMultiplicity?
		//	key?='key'?
		//	description=DRichText?;
		@Override public ParserRule getRule() { return rule; }
		
		//detail?='detail'? (name=ID ('alias' aliases+=ID)* ':' type=[DType]) multiplicity=DMultiplicity? key?='key'?
		//description=DRichText?
		public Group getGroup() { return cGroup; }
		
		//detail?='detail'?
		public Assignment getDetailAssignment_0() { return cDetailAssignment_0; }
		
		//'detail'
		public Keyword getDetailDetailKeyword_0_0() { return cDetailDetailKeyword_0_0; }
		
		//name=ID ('alias' aliases+=ID)* ':' type=[DType]
		public Group getGroup_1() { return cGroup_1; }
		
		//name=ID
		public Assignment getNameAssignment_1_0() { return cNameAssignment_1_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0_0() { return cNameIDTerminalRuleCall_1_0_0; }
		
		//('alias' aliases+=ID)*
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//'alias'
		public Keyword getAliasKeyword_1_1_0() { return cAliasKeyword_1_1_0; }
		
		//aliases+=ID
		public Assignment getAliasesAssignment_1_1_1() { return cAliasesAssignment_1_1_1; }
		
		//ID
		public RuleCall getAliasesIDTerminalRuleCall_1_1_1_0() { return cAliasesIDTerminalRuleCall_1_1_1_0; }
		
		//':'
		public Keyword getColonKeyword_1_2() { return cColonKeyword_1_2; }
		
		//type=[DType]
		public Assignment getTypeAssignment_1_3() { return cTypeAssignment_1_3; }
		
		//[DType]
		public CrossReference getTypeDTypeCrossReference_1_3_0() { return cTypeDTypeCrossReference_1_3_0; }
		
		//ID
		public RuleCall getTypeDTypeIDTerminalRuleCall_1_3_0_1() { return cTypeDTypeIDTerminalRuleCall_1_3_0_1; }
		
		//multiplicity=DMultiplicity?
		public Assignment getMultiplicityAssignment_2() { return cMultiplicityAssignment_2; }
		
		//DMultiplicity
		public RuleCall getMultiplicityDMultiplicityParserRuleCall_2_0() { return cMultiplicityDMultiplicityParserRuleCall_2_0; }
		
		//key?='key'?
		public Assignment getKeyAssignment_3() { return cKeyAssignment_3; }
		
		//'key'
		public Keyword getKeyKeyKeyword_3_0() { return cKeyKeyKeyword_3_0; }
		
		//description=DRichText?
		public Assignment getDescriptionAssignment_4() { return cDescriptionAssignment_4; }
		
		//DRichText
		public RuleCall getDescriptionDRichTextParserRuleCall_4_0() { return cDescriptionDRichTextParserRuleCall_4_0; }
	}
	public class DQueryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.dim.Dim.DQuery");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cAliasKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cAliasesAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cAliasesIDTerminalRuleCall_1_1_0 = (RuleCall)cAliasesAssignment_1_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cParametersAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cParametersDQueryParameterParserRuleCall_3_0_0 = (RuleCall)cParametersAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cParametersAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cParametersDQueryParameterParserRuleCall_3_1_1_0 = (RuleCall)cParametersAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cColonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cTypeAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final CrossReference cTypeDTypeCrossReference_6_0 = (CrossReference)cTypeAssignment_6.eContents().get(0);
		private final RuleCall cTypeDTypeIDTerminalRuleCall_6_0_1 = (RuleCall)cTypeDTypeCrossReference_6_0.eContents().get(1);
		private final Assignment cMultiplicityAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cMultiplicityDMultiplicityParserRuleCall_7_0 = (RuleCall)cMultiplicityAssignment_7.eContents().get(0);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cReturnsKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Assignment cReturnsAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final RuleCall cReturnsDExpressionParserRuleCall_8_1_0 = (RuleCall)cReturnsAssignment_8_1.eContents().get(0);
		private final Assignment cDescriptionAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cDescriptionDRichTextParserRuleCall_9_0 = (RuleCall)cDescriptionAssignment_9.eContents().get(0);
		
		//DQuery:
		//	name=ID ('alias' aliases+=ID)*
		//	'(' (parameters+=DQueryParameter ("," parameters+=DQueryParameter)*)? ')'
		//	':'
		//	type=[DType] multiplicity=DMultiplicity? ('returns' ^returns=DExpression)?
		//	description=DRichText?;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID ('alias' aliases+=ID)* '(' (parameters+=DQueryParameter ("," parameters+=DQueryParameter)*)? ')' ':'
		//type=[DType] multiplicity=DMultiplicity? ('returns' ^returns=DExpression)? description=DRichText?
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//('alias' aliases+=ID)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'alias'
		public Keyword getAliasKeyword_1_0() { return cAliasKeyword_1_0; }
		
		//aliases+=ID
		public Assignment getAliasesAssignment_1_1() { return cAliasesAssignment_1_1; }
		
		//ID
		public RuleCall getAliasesIDTerminalRuleCall_1_1_0() { return cAliasesIDTerminalRuleCall_1_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//(parameters+=DQueryParameter ("," parameters+=DQueryParameter)*)?
		public Group getGroup_3() { return cGroup_3; }
		
		//parameters+=DQueryParameter
		public Assignment getParametersAssignment_3_0() { return cParametersAssignment_3_0; }
		
		//DQueryParameter
		public RuleCall getParametersDQueryParameterParserRuleCall_3_0_0() { return cParametersDQueryParameterParserRuleCall_3_0_0; }
		
		//("," parameters+=DQueryParameter)*
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//","
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }
		
		//parameters+=DQueryParameter
		public Assignment getParametersAssignment_3_1_1() { return cParametersAssignment_3_1_1; }
		
		//DQueryParameter
		public RuleCall getParametersDQueryParameterParserRuleCall_3_1_1_0() { return cParametersDQueryParameterParserRuleCall_3_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
		
		//':'
		public Keyword getColonKeyword_5() { return cColonKeyword_5; }
		
		//type=[DType]
		public Assignment getTypeAssignment_6() { return cTypeAssignment_6; }
		
		//[DType]
		public CrossReference getTypeDTypeCrossReference_6_0() { return cTypeDTypeCrossReference_6_0; }
		
		//ID
		public RuleCall getTypeDTypeIDTerminalRuleCall_6_0_1() { return cTypeDTypeIDTerminalRuleCall_6_0_1; }
		
		//multiplicity=DMultiplicity?
		public Assignment getMultiplicityAssignment_7() { return cMultiplicityAssignment_7; }
		
		//DMultiplicity
		public RuleCall getMultiplicityDMultiplicityParserRuleCall_7_0() { return cMultiplicityDMultiplicityParserRuleCall_7_0; }
		
		//('returns' ^returns=DExpression)?
		public Group getGroup_8() { return cGroup_8; }
		
		//'returns'
		public Keyword getReturnsKeyword_8_0() { return cReturnsKeyword_8_0; }
		
		//^returns=DExpression
		public Assignment getReturnsAssignment_8_1() { return cReturnsAssignment_8_1; }
		
		//DExpression
		public RuleCall getReturnsDExpressionParserRuleCall_8_1_0() { return cReturnsDExpressionParserRuleCall_8_1_0; }
		
		//description=DRichText?
		public Assignment getDescriptionAssignment_9() { return cDescriptionAssignment_9; }
		
		//DRichText
		public RuleCall getDescriptionDRichTextParserRuleCall_9_0() { return cDescriptionDRichTextParserRuleCall_9_0; }
	}
	public class DQueryParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.dim.Dim.DQueryParameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cTypeDTypeCrossReference_2_0 = (CrossReference)cTypeAssignment_2.eContents().get(0);
		private final RuleCall cTypeDTypeIDTerminalRuleCall_2_0_1 = (RuleCall)cTypeDTypeCrossReference_2_0.eContents().get(1);
		private final Assignment cMultiplicityAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cMultiplicityDMultiplicityParserRuleCall_3_0 = (RuleCall)cMultiplicityAssignment_3.eContents().get(0);
		private final Assignment cDescriptionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cDescriptionDRichTextParserRuleCall_4_0 = (RuleCall)cDescriptionAssignment_4.eContents().get(0);
		
		//DQueryParameter:
		//	name=ID
		//	':'
		//	type=[DType] multiplicity=DMultiplicity?
		//	description=DRichText?;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID ':' type=[DType] multiplicity=DMultiplicity? description=DRichText?
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//type=[DType]
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//[DType]
		public CrossReference getTypeDTypeCrossReference_2_0() { return cTypeDTypeCrossReference_2_0; }
		
		//ID
		public RuleCall getTypeDTypeIDTerminalRuleCall_2_0_1() { return cTypeDTypeIDTerminalRuleCall_2_0_1; }
		
		//multiplicity=DMultiplicity?
		public Assignment getMultiplicityAssignment_3() { return cMultiplicityAssignment_3; }
		
		//DMultiplicity
		public RuleCall getMultiplicityDMultiplicityParserRuleCall_3_0() { return cMultiplicityDMultiplicityParserRuleCall_3_0; }
		
		//description=DRichText?
		public Assignment getDescriptionAssignment_4() { return cDescriptionAssignment_4; }
		
		//DRichText
		public RuleCall getDescriptionDRichTextParserRuleCall_4_0() { return cDescriptionDRichTextParserRuleCall_4_0; }
	}
	public class DExistingApplicationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.dim.Dim.DExistingApplication");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cApplicationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cDescriptionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDescriptionDRichTextParserRuleCall_2_0 = (RuleCall)cDescriptionAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Assignment cServicesAssignment_4_0 = (Assignment)cAlternatives_4.eContents().get(0);
		private final RuleCall cServicesDServiceParserRuleCall_4_0_0 = (RuleCall)cServicesAssignment_4_0.eContents().get(0);
		private final Assignment cExceptionsAssignment_4_1 = (Assignment)cAlternatives_4.eContents().get(1);
		private final RuleCall cExceptionsDExceptionParserRuleCall_4_1_0 = (RuleCall)cExceptionsAssignment_4_1.eContents().get(0);
		private final Assignment cTypesAssignment_4_2 = (Assignment)cAlternatives_4.eContents().get(2);
		private final RuleCall cTypesDTypeParserRuleCall_4_2_0 = (RuleCall)cTypesAssignment_4_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		///*
		// * EXISTING APPLICATIONS
		// */ DExistingApplication:
		//	'application'
		//	name=ID
		//	description=DRichText?
		//	'{' (services+=DService | exceptions+=DException | types+=DType)*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'application' name=ID description=DRichText? '{' (services+=DService | exceptions+=DException | types+=DType)* '}'
		public Group getGroup() { return cGroup; }
		
		//'application'
		public Keyword getApplicationKeyword_0() { return cApplicationKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//description=DRichText?
		public Assignment getDescriptionAssignment_2() { return cDescriptionAssignment_2; }
		
		//DRichText
		public RuleCall getDescriptionDRichTextParserRuleCall_2_0() { return cDescriptionDRichTextParserRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//(services+=DService | exceptions+=DException | types+=DType)*
		public Alternatives getAlternatives_4() { return cAlternatives_4; }
		
		//services+=DService
		public Assignment getServicesAssignment_4_0() { return cServicesAssignment_4_0; }
		
		//DService
		public RuleCall getServicesDServiceParserRuleCall_4_0_0() { return cServicesDServiceParserRuleCall_4_0_0; }
		
		//exceptions+=DException
		public Assignment getExceptionsAssignment_4_1() { return cExceptionsAssignment_4_1; }
		
		//DException
		public RuleCall getExceptionsDExceptionParserRuleCall_4_1_0() { return cExceptionsDExceptionParserRuleCall_4_1_0; }
		
		//types+=DType
		public Assignment getTypesAssignment_4_2() { return cTypesAssignment_4_2; }
		
		//DType
		public RuleCall getTypesDTypeParserRuleCall_4_2_0() { return cTypesDTypeParserRuleCall_4_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class DServiceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.dim.Dim.DService");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKindAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cKindDServiceKindEnumRuleCall_0_0 = (RuleCall)cKindAssignment_0.eContents().get(0);
		private final Keyword cServiceKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Assignment cParametersAssignment_3_1_0 = (Assignment)cGroup_3_1.eContents().get(0);
		private final RuleCall cParametersDServiceParameterParserRuleCall_3_1_0_0 = (RuleCall)cParametersAssignment_3_1_0.eContents().get(0);
		private final Group cGroup_3_1_1 = (Group)cGroup_3_1.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_1_0 = (Keyword)cGroup_3_1_1.eContents().get(0);
		private final Assignment cParametersAssignment_3_1_1_1 = (Assignment)cGroup_3_1_1.eContents().get(1);
		private final RuleCall cParametersDServiceParameterParserRuleCall_3_1_1_1_0 = (RuleCall)cParametersAssignment_3_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cRaisesKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cRaisesAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final CrossReference cRaisesDExceptionCrossReference_4_1_0 = (CrossReference)cRaisesAssignment_4_1.eContents().get(0);
		private final RuleCall cRaisesDExceptionIDTerminalRuleCall_4_1_0_1 = (RuleCall)cRaisesDExceptionCrossReference_4_1_0.eContents().get(1);
		private final Group cGroup_4_2 = (Group)cGroup_4.eContents().get(2);
		private final Keyword cCommaKeyword_4_2_0 = (Keyword)cGroup_4_2.eContents().get(0);
		private final Assignment cRaisesAssignment_4_2_1 = (Assignment)cGroup_4_2.eContents().get(1);
		private final CrossReference cRaisesDExceptionCrossReference_4_2_1_0 = (CrossReference)cRaisesAssignment_4_2_1.eContents().get(0);
		private final RuleCall cRaisesDExceptionIDTerminalRuleCall_4_2_1_0_1 = (RuleCall)cRaisesDExceptionCrossReference_4_2_1_0.eContents().get(1);
		private final Assignment cDescriptionAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cDescriptionDRichTextParserRuleCall_5_0 = (RuleCall)cDescriptionAssignment_5.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cGuardKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cGuardsAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cGuardsDExpressionParserRuleCall_7_1_0 = (RuleCall)cGuardsAssignment_7_1.eContents().get(0);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cEffectKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Assignment cEffectsAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final RuleCall cEffectsDExpressionParserRuleCall_8_1_0 = (RuleCall)cEffectsAssignment_8_1.eContents().get(0);
		private final Assignment cTypesAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cTypesDTypeParserRuleCall_9_0 = (RuleCall)cTypesAssignment_9.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_10 = (Keyword)cGroup.eContents().get(10);
		
		//DService:
		//	kind=DServiceKind? 'service'
		//	name=ID ('(' (parameters+=DServiceParameter ("," parameters+=DServiceParameter)*)? ')')? ('raises'
		//	raises+=[DException] ("," raises+=[DException])*)?
		//	description=DRichText?
		//	'{' ('guard' guards+=DExpression)* ('effect' effects+=DExpression)*
		//	types+=DType*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//kind=DServiceKind? 'service' name=ID ('(' (parameters+=DServiceParameter ("," parameters+=DServiceParameter)*)? ')')?
		//('raises' raises+=[DException] ("," raises+=[DException])*)? description=DRichText? '{' ('guard' guards+=DExpression)*
		//('effect' effects+=DExpression)* types+=DType* '}'
		public Group getGroup() { return cGroup; }
		
		//kind=DServiceKind?
		public Assignment getKindAssignment_0() { return cKindAssignment_0; }
		
		//DServiceKind
		public RuleCall getKindDServiceKindEnumRuleCall_0_0() { return cKindDServiceKindEnumRuleCall_0_0; }
		
		//'service'
		public Keyword getServiceKeyword_1() { return cServiceKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//('(' (parameters+=DServiceParameter ("," parameters+=DServiceParameter)*)? ')')?
		public Group getGroup_3() { return cGroup_3; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3_0() { return cLeftParenthesisKeyword_3_0; }
		
		//(parameters+=DServiceParameter ("," parameters+=DServiceParameter)*)?
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//parameters+=DServiceParameter
		public Assignment getParametersAssignment_3_1_0() { return cParametersAssignment_3_1_0; }
		
		//DServiceParameter
		public RuleCall getParametersDServiceParameterParserRuleCall_3_1_0_0() { return cParametersDServiceParameterParserRuleCall_3_1_0_0; }
		
		//("," parameters+=DServiceParameter)*
		public Group getGroup_3_1_1() { return cGroup_3_1_1; }
		
		//","
		public Keyword getCommaKeyword_3_1_1_0() { return cCommaKeyword_3_1_1_0; }
		
		//parameters+=DServiceParameter
		public Assignment getParametersAssignment_3_1_1_1() { return cParametersAssignment_3_1_1_1; }
		
		//DServiceParameter
		public RuleCall getParametersDServiceParameterParserRuleCall_3_1_1_1_0() { return cParametersDServiceParameterParserRuleCall_3_1_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3_2() { return cRightParenthesisKeyword_3_2; }
		
		//('raises' raises+=[DException] ("," raises+=[DException])*)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'raises'
		public Keyword getRaisesKeyword_4_0() { return cRaisesKeyword_4_0; }
		
		//raises+=[DException]
		public Assignment getRaisesAssignment_4_1() { return cRaisesAssignment_4_1; }
		
		//[DException]
		public CrossReference getRaisesDExceptionCrossReference_4_1_0() { return cRaisesDExceptionCrossReference_4_1_0; }
		
		//ID
		public RuleCall getRaisesDExceptionIDTerminalRuleCall_4_1_0_1() { return cRaisesDExceptionIDTerminalRuleCall_4_1_0_1; }
		
		//("," raises+=[DException])*
		public Group getGroup_4_2() { return cGroup_4_2; }
		
		//","
		public Keyword getCommaKeyword_4_2_0() { return cCommaKeyword_4_2_0; }
		
		//raises+=[DException]
		public Assignment getRaisesAssignment_4_2_1() { return cRaisesAssignment_4_2_1; }
		
		//[DException]
		public CrossReference getRaisesDExceptionCrossReference_4_2_1_0() { return cRaisesDExceptionCrossReference_4_2_1_0; }
		
		//ID
		public RuleCall getRaisesDExceptionIDTerminalRuleCall_4_2_1_0_1() { return cRaisesDExceptionIDTerminalRuleCall_4_2_1_0_1; }
		
		//description=DRichText?
		public Assignment getDescriptionAssignment_5() { return cDescriptionAssignment_5; }
		
		//DRichText
		public RuleCall getDescriptionDRichTextParserRuleCall_5_0() { return cDescriptionDRichTextParserRuleCall_5_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_6() { return cLeftCurlyBracketKeyword_6; }
		
		//('guard' guards+=DExpression)*
		public Group getGroup_7() { return cGroup_7; }
		
		//'guard'
		public Keyword getGuardKeyword_7_0() { return cGuardKeyword_7_0; }
		
		//guards+=DExpression
		public Assignment getGuardsAssignment_7_1() { return cGuardsAssignment_7_1; }
		
		//DExpression
		public RuleCall getGuardsDExpressionParserRuleCall_7_1_0() { return cGuardsDExpressionParserRuleCall_7_1_0; }
		
		//('effect' effects+=DExpression)*
		public Group getGroup_8() { return cGroup_8; }
		
		//'effect'
		public Keyword getEffectKeyword_8_0() { return cEffectKeyword_8_0; }
		
		//effects+=DExpression
		public Assignment getEffectsAssignment_8_1() { return cEffectsAssignment_8_1; }
		
		//DExpression
		public RuleCall getEffectsDExpressionParserRuleCall_8_1_0() { return cEffectsDExpressionParserRuleCall_8_1_0; }
		
		//types+=DType*
		public Assignment getTypesAssignment_9() { return cTypesAssignment_9; }
		
		//DType
		public RuleCall getTypesDTypeParserRuleCall_9_0() { return cTypesDTypeParserRuleCall_9_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_10() { return cRightCurlyBracketKeyword_10; }
	}
	public class DServiceParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.dim.Dim.DServiceParameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDirectionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDirectionDDirectionEnumRuleCall_0_0 = (RuleCall)cDirectionAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cTypeDTypeCrossReference_3_0 = (CrossReference)cTypeAssignment_3.eContents().get(0);
		private final RuleCall cTypeDTypeIDTerminalRuleCall_3_0_1 = (RuleCall)cTypeDTypeCrossReference_3_0.eContents().get(1);
		private final Assignment cMultiplicityAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cMultiplicityDMultiplicityParserRuleCall_4_0 = (RuleCall)cMultiplicityAssignment_4.eContents().get(0);
		private final Assignment cDescriptionAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cDescriptionDRichTextParserRuleCall_5_0 = (RuleCall)cDescriptionAssignment_5.eContents().get(0);
		
		//DServiceParameter:
		//	direction=DDirection
		//	name=ID
		//	':'
		//	type=[DType] multiplicity=DMultiplicity?
		//	description=DRichText?;
		@Override public ParserRule getRule() { return rule; }
		
		//direction=DDirection name=ID ':' type=[DType] multiplicity=DMultiplicity? description=DRichText?
		public Group getGroup() { return cGroup; }
		
		//direction=DDirection
		public Assignment getDirectionAssignment_0() { return cDirectionAssignment_0; }
		
		//DDirection
		public RuleCall getDirectionDDirectionEnumRuleCall_0_0() { return cDirectionDDirectionEnumRuleCall_0_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//type=[DType]
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }
		
		//[DType]
		public CrossReference getTypeDTypeCrossReference_3_0() { return cTypeDTypeCrossReference_3_0; }
		
		//ID
		public RuleCall getTypeDTypeIDTerminalRuleCall_3_0_1() { return cTypeDTypeIDTerminalRuleCall_3_0_1; }
		
		//multiplicity=DMultiplicity?
		public Assignment getMultiplicityAssignment_4() { return cMultiplicityAssignment_4; }
		
		//DMultiplicity
		public RuleCall getMultiplicityDMultiplicityParserRuleCall_4_0() { return cMultiplicityDMultiplicityParserRuleCall_4_0; }
		
		//description=DRichText?
		public Assignment getDescriptionAssignment_5() { return cDescriptionAssignment_5; }
		
		//DRichText
		public RuleCall getDescriptionDRichTextParserRuleCall_5_0() { return cDescriptionDRichTextParserRuleCall_5_0; }
	}
	public class DExceptionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.dim.Dim.DException");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExceptionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cDescriptionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDescriptionDRichTextParserRuleCall_2_0 = (RuleCall)cDescriptionAssignment_2.eContents().get(0);
		
		//DException:
		//	'exception'
		//	name=ID
		//	description=DRichText?;
		@Override public ParserRule getRule() { return rule; }
		
		//'exception' name=ID description=DRichText?
		public Group getGroup() { return cGroup; }
		
		//'exception'
		public Keyword getExceptionKeyword_0() { return cExceptionKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//description=DRichText?
		public Assignment getDescriptionAssignment_2() { return cDescriptionAssignment_2; }
		
		//DRichText
		public RuleCall getDescriptionDRichTextParserRuleCall_2_0() { return cDescriptionDRichTextParserRuleCall_2_0; }
	}
	
	public class DAssociationKindElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.dim.Dim.DAssociationKind");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cREFERENCEEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cREFERENCEReferenceKeyword_0_0 = (Keyword)cREFERENCEEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cCOMPOSITEEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cCOMPOSITECompositeKeyword_1_0 = (Keyword)cCOMPOSITEEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum DAssociationKind:
		//	REFERENCE="reference" | COMPOSITE="composite";
		public EnumRule getRule() { return rule; }
		
		//REFERENCE="reference" | COMPOSITE="composite"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//REFERENCE="reference"
		public EnumLiteralDeclaration getREFERENCEEnumLiteralDeclaration_0() { return cREFERENCEEnumLiteralDeclaration_0; }
		
		//"reference"
		public Keyword getREFERENCEReferenceKeyword_0_0() { return cREFERENCEReferenceKeyword_0_0; }
		
		//COMPOSITE="composite"
		public EnumLiteralDeclaration getCOMPOSITEEnumLiteralDeclaration_1() { return cCOMPOSITEEnumLiteralDeclaration_1; }
		
		//"composite"
		public Keyword getCOMPOSITECompositeKeyword_1_0() { return cCOMPOSITECompositeKeyword_1_0; }
	}
	public class DAssociationKindInverseElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.dim.Dim.DAssociationKindInverse");
		private final EnumLiteralDeclaration cINVERSE_COMPOSITEEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cINVERSE_COMPOSITEInverseKeyword_0 = (Keyword)cINVERSE_COMPOSITEEnumLiteralDeclaration.eContents().get(0);
		
		//enum DAssociationKindInverse returns DAssociationKind:
		//	INVERSE_COMPOSITE="inverse";
		public EnumRule getRule() { return rule; }
		
		//INVERSE_COMPOSITE="inverse"
		public EnumLiteralDeclaration getINVERSE_COMPOSITEEnumLiteralDeclaration() { return cINVERSE_COMPOSITEEnumLiteralDeclaration; }
		
		//"inverse"
		public Keyword getINVERSE_COMPOSITEInverseKeyword_0() { return cINVERSE_COMPOSITEInverseKeyword_0; }
	}
	public class DServiceKindElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.dim.Dim.DServiceKind");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cSYNCHRONOUSEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cSYNCHRONOUSSynchronousKeyword_0_0 = (Keyword)cSYNCHRONOUSEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cASYNCHRONOUSEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cASYNCHRONOUSAsyncKeyword_1_0 = (Keyword)cASYNCHRONOUSEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum DServiceKind:
		//	SYNCHRONOUS='synchronous' | ASYNCHRONOUS='async';
		public EnumRule getRule() { return rule; }
		
		//SYNCHRONOUS='synchronous' | ASYNCHRONOUS='async'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//SYNCHRONOUS='synchronous'
		public EnumLiteralDeclaration getSYNCHRONOUSEnumLiteralDeclaration_0() { return cSYNCHRONOUSEnumLiteralDeclaration_0; }
		
		//'synchronous'
		public Keyword getSYNCHRONOUSSynchronousKeyword_0_0() { return cSYNCHRONOUSSynchronousKeyword_0_0; }
		
		//ASYNCHRONOUS='async'
		public EnumLiteralDeclaration getASYNCHRONOUSEnumLiteralDeclaration_1() { return cASYNCHRONOUSEnumLiteralDeclaration_1; }
		
		//'async'
		public Keyword getASYNCHRONOUSAsyncKeyword_1_0() { return cASYNCHRONOUSAsyncKeyword_1_0; }
	}
	public class DDirectionElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.dim.Dim.DDirection");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cINBOUNDEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cINBOUNDInKeyword_0_0 = (Keyword)cINBOUNDEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cOUTBOUNDEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cOUTBOUNDOutKeyword_1_0 = (Keyword)cOUTBOUNDEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum DDirection:
		//	INBOUND='in' | OUTBOUND='out';
		public EnumRule getRule() { return rule; }
		
		//INBOUND='in' | OUTBOUND='out'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//INBOUND='in'
		public EnumLiteralDeclaration getINBOUNDEnumLiteralDeclaration_0() { return cINBOUNDEnumLiteralDeclaration_0; }
		
		//'in'
		public Keyword getINBOUNDInKeyword_0_0() { return cINBOUNDInKeyword_0_0; }
		
		//OUTBOUND='out'
		public EnumLiteralDeclaration getOUTBOUNDEnumLiteralDeclaration_1() { return cOUTBOUNDEnumLiteralDeclaration_1; }
		
		//'out'
		public Keyword getOUTBOUNDOutKeyword_1_0() { return cOUTBOUNDOutKeyword_1_0; }
	}
	
	private final DDomainElements pDDomain;
	private final DAggregateElements pDAggregate;
	private final DTypeElements pDType;
	private final DConstraintElements pDConstraint;
	private final DPrimitiveElements pDPrimitive;
	private final DEnumerationElements pDEnumeration;
	private final DLiteralElements pDLiteral;
	private final DEntityTypeElements pDEntityType;
	private final DRelationshipElements pDRelationship;
	private final DDetailTypeElements pDDetailType;
	private final DComplexTypeElements pDComplexType;
	private final DFeatureElements pDFeature;
	private final DAssociationElements pDAssociation;
	private final DAssociationKindElements eDAssociationKind;
	private final DAssociationKindInverseElements eDAssociationKindInverse;
	private final DAttributeElements pDAttribute;
	private final DQueryElements pDQuery;
	private final DQueryParameterElements pDQueryParameter;
	private final DExistingApplicationElements pDExistingApplication;
	private final DServiceElements pDService;
	private final DServiceParameterElements pDServiceParameter;
	private final DExceptionElements pDException;
	private final DServiceKindElements eDServiceKind;
	private final DDirectionElements eDDirection;
	
	private final Grammar grammar;
	
	private final DmxGrammarAccess gaDmx;

	@Inject
	public DimGrammarAccess(GrammarProvider grammarProvider,
			DmxGrammarAccess gaDmx) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaDmx = gaDmx;
		this.pDDomain = new DDomainElements();
		this.pDAggregate = new DAggregateElements();
		this.pDType = new DTypeElements();
		this.pDConstraint = new DConstraintElements();
		this.pDPrimitive = new DPrimitiveElements();
		this.pDEnumeration = new DEnumerationElements();
		this.pDLiteral = new DLiteralElements();
		this.pDEntityType = new DEntityTypeElements();
		this.pDRelationship = new DRelationshipElements();
		this.pDDetailType = new DDetailTypeElements();
		this.pDComplexType = new DComplexTypeElements();
		this.pDFeature = new DFeatureElements();
		this.pDAssociation = new DAssociationElements();
		this.eDAssociationKind = new DAssociationKindElements();
		this.eDAssociationKindInverse = new DAssociationKindInverseElements();
		this.pDAttribute = new DAttributeElements();
		this.pDQuery = new DQueryElements();
		this.pDQueryParameter = new DQueryParameterElements();
		this.pDExistingApplication = new DExistingApplicationElements();
		this.pDService = new DServiceElements();
		this.pDServiceParameter = new DServiceParameterElements();
		this.pDException = new DExceptionElements();
		this.eDServiceKind = new DServiceKindElements();
		this.eDDirection = new DDirectionElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("com.mimacom.ddd.dm.dim.Dim".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public DmxGrammarAccess getDmxGrammarAccess() {
		return gaDmx;
	}

	
	///*
	// * MODEL STRUCTURE
	// */ DDomain:
	//	imports+=DImport*
	//	'domain'
	//	name=DQualifiedName ('alias' aliases+=ID)*
	//	description=DRichText? (types+=DType | aggregates+=DAggregate | applications+=DExistingApplication |
	//	actors+=DService)*;
	public DDomainElements getDDomainAccess() {
		return pDDomain;
	}
	
	public ParserRule getDDomainRule() {
		return getDDomainAccess().getRule();
	}
	
	//DAggregate:
	//	{DAggregate}
	//	'aggregate'
	//	description=DRichText?
	//	'{'
	//	types+=DType*
	//	'}';
	public DAggregateElements getDAggregateAccess() {
		return pDAggregate;
	}
	
	public ParserRule getDAggregateRule() {
		return getDAggregateAccess().getRule();
	}
	
	///*
	// * TYPES
	// */ DType:
	//	DPrimitive | DEnumeration | DEntityType | DRelationship | DDetailType;
	public DTypeElements getDTypeAccess() {
		return pDType;
	}
	
	public ParserRule getDTypeRule() {
		return getDTypeAccess().getRule();
	}
	
	//DConstraint DCondition:
	//	'constraint'
	//	name=ID ('alias' aliases+=ID)*
	//	':'
	//	condition=DExpression
	//	description=DRichText?;
	public DConstraintElements getDConstraintAccess() {
		return pDConstraint;
	}
	
	public ParserRule getDConstraintRule() {
		return getDConstraintAccess().getRule();
	}
	
	//DPrimitive:
	//	'primitive'
	//	name=ID ('alias' aliases+=ID)*
	//	'redefines' redefines=[DmxArchetype] description=DRichText? ('{'
	//	constraints+=DConstraint+
	//	'}')?;
	public DPrimitiveElements getDPrimitiveAccess() {
		return pDPrimitive;
	}
	
	public ParserRule getDPrimitiveRule() {
		return getDPrimitiveAccess().getRule();
	}
	
	//DEnumeration:
	//	'enumeration'
	//	name=ID ('alias' aliases+=ID)*
	//	description=DRichText?
	//	'{' (literals+=DLiteral (',' literals+=DLiteral)*)?
	//	constraints+=DConstraint*
	//	'}';
	public DEnumerationElements getDEnumerationAccess() {
		return pDEnumeration;
	}
	
	public ParserRule getDEnumerationRule() {
		return getDEnumerationAccess().getRule();
	}
	
	//DLiteral:
	//	name=ID ('alias' aliases+=ID)*
	//	description=DRichText?;
	public DLiteralElements getDLiteralAccess() {
		return pDLiteral;
	}
	
	public ParserRule getDLiteralRule() {
		return getDLiteralAccess().getRule();
	}
	
	//DEntityType:
	//	abstract?='abstract'?
	//	root?='root'?
	//	'entity'
	//	DComplexType;
	public DEntityTypeElements getDEntityTypeAccess() {
		return pDEntityType;
	}
	
	public ParserRule getDEntityTypeRule() {
		return getDEntityTypeAccess().getRule();
	}
	
	//DRelationship:
	//	abstract?='abstract'?
	//	root?='root'?
	//	'relationship'
	//	DComplexType;
	public DRelationshipElements getDRelationshipAccess() {
		return pDRelationship;
	}
	
	public ParserRule getDRelationshipRule() {
		return getDRelationshipAccess().getRule();
	}
	
	//DDetailType:
	//	abstract?='abstract'?
	//	'detail'
	//	DComplexType;
	public DDetailTypeElements getDDetailTypeAccess() {
		return pDDetailType;
	}
	
	public ParserRule getDDetailTypeRule() {
		return getDDetailTypeAccess().getRule();
	}
	
	//fragment DComplexType:
	//	name=ID ('alias' aliases+=ID)* ('extends' superType=[DComplexType])?
	//	description=DRichText?
	//	'{' (features+=DFeature | constraints+=DConstraint)*
	//	'}';
	public DComplexTypeElements getDComplexTypeAccess() {
		return pDComplexType;
	}
	
	public ParserRule getDComplexTypeRule() {
		return getDComplexTypeAccess().getRule();
	}
	
	//DFeature:
	//	DAssociation | DAttribute | DQuery;
	public DFeatureElements getDFeatureAccess() {
		return pDFeature;
	}
	
	public ParserRule getDFeatureRule() {
		return getDFeatureAccess().getRule();
	}
	
	//DAssociation:
	//	derived?='derived'? (kind=DAssociationKind | kind=DAssociationKindInverse "composite") name=ID ('alias' aliases+=ID)*
	//	':'
	//	type=[DEntityType] multiplicity=DMultiplicity?
	//	description=DRichText?;
	public DAssociationElements getDAssociationAccess() {
		return pDAssociation;
	}
	
	public ParserRule getDAssociationRule() {
		return getDAssociationAccess().getRule();
	}
	
	//enum DAssociationKind:
	//	REFERENCE="reference" | COMPOSITE="composite";
	public DAssociationKindElements getDAssociationKindAccess() {
		return eDAssociationKind;
	}
	
	public EnumRule getDAssociationKindRule() {
		return getDAssociationKindAccess().getRule();
	}
	
	//enum DAssociationKindInverse returns DAssociationKind:
	//	INVERSE_COMPOSITE="inverse";
	public DAssociationKindInverseElements getDAssociationKindInverseAccess() {
		return eDAssociationKindInverse;
	}
	
	public EnumRule getDAssociationKindInverseRule() {
		return getDAssociationKindInverseAccess().getRule();
	}
	
	//DAttribute:
	//	detail?='detail'? (name=ID ('alias' aliases+=ID)*
	//	':'
	//	type=[DType]) multiplicity=DMultiplicity?
	//	key?='key'?
	//	description=DRichText?;
	public DAttributeElements getDAttributeAccess() {
		return pDAttribute;
	}
	
	public ParserRule getDAttributeRule() {
		return getDAttributeAccess().getRule();
	}
	
	//DQuery:
	//	name=ID ('alias' aliases+=ID)*
	//	'(' (parameters+=DQueryParameter ("," parameters+=DQueryParameter)*)? ')'
	//	':'
	//	type=[DType] multiplicity=DMultiplicity? ('returns' ^returns=DExpression)?
	//	description=DRichText?;
	public DQueryElements getDQueryAccess() {
		return pDQuery;
	}
	
	public ParserRule getDQueryRule() {
		return getDQueryAccess().getRule();
	}
	
	//DQueryParameter:
	//	name=ID
	//	':'
	//	type=[DType] multiplicity=DMultiplicity?
	//	description=DRichText?;
	public DQueryParameterElements getDQueryParameterAccess() {
		return pDQueryParameter;
	}
	
	public ParserRule getDQueryParameterRule() {
		return getDQueryParameterAccess().getRule();
	}
	
	///*
	// * EXISTING APPLICATIONS
	// */ DExistingApplication:
	//	'application'
	//	name=ID
	//	description=DRichText?
	//	'{' (services+=DService | exceptions+=DException | types+=DType)*
	//	'}';
	public DExistingApplicationElements getDExistingApplicationAccess() {
		return pDExistingApplication;
	}
	
	public ParserRule getDExistingApplicationRule() {
		return getDExistingApplicationAccess().getRule();
	}
	
	//DService:
	//	kind=DServiceKind? 'service'
	//	name=ID ('(' (parameters+=DServiceParameter ("," parameters+=DServiceParameter)*)? ')')? ('raises'
	//	raises+=[DException] ("," raises+=[DException])*)?
	//	description=DRichText?
	//	'{' ('guard' guards+=DExpression)* ('effect' effects+=DExpression)*
	//	types+=DType*
	//	'}';
	public DServiceElements getDServiceAccess() {
		return pDService;
	}
	
	public ParserRule getDServiceRule() {
		return getDServiceAccess().getRule();
	}
	
	//DServiceParameter:
	//	direction=DDirection
	//	name=ID
	//	':'
	//	type=[DType] multiplicity=DMultiplicity?
	//	description=DRichText?;
	public DServiceParameterElements getDServiceParameterAccess() {
		return pDServiceParameter;
	}
	
	public ParserRule getDServiceParameterRule() {
		return getDServiceParameterAccess().getRule();
	}
	
	//DException:
	//	'exception'
	//	name=ID
	//	description=DRichText?;
	public DExceptionElements getDExceptionAccess() {
		return pDException;
	}
	
	public ParserRule getDExceptionRule() {
		return getDExceptionAccess().getRule();
	}
	
	//enum DServiceKind:
	//	SYNCHRONOUS='synchronous' | ASYNCHRONOUS='async';
	public DServiceKindElements getDServiceKindAccess() {
		return eDServiceKind;
	}
	
	public EnumRule getDServiceKindRule() {
		return getDServiceKindAccess().getRule();
	}
	
	//enum DDirection:
	//	INBOUND='in' | OUTBOUND='out';
	public DDirectionElements getDDirectionAccess() {
		return eDDirection;
	}
	
	public EnumRule getDDirectionRule() {
		return getDDirectionAccess().getRule();
	}
	
	//DmxNamespace:
	//	imports+=DImport*
	//	'namespace'
	//	name=DQualifiedName
	//	types+=DmxArchetype*
	//	filters+=DmxFilter*
	//	// For unit-testing purposes:
	//	tests+=DmxTest*;
	public DmxGrammarAccess.DmxNamespaceElements getDmxNamespaceAccess() {
		return gaDmx.getDmxNamespaceAccess();
	}
	
	public ParserRule getDmxNamespaceRule() {
		return getDmxNamespaceAccess().getRule();
	}
	
	//DImport:
	//	'import' importedNamespace=DQualifiedNameWithWildcard;
	public DmxGrammarAccess.DImportElements getDImportAccess() {
		return gaDmx.getDImportAccess();
	}
	
	public ParserRule getDImportRule() {
		return getDImportAccess().getRule();
	}
	
	///* 
	// * Testing
	// */ DmxTest:
	//	'test'
	//	name=ID ('context'
	//	context+=DmxTestContext (',' context+=DmxTestContext)*)?
	//	'{'
	//	expr=DExpression
	//	'}';
	public DmxGrammarAccess.DmxTestElements getDmxTestAccess() {
		return gaDmx.getDmxTestAccess();
	}
	
	public ParserRule getDmxTestRule() {
		return getDmxTestAccess().getRule();
	}
	
	//DmxTestContext DContext:
	//	name=ID
	//	':'
	//	type=[DType] multiplicity=DMultiplicity?;
	public DmxGrammarAccess.DmxTestContextElements getDmxTestContextAccess() {
		return gaDmx.getDmxTestContextAccess();
	}
	
	public ParserRule getDmxTestContextRule() {
		return getDmxTestContextAccess().getRule();
	}
	
	//enum DmxBaseType:
	//	VOID | BOOLEAN | NUMBER | TEXT | IDENTIFIER | TIMEPOINT | COMPLEX | NOTIFICATION /*sent* */ | SERVICE /*invoked* */;
	public DmxGrammarAccess.DmxBaseTypeElements getDmxBaseTypeAccess() {
		return gaDmx.getDmxBaseTypeAccess();
	}
	
	public EnumRule getDmxBaseTypeRule() {
		return getDmxBaseTypeAccess().getRule();
	}
	
	//DmxArchetype:
	//	'archetype'
	//	name=ID
	//	'is'
	//	baseType=DmxBaseType
	//	description=DRichText?;
	public DmxGrammarAccess.DmxArchetypeElements getDmxArchetypeAccess() {
		return gaDmx.getDmxArchetypeAccess();
	}
	
	public ParserRule getDmxArchetypeRule() {
		return getDmxArchetypeAccess().getRule();
	}
	
	//DmxFilter:
	//	DmxFunction | DmxIterator;
	public DmxGrammarAccess.DmxFilterElements getDmxFilterAccess() {
		return gaDmx.getDmxFilterAccess();
	}
	
	public ParserRule getDmxFilterRule() {
		return getDmxFilterAccess().getRule();
	}
	
	//DmxFunction:
	//	'function' name=ID
	//	'(' (parameters+=DmxFunctionParameter (',' parameters+=DmxFunctionParameter)*)? ')'
	//	':'
	//	baseType=DmxBaseType
	//	baseTypeCollection?='*'?;
	public DmxGrammarAccess.DmxFunctionElements getDmxFunctionAccess() {
		return gaDmx.getDmxFunctionAccess();
	}
	
	public ParserRule getDmxFunctionRule() {
		return getDmxFunctionAccess().getRule();
	}
	
	//DmxFunctionParameter:
	//	name=ID
	//	':'
	//	baseType=DmxBaseType
	//	baseTypeCollection?='*'?;
	public DmxGrammarAccess.DmxFunctionParameterElements getDmxFunctionParameterAccess() {
		return gaDmx.getDmxFunctionParameterAccess();
	}
	
	public ParserRule getDmxFunctionParameterRule() {
		return getDmxFunctionParameterAccess().getRule();
	}
	
	//DmxIterator:
	//	'iterator' name=ID
	//	':'
	//	baseType=DmxBaseType
	//	baseTypeCollection?='*'?;
	public DmxGrammarAccess.DmxIteratorElements getDmxIteratorAccess() {
		return gaDmx.getDmxIteratorAccess();
	}
	
	public ParserRule getDmxIteratorRule() {
		return getDmxIteratorAccess().getRule();
	}
	
	///*
	// * Expressions
	// */ DExpression:
	//	DmxAssignment | DmxPredicate | DRichText;
	public DmxGrammarAccess.DExpressionElements getDExpressionAccess() {
		return gaDmx.getDExpressionAccess();
	}
	
	public ParserRule getDExpressionRule() {
		return getDExpressionAccess().getRule();
	}
	
	//DRichText:
	//	segments+=DmxTextOnly
	//	| segments+=DmxTextStart
	//	segments+=DExpression (segments+=DmxTextMiddle segments+=DExpression)*
	//	segments+=DmxTextEnd;
	public DmxGrammarAccess.DRichTextElements getDRichTextAccess() {
		return gaDmx.getDRichTextAccess();
	}
	
	public ParserRule getDRichTextRule() {
		return getDRichTextAccess().getRule();
	}
	
	//DmxTextOnly DTextSegment:
	//	value=PLAIN_TEXT_ONLY;
	public DmxGrammarAccess.DmxTextOnlyElements getDmxTextOnlyAccess() {
		return gaDmx.getDmxTextOnlyAccess();
	}
	
	public ParserRule getDmxTextOnlyRule() {
		return getDmxTextOnlyAccess().getRule();
	}
	
	//DmxTextStart DTextSegment:
	//	value=PLAIN_TEXT_START;
	public DmxGrammarAccess.DmxTextStartElements getDmxTextStartAccess() {
		return gaDmx.getDmxTextStartAccess();
	}
	
	public ParserRule getDmxTextStartRule() {
		return getDmxTextStartAccess().getRule();
	}
	
	//DmxTextMiddle DTextSegment:
	//	value=PLAIN_TEXT_MIDDLE;
	public DmxGrammarAccess.DmxTextMiddleElements getDmxTextMiddleAccess() {
		return gaDmx.getDmxTextMiddleAccess();
	}
	
	public ParserRule getDmxTextMiddleRule() {
		return getDmxTextMiddleAccess().getRule();
	}
	
	//DmxTextEnd DTextSegment:
	//	value=PLAIN_TEXT_END;
	public DmxGrammarAccess.DmxTextEndElements getDmxTextEndAccess() {
		return gaDmx.getDmxTextEndAccess();
	}
	
	public ParserRule getDmxTextEndRule() {
		return getDmxTextEndAccess().getRule();
	}
	
	//DmxNavigableMemberReference DExpression:
	//	DmxPrimaryExpression (=> ({DmxAssignment.precedingNavigationSegment=current} '.' assignToMember=[DNavigableMember]
	//	DmxOpSingleAssign) value=DmxOrExpression
	//	| => ({DmxMemberNavigation.precedingNavigationSegment=current} '.') member=[DNavigableMember] (=>
	//	explicitOperationCall?='(' (memberCallArguments+=DmxPredicate (',' memberCallArguments+=DmxPredicate)*)?
	//	')'
	//	| before?="@before")?)*;
	public DmxGrammarAccess.DmxNavigableMemberReferenceElements getDmxNavigableMemberReferenceAccess() {
		return gaDmx.getDmxNavigableMemberReferenceAccess();
	}
	
	public ParserRule getDmxNavigableMemberReferenceRule() {
		return getDmxNavigableMemberReferenceAccess().getRule();
	}
	
	//DmxAssignment DExpression:
	//	{DmxAssignment} assignToMember=[DNavigableMember] DmxOpSingleAssign value=DmxOrExpression;
	public DmxGrammarAccess.DmxAssignmentElements getDmxAssignmentAccess() {
		return gaDmx.getDmxAssignmentAccess();
	}
	
	public ParserRule getDmxAssignmentRule() {
		return getDmxAssignmentAccess().getRule();
	}
	
	//DmxOpSingleAssign:
	//	':=';
	public DmxGrammarAccess.DmxOpSingleAssignElements getDmxOpSingleAssignAccess() {
		return gaDmx.getDmxOpSingleAssignAccess();
	}
	
	public ParserRule getDmxOpSingleAssignRule() {
		return getDmxOpSingleAssignAccess().getRule();
	}
	
	//DmxPredicate DExpression:
	//	{DmxPredicateWithCorrelationVariable} correlationVariable=DmxCorrelationVariable
	//	'|'
	//	value=DmxOrExpression
	//	| DmxOrExpression;
	public DmxGrammarAccess.DmxPredicateElements getDmxPredicateAccess() {
		return gaDmx.getDmxPredicateAccess();
	}
	
	public ParserRule getDmxPredicateRule() {
		return getDmxPredicateAccess().getRule();
	}
	
	//DmxCorrelationVariable DContext:
	//	name=ID;
	public DmxGrammarAccess.DmxCorrelationVariableElements getDmxCorrelationVariableAccess() {
		return gaDmx.getDmxCorrelationVariableAccess();
	}
	
	public ParserRule getDmxCorrelationVariableRule() {
		return getDmxCorrelationVariableAccess().getRule();
	}
	
	////	(':' type=[DType])?;
	//DmxOrExpression DExpression:
	//	DmxAndExpression (=> ({DmxBinaryOperation.leftOperand=current} operator=DmxOpOr) rightOperand=DmxAndExpression)*;
	public DmxGrammarAccess.DmxOrExpressionElements getDmxOrExpressionAccess() {
		return gaDmx.getDmxOrExpressionAccess();
	}
	
	public ParserRule getDmxOrExpressionRule() {
		return getDmxOrExpressionAccess().getRule();
	}
	
	//enum DmxOpOr returns DmxBinaryOperator:
	//	OR | OR='or' | XOR | XOR='xor';
	public DmxGrammarAccess.DmxOpOrElements getDmxOpOrAccess() {
		return gaDmx.getDmxOpOrAccess();
	}
	
	public EnumRule getDmxOpOrRule() {
		return getDmxOpOrAccess().getRule();
	}
	
	//DmxAndExpression DExpression:
	//	DmxEqualityExpression (=> ({DmxBinaryOperation.leftOperand=current} operator=DmxOpAnd)
	//	rightOperand=DmxEqualityExpression)*;
	public DmxGrammarAccess.DmxAndExpressionElements getDmxAndExpressionAccess() {
		return gaDmx.getDmxAndExpressionAccess();
	}
	
	public ParserRule getDmxAndExpressionRule() {
		return getDmxAndExpressionAccess().getRule();
	}
	
	//enum DmxOpAnd returns DmxBinaryOperator:
	//	AND | AND='and';
	public DmxGrammarAccess.DmxOpAndElements getDmxOpAndAccess() {
		return gaDmx.getDmxOpAndAccess();
	}
	
	public EnumRule getDmxOpAndRule() {
		return getDmxOpAndAccess().getRule();
	}
	
	//DmxEqualityExpression DExpression:
	//	DmxRelationalExpression (=> ({DmxBinaryOperation.leftOperand=current} operator=DmxOpEquality)
	//	rightOperand=DmxRelationalExpression)*;
	public DmxGrammarAccess.DmxEqualityExpressionElements getDmxEqualityExpressionAccess() {
		return gaDmx.getDmxEqualityExpressionAccess();
	}
	
	public ParserRule getDmxEqualityExpressionRule() {
		return getDmxEqualityExpressionAccess().getRule();
	}
	
	//enum DmxOpEquality returns DmxBinaryOperator:
	//	EQUAL='=' | NOT_EQUAL='!=' | NOT_EQUAL='<>';
	public DmxGrammarAccess.DmxOpEqualityElements getDmxOpEqualityAccess() {
		return gaDmx.getDmxOpEqualityAccess();
	}
	
	public EnumRule getDmxOpEqualityRule() {
		return getDmxOpEqualityAccess().getRule();
	}
	
	//DmxRelationalExpression DExpression:
	//	DmxOtherOperatorExpression (=> ({DmxInstanceOfExpression.expression=current} DmxOpInstanceOf) type=[DType] | =>
	//	({DmxBinaryOperation.leftOperand=current} operator=OpCompare) rightOperand=DmxOtherOperatorExpression)*;
	public DmxGrammarAccess.DmxRelationalExpressionElements getDmxRelationalExpressionAccess() {
		return gaDmx.getDmxRelationalExpressionAccess();
	}
	
	public ParserRule getDmxRelationalExpressionRule() {
		return getDmxRelationalExpressionAccess().getRule();
	}
	
	//DmxOpInstanceOf:
	//	'ISA' | 'isa';
	public DmxGrammarAccess.DmxOpInstanceOfElements getDmxOpInstanceOfAccess() {
		return gaDmx.getDmxOpInstanceOfAccess();
	}
	
	public ParserRule getDmxOpInstanceOfRule() {
		return getDmxOpInstanceOfAccess().getRule();
	}
	
	//enum OpCompare returns DmxBinaryOperator:
	//	LESS='<' | LESS_OR_EQUAL='<=' | LESS_OR_EQUAL='≤' | GREATER_OR_EQUAL='>=' | GREATER_OR_EQUAL='≥' | GREATER='>';
	public DmxGrammarAccess.OpCompareElements getOpCompareAccess() {
		return gaDmx.getOpCompareAccess();
	}
	
	public EnumRule getOpCompareRule() {
		return getOpCompareAccess().getRule();
	}
	
	//DmxOtherOperatorExpression DExpression:
	//	DmxAdditiveExpression (=> ({DmxBinaryOperation.leftOperand=current} operator=OpOther)
	//	rightOperand=DmxAdditiveExpression)*;
	public DmxGrammarAccess.DmxOtherOperatorExpressionElements getDmxOtherOperatorExpressionAccess() {
		return gaDmx.getDmxOtherOperatorExpressionAccess();
	}
	
	public ParserRule getDmxOtherOperatorExpressionRule() {
		return getDmxOtherOperatorExpressionAccess().getRule();
	}
	
	//enum OpOther returns DmxBinaryOperator:
	//	UNTIL='..' | SINGLE_ARROW='->' | DOUBLE_ARROW='=>';
	public DmxGrammarAccess.OpOtherElements getOpOtherAccess() {
		return gaDmx.getOpOtherAccess();
	}
	
	public EnumRule getOpOtherRule() {
		return getOpOtherAccess().getRule();
	}
	
	//DmxAdditiveExpression DExpression:
	//	DmxMultiplicativeExpression (=> ({DmxBinaryOperation.leftOperand=current} operator=OpAdd)
	//	rightOperand=DmxMultiplicativeExpression)*;
	public DmxGrammarAccess.DmxAdditiveExpressionElements getDmxAdditiveExpressionAccess() {
		return gaDmx.getDmxAdditiveExpressionAccess();
	}
	
	public ParserRule getDmxAdditiveExpressionRule() {
		return getDmxAdditiveExpressionAccess().getRule();
	}
	
	//enum OpAdd returns DmxBinaryOperator:
	//	ADD='+' | SUBTRACT='-';
	public DmxGrammarAccess.OpAddElements getOpAddAccess() {
		return gaDmx.getOpAddAccess();
	}
	
	public EnumRule getOpAddRule() {
		return getOpAddAccess().getRule();
	}
	
	//DmxMultiplicativeExpression DExpression:
	//	DmxUnaryOperation (=> ({DmxBinaryOperation.leftOperand=current} operator=OpMulti) rightOperand=DmxUnaryOperation)*;
	public DmxGrammarAccess.DmxMultiplicativeExpressionElements getDmxMultiplicativeExpressionAccess() {
		return gaDmx.getDmxMultiplicativeExpressionAccess();
	}
	
	public ParserRule getDmxMultiplicativeExpressionRule() {
		return getDmxMultiplicativeExpressionAccess().getRule();
	}
	
	//enum OpMulti returns DmxBinaryOperator:
	//	MULTIPLY='*' | DIVIDE='/' | POWER='**' | MODULO='%';
	public DmxGrammarAccess.OpMultiElements getOpMultiAccess() {
		return gaDmx.getOpMultiAccess();
	}
	
	public EnumRule getOpMultiRule() {
		return getOpMultiAccess().getRule();
	}
	
	//DmxUnaryOperation DExpression:
	//	{DmxUnaryOperation} operator=OpUnary operand=DmxUnaryOperation
	//	| DmxCastExpression;
	public DmxGrammarAccess.DmxUnaryOperationElements getDmxUnaryOperationAccess() {
		return gaDmx.getDmxUnaryOperationAccess();
	}
	
	public ParserRule getDmxUnaryOperationRule() {
		return getDmxUnaryOperationAccess().getRule();
	}
	
	//enum OpUnary returns DmxUnaryOperator:
	//	PLUS='+' | MINUS='-' | NOT='!' | NOT | NOT='not';
	public DmxGrammarAccess.OpUnaryElements getOpUnaryAccess() {
		return gaDmx.getOpUnaryAccess();
	}
	
	public EnumRule getOpUnaryRule() {
		return getOpUnaryAccess().getRule();
	}
	
	//DmxCastExpression DExpression:
	//	DmxNavigableMemberReference (=> ({DmxCastExpression.target=current} DmxOpCast) type=[DType])?;
	public DmxGrammarAccess.DmxCastExpressionElements getDmxCastExpressionAccess() {
		return gaDmx.getDmxCastExpressionAccess();
	}
	
	public ParserRule getDmxCastExpressionRule() {
		return getDmxCastExpressionAccess().getRule();
	}
	
	//DmxOpCast:
	//	'AS' | 'as';
	public DmxGrammarAccess.DmxOpCastElements getDmxOpCastAccess() {
		return gaDmx.getDmxOpCastAccess();
	}
	
	public ParserRule getDmxOpCastRule() {
		return getDmxOpCastAccess().getRule();
	}
	
	//DmxPrimaryExpression DExpression:
	//	DmxLiteralExpression | DmxSelfExpression | DmxReturnExpression | DmxRaiseExpression | DmxParenthesizedExpression |
	//	DmxFunctionCall | DmxConstructorCall | DmxStaticReference | DmxContextReference | DmxIfExpression |
	//	DmxForLoopExpression;
	public DmxGrammarAccess.DmxPrimaryExpressionElements getDmxPrimaryExpressionAccess() {
		return gaDmx.getDmxPrimaryExpressionAccess();
	}
	
	public ParserRule getDmxPrimaryExpressionRule() {
		return getDmxPrimaryExpressionAccess().getRule();
	}
	
	//DmxLiteralExpression DExpression:
	//	DmxBooleanLiteral | DmxStringLiteral | DmxNaturalLiteral | DmxDecimalLiteral | DmxUndefinedLiteral;
	public DmxGrammarAccess.DmxLiteralExpressionElements getDmxLiteralExpressionAccess() {
		return gaDmx.getDmxLiteralExpressionAccess();
	}
	
	public ParserRule getDmxLiteralExpressionRule() {
		return getDmxLiteralExpressionAccess().getRule();
	}
	
	//DmxSelfExpression DExpression:
	//	{DmxSelfExpression} ('SELF' | 'self');
	public DmxGrammarAccess.DmxSelfExpressionElements getDmxSelfExpressionAccess() {
		return gaDmx.getDmxSelfExpressionAccess();
	}
	
	public ParserRule getDmxSelfExpressionRule() {
		return getDmxSelfExpressionAccess().getRule();
	}
	
	//DmxReturnExpression DExpression:
	//	{DmxReturnExpression} ('RETURN' | 'return') -> expression=DExpression?;
	public DmxGrammarAccess.DmxReturnExpressionElements getDmxReturnExpressionAccess() {
		return gaDmx.getDmxReturnExpressionAccess();
	}
	
	public ParserRule getDmxReturnExpressionRule() {
		return getDmxReturnExpressionAccess().getRule();
	}
	
	//DmxRaiseExpression DExpression:
	//	{DmxRaiseExpression} ('RAISE' | 'raise') expression=DExpression;
	public DmxGrammarAccess.DmxRaiseExpressionElements getDmxRaiseExpressionAccess() {
		return gaDmx.getDmxRaiseExpressionAccess();
	}
	
	public ParserRule getDmxRaiseExpressionRule() {
		return getDmxRaiseExpressionAccess().getRule();
	}
	
	//DmxParenthesizedExpression DExpression:
	//	'(' DExpression ')';
	public DmxGrammarAccess.DmxParenthesizedExpressionElements getDmxParenthesizedExpressionAccess() {
		return gaDmx.getDmxParenthesizedExpressionAccess();
	}
	
	public ParserRule getDmxParenthesizedExpressionRule() {
		return getDmxParenthesizedExpressionAccess().getRule();
	}
	
	//DmxFunctionCall DExpression:
	//	{DmxFunctionCall} function=[DmxFunction]
	//	'(' (functionCallArguments+=DExpression (',' functionCallArguments+=DExpression)*)?
	//	')';
	public DmxGrammarAccess.DmxFunctionCallElements getDmxFunctionCallAccess() {
		return gaDmx.getDmxFunctionCallAccess();
	}
	
	public ParserRule getDmxFunctionCallRule() {
		return getDmxFunctionCallAccess().getRule();
	}
	
	//DmxConstructorCall DExpression:
	//	{DmxConstructorCall} DmxOpConstructor constructor=[DComplexType] (=> explicitConstructorCall?='('
	//	(arguments+=DExpression (',' arguments+=DExpression)*)?
	//	')')?;
	public DmxGrammarAccess.DmxConstructorCallElements getDmxConstructorCallAccess() {
		return gaDmx.getDmxConstructorCallAccess();
	}
	
	public ParserRule getDmxConstructorCallRule() {
		return getDmxConstructorCallAccess().getRule();
	}
	
	//DmxOpConstructor:
	//	'NEW' | 'new';
	public DmxGrammarAccess.DmxOpConstructorElements getDmxOpConstructorAccess() {
		return gaDmx.getDmxOpConstructorAccess();
	}
	
	public ParserRule getDmxOpConstructorRule() {
		return getDmxOpConstructorAccess().getRule();
	}
	
	//DmxStaticReference DExpression:
	//	{DmxStaticReference}
	//	'['
	//	target=[IStaticReferenceTarget|DQualifiedName] ('#' member=[DNavigableMember])? ("|" (displayName=ID | plural?="*"))?
	//	-> ']';
	public DmxGrammarAccess.DmxStaticReferenceElements getDmxStaticReferenceAccess() {
		return gaDmx.getDmxStaticReferenceAccess();
	}
	
	public ParserRule getDmxStaticReferenceRule() {
		return getDmxStaticReferenceAccess().getRule();
	}
	
	//// '->' gives precedence to this ']' over PLAIN_TEXT_MIDDLE ('=>' works too but generates more lookahead overhead)
	//DmxContextReference DExpression:
	//	{DmxContextReference} target=[DNamedElement] (before?="@before"
	//	| '.' all?='all')?;
	public DmxGrammarAccess.DmxContextReferenceElements getDmxContextReferenceAccess() {
		return gaDmx.getDmxContextReferenceAccess();
	}
	
	public ParserRule getDmxContextReferenceRule() {
		return getDmxContextReferenceAccess().getRule();
	}
	
	//DmxIfExpression DExpression:
	//	{DmxIfExpression}
	//	'if' if=DExpression
	//	'then' then=DExpression (=> 'else' else=DExpression)?
	//	'end';
	public DmxGrammarAccess.DmxIfExpressionElements getDmxIfExpressionAccess() {
		return gaDmx.getDmxIfExpressionAccess();
	}
	
	public ParserRule getDmxIfExpressionRule() {
		return getDmxIfExpressionAccess().getRule();
	}
	
	//DmxForLoopExpression DExpression:
	//	=> ({DmxForLoopExpression}
	//	'for' declaredParam=ID ':') forExpression=DExpression 'do'
	//	eachExpression=DExpression
	//	'end';
	public DmxGrammarAccess.DmxForLoopExpressionElements getDmxForLoopExpressionAccess() {
		return gaDmx.getDmxForLoopExpressionAccess();
	}
	
	public ParserRule getDmxForLoopExpressionRule() {
		return getDmxForLoopExpressionAccess().getRule();
	}
	
	//DMultiplicity:
	//	'(' minOccurs=NATURAL '..' maxOccurs=MULTIPLICITY ')';
	public DmxGrammarAccess.DMultiplicityElements getDMultiplicityAccess() {
		return gaDmx.getDMultiplicityAccess();
	}
	
	public ParserRule getDMultiplicityRule() {
		return getDMultiplicityAccess().getRule();
	}
	
	//MULTIPLICITY ecore::EInt:
	//	NATURAL | '*';
	public DmxGrammarAccess.MULTIPLICITYElements getMULTIPLICITYAccess() {
		return gaDmx.getMULTIPLICITYAccess();
	}
	
	public ParserRule getMULTIPLICITYRule() {
		return getMULTIPLICITYAccess().getRule();
	}
	
	//DmxBooleanLiteral DExpression:
	//	{DmxBooleanLiteral} (value?='TRUE' | value?='true' | 'FALSE' | 'false');
	public DmxGrammarAccess.DmxBooleanLiteralElements getDmxBooleanLiteralAccess() {
		return gaDmx.getDmxBooleanLiteralAccess();
	}
	
	public ParserRule getDmxBooleanLiteralRule() {
		return getDmxBooleanLiteralAccess().getRule();
	}
	
	//DmxNaturalLiteral DExpression:
	//	{DmxNaturalLiteral} value=NATURAL;
	public DmxGrammarAccess.DmxNaturalLiteralElements getDmxNaturalLiteralAccess() {
		return gaDmx.getDmxNaturalLiteralAccess();
	}
	
	public ParserRule getDmxNaturalLiteralRule() {
		return getDmxNaturalLiteralAccess().getRule();
	}
	
	//DmxDecimalLiteral DExpression:
	//	{DmxDecimalLiteral} value=DECIMAL;
	public DmxGrammarAccess.DmxDecimalLiteralElements getDmxDecimalLiteralAccess() {
		return gaDmx.getDmxDecimalLiteralAccess();
	}
	
	public ParserRule getDmxDecimalLiteralRule() {
		return getDmxDecimalLiteralAccess().getRule();
	}
	
	//DmxStringLiteral DExpression:
	//	{DmxStringLiteral} value=STRING;
	public DmxGrammarAccess.DmxStringLiteralElements getDmxStringLiteralAccess() {
		return gaDmx.getDmxStringLiteralAccess();
	}
	
	public ParserRule getDmxStringLiteralRule() {
		return getDmxStringLiteralAccess().getRule();
	}
	
	//DmxUndefinedLiteral DExpression:
	//	{DmxUndefinedLiteral} ('UNDEFINED' | 'undefined');
	public DmxGrammarAccess.DmxUndefinedLiteralElements getDmxUndefinedLiteralAccess() {
		return gaDmx.getDmxUndefinedLiteralAccess();
	}
	
	public ParserRule getDmxUndefinedLiteralRule() {
		return getDmxUndefinedLiteralAccess().getRule();
	}
	
	//DECIMAL:
	//	NATURAL '.' NATURAL (('E' | 'e') ('+' | '-')? NATURAL)?;
	public DmxGrammarAccess.DECIMALElements getDECIMALAccess() {
		return gaDmx.getDECIMALAccess();
	}
	
	public ParserRule getDECIMALRule() {
		return getDECIMALAccess().getRule();
	}
	
	//DQualifiedNameWithWildcard:
	//	DQualifiedName '.*'?;
	public DmxGrammarAccess.DQualifiedNameWithWildcardElements getDQualifiedNameWithWildcardAccess() {
		return gaDmx.getDQualifiedNameWithWildcardAccess();
	}
	
	public ParserRule getDQualifiedNameWithWildcardRule() {
		return getDQualifiedNameWithWildcardAccess().getRule();
	}
	
	//DQualifiedName:
	//	ID ('.' ID)*;
	public DmxGrammarAccess.DQualifiedNameElements getDQualifiedNameAccess() {
		return gaDmx.getDQualifiedNameAccess();
	}
	
	public ParserRule getDQualifiedNameRule() {
		return getDQualifiedNameAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? (LETTER | '_') (LETTER | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaDmx.getIDRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"';
	public TerminalRule getSTRINGRule() {
		return gaDmx.getSTRINGRule();
	}
	
	//terminal NATURAL returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getNATURALRule() {
		return gaDmx.getNATURALRule();
	}
	
	//terminal fragment LETTER:
	//	'a'..'z' | 'A'..'Z' | '\\u00c0'..'\\u00d6' | '\\u00d8'..'\\u00f6' | '\\u00f8'..'\\u00ff';
	public TerminalRule getLETTERRule() {
		return gaDmx.getLETTERRule();
	}
	
	//terminal fragment PLAIN_TEXT:
	//	!('»' | ']' | '[');
	public TerminalRule getPLAIN_TEXTRule() {
		return gaDmx.getPLAIN_TEXTRule();
	}
	
	//terminal PLAIN_TEXT_ONLY:
	//	'«' PLAIN_TEXT* '»';
	public TerminalRule getPLAIN_TEXT_ONLYRule() {
		return gaDmx.getPLAIN_TEXT_ONLYRule();
	}
	
	//terminal PLAIN_TEXT_START:
	//	'«' PLAIN_TEXT* '[';
	public TerminalRule getPLAIN_TEXT_STARTRule() {
		return gaDmx.getPLAIN_TEXT_STARTRule();
	}
	
	//terminal PLAIN_TEXT_MIDDLE:
	//	']' PLAIN_TEXT* '[';
	public TerminalRule getPLAIN_TEXT_MIDDLERule() {
		return gaDmx.getPLAIN_TEXT_MIDDLERule();
	}
	
	//terminal PLAIN_TEXT_END:
	//	']' PLAIN_TEXT* '»';
	public TerminalRule getPLAIN_TEXT_ENDRule() {
		return gaDmx.getPLAIN_TEXT_ENDRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaDmx.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaDmx.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaDmx.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaDmx.getANY_OTHERRule();
	}
}
