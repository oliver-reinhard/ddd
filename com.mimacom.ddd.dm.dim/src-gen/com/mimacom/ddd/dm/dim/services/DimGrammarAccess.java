/*
 * generated by Xtext 2.19.0
 */
package com.mimacom.ddd.dm.dim.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import com.mimacom.ddd.dm.dmx.services.DmxGrammarAccess;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class DimGrammarAccess extends AbstractGrammarElementFinder {
	
	public class DInformationModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.dim.Dim.DInformationModel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cImportsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cImportsDImportParserRuleCall_0_0 = (RuleCall)cImportsAssignment_0.eContents().get(0);
		private final Keyword cDomainKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cDomainAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDomainDQualifiedNameParserRuleCall_2_0 = (RuleCall)cDomainAssignment_2.eContents().get(0);
		private final Keyword cInformationKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cModelKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cNameAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cNameIDTerminalRuleCall_5_0 = (RuleCall)cNameAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cAliasKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cAliasesAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cAliasesIDTerminalRuleCall_6_1_0 = (RuleCall)cAliasesAssignment_6_1.eContents().get(0);
		private final Assignment cDescriptionAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cDescriptionDRichTextParserRuleCall_7_0 = (RuleCall)cDescriptionAssignment_7.eContents().get(0);
		private final Alternatives cAlternatives_8 = (Alternatives)cGroup.eContents().get(8);
		private final Assignment cTypesAssignment_8_0 = (Assignment)cAlternatives_8.eContents().get(0);
		private final RuleCall cTypesDTypeParserRuleCall_8_0_0 = (RuleCall)cTypesAssignment_8_0.eContents().get(0);
		private final Assignment cAggregatesAssignment_8_1 = (Assignment)cAlternatives_8.eContents().get(1);
		private final RuleCall cAggregatesDAggregateParserRuleCall_8_1_0 = (RuleCall)cAggregatesAssignment_8_1.eContents().get(0);
		
		///*
		// * MODEL STRUCTURE
		// */ DInformationModel:
		//	imports+=DImport*
		//	'domain'
		//	domain=DQualifiedName
		//	'information' 'model'
		//	name=ID ('alias' aliases+=ID)*
		//	description=DRichText? (types+=DType | aggregates+=DAggregate)*;
		@Override public ParserRule getRule() { return rule; }
		
		//imports+=DImport* 'domain' domain=DQualifiedName 'information' 'model' name=ID ('alias' aliases+=ID)*
		//description=DRichText? (types+=DType | aggregates+=DAggregate)*
		public Group getGroup() { return cGroup; }
		
		//imports+=DImport*
		public Assignment getImportsAssignment_0() { return cImportsAssignment_0; }
		
		//DImport
		public RuleCall getImportsDImportParserRuleCall_0_0() { return cImportsDImportParserRuleCall_0_0; }
		
		//'domain'
		public Keyword getDomainKeyword_1() { return cDomainKeyword_1; }
		
		//domain=DQualifiedName
		public Assignment getDomainAssignment_2() { return cDomainAssignment_2; }
		
		//DQualifiedName
		public RuleCall getDomainDQualifiedNameParserRuleCall_2_0() { return cDomainDQualifiedNameParserRuleCall_2_0; }
		
		//'information'
		public Keyword getInformationKeyword_3() { return cInformationKeyword_3; }
		
		//'model'
		public Keyword getModelKeyword_4() { return cModelKeyword_4; }
		
		//name=ID
		public Assignment getNameAssignment_5() { return cNameAssignment_5; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_5_0() { return cNameIDTerminalRuleCall_5_0; }
		
		//('alias' aliases+=ID)*
		public Group getGroup_6() { return cGroup_6; }
		
		//'alias'
		public Keyword getAliasKeyword_6_0() { return cAliasKeyword_6_0; }
		
		//aliases+=ID
		public Assignment getAliasesAssignment_6_1() { return cAliasesAssignment_6_1; }
		
		//ID
		public RuleCall getAliasesIDTerminalRuleCall_6_1_0() { return cAliasesIDTerminalRuleCall_6_1_0; }
		
		//description=DRichText?
		public Assignment getDescriptionAssignment_7() { return cDescriptionAssignment_7; }
		
		//DRichText
		public RuleCall getDescriptionDRichTextParserRuleCall_7_0() { return cDescriptionDRichTextParserRuleCall_7_0; }
		
		//(types+=DType | aggregates+=DAggregate)*
		public Alternatives getAlternatives_8() { return cAlternatives_8; }
		
		//types+=DType
		public Assignment getTypesAssignment_8_0() { return cTypesAssignment_8_0; }
		
		//DType
		public RuleCall getTypesDTypeParserRuleCall_8_0_0() { return cTypesDTypeParserRuleCall_8_0_0; }
		
		//aggregates+=DAggregate
		public Assignment getAggregatesAssignment_8_1() { return cAggregatesAssignment_8_1; }
		
		//DAggregate
		public RuleCall getAggregatesDAggregateParserRuleCall_8_1_0() { return cAggregatesDAggregateParserRuleCall_8_1_0; }
	}
	public class DAggregateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.dim.Dim.DAggregate");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDAggregateAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cComponentKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Assignment cDescriptionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDescriptionDRichTextParserRuleCall_3_0 = (RuleCall)cDescriptionAssignment_3.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cQueryKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cFeaturesAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cFeaturesDQueryParserRuleCall_5_1_0 = (RuleCall)cFeaturesAssignment_5_1.eContents().get(0);
		private final Assignment cTypesAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cTypesDTypeParserRuleCall_6_0 = (RuleCall)cTypesAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//DAggregate:
		//	{DAggregate}
		//	'component'
		//	name=ID
		//	description=DRichText?
		//	'{' ('query' features+=DQuery)*
		//	types+=DType*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{DAggregate} 'component' name=ID description=DRichText? '{' ('query' features+=DQuery)* types+=DType* '}'
		public Group getGroup() { return cGroup; }
		
		//{DAggregate}
		public Action getDAggregateAction_0() { return cDAggregateAction_0; }
		
		//'component'
		public Keyword getComponentKeyword_1() { return cComponentKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//description=DRichText?
		public Assignment getDescriptionAssignment_3() { return cDescriptionAssignment_3; }
		
		//DRichText
		public RuleCall getDescriptionDRichTextParserRuleCall_3_0() { return cDescriptionDRichTextParserRuleCall_3_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//('query' features+=DQuery)*
		public Group getGroup_5() { return cGroup_5; }
		
		//'query'
		public Keyword getQueryKeyword_5_0() { return cQueryKeyword_5_0; }
		
		//features+=DQuery
		public Assignment getFeaturesAssignment_5_1() { return cFeaturesAssignment_5_1; }
		
		//DQuery
		public RuleCall getFeaturesDQueryParserRuleCall_5_1_0() { return cFeaturesDQueryParserRuleCall_5_1_0; }
		
		//types+=DType*
		public Assignment getTypesAssignment_6() { return cTypesAssignment_6; }
		
		//DType
		public RuleCall getTypesDTypeParserRuleCall_6_0() { return cTypesDTypeParserRuleCall_6_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	public class DTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.dim.Dim.DType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDPrimitiveParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDEnumerationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cDEntityTypeParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cDDetailTypeParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		///*
		// * TYPES
		// */ DType:
		//	DPrimitive | DEnumeration | DEntityType | DDetailType;
		@Override public ParserRule getRule() { return rule; }
		
		//DPrimitive | DEnumeration | DEntityType | DDetailType
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//DPrimitive
		public RuleCall getDPrimitiveParserRuleCall_0() { return cDPrimitiveParserRuleCall_0; }
		
		//DEnumeration
		public RuleCall getDEnumerationParserRuleCall_1() { return cDEnumerationParserRuleCall_1; }
		
		//DEntityType
		public RuleCall getDEntityTypeParserRuleCall_2() { return cDEntityTypeParserRuleCall_2; }
		
		//DDetailType
		public RuleCall getDDetailTypeParserRuleCall_3() { return cDDetailTypeParserRuleCall_3; }
	}
	public class DConstraintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.dim.Dim.DConstraint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cConstraintKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cAliasKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cAliasesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cAliasesIDTerminalRuleCall_2_1_0 = (RuleCall)cAliasesAssignment_2_1.eContents().get(0);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cPredicateAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cPredicateDExpressionParserRuleCall_4_0 = (RuleCall)cPredicateAssignment_4.eContents().get(0);
		private final Assignment cDescriptionAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cDescriptionDRichTextParserRuleCall_5_0 = (RuleCall)cDescriptionAssignment_5.eContents().get(0);
		
		//DConstraint DNamedPredicate:
		//	'constraint'
		//	name=ID ('alias' aliases+=ID)*
		//	':'
		//	predicate=DExpression
		//	description=DRichText?;
		@Override public ParserRule getRule() { return rule; }
		
		//'constraint' name=ID ('alias' aliases+=ID)* ':' predicate=DExpression description=DRichText?
		public Group getGroup() { return cGroup; }
		
		//'constraint'
		public Keyword getConstraintKeyword_0() { return cConstraintKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//('alias' aliases+=ID)*
		public Group getGroup_2() { return cGroup_2; }
		
		//'alias'
		public Keyword getAliasKeyword_2_0() { return cAliasKeyword_2_0; }
		
		//aliases+=ID
		public Assignment getAliasesAssignment_2_1() { return cAliasesAssignment_2_1; }
		
		//ID
		public RuleCall getAliasesIDTerminalRuleCall_2_1_0() { return cAliasesIDTerminalRuleCall_2_1_0; }
		
		//':'
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }
		
		//predicate=DExpression
		public Assignment getPredicateAssignment_4() { return cPredicateAssignment_4; }
		
		//DExpression
		public RuleCall getPredicateDExpressionParserRuleCall_4_0() { return cPredicateDExpressionParserRuleCall_4_0; }
		
		//description=DRichText?
		public Assignment getDescriptionAssignment_5() { return cDescriptionAssignment_5; }
		
		//DRichText
		public RuleCall getDescriptionDRichTextParserRuleCall_5_0() { return cDescriptionDRichTextParserRuleCall_5_0; }
	}
	public class DPrimitiveElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.dim.Dim.DPrimitive");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPrimitiveKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cAliasKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cAliasesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cAliasesIDTerminalRuleCall_2_1_0 = (RuleCall)cAliasesAssignment_2_1.eContents().get(0);
		private final Keyword cRedefinesKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cRedefinesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cRedefinesDmxArchetypeCrossReference_4_0 = (CrossReference)cRedefinesAssignment_4.eContents().get(0);
		private final RuleCall cRedefinesDmxArchetypeIDTerminalRuleCall_4_0_1 = (RuleCall)cRedefinesDmxArchetypeCrossReference_4_0.eContents().get(1);
		private final Assignment cDescriptionAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cDescriptionDRichTextParserRuleCall_5_0 = (RuleCall)cDescriptionAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cLeftCurlyBracketKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cConstraintsAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cConstraintsDConstraintParserRuleCall_6_1_0 = (RuleCall)cConstraintsAssignment_6_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6_2 = (Keyword)cGroup_6.eContents().get(2);
		
		//DPrimitive:
		//	'primitive'
		//	name=ID ('alias' aliases+=ID)*
		//	'redefines' redefines=[DmxArchetype] description=DRichText? ('{'
		//	constraints+=DConstraint+
		//	'}')?;
		@Override public ParserRule getRule() { return rule; }
		
		//'primitive' name=ID ('alias' aliases+=ID)* 'redefines' redefines=[DmxArchetype] description=DRichText? ('{'
		//constraints+=DConstraint+ '}')?
		public Group getGroup() { return cGroup; }
		
		//'primitive'
		public Keyword getPrimitiveKeyword_0() { return cPrimitiveKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//('alias' aliases+=ID)*
		public Group getGroup_2() { return cGroup_2; }
		
		//'alias'
		public Keyword getAliasKeyword_2_0() { return cAliasKeyword_2_0; }
		
		//aliases+=ID
		public Assignment getAliasesAssignment_2_1() { return cAliasesAssignment_2_1; }
		
		//ID
		public RuleCall getAliasesIDTerminalRuleCall_2_1_0() { return cAliasesIDTerminalRuleCall_2_1_0; }
		
		//'redefines'
		public Keyword getRedefinesKeyword_3() { return cRedefinesKeyword_3; }
		
		//redefines=[DmxArchetype]
		public Assignment getRedefinesAssignment_4() { return cRedefinesAssignment_4; }
		
		//[DmxArchetype]
		public CrossReference getRedefinesDmxArchetypeCrossReference_4_0() { return cRedefinesDmxArchetypeCrossReference_4_0; }
		
		//ID
		public RuleCall getRedefinesDmxArchetypeIDTerminalRuleCall_4_0_1() { return cRedefinesDmxArchetypeIDTerminalRuleCall_4_0_1; }
		
		//description=DRichText?
		public Assignment getDescriptionAssignment_5() { return cDescriptionAssignment_5; }
		
		//DRichText
		public RuleCall getDescriptionDRichTextParserRuleCall_5_0() { return cDescriptionDRichTextParserRuleCall_5_0; }
		
		//('{' constraints+=DConstraint+ '}')?
		public Group getGroup_6() { return cGroup_6; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_6_0() { return cLeftCurlyBracketKeyword_6_0; }
		
		//constraints+=DConstraint+
		public Assignment getConstraintsAssignment_6_1() { return cConstraintsAssignment_6_1; }
		
		//DConstraint
		public RuleCall getConstraintsDConstraintParserRuleCall_6_1_0() { return cConstraintsDConstraintParserRuleCall_6_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6_2() { return cRightCurlyBracketKeyword_6_2; }
	}
	public class DEnumerationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.dim.Dim.DEnumeration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEnumerationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cAliasKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cAliasesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cAliasesIDTerminalRuleCall_2_1_0 = (RuleCall)cAliasesAssignment_2_1.eContents().get(0);
		private final Assignment cDescriptionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDescriptionDRichTextParserRuleCall_3_0 = (RuleCall)cDescriptionAssignment_3.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Assignment cLiteralsAssignment_5_0 = (Assignment)cGroup_5.eContents().get(0);
		private final RuleCall cLiteralsDLiteralParserRuleCall_5_0_0 = (RuleCall)cLiteralsAssignment_5_0.eContents().get(0);
		private final Group cGroup_5_1 = (Group)cGroup_5.eContents().get(1);
		private final Keyword cCommaKeyword_5_1_0 = (Keyword)cGroup_5_1.eContents().get(0);
		private final Assignment cLiteralsAssignment_5_1_1 = (Assignment)cGroup_5_1.eContents().get(1);
		private final RuleCall cLiteralsDLiteralParserRuleCall_5_1_1_0 = (RuleCall)cLiteralsAssignment_5_1_1.eContents().get(0);
		private final Assignment cConstraintsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cConstraintsDConstraintParserRuleCall_6_0 = (RuleCall)cConstraintsAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//DEnumeration:
		//	'enumeration'
		//	name=ID ('alias' aliases+=ID)*
		//	description=DRichText?
		//	'{' (literals+=DLiteral (',' literals+=DLiteral)*)?
		//	constraints+=DConstraint*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'enumeration' name=ID ('alias' aliases+=ID)* description=DRichText? '{' (literals+=DLiteral (',' literals+=DLiteral)*)?
		//constraints+=DConstraint* '}'
		public Group getGroup() { return cGroup; }
		
		//'enumeration'
		public Keyword getEnumerationKeyword_0() { return cEnumerationKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//('alias' aliases+=ID)*
		public Group getGroup_2() { return cGroup_2; }
		
		//'alias'
		public Keyword getAliasKeyword_2_0() { return cAliasKeyword_2_0; }
		
		//aliases+=ID
		public Assignment getAliasesAssignment_2_1() { return cAliasesAssignment_2_1; }
		
		//ID
		public RuleCall getAliasesIDTerminalRuleCall_2_1_0() { return cAliasesIDTerminalRuleCall_2_1_0; }
		
		//description=DRichText?
		public Assignment getDescriptionAssignment_3() { return cDescriptionAssignment_3; }
		
		//DRichText
		public RuleCall getDescriptionDRichTextParserRuleCall_3_0() { return cDescriptionDRichTextParserRuleCall_3_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//(literals+=DLiteral (',' literals+=DLiteral)*)?
		public Group getGroup_5() { return cGroup_5; }
		
		//literals+=DLiteral
		public Assignment getLiteralsAssignment_5_0() { return cLiteralsAssignment_5_0; }
		
		//DLiteral
		public RuleCall getLiteralsDLiteralParserRuleCall_5_0_0() { return cLiteralsDLiteralParserRuleCall_5_0_0; }
		
		//(',' literals+=DLiteral)*
		public Group getGroup_5_1() { return cGroup_5_1; }
		
		//','
		public Keyword getCommaKeyword_5_1_0() { return cCommaKeyword_5_1_0; }
		
		//literals+=DLiteral
		public Assignment getLiteralsAssignment_5_1_1() { return cLiteralsAssignment_5_1_1; }
		
		//DLiteral
		public RuleCall getLiteralsDLiteralParserRuleCall_5_1_1_0() { return cLiteralsDLiteralParserRuleCall_5_1_1_0; }
		
		//constraints+=DConstraint*
		public Assignment getConstraintsAssignment_6() { return cConstraintsAssignment_6; }
		
		//DConstraint
		public RuleCall getConstraintsDConstraintParserRuleCall_6_0() { return cConstraintsDConstraintParserRuleCall_6_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	public class DLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.dim.Dim.DLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cAliasKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cAliasesAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cAliasesIDTerminalRuleCall_1_1_0 = (RuleCall)cAliasesAssignment_1_1.eContents().get(0);
		private final Assignment cDescriptionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDescriptionDRichTextParserRuleCall_2_0 = (RuleCall)cDescriptionAssignment_2.eContents().get(0);
		
		//DLiteral:
		//	name=ID ('alias' aliases+=ID)*
		//	description=DRichText?;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID ('alias' aliases+=ID)* description=DRichText?
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//('alias' aliases+=ID)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'alias'
		public Keyword getAliasKeyword_1_0() { return cAliasKeyword_1_0; }
		
		//aliases+=ID
		public Assignment getAliasesAssignment_1_1() { return cAliasesAssignment_1_1; }
		
		//ID
		public RuleCall getAliasesIDTerminalRuleCall_1_1_0() { return cAliasesIDTerminalRuleCall_1_1_0; }
		
		//description=DRichText?
		public Assignment getDescriptionAssignment_2() { return cDescriptionAssignment_2; }
		
		//DRichText
		public RuleCall getDescriptionDRichTextParserRuleCall_2_0() { return cDescriptionDRichTextParserRuleCall_2_0; }
	}
	public class DEntityTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.dim.Dim.DEntityType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAbstractAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cAbstractAbstractKeyword_0_0 = (Keyword)cAbstractAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Assignment cRootAssignment_1_0_0 = (Assignment)cGroup_1_0.eContents().get(0);
		private final Keyword cRootRootKeyword_1_0_0_0 = (Keyword)cRootAssignment_1_0_0.eContents().get(0);
		private final Assignment cOriginAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cOriginDEntityOriginGenericEnumRuleCall_1_0_1_0 = (RuleCall)cOriginAssignment_1_0_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Assignment cRootAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final Keyword cRootMainKeyword_1_1_0_0 = (Keyword)cRootAssignment_1_1_0.eContents().get(0);
		private final Alternatives cAlternatives_1_1_1 = (Alternatives)cGroup_1_1.eContents().get(1);
		private final Group cGroup_1_1_1_0 = (Group)cAlternatives_1_1_1.eContents().get(0);
		private final Keyword cPhysicalKeyword_1_1_1_0_0 = (Keyword)cGroup_1_1_1_0.eContents().get(0);
		private final Assignment cOriginAssignment_1_1_1_0_1 = (Assignment)cGroup_1_1_1_0.eContents().get(1);
		private final RuleCall cOriginDEntityOriginObjectEnumRuleCall_1_1_1_0_1_0 = (RuleCall)cOriginAssignment_1_1_1_0_1.eContents().get(0);
		private final Group cGroup_1_1_1_1 = (Group)cAlternatives_1_1_1.eContents().get(1);
		private final Keyword cVirtualKeyword_1_1_1_1_0 = (Keyword)cGroup_1_1_1_1.eContents().get(0);
		private final Assignment cOriginAssignment_1_1_1_1_1 = (Assignment)cGroup_1_1_1_1.eContents().get(1);
		private final RuleCall cOriginDEntityOriginConceptEnumRuleCall_1_1_1_1_1_0 = (RuleCall)cOriginAssignment_1_1_1_1_1.eContents().get(0);
		private final Assignment cOriginAssignment_1_1_1_2 = (Assignment)cAlternatives_1_1_1.eContents().get(2);
		private final RuleCall cOriginDEntityOriginRelationshipEnumRuleCall_1_1_1_2_0 = (RuleCall)cOriginAssignment_1_1_1_2.eContents().get(0);
		private final RuleCall cDComplexTypeParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cStatesKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cStatesAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cStatesDStateParserRuleCall_4_2_0 = (RuleCall)cStatesAssignment_4_2.eContents().get(0);
		private final Group cGroup_4_3 = (Group)cGroup_4.eContents().get(3);
		private final Keyword cCommaKeyword_4_3_0 = (Keyword)cGroup_4_3.eContents().get(0);
		private final Assignment cStatesAssignment_4_3_1 = (Assignment)cGroup_4_3.eContents().get(1);
		private final RuleCall cStatesDStateParserRuleCall_4_3_1_0 = (RuleCall)cStatesAssignment_4_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4_4 = (Keyword)cGroup_4.eContents().get(4);
		private final Group cGroup_4_5 = (Group)cGroup_4.eContents().get(5);
		private final Keyword cEventsKeyword_4_5_0 = (Keyword)cGroup_4_5.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4_5_1 = (Keyword)cGroup_4_5.eContents().get(1);
		private final Assignment cEventsAssignment_4_5_2 = (Assignment)cGroup_4_5.eContents().get(2);
		private final RuleCall cEventsDStateEventParserRuleCall_4_5_2_0 = (RuleCall)cEventsAssignment_4_5_2.eContents().get(0);
		private final Group cGroup_4_5_3 = (Group)cGroup_4_5.eContents().get(3);
		private final Keyword cCommaKeyword_4_5_3_0 = (Keyword)cGroup_4_5_3.eContents().get(0);
		private final Assignment cEventsAssignment_4_5_3_1 = (Assignment)cGroup_4_5_3.eContents().get(1);
		private final RuleCall cEventsDStateEventParserRuleCall_4_5_3_1_0 = (RuleCall)cEventsAssignment_4_5_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4_5_4 = (Keyword)cGroup_4_5.eContents().get(4);
		private final Alternatives cAlternatives_5 = (Alternatives)cGroup.eContents().get(5);
		private final Assignment cFeaturesAssignment_5_0 = (Assignment)cAlternatives_5.eContents().get(0);
		private final RuleCall cFeaturesDFeatureParserRuleCall_5_0_0 = (RuleCall)cFeaturesAssignment_5_0.eContents().get(0);
		private final Assignment cConstraintsAssignment_5_1 = (Assignment)cAlternatives_5.eContents().get(1);
		private final RuleCall cConstraintsDConstraintParserRuleCall_5_1_0 = (RuleCall)cConstraintsAssignment_5_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//DEntityType:
		//	abstract?='abstract'? (root?='root'?
		//	origin=DEntityOriginGeneric
		//	| root?='main'? ('physical' origin=DEntityOriginObject // validation: cannot be abstract
		//	| 'virtual' origin=DEntityOriginConcept
		//	| origin=DEntityOriginRelationship)) DComplexType
		//	'{' ('states'
		//	'{'
		//	states+=DState (',' states+=DState)*
		//	'}' ('events'
		//	'{'
		//	events+=DStateEvent (',' events+=DStateEvent)*
		//	'}')?)? (features+=DFeature | constraints+=DConstraint)*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//abstract?='abstract'? (root?='root'? origin=DEntityOriginGeneric | root?='main'? ('physical' origin=DEntityOriginObject // validation: cannot be abstract
		//| 'virtual' origin=DEntityOriginConcept | origin=DEntityOriginRelationship)) DComplexType '{' ('states' '{'
		//states+=DState (',' states+=DState)* '}' ('events' '{' events+=DStateEvent (',' events+=DStateEvent)* '}')?)?
		//(features+=DFeature | constraints+=DConstraint)* '}'
		public Group getGroup() { return cGroup; }
		
		//abstract?='abstract'?
		public Assignment getAbstractAssignment_0() { return cAbstractAssignment_0; }
		
		//'abstract'
		public Keyword getAbstractAbstractKeyword_0_0() { return cAbstractAbstractKeyword_0_0; }
		
		//(root?='root'? origin=DEntityOriginGeneric | root?='main'? ('physical' origin=DEntityOriginObject // validation: cannot be abstract
		//| 'virtual' origin=DEntityOriginConcept | origin=DEntityOriginRelationship))
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//root?='root'? origin=DEntityOriginGeneric
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//root?='root'?
		public Assignment getRootAssignment_1_0_0() { return cRootAssignment_1_0_0; }
		
		//'root'
		public Keyword getRootRootKeyword_1_0_0_0() { return cRootRootKeyword_1_0_0_0; }
		
		//origin=DEntityOriginGeneric
		public Assignment getOriginAssignment_1_0_1() { return cOriginAssignment_1_0_1; }
		
		//DEntityOriginGeneric
		public RuleCall getOriginDEntityOriginGenericEnumRuleCall_1_0_1_0() { return cOriginDEntityOriginGenericEnumRuleCall_1_0_1_0; }
		
		//root?='main'? ('physical' origin=DEntityOriginObject // validation: cannot be abstract
		//| 'virtual' origin=DEntityOriginConcept | origin=DEntityOriginRelationship)
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//root?='main'?
		public Assignment getRootAssignment_1_1_0() { return cRootAssignment_1_1_0; }
		
		//'main'
		public Keyword getRootMainKeyword_1_1_0_0() { return cRootMainKeyword_1_1_0_0; }
		
		//('physical' origin=DEntityOriginObject // validation: cannot be abstract
		//| 'virtual' origin=DEntityOriginConcept | origin=DEntityOriginRelationship)
		public Alternatives getAlternatives_1_1_1() { return cAlternatives_1_1_1; }
		
		//'physical' origin=DEntityOriginObject
		public Group getGroup_1_1_1_0() { return cGroup_1_1_1_0; }
		
		//'physical'
		public Keyword getPhysicalKeyword_1_1_1_0_0() { return cPhysicalKeyword_1_1_1_0_0; }
		
		//origin=DEntityOriginObject
		public Assignment getOriginAssignment_1_1_1_0_1() { return cOriginAssignment_1_1_1_0_1; }
		
		//DEntityOriginObject
		public RuleCall getOriginDEntityOriginObjectEnumRuleCall_1_1_1_0_1_0() { return cOriginDEntityOriginObjectEnumRuleCall_1_1_1_0_1_0; }
		
		//'virtual' origin=DEntityOriginConcept
		public Group getGroup_1_1_1_1() { return cGroup_1_1_1_1; }
		
		//'virtual'
		public Keyword getVirtualKeyword_1_1_1_1_0() { return cVirtualKeyword_1_1_1_1_0; }
		
		//origin=DEntityOriginConcept
		public Assignment getOriginAssignment_1_1_1_1_1() { return cOriginAssignment_1_1_1_1_1; }
		
		//DEntityOriginConcept
		public RuleCall getOriginDEntityOriginConceptEnumRuleCall_1_1_1_1_1_0() { return cOriginDEntityOriginConceptEnumRuleCall_1_1_1_1_1_0; }
		
		//origin=DEntityOriginRelationship
		public Assignment getOriginAssignment_1_1_1_2() { return cOriginAssignment_1_1_1_2; }
		
		//DEntityOriginRelationship
		public RuleCall getOriginDEntityOriginRelationshipEnumRuleCall_1_1_1_2_0() { return cOriginDEntityOriginRelationshipEnumRuleCall_1_1_1_2_0; }
		
		//DComplexType
		public RuleCall getDComplexTypeParserRuleCall_2() { return cDComplexTypeParserRuleCall_2; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//('states' '{' states+=DState (',' states+=DState)* '}' ('events' '{' events+=DStateEvent (',' events+=DStateEvent)*
		//'}')?)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'states'
		public Keyword getStatesKeyword_4_0() { return cStatesKeyword_4_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4_1() { return cLeftCurlyBracketKeyword_4_1; }
		
		//states+=DState
		public Assignment getStatesAssignment_4_2() { return cStatesAssignment_4_2; }
		
		//DState
		public RuleCall getStatesDStateParserRuleCall_4_2_0() { return cStatesDStateParserRuleCall_4_2_0; }
		
		//(',' states+=DState)*
		public Group getGroup_4_3() { return cGroup_4_3; }
		
		//','
		public Keyword getCommaKeyword_4_3_0() { return cCommaKeyword_4_3_0; }
		
		//states+=DState
		public Assignment getStatesAssignment_4_3_1() { return cStatesAssignment_4_3_1; }
		
		//DState
		public RuleCall getStatesDStateParserRuleCall_4_3_1_0() { return cStatesDStateParserRuleCall_4_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4_4() { return cRightCurlyBracketKeyword_4_4; }
		
		//('events' '{' events+=DStateEvent (',' events+=DStateEvent)* '}')?
		public Group getGroup_4_5() { return cGroup_4_5; }
		
		//'events'
		public Keyword getEventsKeyword_4_5_0() { return cEventsKeyword_4_5_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4_5_1() { return cLeftCurlyBracketKeyword_4_5_1; }
		
		//events+=DStateEvent
		public Assignment getEventsAssignment_4_5_2() { return cEventsAssignment_4_5_2; }
		
		//DStateEvent
		public RuleCall getEventsDStateEventParserRuleCall_4_5_2_0() { return cEventsDStateEventParserRuleCall_4_5_2_0; }
		
		//(',' events+=DStateEvent)*
		public Group getGroup_4_5_3() { return cGroup_4_5_3; }
		
		//','
		public Keyword getCommaKeyword_4_5_3_0() { return cCommaKeyword_4_5_3_0; }
		
		//events+=DStateEvent
		public Assignment getEventsAssignment_4_5_3_1() { return cEventsAssignment_4_5_3_1; }
		
		//DStateEvent
		public RuleCall getEventsDStateEventParserRuleCall_4_5_3_1_0() { return cEventsDStateEventParserRuleCall_4_5_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4_5_4() { return cRightCurlyBracketKeyword_4_5_4; }
		
		//(features+=DFeature | constraints+=DConstraint)*
		public Alternatives getAlternatives_5() { return cAlternatives_5; }
		
		//features+=DFeature
		public Assignment getFeaturesAssignment_5_0() { return cFeaturesAssignment_5_0; }
		
		//DFeature
		public RuleCall getFeaturesDFeatureParserRuleCall_5_0_0() { return cFeaturesDFeatureParserRuleCall_5_0_0; }
		
		//constraints+=DConstraint
		public Assignment getConstraintsAssignment_5_1() { return cConstraintsAssignment_5_1; }
		
		//DConstraint
		public RuleCall getConstraintsDConstraintParserRuleCall_5_1_0() { return cConstraintsDConstraintParserRuleCall_5_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class DStateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.dim.Dim.DState");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//DState:
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class DStateEventElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.dim.Dim.DStateEvent");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//DStateEvent:
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class DDetailTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.dim.Dim.DDetailType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAbstractAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cAbstractAbstractKeyword_0_0 = (Keyword)cAbstractAssignment_0.eContents().get(0);
		private final Keyword cDetailKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cDComplexTypeParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Assignment cFeaturesAssignment_4_0 = (Assignment)cAlternatives_4.eContents().get(0);
		private final RuleCall cFeaturesDFeatureParserRuleCall_4_0_0 = (RuleCall)cFeaturesAssignment_4_0.eContents().get(0);
		private final Assignment cConstraintsAssignment_4_1 = (Assignment)cAlternatives_4.eContents().get(1);
		private final RuleCall cConstraintsDConstraintParserRuleCall_4_1_0 = (RuleCall)cConstraintsAssignment_4_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//DDetailType:
		//	abstract?='abstract'?
		//	'detail'
		//	DComplexType
		//	'{' (features+=DFeature | constraints+=DConstraint)*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//abstract?='abstract'? 'detail' DComplexType '{' (features+=DFeature | constraints+=DConstraint)* '}'
		public Group getGroup() { return cGroup; }
		
		//abstract?='abstract'?
		public Assignment getAbstractAssignment_0() { return cAbstractAssignment_0; }
		
		//'abstract'
		public Keyword getAbstractAbstractKeyword_0_0() { return cAbstractAbstractKeyword_0_0; }
		
		//'detail'
		public Keyword getDetailKeyword_1() { return cDetailKeyword_1; }
		
		//DComplexType
		public RuleCall getDComplexTypeParserRuleCall_2() { return cDComplexTypeParserRuleCall_2; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//(features+=DFeature | constraints+=DConstraint)*
		public Alternatives getAlternatives_4() { return cAlternatives_4; }
		
		//features+=DFeature
		public Assignment getFeaturesAssignment_4_0() { return cFeaturesAssignment_4_0; }
		
		//DFeature
		public RuleCall getFeaturesDFeatureParserRuleCall_4_0_0() { return cFeaturesDFeatureParserRuleCall_4_0_0; }
		
		//constraints+=DConstraint
		public Assignment getConstraintsAssignment_4_1() { return cConstraintsAssignment_4_1; }
		
		//DConstraint
		public RuleCall getConstraintsDConstraintParserRuleCall_4_1_0() { return cConstraintsDConstraintParserRuleCall_4_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class DComplexTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.dim.Dim.DComplexType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cAliasKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cAliasesAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cAliasesIDTerminalRuleCall_1_1_0 = (RuleCall)cAliasesAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cExtendsKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cSuperTypeAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cSuperTypeDComplexTypeCrossReference_2_1_0 = (CrossReference)cSuperTypeAssignment_2_1.eContents().get(0);
		private final RuleCall cSuperTypeDComplexTypeIDTerminalRuleCall_2_1_0_1 = (RuleCall)cSuperTypeDComplexTypeCrossReference_2_1_0.eContents().get(1);
		private final Assignment cDescriptionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDescriptionDRichTextParserRuleCall_3_0 = (RuleCall)cDescriptionAssignment_3.eContents().get(0);
		
		//fragment DComplexType:
		//	name=ID ('alias' aliases+=ID)* ('extends' superType=[DComplexType])?
		//	description=DRichText?;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID ('alias' aliases+=ID)* ('extends' superType=[DComplexType])? description=DRichText?
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//('alias' aliases+=ID)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'alias'
		public Keyword getAliasKeyword_1_0() { return cAliasKeyword_1_0; }
		
		//aliases+=ID
		public Assignment getAliasesAssignment_1_1() { return cAliasesAssignment_1_1; }
		
		//ID
		public RuleCall getAliasesIDTerminalRuleCall_1_1_0() { return cAliasesIDTerminalRuleCall_1_1_0; }
		
		//('extends' superType=[DComplexType])?
		public Group getGroup_2() { return cGroup_2; }
		
		//'extends'
		public Keyword getExtendsKeyword_2_0() { return cExtendsKeyword_2_0; }
		
		//superType=[DComplexType]
		public Assignment getSuperTypeAssignment_2_1() { return cSuperTypeAssignment_2_1; }
		
		//[DComplexType]
		public CrossReference getSuperTypeDComplexTypeCrossReference_2_1_0() { return cSuperTypeDComplexTypeCrossReference_2_1_0; }
		
		//ID
		public RuleCall getSuperTypeDComplexTypeIDTerminalRuleCall_2_1_0_1() { return cSuperTypeDComplexTypeIDTerminalRuleCall_2_1_0_1; }
		
		//description=DRichText?
		public Assignment getDescriptionAssignment_3() { return cDescriptionAssignment_3; }
		
		//DRichText
		public RuleCall getDescriptionDRichTextParserRuleCall_3_0() { return cDescriptionDRichTextParserRuleCall_3_0; }
	}
	public class DFeatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.dim.Dim.DFeature");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDAssociationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDAttributeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cDQueryParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//DFeature:
		//	DAssociation | DAttribute | DQuery;
		@Override public ParserRule getRule() { return rule; }
		
		//DAssociation | DAttribute | DQuery
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//DAssociation
		public RuleCall getDAssociationParserRuleCall_0() { return cDAssociationParserRuleCall_0; }
		
		//DAttribute
		public RuleCall getDAttributeParserRuleCall_1() { return cDAttributeParserRuleCall_1; }
		
		//DQuery
		public RuleCall getDQueryParserRuleCall_2() { return cDQueryParserRuleCall_2; }
	}
	public class DAssociationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.dim.Dim.DAssociation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDerivedAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cDerivedDerivedKeyword_0_0 = (Keyword)cDerivedAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cAliasKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cAliasesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cAliasesIDTerminalRuleCall_2_1_0 = (RuleCall)cAliasesAssignment_2_1.eContents().get(0);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Assignment cKindAssignment_3_0 = (Assignment)cAlternatives_3.eContents().get(0);
		private final RuleCall cKindDAssociationKindEnumRuleCall_3_0_0 = (RuleCall)cKindAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cAlternatives_3.eContents().get(1);
		private final Assignment cKindAssignment_3_1_0 = (Assignment)cGroup_3_1.eContents().get(0);
		private final RuleCall cKindDAssociationKindInverseEnumRuleCall_3_1_0_0 = (RuleCall)cKindAssignment_3_1_0.eContents().get(0);
		private final Keyword cContainsKeyword_3_1_1 = (Keyword)cGroup_3_1.eContents().get(1);
		private final Assignment cTypeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cTypeDEntityTypeCrossReference_4_0 = (CrossReference)cTypeAssignment_4.eContents().get(0);
		private final RuleCall cTypeDEntityTypeIDTerminalRuleCall_4_0_1 = (RuleCall)cTypeDEntityTypeCrossReference_4_0.eContents().get(1);
		private final Assignment cMultiplicityAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cMultiplicityDMultiplicityParserRuleCall_5_0 = (RuleCall)cMultiplicityAssignment_5.eContents().get(0);
		private final Assignment cDescriptionAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cDescriptionDRichTextParserRuleCall_6_0 = (RuleCall)cDescriptionAssignment_6.eContents().get(0);
		
		//DAssociation:
		//	derived?='derived'?
		//	name=ID ('alias' aliases+=ID)* (kind=DAssociationKind | kind=DAssociationKindInverse "contains") type=[DEntityType]
		//	multiplicity=DMultiplicity?
		//	description=DRichText?;
		@Override public ParserRule getRule() { return rule; }
		
		//derived?='derived'? name=ID ('alias' aliases+=ID)* (kind=DAssociationKind | kind=DAssociationKindInverse "contains")
		//type=[DEntityType] multiplicity=DMultiplicity? description=DRichText?
		public Group getGroup() { return cGroup; }
		
		//derived?='derived'?
		public Assignment getDerivedAssignment_0() { return cDerivedAssignment_0; }
		
		//'derived'
		public Keyword getDerivedDerivedKeyword_0_0() { return cDerivedDerivedKeyword_0_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//('alias' aliases+=ID)*
		public Group getGroup_2() { return cGroup_2; }
		
		//'alias'
		public Keyword getAliasKeyword_2_0() { return cAliasKeyword_2_0; }
		
		//aliases+=ID
		public Assignment getAliasesAssignment_2_1() { return cAliasesAssignment_2_1; }
		
		//ID
		public RuleCall getAliasesIDTerminalRuleCall_2_1_0() { return cAliasesIDTerminalRuleCall_2_1_0; }
		
		//(kind=DAssociationKind | kind=DAssociationKindInverse "contains")
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//kind=DAssociationKind
		public Assignment getKindAssignment_3_0() { return cKindAssignment_3_0; }
		
		//DAssociationKind
		public RuleCall getKindDAssociationKindEnumRuleCall_3_0_0() { return cKindDAssociationKindEnumRuleCall_3_0_0; }
		
		//kind=DAssociationKindInverse "contains"
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//kind=DAssociationKindInverse
		public Assignment getKindAssignment_3_1_0() { return cKindAssignment_3_1_0; }
		
		//DAssociationKindInverse
		public RuleCall getKindDAssociationKindInverseEnumRuleCall_3_1_0_0() { return cKindDAssociationKindInverseEnumRuleCall_3_1_0_0; }
		
		//"contains"
		public Keyword getContainsKeyword_3_1_1() { return cContainsKeyword_3_1_1; }
		
		//type=[DEntityType]
		public Assignment getTypeAssignment_4() { return cTypeAssignment_4; }
		
		//[DEntityType]
		public CrossReference getTypeDEntityTypeCrossReference_4_0() { return cTypeDEntityTypeCrossReference_4_0; }
		
		//ID
		public RuleCall getTypeDEntityTypeIDTerminalRuleCall_4_0_1() { return cTypeDEntityTypeIDTerminalRuleCall_4_0_1; }
		
		//multiplicity=DMultiplicity?
		public Assignment getMultiplicityAssignment_5() { return cMultiplicityAssignment_5; }
		
		//DMultiplicity
		public RuleCall getMultiplicityDMultiplicityParserRuleCall_5_0() { return cMultiplicityDMultiplicityParserRuleCall_5_0; }
		
		//description=DRichText?
		public Assignment getDescriptionAssignment_6() { return cDescriptionAssignment_6; }
		
		//DRichText
		public RuleCall getDescriptionDRichTextParserRuleCall_6_0() { return cDescriptionDRichTextParserRuleCall_6_0; }
	}
	public class DAttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.dim.Dim.DAttribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDetailAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cDetailDetailKeyword_0_0 = (Keyword)cDetailAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_1_0_0 = (RuleCall)cNameAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cAliasKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cAliasesAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cAliasesIDTerminalRuleCall_1_1_1_0 = (RuleCall)cAliasesAssignment_1_1_1.eContents().get(0);
		private final Keyword cColonKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cTypeAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final CrossReference cTypeDTypeCrossReference_1_3_0 = (CrossReference)cTypeAssignment_1_3.eContents().get(0);
		private final RuleCall cTypeDTypeIDTerminalRuleCall_1_3_0_1 = (RuleCall)cTypeDTypeCrossReference_1_3_0.eContents().get(1);
		private final Assignment cMultiplicityAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cMultiplicityDMultiplicityParserRuleCall_2_0 = (RuleCall)cMultiplicityAssignment_2.eContents().get(0);
		private final Assignment cKeyAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Keyword cKeyKeyKeyword_3_0 = (Keyword)cKeyAssignment_3.eContents().get(0);
		private final Assignment cDescriptionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cDescriptionDRichTextParserRuleCall_4_0 = (RuleCall)cDescriptionAssignment_4.eContents().get(0);
		
		//DAttribute:
		//	detail?='detail'? (name=ID ('alias' aliases+=ID)*
		//	':'
		//	type=[DType]) multiplicity=DMultiplicity?
		//	key?='key'?
		//	description=DRichText?;
		@Override public ParserRule getRule() { return rule; }
		
		//detail?='detail'? (name=ID ('alias' aliases+=ID)* ':' type=[DType]) multiplicity=DMultiplicity? key?='key'?
		//description=DRichText?
		public Group getGroup() { return cGroup; }
		
		//detail?='detail'?
		public Assignment getDetailAssignment_0() { return cDetailAssignment_0; }
		
		//'detail'
		public Keyword getDetailDetailKeyword_0_0() { return cDetailDetailKeyword_0_0; }
		
		//(name=ID ('alias' aliases+=ID)* ':' type=[DType])
		public Group getGroup_1() { return cGroup_1; }
		
		//name=ID
		public Assignment getNameAssignment_1_0() { return cNameAssignment_1_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0_0() { return cNameIDTerminalRuleCall_1_0_0; }
		
		//('alias' aliases+=ID)*
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//'alias'
		public Keyword getAliasKeyword_1_1_0() { return cAliasKeyword_1_1_0; }
		
		//aliases+=ID
		public Assignment getAliasesAssignment_1_1_1() { return cAliasesAssignment_1_1_1; }
		
		//ID
		public RuleCall getAliasesIDTerminalRuleCall_1_1_1_0() { return cAliasesIDTerminalRuleCall_1_1_1_0; }
		
		//':'
		public Keyword getColonKeyword_1_2() { return cColonKeyword_1_2; }
		
		//type=[DType]
		public Assignment getTypeAssignment_1_3() { return cTypeAssignment_1_3; }
		
		//[DType]
		public CrossReference getTypeDTypeCrossReference_1_3_0() { return cTypeDTypeCrossReference_1_3_0; }
		
		//ID
		public RuleCall getTypeDTypeIDTerminalRuleCall_1_3_0_1() { return cTypeDTypeIDTerminalRuleCall_1_3_0_1; }
		
		//multiplicity=DMultiplicity?
		public Assignment getMultiplicityAssignment_2() { return cMultiplicityAssignment_2; }
		
		//DMultiplicity
		public RuleCall getMultiplicityDMultiplicityParserRuleCall_2_0() { return cMultiplicityDMultiplicityParserRuleCall_2_0; }
		
		//key?='key'?
		public Assignment getKeyAssignment_3() { return cKeyAssignment_3; }
		
		//'key'
		public Keyword getKeyKeyKeyword_3_0() { return cKeyKeyKeyword_3_0; }
		
		//description=DRichText?
		public Assignment getDescriptionAssignment_4() { return cDescriptionAssignment_4; }
		
		//DRichText
		public RuleCall getDescriptionDRichTextParserRuleCall_4_0() { return cDescriptionDRichTextParserRuleCall_4_0; }
	}
	public class DQueryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.dim.Dim.DQuery");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cAliasKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cAliasesAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cAliasesIDTerminalRuleCall_1_1_0 = (RuleCall)cAliasesAssignment_1_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cParametersAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cParametersDQueryParameterParserRuleCall_3_0_0 = (RuleCall)cParametersAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cParametersAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cParametersDQueryParameterParserRuleCall_3_1_1_0 = (RuleCall)cParametersAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cColonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cTypeAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final CrossReference cTypeDTypeCrossReference_6_0 = (CrossReference)cTypeAssignment_6.eContents().get(0);
		private final RuleCall cTypeDTypeIDTerminalRuleCall_6_0_1 = (RuleCall)cTypeDTypeCrossReference_6_0.eContents().get(1);
		private final Assignment cMultiplicityAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cMultiplicityDMultiplicityParserRuleCall_7_0 = (RuleCall)cMultiplicityAssignment_7.eContents().get(0);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cReturnsKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Assignment cReturnsAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final RuleCall cReturnsDExpressionParserRuleCall_8_1_0 = (RuleCall)cReturnsAssignment_8_1.eContents().get(0);
		private final Assignment cDescriptionAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cDescriptionDRichTextParserRuleCall_9_0 = (RuleCall)cDescriptionAssignment_9.eContents().get(0);
		
		//DQuery:
		//	name=ID ('alias' aliases+=ID)*
		//	'(' (parameters+=DQueryParameter ("," parameters+=DQueryParameter)*)? ')'
		//	':'
		//	type=[DType] multiplicity=DMultiplicity? ('returns' ^returns=DExpression)?
		//	description=DRichText?;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID ('alias' aliases+=ID)* '(' (parameters+=DQueryParameter ("," parameters+=DQueryParameter)*)? ')' ':'
		//type=[DType] multiplicity=DMultiplicity? ('returns' ^returns=DExpression)? description=DRichText?
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//('alias' aliases+=ID)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'alias'
		public Keyword getAliasKeyword_1_0() { return cAliasKeyword_1_0; }
		
		//aliases+=ID
		public Assignment getAliasesAssignment_1_1() { return cAliasesAssignment_1_1; }
		
		//ID
		public RuleCall getAliasesIDTerminalRuleCall_1_1_0() { return cAliasesIDTerminalRuleCall_1_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//(parameters+=DQueryParameter ("," parameters+=DQueryParameter)*)?
		public Group getGroup_3() { return cGroup_3; }
		
		//parameters+=DQueryParameter
		public Assignment getParametersAssignment_3_0() { return cParametersAssignment_3_0; }
		
		//DQueryParameter
		public RuleCall getParametersDQueryParameterParserRuleCall_3_0_0() { return cParametersDQueryParameterParserRuleCall_3_0_0; }
		
		//("," parameters+=DQueryParameter)*
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//","
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }
		
		//parameters+=DQueryParameter
		public Assignment getParametersAssignment_3_1_1() { return cParametersAssignment_3_1_1; }
		
		//DQueryParameter
		public RuleCall getParametersDQueryParameterParserRuleCall_3_1_1_0() { return cParametersDQueryParameterParserRuleCall_3_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
		
		//':'
		public Keyword getColonKeyword_5() { return cColonKeyword_5; }
		
		//type=[DType]
		public Assignment getTypeAssignment_6() { return cTypeAssignment_6; }
		
		//[DType]
		public CrossReference getTypeDTypeCrossReference_6_0() { return cTypeDTypeCrossReference_6_0; }
		
		//ID
		public RuleCall getTypeDTypeIDTerminalRuleCall_6_0_1() { return cTypeDTypeIDTerminalRuleCall_6_0_1; }
		
		//multiplicity=DMultiplicity?
		public Assignment getMultiplicityAssignment_7() { return cMultiplicityAssignment_7; }
		
		//DMultiplicity
		public RuleCall getMultiplicityDMultiplicityParserRuleCall_7_0() { return cMultiplicityDMultiplicityParserRuleCall_7_0; }
		
		//('returns' ^returns=DExpression)?
		public Group getGroup_8() { return cGroup_8; }
		
		//'returns'
		public Keyword getReturnsKeyword_8_0() { return cReturnsKeyword_8_0; }
		
		//^returns=DExpression
		public Assignment getReturnsAssignment_8_1() { return cReturnsAssignment_8_1; }
		
		//DExpression
		public RuleCall getReturnsDExpressionParserRuleCall_8_1_0() { return cReturnsDExpressionParserRuleCall_8_1_0; }
		
		//description=DRichText?
		public Assignment getDescriptionAssignment_9() { return cDescriptionAssignment_9; }
		
		//DRichText
		public RuleCall getDescriptionDRichTextParserRuleCall_9_0() { return cDescriptionDRichTextParserRuleCall_9_0; }
	}
	public class DQueryParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.dim.Dim.DQueryParameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cTypeDTypeCrossReference_2_0 = (CrossReference)cTypeAssignment_2.eContents().get(0);
		private final RuleCall cTypeDTypeIDTerminalRuleCall_2_0_1 = (RuleCall)cTypeDTypeCrossReference_2_0.eContents().get(1);
		private final Assignment cMultiplicityAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cMultiplicityDMultiplicityParserRuleCall_3_0 = (RuleCall)cMultiplicityAssignment_3.eContents().get(0);
		private final Assignment cDescriptionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cDescriptionDRichTextParserRuleCall_4_0 = (RuleCall)cDescriptionAssignment_4.eContents().get(0);
		
		//DQueryParameter:
		//	name=ID
		//	':'
		//	type=[DType] multiplicity=DMultiplicity?
		//	description=DRichText?;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID ':' type=[DType] multiplicity=DMultiplicity? description=DRichText?
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//type=[DType]
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//[DType]
		public CrossReference getTypeDTypeCrossReference_2_0() { return cTypeDTypeCrossReference_2_0; }
		
		//ID
		public RuleCall getTypeDTypeIDTerminalRuleCall_2_0_1() { return cTypeDTypeIDTerminalRuleCall_2_0_1; }
		
		//multiplicity=DMultiplicity?
		public Assignment getMultiplicityAssignment_3() { return cMultiplicityAssignment_3; }
		
		//DMultiplicity
		public RuleCall getMultiplicityDMultiplicityParserRuleCall_3_0() { return cMultiplicityDMultiplicityParserRuleCall_3_0; }
		
		//description=DRichText?
		public Assignment getDescriptionAssignment_4() { return cDescriptionAssignment_4; }
		
		//DRichText
		public RuleCall getDescriptionDRichTextParserRuleCall_4_0() { return cDescriptionDRichTextParserRuleCall_4_0; }
	}
	
	public class DEntityOriginGenericElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.dim.Dim.DEntityOriginGeneric");
		private final EnumLiteralDeclaration cGENERIC_ENTITYEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cGENERIC_ENTITYEntityKeyword_0 = (Keyword)cGENERIC_ENTITYEnumLiteralDeclaration.eContents().get(0);
		
		//enum DEntityOriginGeneric returns DEntityOrigin:
		//	GENERIC_ENTITY='entity';
		public EnumRule getRule() { return rule; }
		
		//GENERIC_ENTITY='entity'
		public EnumLiteralDeclaration getGENERIC_ENTITYEnumLiteralDeclaration() { return cGENERIC_ENTITYEnumLiteralDeclaration; }
		
		//'entity'
		public Keyword getGENERIC_ENTITYEntityKeyword_0() { return cGENERIC_ENTITYEntityKeyword_0; }
	}
	public class DEntityOriginObjectElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.dim.Dim.DEntityOriginObject");
		private final EnumLiteralDeclaration cPHYSICAL_OBJECTEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cPHYSICAL_OBJECTObjectKeyword_0 = (Keyword)cPHYSICAL_OBJECTEnumLiteralDeclaration.eContents().get(0);
		
		//enum DEntityOriginObject returns DEntityOrigin:
		//	PHYSICAL_OBJECT='object';
		public EnumRule getRule() { return rule; }
		
		//PHYSICAL_OBJECT='object'
		public EnumLiteralDeclaration getPHYSICAL_OBJECTEnumLiteralDeclaration() { return cPHYSICAL_OBJECTEnumLiteralDeclaration; }
		
		//'object'
		public Keyword getPHYSICAL_OBJECTObjectKeyword_0() { return cPHYSICAL_OBJECTObjectKeyword_0; }
	}
	public class DEntityOriginConceptElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.dim.Dim.DEntityOriginConcept");
		private final EnumLiteralDeclaration cVIRTUAL_CONCEPTEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cVIRTUAL_CONCEPTConceptKeyword_0 = (Keyword)cVIRTUAL_CONCEPTEnumLiteralDeclaration.eContents().get(0);
		
		//enum DEntityOriginConcept returns DEntityOrigin:
		//	VIRTUAL_CONCEPT='concept';
		public EnumRule getRule() { return rule; }
		
		//VIRTUAL_CONCEPT='concept'
		public EnumLiteralDeclaration getVIRTUAL_CONCEPTEnumLiteralDeclaration() { return cVIRTUAL_CONCEPTEnumLiteralDeclaration; }
		
		//'concept'
		public Keyword getVIRTUAL_CONCEPTConceptKeyword_0() { return cVIRTUAL_CONCEPTConceptKeyword_0; }
	}
	public class DEntityOriginRelationshipElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.dim.Dim.DEntityOriginRelationship");
		private final EnumLiteralDeclaration cRELATIONSHIPEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cRELATIONSHIPRelationshipKeyword_0 = (Keyword)cRELATIONSHIPEnumLiteralDeclaration.eContents().get(0);
		
		//enum DEntityOriginRelationship returns DEntityOrigin:
		//	RELATIONSHIP='relationship';
		public EnumRule getRule() { return rule; }
		
		//RELATIONSHIP='relationship'
		public EnumLiteralDeclaration getRELATIONSHIPEnumLiteralDeclaration() { return cRELATIONSHIPEnumLiteralDeclaration; }
		
		//'relationship'
		public Keyword getRELATIONSHIPRelationshipKeyword_0() { return cRELATIONSHIPRelationshipKeyword_0; }
	}
	public class DAssociationKindElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.dim.Dim.DAssociationKind");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cREFERENCEEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cREFERENCEReferencesKeyword_0_0 = (Keyword)cREFERENCEEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cCOMPOSITEEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cCOMPOSITEContainsKeyword_1_0 = (Keyword)cCOMPOSITEEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum DAssociationKind:
		//	REFERENCE="references" | COMPOSITE="contains";
		public EnumRule getRule() { return rule; }
		
		//REFERENCE="references" | COMPOSITE="contains"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//REFERENCE="references"
		public EnumLiteralDeclaration getREFERENCEEnumLiteralDeclaration_0() { return cREFERENCEEnumLiteralDeclaration_0; }
		
		//"references"
		public Keyword getREFERENCEReferencesKeyword_0_0() { return cREFERENCEReferencesKeyword_0_0; }
		
		//COMPOSITE="contains"
		public EnumLiteralDeclaration getCOMPOSITEEnumLiteralDeclaration_1() { return cCOMPOSITEEnumLiteralDeclaration_1; }
		
		//"contains"
		public Keyword getCOMPOSITEContainsKeyword_1_0() { return cCOMPOSITEContainsKeyword_1_0; }
	}
	public class DAssociationKindInverseElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.dim.Dim.DAssociationKindInverse");
		private final EnumLiteralDeclaration cINVERSE_COMPOSITEEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cINVERSE_COMPOSITEInverseKeyword_0 = (Keyword)cINVERSE_COMPOSITEEnumLiteralDeclaration.eContents().get(0);
		
		//enum DAssociationKindInverse returns DAssociationKind:
		//	INVERSE_COMPOSITE="inverse";
		public EnumRule getRule() { return rule; }
		
		//INVERSE_COMPOSITE="inverse"
		public EnumLiteralDeclaration getINVERSE_COMPOSITEEnumLiteralDeclaration() { return cINVERSE_COMPOSITEEnumLiteralDeclaration; }
		
		//"inverse"
		public Keyword getINVERSE_COMPOSITEInverseKeyword_0() { return cINVERSE_COMPOSITEInverseKeyword_0; }
	}
	
	private final DInformationModelElements pDInformationModel;
	private final DAggregateElements pDAggregate;
	private final DTypeElements pDType;
	private final DConstraintElements pDConstraint;
	private final DPrimitiveElements pDPrimitive;
	private final DEnumerationElements pDEnumeration;
	private final DLiteralElements pDLiteral;
	private final DEntityTypeElements pDEntityType;
	private final DEntityOriginGenericElements eDEntityOriginGeneric;
	private final DEntityOriginObjectElements eDEntityOriginObject;
	private final DEntityOriginConceptElements eDEntityOriginConcept;
	private final DEntityOriginRelationshipElements eDEntityOriginRelationship;
	private final DStateElements pDState;
	private final DStateEventElements pDStateEvent;
	private final DDetailTypeElements pDDetailType;
	private final DComplexTypeElements pDComplexType;
	private final DFeatureElements pDFeature;
	private final DAssociationElements pDAssociation;
	private final DAssociationKindElements eDAssociationKind;
	private final DAssociationKindInverseElements eDAssociationKindInverse;
	private final DAttributeElements pDAttribute;
	private final DQueryElements pDQuery;
	private final DQueryParameterElements pDQueryParameter;
	
	private final Grammar grammar;
	
	private final DmxGrammarAccess gaDmx;

	@Inject
	public DimGrammarAccess(GrammarProvider grammarProvider,
			DmxGrammarAccess gaDmx) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaDmx = gaDmx;
		this.pDInformationModel = new DInformationModelElements();
		this.pDAggregate = new DAggregateElements();
		this.pDType = new DTypeElements();
		this.pDConstraint = new DConstraintElements();
		this.pDPrimitive = new DPrimitiveElements();
		this.pDEnumeration = new DEnumerationElements();
		this.pDLiteral = new DLiteralElements();
		this.pDEntityType = new DEntityTypeElements();
		this.eDEntityOriginGeneric = new DEntityOriginGenericElements();
		this.eDEntityOriginObject = new DEntityOriginObjectElements();
		this.eDEntityOriginConcept = new DEntityOriginConceptElements();
		this.eDEntityOriginRelationship = new DEntityOriginRelationshipElements();
		this.pDState = new DStateElements();
		this.pDStateEvent = new DStateEventElements();
		this.pDDetailType = new DDetailTypeElements();
		this.pDComplexType = new DComplexTypeElements();
		this.pDFeature = new DFeatureElements();
		this.pDAssociation = new DAssociationElements();
		this.eDAssociationKind = new DAssociationKindElements();
		this.eDAssociationKindInverse = new DAssociationKindInverseElements();
		this.pDAttribute = new DAttributeElements();
		this.pDQuery = new DQueryElements();
		this.pDQueryParameter = new DQueryParameterElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("com.mimacom.ddd.dm.dim.Dim".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public DmxGrammarAccess getDmxGrammarAccess() {
		return gaDmx;
	}

	
	///*
	// * MODEL STRUCTURE
	// */ DInformationModel:
	//	imports+=DImport*
	//	'domain'
	//	domain=DQualifiedName
	//	'information' 'model'
	//	name=ID ('alias' aliases+=ID)*
	//	description=DRichText? (types+=DType | aggregates+=DAggregate)*;
	public DInformationModelElements getDInformationModelAccess() {
		return pDInformationModel;
	}
	
	public ParserRule getDInformationModelRule() {
		return getDInformationModelAccess().getRule();
	}
	
	//DAggregate:
	//	{DAggregate}
	//	'component'
	//	name=ID
	//	description=DRichText?
	//	'{' ('query' features+=DQuery)*
	//	types+=DType*
	//	'}';
	public DAggregateElements getDAggregateAccess() {
		return pDAggregate;
	}
	
	public ParserRule getDAggregateRule() {
		return getDAggregateAccess().getRule();
	}
	
	///*
	// * TYPES
	// */ DType:
	//	DPrimitive | DEnumeration | DEntityType | DDetailType;
	public DTypeElements getDTypeAccess() {
		return pDType;
	}
	
	public ParserRule getDTypeRule() {
		return getDTypeAccess().getRule();
	}
	
	//DConstraint DNamedPredicate:
	//	'constraint'
	//	name=ID ('alias' aliases+=ID)*
	//	':'
	//	predicate=DExpression
	//	description=DRichText?;
	public DConstraintElements getDConstraintAccess() {
		return pDConstraint;
	}
	
	public ParserRule getDConstraintRule() {
		return getDConstraintAccess().getRule();
	}
	
	//DPrimitive:
	//	'primitive'
	//	name=ID ('alias' aliases+=ID)*
	//	'redefines' redefines=[DmxArchetype] description=DRichText? ('{'
	//	constraints+=DConstraint+
	//	'}')?;
	public DPrimitiveElements getDPrimitiveAccess() {
		return pDPrimitive;
	}
	
	public ParserRule getDPrimitiveRule() {
		return getDPrimitiveAccess().getRule();
	}
	
	//DEnumeration:
	//	'enumeration'
	//	name=ID ('alias' aliases+=ID)*
	//	description=DRichText?
	//	'{' (literals+=DLiteral (',' literals+=DLiteral)*)?
	//	constraints+=DConstraint*
	//	'}';
	public DEnumerationElements getDEnumerationAccess() {
		return pDEnumeration;
	}
	
	public ParserRule getDEnumerationRule() {
		return getDEnumerationAccess().getRule();
	}
	
	//DLiteral:
	//	name=ID ('alias' aliases+=ID)*
	//	description=DRichText?;
	public DLiteralElements getDLiteralAccess() {
		return pDLiteral;
	}
	
	public ParserRule getDLiteralRule() {
		return getDLiteralAccess().getRule();
	}
	
	//DEntityType:
	//	abstract?='abstract'? (root?='root'?
	//	origin=DEntityOriginGeneric
	//	| root?='main'? ('physical' origin=DEntityOriginObject // validation: cannot be abstract
	//	| 'virtual' origin=DEntityOriginConcept
	//	| origin=DEntityOriginRelationship)) DComplexType
	//	'{' ('states'
	//	'{'
	//	states+=DState (',' states+=DState)*
	//	'}' ('events'
	//	'{'
	//	events+=DStateEvent (',' events+=DStateEvent)*
	//	'}')?)? (features+=DFeature | constraints+=DConstraint)*
	//	'}';
	public DEntityTypeElements getDEntityTypeAccess() {
		return pDEntityType;
	}
	
	public ParserRule getDEntityTypeRule() {
		return getDEntityTypeAccess().getRule();
	}
	
	//enum DEntityOriginGeneric returns DEntityOrigin:
	//	GENERIC_ENTITY='entity';
	public DEntityOriginGenericElements getDEntityOriginGenericAccess() {
		return eDEntityOriginGeneric;
	}
	
	public EnumRule getDEntityOriginGenericRule() {
		return getDEntityOriginGenericAccess().getRule();
	}
	
	//enum DEntityOriginObject returns DEntityOrigin:
	//	PHYSICAL_OBJECT='object';
	public DEntityOriginObjectElements getDEntityOriginObjectAccess() {
		return eDEntityOriginObject;
	}
	
	public EnumRule getDEntityOriginObjectRule() {
		return getDEntityOriginObjectAccess().getRule();
	}
	
	//enum DEntityOriginConcept returns DEntityOrigin:
	//	VIRTUAL_CONCEPT='concept';
	public DEntityOriginConceptElements getDEntityOriginConceptAccess() {
		return eDEntityOriginConcept;
	}
	
	public EnumRule getDEntityOriginConceptRule() {
		return getDEntityOriginConceptAccess().getRule();
	}
	
	//enum DEntityOriginRelationship returns DEntityOrigin:
	//	RELATIONSHIP='relationship';
	public DEntityOriginRelationshipElements getDEntityOriginRelationshipAccess() {
		return eDEntityOriginRelationship;
	}
	
	public EnumRule getDEntityOriginRelationshipRule() {
		return getDEntityOriginRelationshipAccess().getRule();
	}
	
	//DState:
	//	name=ID;
	public DStateElements getDStateAccess() {
		return pDState;
	}
	
	public ParserRule getDStateRule() {
		return getDStateAccess().getRule();
	}
	
	//DStateEvent:
	//	name=ID;
	public DStateEventElements getDStateEventAccess() {
		return pDStateEvent;
	}
	
	public ParserRule getDStateEventRule() {
		return getDStateEventAccess().getRule();
	}
	
	//DDetailType:
	//	abstract?='abstract'?
	//	'detail'
	//	DComplexType
	//	'{' (features+=DFeature | constraints+=DConstraint)*
	//	'}';
	public DDetailTypeElements getDDetailTypeAccess() {
		return pDDetailType;
	}
	
	public ParserRule getDDetailTypeRule() {
		return getDDetailTypeAccess().getRule();
	}
	
	//fragment DComplexType:
	//	name=ID ('alias' aliases+=ID)* ('extends' superType=[DComplexType])?
	//	description=DRichText?;
	public DComplexTypeElements getDComplexTypeAccess() {
		return pDComplexType;
	}
	
	public ParserRule getDComplexTypeRule() {
		return getDComplexTypeAccess().getRule();
	}
	
	//DFeature:
	//	DAssociation | DAttribute | DQuery;
	public DFeatureElements getDFeatureAccess() {
		return pDFeature;
	}
	
	public ParserRule getDFeatureRule() {
		return getDFeatureAccess().getRule();
	}
	
	//DAssociation:
	//	derived?='derived'?
	//	name=ID ('alias' aliases+=ID)* (kind=DAssociationKind | kind=DAssociationKindInverse "contains") type=[DEntityType]
	//	multiplicity=DMultiplicity?
	//	description=DRichText?;
	public DAssociationElements getDAssociationAccess() {
		return pDAssociation;
	}
	
	public ParserRule getDAssociationRule() {
		return getDAssociationAccess().getRule();
	}
	
	//enum DAssociationKind:
	//	REFERENCE="references" | COMPOSITE="contains";
	public DAssociationKindElements getDAssociationKindAccess() {
		return eDAssociationKind;
	}
	
	public EnumRule getDAssociationKindRule() {
		return getDAssociationKindAccess().getRule();
	}
	
	//enum DAssociationKindInverse returns DAssociationKind:
	//	INVERSE_COMPOSITE="inverse";
	public DAssociationKindInverseElements getDAssociationKindInverseAccess() {
		return eDAssociationKindInverse;
	}
	
	public EnumRule getDAssociationKindInverseRule() {
		return getDAssociationKindInverseAccess().getRule();
	}
	
	//DAttribute:
	//	detail?='detail'? (name=ID ('alias' aliases+=ID)*
	//	':'
	//	type=[DType]) multiplicity=DMultiplicity?
	//	key?='key'?
	//	description=DRichText?;
	public DAttributeElements getDAttributeAccess() {
		return pDAttribute;
	}
	
	public ParserRule getDAttributeRule() {
		return getDAttributeAccess().getRule();
	}
	
	//DQuery:
	//	name=ID ('alias' aliases+=ID)*
	//	'(' (parameters+=DQueryParameter ("," parameters+=DQueryParameter)*)? ')'
	//	':'
	//	type=[DType] multiplicity=DMultiplicity? ('returns' ^returns=DExpression)?
	//	description=DRichText?;
	public DQueryElements getDQueryAccess() {
		return pDQuery;
	}
	
	public ParserRule getDQueryRule() {
		return getDQueryAccess().getRule();
	}
	
	//DQueryParameter:
	//	name=ID
	//	':'
	//	type=[DType] multiplicity=DMultiplicity?
	//	description=DRichText?;
	public DQueryParameterElements getDQueryParameterAccess() {
		return pDQueryParameter;
	}
	
	public ParserRule getDQueryParameterRule() {
		return getDQueryParameterAccess().getRule();
	}
	
	//DmxNamespace:
	//	imports+=DImport*
	//	'namespace'
	//	name=DQualifiedName
	//	types+=DmxArchetype*
	//	filters+=DmxFilter*
	//	// For unit-testing purposes:
	//	tests+=DmxTest*;
	public DmxGrammarAccess.DmxNamespaceElements getDmxNamespaceAccess() {
		return gaDmx.getDmxNamespaceAccess();
	}
	
	public ParserRule getDmxNamespaceRule() {
		return getDmxNamespaceAccess().getRule();
	}
	
	//DImport:
	//	'import' importedNamespace=DQualifiedNameWithWildcard;
	public DmxGrammarAccess.DImportElements getDImportAccess() {
		return gaDmx.getDImportAccess();
	}
	
	public ParserRule getDImportRule() {
		return getDImportAccess().getRule();
	}
	
	///* 
	// * Testing
	// */ DmxTest:
	//	'test'
	//	name=ID ('context'
	//	context+=DmxTestContext (',' context+=DmxTestContext)*)?
	//	'{'
	//	expr=DExpression
	//	'}';
	public DmxGrammarAccess.DmxTestElements getDmxTestAccess() {
		return gaDmx.getDmxTestAccess();
	}
	
	public ParserRule getDmxTestRule() {
		return getDmxTestAccess().getRule();
	}
	
	//DmxTestContext:
	//	name=ID
	//	':'
	//	type=[DType] multiplicity=DMultiplicity? (':=' (value=DmxLiteralExpression | value=DmxLiteralListExpression))?;
	public DmxGrammarAccess.DmxTestContextElements getDmxTestContextAccess() {
		return gaDmx.getDmxTestContextAccess();
	}
	
	public ParserRule getDmxTestContextRule() {
		return getDmxTestContextAccess().getRule();
	}
	
	//enum DmxBaseType:
	//	VOID | BOOLEAN | NUMBER | TEXT | IDENTIFIER | TIMEPOINT | STATE /*transition*/ | STATE_EVENT | COMPLEX | NOTIFICATION
	//	/*sent* */ | SERVICE /*invoked* */;
	public DmxGrammarAccess.DmxBaseTypeElements getDmxBaseTypeAccess() {
		return gaDmx.getDmxBaseTypeAccess();
	}
	
	public EnumRule getDmxBaseTypeRule() {
		return getDmxBaseTypeAccess().getRule();
	}
	
	//DmxBaseTypeSet:
	//	name=ID
	//	'in'
	//	'(' members+=DmxBaseType (',' members+=DmxBaseType)+ ')';
	public DmxGrammarAccess.DmxBaseTypeSetElements getDmxBaseTypeSetAccess() {
		return gaDmx.getDmxBaseTypeSetAccess();
	}
	
	public ParserRule getDmxBaseTypeSetRule() {
		return getDmxBaseTypeSetAccess().getRule();
	}
	
	//DmxArchetype:
	//	'archetype'
	//	name=ID
	//	'is'
	//	baseType=DmxBaseType
	//	description=DRichText?;
	public DmxGrammarAccess.DmxArchetypeElements getDmxArchetypeAccess() {
		return gaDmx.getDmxArchetypeAccess();
	}
	
	public ParserRule getDmxArchetypeRule() {
		return getDmxArchetypeAccess().getRule();
	}
	
	//DmxFilter:
	//	'filter'
	//	name=ID
	//	'(' (parameters+=DmxFilterParameter (',' parameters+=DmxFilterParameter)*)? ')'
	//	':'
	//	typeDesc=DmxFilterTypeDescriptor ('with' withTypeSet=DmxBaseTypeSet)?;
	public DmxGrammarAccess.DmxFilterElements getDmxFilterAccess() {
		return gaDmx.getDmxFilterAccess();
	}
	
	public ParserRule getDmxFilterRule() {
		return getDmxFilterAccess().getRule();
	}
	
	//DmxFilterTypeDescriptor:
	//	(single=DmxBaseType
	//	| multiple=[DmxBaseTypeSet]) collection?='*'?;
	public DmxGrammarAccess.DmxFilterTypeDescriptorElements getDmxFilterTypeDescriptorAccess() {
		return gaDmx.getDmxFilterTypeDescriptorAccess();
	}
	
	public ParserRule getDmxFilterTypeDescriptorRule() {
		return getDmxFilterTypeDescriptorAccess().getRule();
	}
	
	//DmxFilterParameter:
	//	name=ID
	//	':'
	//	typeDesc=DmxFilterTypeDescriptor;
	public DmxGrammarAccess.DmxFilterParameterElements getDmxFilterParameterAccess() {
		return gaDmx.getDmxFilterParameterAccess();
	}
	
	public ParserRule getDmxFilterParameterRule() {
		return getDmxFilterParameterAccess().getRule();
	}
	
	///*
	// * Expressions
	// */ DExpression:
	//	DmxAssignment | DmxPredicateWithCorrelationVariable | DRichText;
	public DmxGrammarAccess.DExpressionElements getDExpressionAccess() {
		return gaDmx.getDExpressionAccess();
	}
	
	public ParserRule getDExpressionRule() {
		return getDExpressionAccess().getRule();
	}
	
	//DRichText:
	//	segments+=DmxTextOnly
	//	| segments+=DmxTextStart
	//	segments+=DExpression (segments+=DmxTextMiddle segments+=DExpression)*
	//	segments+=DmxTextEnd;
	public DmxGrammarAccess.DRichTextElements getDRichTextAccess() {
		return gaDmx.getDRichTextAccess();
	}
	
	public ParserRule getDRichTextRule() {
		return getDRichTextAccess().getRule();
	}
	
	//DmxTextOnly DTextSegment:
	//	value=PLAIN_TEXT_ONLY;
	public DmxGrammarAccess.DmxTextOnlyElements getDmxTextOnlyAccess() {
		return gaDmx.getDmxTextOnlyAccess();
	}
	
	public ParserRule getDmxTextOnlyRule() {
		return getDmxTextOnlyAccess().getRule();
	}
	
	//DmxTextStart DTextSegment:
	//	value=RICH_TEXT_START;
	public DmxGrammarAccess.DmxTextStartElements getDmxTextStartAccess() {
		return gaDmx.getDmxTextStartAccess();
	}
	
	public ParserRule getDmxTextStartRule() {
		return getDmxTextStartAccess().getRule();
	}
	
	//DmxTextMiddle DTextSegment:
	//	value=RICH_TEXT_MIDDLE;
	public DmxGrammarAccess.DmxTextMiddleElements getDmxTextMiddleAccess() {
		return gaDmx.getDmxTextMiddleAccess();
	}
	
	public ParserRule getDmxTextMiddleRule() {
		return getDmxTextMiddleAccess().getRule();
	}
	
	//DmxTextEnd DTextSegment:
	//	value=RICH_TEXT_END;
	public DmxGrammarAccess.DmxTextEndElements getDmxTextEndAccess() {
		return gaDmx.getDmxTextEndAccess();
	}
	
	public ParserRule getDmxTextEndRule() {
		return getDmxTextEndAccess().getRule();
	}
	
	//DmxNavigableMemberReference DExpression:
	//	DmxPrimaryExpression (=> ({DmxAssignment.precedingNavigationSegment=current} '.'
	//	assignToMember=[DNavigableMember] DmxOpSingleAssign) value=DmxOrExpression
	//	| => ({DmxMemberNavigation.precedingNavigationSegment=current} '.') member=[DNavigableMember] (=>
	//	explicitOperationCall?='(' // => boolean => has 0.n explicit arguments
	//	callArguments=DmxCallArguments
	//	')'
	//	| before?="@before")?)*;
	public DmxGrammarAccess.DmxNavigableMemberReferenceElements getDmxNavigableMemberReferenceAccess() {
		return gaDmx.getDmxNavigableMemberReferenceAccess();
	}
	
	public ParserRule getDmxNavigableMemberReferenceRule() {
		return getDmxNavigableMemberReferenceAccess().getRule();
	}
	
	//DmxCallArguments:
	//	{DmxCallArguments} (arguments+=DmxPredicateWithCorrelationVariable (','
	//	arguments+=DmxPredicateWithCorrelationVariable)*)?;
	public DmxGrammarAccess.DmxCallArgumentsElements getDmxCallArgumentsAccess() {
		return gaDmx.getDmxCallArgumentsAccess();
	}
	
	public ParserRule getDmxCallArgumentsRule() {
		return getDmxCallArgumentsAccess().getRule();
	}
	
	//DmxAssignment DExpression:
	//	{DmxAssignment} assignToMember=[DNavigableMember] DmxOpSingleAssign value=DmxOrExpression;
	public DmxGrammarAccess.DmxAssignmentElements getDmxAssignmentAccess() {
		return gaDmx.getDmxAssignmentAccess();
	}
	
	public ParserRule getDmxAssignmentRule() {
		return getDmxAssignmentAccess().getRule();
	}
	
	//DmxOpSingleAssign:
	//	':=';
	public DmxGrammarAccess.DmxOpSingleAssignElements getDmxOpSingleAssignAccess() {
		return gaDmx.getDmxOpSingleAssignAccess();
	}
	
	public ParserRule getDmxOpSingleAssignRule() {
		return getDmxOpSingleAssignAccess().getRule();
	}
	
	//DmxPredicateWithCorrelationVariable DExpression:
	//	{DmxPredicateWithCorrelationVariable} correlationVariable=DmxCorrelationVariable
	//	'|'
	//	predicate=DmxOrExpression
	//	| DmxOrExpression;
	public DmxGrammarAccess.DmxPredicateWithCorrelationVariableElements getDmxPredicateWithCorrelationVariableAccess() {
		return gaDmx.getDmxPredicateWithCorrelationVariableAccess();
	}
	
	public ParserRule getDmxPredicateWithCorrelationVariableRule() {
		return getDmxPredicateWithCorrelationVariableAccess().getRule();
	}
	
	//DmxCorrelationVariable:
	//	name=ID;
	public DmxGrammarAccess.DmxCorrelationVariableElements getDmxCorrelationVariableAccess() {
		return gaDmx.getDmxCorrelationVariableAccess();
	}
	
	public ParserRule getDmxCorrelationVariableRule() {
		return getDmxCorrelationVariableAccess().getRule();
	}
	
	////	(':' type=[DType])? => type is always NULL!
	//DmxOrExpression DExpression:
	//	DmxAndExpression (=> ({DmxBinaryOperation.leftOperand=current} operator=DmxOpOr) rightOperand=DmxAndExpression)*;
	public DmxGrammarAccess.DmxOrExpressionElements getDmxOrExpressionAccess() {
		return gaDmx.getDmxOrExpressionAccess();
	}
	
	public ParserRule getDmxOrExpressionRule() {
		return getDmxOrExpressionAccess().getRule();
	}
	
	//enum DmxOpOr returns DmxBinaryOperator:
	//	OR | OR='or' | XOR | XOR='xor';
	public DmxGrammarAccess.DmxOpOrElements getDmxOpOrAccess() {
		return gaDmx.getDmxOpOrAccess();
	}
	
	public EnumRule getDmxOpOrRule() {
		return getDmxOpOrAccess().getRule();
	}
	
	//DmxAndExpression DExpression:
	//	DmxEqualityExpression (=> ({DmxBinaryOperation.leftOperand=current} operator=DmxOpAnd)
	//	rightOperand=DmxEqualityExpression)*;
	public DmxGrammarAccess.DmxAndExpressionElements getDmxAndExpressionAccess() {
		return gaDmx.getDmxAndExpressionAccess();
	}
	
	public ParserRule getDmxAndExpressionRule() {
		return getDmxAndExpressionAccess().getRule();
	}
	
	//enum DmxOpAnd returns DmxBinaryOperator:
	//	AND | AND='and';
	public DmxGrammarAccess.DmxOpAndElements getDmxOpAndAccess() {
		return gaDmx.getDmxOpAndAccess();
	}
	
	public EnumRule getDmxOpAndRule() {
		return getDmxOpAndAccess().getRule();
	}
	
	//DmxEqualityExpression DExpression:
	//	DmxRelationalExpression (=> ({DmxBinaryOperation.leftOperand=current} operator=DmxOpEquality)
	//	rightOperand=DmxRelationalExpression)*;
	public DmxGrammarAccess.DmxEqualityExpressionElements getDmxEqualityExpressionAccess() {
		return gaDmx.getDmxEqualityExpressionAccess();
	}
	
	public ParserRule getDmxEqualityExpressionRule() {
		return getDmxEqualityExpressionAccess().getRule();
	}
	
	//enum DmxOpEquality returns DmxBinaryOperator:
	//	EQUAL='=' | NOT_EQUAL='!=' | NOT_EQUAL='<>';
	public DmxGrammarAccess.DmxOpEqualityElements getDmxOpEqualityAccess() {
		return gaDmx.getDmxOpEqualityAccess();
	}
	
	public EnumRule getDmxOpEqualityRule() {
		return getDmxOpEqualityAccess().getRule();
	}
	
	//DmxRelationalExpression DExpression:
	//	DmxOtherOperatorExpression (=> ({DmxInstanceOfExpression.expression=current} DmxOpInstanceOf) type=[DType] | =>
	//	({DmxBinaryOperation.leftOperand=current} operator=OpCompare) rightOperand=DmxOtherOperatorExpression)*;
	public DmxGrammarAccess.DmxRelationalExpressionElements getDmxRelationalExpressionAccess() {
		return gaDmx.getDmxRelationalExpressionAccess();
	}
	
	public ParserRule getDmxRelationalExpressionRule() {
		return getDmxRelationalExpressionAccess().getRule();
	}
	
	//DmxOpInstanceOf:
	//	'ISA' | 'isa';
	public DmxGrammarAccess.DmxOpInstanceOfElements getDmxOpInstanceOfAccess() {
		return gaDmx.getDmxOpInstanceOfAccess();
	}
	
	public ParserRule getDmxOpInstanceOfRule() {
		return getDmxOpInstanceOfAccess().getRule();
	}
	
	//enum OpCompare returns DmxBinaryOperator:
	//	LESS='<' | LESS_OR_EQUAL='<=' | LESS_OR_EQUAL='≤' | GREATER_OR_EQUAL='>=' | GREATER_OR_EQUAL='≥' | GREATER='>';
	public DmxGrammarAccess.OpCompareElements getOpCompareAccess() {
		return gaDmx.getOpCompareAccess();
	}
	
	public EnumRule getOpCompareRule() {
		return getOpCompareAccess().getRule();
	}
	
	//DmxOtherOperatorExpression DExpression:
	//	DmxAdditiveExpression (=> ({DmxBinaryOperation.leftOperand=current} operator=OpOther)
	//	rightOperand=DmxAdditiveExpression)*;
	public DmxGrammarAccess.DmxOtherOperatorExpressionElements getDmxOtherOperatorExpressionAccess() {
		return gaDmx.getDmxOtherOperatorExpressionAccess();
	}
	
	public ParserRule getDmxOtherOperatorExpressionRule() {
		return getDmxOtherOperatorExpressionAccess().getRule();
	}
	
	//enum OpOther returns DmxBinaryOperator:
	//	IN | IN='in' | UNTIL='..' | SINGLE_ARROW='->' | DOUBLE_ARROW='=>';
	public DmxGrammarAccess.OpOtherElements getOpOtherAccess() {
		return gaDmx.getOpOtherAccess();
	}
	
	public EnumRule getOpOtherRule() {
		return getOpOtherAccess().getRule();
	}
	
	//DmxAdditiveExpression DExpression:
	//	DmxMultiplicativeExpression (=> ({DmxBinaryOperation.leftOperand=current} operator=OpAdd)
	//	rightOperand=DmxMultiplicativeExpression)*;
	public DmxGrammarAccess.DmxAdditiveExpressionElements getDmxAdditiveExpressionAccess() {
		return gaDmx.getDmxAdditiveExpressionAccess();
	}
	
	public ParserRule getDmxAdditiveExpressionRule() {
		return getDmxAdditiveExpressionAccess().getRule();
	}
	
	//enum OpAdd returns DmxBinaryOperator:
	//	ADD='+' | SUBTRACT='-';
	public DmxGrammarAccess.OpAddElements getOpAddAccess() {
		return gaDmx.getOpAddAccess();
	}
	
	public EnumRule getOpAddRule() {
		return getOpAddAccess().getRule();
	}
	
	//DmxMultiplicativeExpression DExpression:
	//	DmxUnaryOperation (=> ({DmxBinaryOperation.leftOperand=current} operator=OpMulti) rightOperand=DmxUnaryOperation)*;
	public DmxGrammarAccess.DmxMultiplicativeExpressionElements getDmxMultiplicativeExpressionAccess() {
		return gaDmx.getDmxMultiplicativeExpressionAccess();
	}
	
	public ParserRule getDmxMultiplicativeExpressionRule() {
		return getDmxMultiplicativeExpressionAccess().getRule();
	}
	
	//enum OpMulti returns DmxBinaryOperator:
	//	MULTIPLY='*' | DIVIDE='/' | POWER='**' | MODULO='%';
	public DmxGrammarAccess.OpMultiElements getOpMultiAccess() {
		return gaDmx.getOpMultiAccess();
	}
	
	public EnumRule getOpMultiRule() {
		return getOpMultiAccess().getRule();
	}
	
	//DmxUnaryOperation DExpression:
	//	{DmxUnaryOperation} operator=OpUnary operand=DmxUnaryOperation
	//	| DmxCastExpression;
	public DmxGrammarAccess.DmxUnaryOperationElements getDmxUnaryOperationAccess() {
		return gaDmx.getDmxUnaryOperationAccess();
	}
	
	public ParserRule getDmxUnaryOperationRule() {
		return getDmxUnaryOperationAccess().getRule();
	}
	
	//enum OpUnary returns DmxUnaryOperator:
	//	PLUS='+' | MINUS='-' | NOT='!' | NOT | NOT='not';
	public DmxGrammarAccess.OpUnaryElements getOpUnaryAccess() {
		return gaDmx.getOpUnaryAccess();
	}
	
	public EnumRule getOpUnaryRule() {
		return getOpUnaryAccess().getRule();
	}
	
	//DmxCastExpression DExpression:
	//	DmxNavigableMemberReference (=> ({DmxCastExpression.target=current} DmxOpCast) type=[DType])?;
	public DmxGrammarAccess.DmxCastExpressionElements getDmxCastExpressionAccess() {
		return gaDmx.getDmxCastExpressionAccess();
	}
	
	public ParserRule getDmxCastExpressionRule() {
		return getDmxCastExpressionAccess().getRule();
	}
	
	//DmxOpCast:
	//	'AS' | 'as';
	public DmxGrammarAccess.DmxOpCastElements getDmxOpCastAccess() {
		return gaDmx.getDmxOpCastAccess();
	}
	
	public ParserRule getDmxOpCastRule() {
		return getDmxOpCastAccess().getRule();
	}
	
	//DmxPrimaryExpression DExpression:
	//	DmxLiteralExpression | DmxParenthesizedExpression | DmxListExpression | DmxFunctionCall | DmxStaticReference |
	//	DmxContextReference | DmxIfExpression;
	public DmxGrammarAccess.DmxPrimaryExpressionElements getDmxPrimaryExpressionAccess() {
		return gaDmx.getDmxPrimaryExpressionAccess();
	}
	
	public ParserRule getDmxPrimaryExpressionRule() {
		return getDmxPrimaryExpressionAccess().getRule();
	}
	
	//DmxLiteralExpression DExpression:
	//	DmxBooleanLiteral | DmxStringLiteral | DmxNaturalLiteral | DmxDecimalLiteral | DmxUndefinedLiteral | DmxEntity |
	//	DmxDetail;
	public DmxGrammarAccess.DmxLiteralExpressionElements getDmxLiteralExpressionAccess() {
		return gaDmx.getDmxLiteralExpressionAccess();
	}
	
	public ParserRule getDmxLiteralExpressionRule() {
		return getDmxLiteralExpressionAccess().getRule();
	}
	
	//DmxParenthesizedExpression DExpression:
	//	'(' DExpression ')';
	public DmxGrammarAccess.DmxParenthesizedExpressionElements getDmxParenthesizedExpressionAccess() {
		return gaDmx.getDmxParenthesizedExpressionAccess();
	}
	
	public ParserRule getDmxParenthesizedExpressionRule() {
		return getDmxParenthesizedExpressionAccess().getRule();
	}
	
	//DmxListExpression DExpression:
	//	{DmxListExpression}
	//	'{' (elements+=DExpression (',' elements+=DExpression)*)?
	//	'}';
	public DmxGrammarAccess.DmxListExpressionElements getDmxListExpressionAccess() {
		return gaDmx.getDmxListExpressionAccess();
	}
	
	public ParserRule getDmxListExpressionRule() {
		return getDmxListExpressionAccess().getRule();
	}
	
	//DmxLiteralListExpression DExpression:
	//	{DmxListExpression}
	//	'{' (elements+=DmxLiteralExpression (',' elements+=DmxLiteralExpression)*)?
	//	'}';
	public DmxGrammarAccess.DmxLiteralListExpressionElements getDmxLiteralListExpressionAccess() {
		return gaDmx.getDmxLiteralListExpressionAccess();
	}
	
	public ParserRule getDmxLiteralListExpressionRule() {
		return getDmxLiteralListExpressionAccess().getRule();
	}
	
	//DmxFunctionCall DExpression:
	//	{DmxFunctionCall} function=[DmxFilter]
	//	'('
	//	callArguments=DmxFunctionCallArguments
	//	')';
	public DmxGrammarAccess.DmxFunctionCallElements getDmxFunctionCallAccess() {
		return gaDmx.getDmxFunctionCallAccess();
	}
	
	public ParserRule getDmxFunctionCallRule() {
		return getDmxFunctionCallAccess().getRule();
	}
	
	//DmxFunctionCallArguments DmxCallArguments:
	//	{DmxCallArguments} (arguments+=DExpression (',' arguments+=DExpression)*)?;
	public DmxGrammarAccess.DmxFunctionCallArgumentsElements getDmxFunctionCallArgumentsAccess() {
		return gaDmx.getDmxFunctionCallArgumentsAccess();
	}
	
	public ParserRule getDmxFunctionCallArgumentsRule() {
		return getDmxFunctionCallArgumentsAccess().getRule();
	}
	
	//DmxEntity:
	//	'entity'
	//	DmxComplexObject;
	public DmxGrammarAccess.DmxEntityElements getDmxEntityAccess() {
		return gaDmx.getDmxEntityAccess();
	}
	
	public ParserRule getDmxEntityRule() {
		return getDmxEntityAccess().getRule();
	}
	
	//DmxDetail:
	//	'detail'
	//	DmxComplexObject;
	public DmxGrammarAccess.DmxDetailElements getDmxDetailAccess() {
		return gaDmx.getDmxDetailAccess();
	}
	
	public ParserRule getDmxDetailRule() {
		return getDmxDetailAccess().getRule();
	}
	
	//fragment DmxComplexObject:
	//	type=[DComplexType] DomFieldListStartSymbol
	//	fields+=DmxField*
	//	'}';
	public DmxGrammarAccess.DmxComplexObjectElements getDmxComplexObjectAccess() {
		return gaDmx.getDmxComplexObjectAccess();
	}
	
	public ParserRule getDmxComplexObjectRule() {
		return getDmxComplexObjectAccess().getRule();
	}
	
	//DmxField:
	//	feature=[DFeature] "=" value=DExpression;
	public DmxGrammarAccess.DmxFieldElements getDmxFieldAccess() {
		return gaDmx.getDmxFieldAccess();
	}
	
	public ParserRule getDmxFieldRule() {
		return getDmxFieldAccess().getRule();
	}
	
	//DmxStaticReference DExpression:
	//	{DmxStaticReference}
	//	'['
	//	target=[IStaticReferenceTarget|DQualifiedName] ('#' member=[DNavigableMember])? ("|" (displayName=ID | plural?="*"))?
	//	-> ']';
	public DmxGrammarAccess.DmxStaticReferenceElements getDmxStaticReferenceAccess() {
		return gaDmx.getDmxStaticReferenceAccess();
	}
	
	public ParserRule getDmxStaticReferenceRule() {
		return getDmxStaticReferenceAccess().getRule();
	}
	
	//// '->' gives precedence to this ']' over PLAIN_TEXT_MIDDLE ('=>' works too but generates more lookahead overhead)
	//DmxContextReference DExpression:
	//	{DmxContextReference} target=[DNamedElement] (before?="@before"
	//	| '.' all?='all')?;
	public DmxGrammarAccess.DmxContextReferenceElements getDmxContextReferenceAccess() {
		return gaDmx.getDmxContextReferenceAccess();
	}
	
	public ParserRule getDmxContextReferenceRule() {
		return getDmxContextReferenceAccess().getRule();
	}
	
	//DmxIfExpression DExpression:
	//	{DmxIfExpression}
	//	'if' if=DExpression
	//	'then' then=DExpression (=> 'else' else=DExpression)?
	//	'end';
	public DmxGrammarAccess.DmxIfExpressionElements getDmxIfExpressionAccess() {
		return gaDmx.getDmxIfExpressionAccess();
	}
	
	public ParserRule getDmxIfExpressionRule() {
		return getDmxIfExpressionAccess().getRule();
	}
	
	//DMultiplicity:
	//	shorthand=DMultiplicityShorthand | '(' minOccurs=NATURAL '..' maxOccurs=MULTIPLICITY ')';
	public DmxGrammarAccess.DMultiplicityElements getDMultiplicityAccess() {
		return gaDmx.getDMultiplicityAccess();
	}
	
	public ParserRule getDMultiplicityRule() {
		return getDMultiplicityAccess().getRule();
	}
	
	//enum DMultiplicityShorthand:
	//	ZERO_OR_ONE='?' | ONE_OR_MORE='+' | ZERO_OR_MORE='*';
	public DmxGrammarAccess.DMultiplicityShorthandElements getDMultiplicityShorthandAccess() {
		return gaDmx.getDMultiplicityShorthandAccess();
	}
	
	public EnumRule getDMultiplicityShorthandRule() {
		return getDMultiplicityShorthandAccess().getRule();
	}
	
	//MULTIPLICITY ecore::EInt:
	//	NATURAL | '*';
	public DmxGrammarAccess.MULTIPLICITYElements getMULTIPLICITYAccess() {
		return gaDmx.getMULTIPLICITYAccess();
	}
	
	public ParserRule getMULTIPLICITYRule() {
		return getMULTIPLICITYAccess().getRule();
	}
	
	//DmxBooleanLiteral DExpression:
	//	{DmxBooleanLiteral} (value?='TRUE' | value?='true' | 'FALSE' | 'false');
	public DmxGrammarAccess.DmxBooleanLiteralElements getDmxBooleanLiteralAccess() {
		return gaDmx.getDmxBooleanLiteralAccess();
	}
	
	public ParserRule getDmxBooleanLiteralRule() {
		return getDmxBooleanLiteralAccess().getRule();
	}
	
	//DmxNaturalLiteral DExpression:
	//	{DmxNaturalLiteral} value=NATURAL;
	public DmxGrammarAccess.DmxNaturalLiteralElements getDmxNaturalLiteralAccess() {
		return gaDmx.getDmxNaturalLiteralAccess();
	}
	
	public ParserRule getDmxNaturalLiteralRule() {
		return getDmxNaturalLiteralAccess().getRule();
	}
	
	//DmxDecimalLiteral DExpression:
	//	{DmxDecimalLiteral} value=DECIMAL;
	public DmxGrammarAccess.DmxDecimalLiteralElements getDmxDecimalLiteralAccess() {
		return gaDmx.getDmxDecimalLiteralAccess();
	}
	
	public ParserRule getDmxDecimalLiteralRule() {
		return getDmxDecimalLiteralAccess().getRule();
	}
	
	//DmxStringLiteral DExpression:
	//	{DmxStringLiteral} value=STRING;
	public DmxGrammarAccess.DmxStringLiteralElements getDmxStringLiteralAccess() {
		return gaDmx.getDmxStringLiteralAccess();
	}
	
	public ParserRule getDmxStringLiteralRule() {
		return getDmxStringLiteralAccess().getRule();
	}
	
	//DmxUndefinedLiteral DExpression:
	//	{DmxUndefinedLiteral} ('UNDEFINED' | 'undefined');
	public DmxGrammarAccess.DmxUndefinedLiteralElements getDmxUndefinedLiteralAccess() {
		return gaDmx.getDmxUndefinedLiteralAccess();
	}
	
	public ParserRule getDmxUndefinedLiteralRule() {
		return getDmxUndefinedLiteralAccess().getRule();
	}
	
	//DECIMAL:
	//	NATURAL '.' NATURAL (('E' | 'e') ('+' | '-')? NATURAL)?;
	public DmxGrammarAccess.DECIMALElements getDECIMALAccess() {
		return gaDmx.getDECIMALAccess();
	}
	
	public ParserRule getDECIMALRule() {
		return getDECIMALAccess().getRule();
	}
	
	//DomFieldListStartSymbol:
	//	'{';
	public DmxGrammarAccess.DomFieldListStartSymbolElements getDomFieldListStartSymbolAccess() {
		return gaDmx.getDomFieldListStartSymbolAccess();
	}
	
	public ParserRule getDomFieldListStartSymbolRule() {
		return getDomFieldListStartSymbolAccess().getRule();
	}
	
	//DQualifiedNameWithWildcard:
	//	DQualifiedName '.*'?;
	public DmxGrammarAccess.DQualifiedNameWithWildcardElements getDQualifiedNameWithWildcardAccess() {
		return gaDmx.getDQualifiedNameWithWildcardAccess();
	}
	
	public ParserRule getDQualifiedNameWithWildcardRule() {
		return getDQualifiedNameWithWildcardAccess().getRule();
	}
	
	//DQualifiedName:
	//	ID ('.' ID)*;
	public DmxGrammarAccess.DQualifiedNameElements getDQualifiedNameAccess() {
		return gaDmx.getDQualifiedNameAccess();
	}
	
	public ParserRule getDQualifiedNameRule() {
		return getDQualifiedNameAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? (LETTER | '_') (LETTER | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaDmx.getIDRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"';
	public TerminalRule getSTRINGRule() {
		return gaDmx.getSTRINGRule();
	}
	
	//terminal NATURAL returns ecore::EInt:
	//	'0'..'9'+ | '∞';
	public TerminalRule getNATURALRule() {
		return gaDmx.getNATURALRule();
	}
	
	//terminal fragment LETTER:
	//	'a'..'z' | 'A'..'Z' | '\\u00c0'..'\\u00d6' | '\\u00d8'..'\\u00f6' | '\\u00f8'..'\\u00ff';
	public TerminalRule getLETTERRule() {
		return gaDmx.getLETTERRule();
	}
	
	//terminal fragment PLAIN_TEXT:
	//	!('»' | ']' | '[');
	public TerminalRule getPLAIN_TEXTRule() {
		return gaDmx.getPLAIN_TEXTRule();
	}
	
	//terminal PLAIN_TEXT_ONLY:
	//	'«' PLAIN_TEXT* '»';
	public TerminalRule getPLAIN_TEXT_ONLYRule() {
		return gaDmx.getPLAIN_TEXT_ONLYRule();
	}
	
	//terminal RICH_TEXT_START:
	//	'«' PLAIN_TEXT* '[';
	public TerminalRule getRICH_TEXT_STARTRule() {
		return gaDmx.getRICH_TEXT_STARTRule();
	}
	
	//terminal RICH_TEXT_MIDDLE:
	//	']' PLAIN_TEXT* '[';
	public TerminalRule getRICH_TEXT_MIDDLERule() {
		return gaDmx.getRICH_TEXT_MIDDLERule();
	}
	
	//terminal RICH_TEXT_END:
	//	']' PLAIN_TEXT* '»';
	public TerminalRule getRICH_TEXT_ENDRule() {
		return gaDmx.getRICH_TEXT_ENDRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaDmx.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaDmx.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaDmx.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaDmx.getANY_OTHERRule();
	}
}
