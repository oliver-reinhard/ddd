/*
 * generated by Xtext 2.19.0
 */
package com.mimacom.ddd.dm.dim.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import com.mimacom.ddd.dm.dmx.services.DmxGrammarAccess;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class DimGrammarAccess extends AbstractGrammarElementFinder {
	
	public class DNamespaceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.dim.Dim.DNamespace");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDomainKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameDQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cImportsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cImportsDImportParserRuleCall_2_0 = (RuleCall)cImportsAssignment_2.eContents().get(0);
		private final Assignment cModelAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cModelDomainInformationModelParserRuleCall_3_0 = (RuleCall)cModelAssignment_3.eContents().get(0);
		
		//@Override
		//DNamespace:
		//	'domain'
		//	name=DQualifiedName
		//	imports+=DImport*
		//	model=DomainInformationModel;
		@Override public ParserRule getRule() { return rule; }
		
		//'domain' name=DQualifiedName imports+=DImport* model=DomainInformationModel
		public Group getGroup() { return cGroup; }
		
		//'domain'
		public Keyword getDomainKeyword_0() { return cDomainKeyword_0; }
		
		//name=DQualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//DQualifiedName
		public RuleCall getNameDQualifiedNameParserRuleCall_1_0() { return cNameDQualifiedNameParserRuleCall_1_0; }
		
		//imports+=DImport*
		public Assignment getImportsAssignment_2() { return cImportsAssignment_2; }
		
		//DImport
		public RuleCall getImportsDImportParserRuleCall_2_0() { return cImportsDImportParserRuleCall_2_0; }
		
		//model=DomainInformationModel
		public Assignment getModelAssignment_3() { return cModelAssignment_3; }
		
		//DomainInformationModel
		public RuleCall getModelDomainInformationModelParserRuleCall_3_0() { return cModelDomainInformationModelParserRuleCall_3_0; }
	}
	public class DomainInformationModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.dim.Dim.DomainInformationModel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInformationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cModelKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cAliasKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cAliasAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cAliasIDTerminalRuleCall_3_1_0 = (RuleCall)cAliasAssignment_3_1.eContents().get(0);
		private final Assignment cDescriptionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cDescriptionDRichTextParserRuleCall_4_0 = (RuleCall)cDescriptionAssignment_4.eContents().get(0);
		private final Assignment cNotesAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cNotesDNoteParserRuleCall_5_0 = (RuleCall)cNotesAssignment_5.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Alternatives cAlternatives_7 = (Alternatives)cGroup.eContents().get(7);
		private final Assignment cTypesAssignment_7_0 = (Assignment)cAlternatives_7.eContents().get(0);
		private final RuleCall cTypesDimTypeParserRuleCall_7_0_0 = (RuleCall)cTypesAssignment_7_0.eContents().get(0);
		private final Assignment cAggregatesAssignment_7_1 = (Assignment)cAlternatives_7.eContents().get(1);
		private final RuleCall cAggregatesDimAggregateParserRuleCall_7_1_0 = (RuleCall)cAggregatesAssignment_7_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//DomainInformationModel:
		//	'information' 'model'
		//	name=ID ('alias' alias=ID)?
		//	description=DRichText?
		//	notes+=DNote*
		//	'{' (types+=DimType | aggregates+=DimAggregate)*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'information' 'model' name=ID ('alias' alias=ID)? description=DRichText? notes+=DNote* '{' (types+=DimType |
		//aggregates+=DimAggregate)* '}'
		public Group getGroup() { return cGroup; }
		
		//'information'
		public Keyword getInformationKeyword_0() { return cInformationKeyword_0; }
		
		//'model'
		public Keyword getModelKeyword_1() { return cModelKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//('alias' alias=ID)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'alias'
		public Keyword getAliasKeyword_3_0() { return cAliasKeyword_3_0; }
		
		//alias=ID
		public Assignment getAliasAssignment_3_1() { return cAliasAssignment_3_1; }
		
		//ID
		public RuleCall getAliasIDTerminalRuleCall_3_1_0() { return cAliasIDTerminalRuleCall_3_1_0; }
		
		//description=DRichText?
		public Assignment getDescriptionAssignment_4() { return cDescriptionAssignment_4; }
		
		//DRichText
		public RuleCall getDescriptionDRichTextParserRuleCall_4_0() { return cDescriptionDRichTextParserRuleCall_4_0; }
		
		//notes+=DNote*
		public Assignment getNotesAssignment_5() { return cNotesAssignment_5; }
		
		//DNote
		public RuleCall getNotesDNoteParserRuleCall_5_0() { return cNotesDNoteParserRuleCall_5_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_6() { return cLeftCurlyBracketKeyword_6; }
		
		//(types+=DimType | aggregates+=DimAggregate)*
		public Alternatives getAlternatives_7() { return cAlternatives_7; }
		
		//types+=DimType
		public Assignment getTypesAssignment_7_0() { return cTypesAssignment_7_0; }
		
		//DimType
		public RuleCall getTypesDimTypeParserRuleCall_7_0_0() { return cTypesDimTypeParserRuleCall_7_0_0; }
		
		//aggregates+=DimAggregate
		public Assignment getAggregatesAssignment_7_1() { return cAggregatesAssignment_7_1; }
		
		//DimAggregate
		public RuleCall getAggregatesDimAggregateParserRuleCall_7_1_0() { return cAggregatesDimAggregateParserRuleCall_7_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}
	public class DimAggregateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.dim.Dim.DimAggregate");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cDAggregateKeywordParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Action cDimAggregateAction_1 = (Action)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cAliasKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cAliasAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cAliasIDTerminalRuleCall_3_1_0 = (RuleCall)cAliasAssignment_3_1.eContents().get(0);
		private final Assignment cDescriptionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cDescriptionDRichTextParserRuleCall_4_0 = (RuleCall)cDescriptionAssignment_4.eContents().get(0);
		private final Assignment cNotesAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cNotesDNoteParserRuleCall_5_0 = (RuleCall)cNotesAssignment_5.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cQueryKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cFeaturesAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cFeaturesDimQueryParserRuleCall_7_1_0 = (RuleCall)cFeaturesAssignment_7_1.eContents().get(0);
		private final Assignment cTypesAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cTypesDimTypeParserRuleCall_8_0 = (RuleCall)cTypesAssignment_8.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//DimAggregate DAggregate:
		//	DAggregateKeyword {DimAggregate} name=ID ('alias' alias=ID)?
		//	description=DRichText?
		//	notes+=DNote*
		//	'{' ('query' features+=DimQuery)*
		//	types+=DimType*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//DAggregateKeyword {DimAggregate} name=ID ('alias' alias=ID)? description=DRichText? notes+=DNote* '{' ('query'
		//features+=DimQuery)* types+=DimType* '}'
		public Group getGroup() { return cGroup; }
		
		//DAggregateKeyword
		public RuleCall getDAggregateKeywordParserRuleCall_0() { return cDAggregateKeywordParserRuleCall_0; }
		
		//{DimAggregate}
		public Action getDimAggregateAction_1() { return cDimAggregateAction_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//('alias' alias=ID)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'alias'
		public Keyword getAliasKeyword_3_0() { return cAliasKeyword_3_0; }
		
		//alias=ID
		public Assignment getAliasAssignment_3_1() { return cAliasAssignment_3_1; }
		
		//ID
		public RuleCall getAliasIDTerminalRuleCall_3_1_0() { return cAliasIDTerminalRuleCall_3_1_0; }
		
		//description=DRichText?
		public Assignment getDescriptionAssignment_4() { return cDescriptionAssignment_4; }
		
		//DRichText
		public RuleCall getDescriptionDRichTextParserRuleCall_4_0() { return cDescriptionDRichTextParserRuleCall_4_0; }
		
		//notes+=DNote*
		public Assignment getNotesAssignment_5() { return cNotesAssignment_5; }
		
		//DNote
		public RuleCall getNotesDNoteParserRuleCall_5_0() { return cNotesDNoteParserRuleCall_5_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_6() { return cLeftCurlyBracketKeyword_6; }
		
		//('query' features+=DimQuery)*
		public Group getGroup_7() { return cGroup_7; }
		
		//'query'
		public Keyword getQueryKeyword_7_0() { return cQueryKeyword_7_0; }
		
		//features+=DimQuery
		public Assignment getFeaturesAssignment_7_1() { return cFeaturesAssignment_7_1; }
		
		//DimQuery
		public RuleCall getFeaturesDimQueryParserRuleCall_7_1_0() { return cFeaturesDimQueryParserRuleCall_7_1_0; }
		
		//types+=DimType*
		public Assignment getTypesAssignment_8() { return cTypesAssignment_8; }
		
		//DimType
		public RuleCall getTypesDimTypeParserRuleCall_8_0() { return cTypesDimTypeParserRuleCall_8_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_9() { return cRightCurlyBracketKeyword_9; }
	}
	public class DAggregateKeywordElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.dim.Dim.DAggregateKeyword");
		private final Keyword cComponentKeyword = (Keyword)rule.eContents().get(1);
		
		//DAggregateKeyword:
		//	'component';
		@Override public ParserRule getRule() { return rule; }
		
		//'component'
		public Keyword getComponentKeyword() { return cComponentKeyword; }
	}
	public class DimTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.dim.Dim.DimType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDimPrimitiveParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDimEnumerationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cDimEntityTypeParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cDimDetailTypeParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		///*
		// * TYPES
		// */ DimType DType:
		//	DimPrimitive | DimEnumeration | DimEntityType | DimDetailType;
		@Override public ParserRule getRule() { return rule; }
		
		//DimPrimitive | DimEnumeration | DimEntityType | DimDetailType
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//DimPrimitive
		public RuleCall getDimPrimitiveParserRuleCall_0() { return cDimPrimitiveParserRuleCall_0; }
		
		//DimEnumeration
		public RuleCall getDimEnumerationParserRuleCall_1() { return cDimEnumerationParserRuleCall_1; }
		
		//DimEntityType
		public RuleCall getDimEntityTypeParserRuleCall_2() { return cDimEntityTypeParserRuleCall_2; }
		
		//DimDetailType
		public RuleCall getDimDetailTypeParserRuleCall_3() { return cDimDetailTypeParserRuleCall_3; }
	}
	public class DConstraintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.dim.Dim.DConstraint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cConstraintKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cAliasKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cAliasAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cAliasIDTerminalRuleCall_2_1_0 = (RuleCall)cAliasAssignment_2_1.eContents().get(0);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cPredicateAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cPredicateDExpressionParserRuleCall_4_0 = (RuleCall)cPredicateAssignment_4.eContents().get(0);
		private final Assignment cDescriptionAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cDescriptionDRichTextParserRuleCall_5_0 = (RuleCall)cDescriptionAssignment_5.eContents().get(0);
		private final Assignment cNotesAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cNotesDNoteParserRuleCall_6_0 = (RuleCall)cNotesAssignment_6.eContents().get(0);
		
		//DConstraint DNamedPredicate:
		//	'constraint'
		//	name=ID ('alias' alias=ID)?
		//	':'
		//	predicate=DExpression
		//	description=DRichText?
		//	notes+=DNote*;
		@Override public ParserRule getRule() { return rule; }
		
		//'constraint' name=ID ('alias' alias=ID)? ':' predicate=DExpression description=DRichText? notes+=DNote*
		public Group getGroup() { return cGroup; }
		
		//'constraint'
		public Keyword getConstraintKeyword_0() { return cConstraintKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//('alias' alias=ID)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'alias'
		public Keyword getAliasKeyword_2_0() { return cAliasKeyword_2_0; }
		
		//alias=ID
		public Assignment getAliasAssignment_2_1() { return cAliasAssignment_2_1; }
		
		//ID
		public RuleCall getAliasIDTerminalRuleCall_2_1_0() { return cAliasIDTerminalRuleCall_2_1_0; }
		
		//':'
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }
		
		//predicate=DExpression
		public Assignment getPredicateAssignment_4() { return cPredicateAssignment_4; }
		
		//DExpression
		public RuleCall getPredicateDExpressionParserRuleCall_4_0() { return cPredicateDExpressionParserRuleCall_4_0; }
		
		//description=DRichText?
		public Assignment getDescriptionAssignment_5() { return cDescriptionAssignment_5; }
		
		//DRichText
		public RuleCall getDescriptionDRichTextParserRuleCall_5_0() { return cDescriptionDRichTextParserRuleCall_5_0; }
		
		//notes+=DNote*
		public Assignment getNotesAssignment_6() { return cNotesAssignment_6; }
		
		//DNote
		public RuleCall getNotesDNoteParserRuleCall_6_0() { return cNotesDNoteParserRuleCall_6_0; }
	}
	public class DimPrimitiveElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.dim.Dim.DimPrimitive");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDimPrimitiveAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cPrimitiveKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cAliasKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cAliasAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cAliasIDTerminalRuleCall_3_1_0 = (RuleCall)cAliasAssignment_3_1.eContents().get(0);
		private final Keyword cRedefinesKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cRedefinesAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cRedefinesDmxArchetypeCrossReference_5_0 = (CrossReference)cRedefinesAssignment_5.eContents().get(0);
		private final RuleCall cRedefinesDmxArchetypeIDTerminalRuleCall_5_0_1 = (RuleCall)cRedefinesDmxArchetypeCrossReference_5_0.eContents().get(1);
		private final Assignment cDescriptionAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cDescriptionDRichTextParserRuleCall_6_0 = (RuleCall)cDescriptionAssignment_6.eContents().get(0);
		private final Assignment cNotesAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cNotesDNoteParserRuleCall_7_0 = (RuleCall)cNotesAssignment_7.eContents().get(0);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cLeftCurlyBracketKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Assignment cConstraintsAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final RuleCall cConstraintsDConstraintParserRuleCall_8_1_0 = (RuleCall)cConstraintsAssignment_8_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8_2 = (Keyword)cGroup_8.eContents().get(2);
		
		//DimPrimitive DPrimitive:
		//	{DimPrimitive}
		//	'primitive'
		//	name=ID ('alias' alias=ID)?
		//	'redefines' redefines=[DmxArchetype] description=DRichText?
		//	notes+=DNote* ('{'
		//	constraints+=DConstraint+
		//	'}')?;
		@Override public ParserRule getRule() { return rule; }
		
		//{DimPrimitive} 'primitive' name=ID ('alias' alias=ID)? 'redefines' redefines=[DmxArchetype] description=DRichText?
		//notes+=DNote* ('{' constraints+=DConstraint+ '}')?
		public Group getGroup() { return cGroup; }
		
		//{DimPrimitive}
		public Action getDimPrimitiveAction_0() { return cDimPrimitiveAction_0; }
		
		//'primitive'
		public Keyword getPrimitiveKeyword_1() { return cPrimitiveKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//('alias' alias=ID)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'alias'
		public Keyword getAliasKeyword_3_0() { return cAliasKeyword_3_0; }
		
		//alias=ID
		public Assignment getAliasAssignment_3_1() { return cAliasAssignment_3_1; }
		
		//ID
		public RuleCall getAliasIDTerminalRuleCall_3_1_0() { return cAliasIDTerminalRuleCall_3_1_0; }
		
		//'redefines'
		public Keyword getRedefinesKeyword_4() { return cRedefinesKeyword_4; }
		
		//redefines=[DmxArchetype]
		public Assignment getRedefinesAssignment_5() { return cRedefinesAssignment_5; }
		
		//[DmxArchetype]
		public CrossReference getRedefinesDmxArchetypeCrossReference_5_0() { return cRedefinesDmxArchetypeCrossReference_5_0; }
		
		//ID
		public RuleCall getRedefinesDmxArchetypeIDTerminalRuleCall_5_0_1() { return cRedefinesDmxArchetypeIDTerminalRuleCall_5_0_1; }
		
		//description=DRichText?
		public Assignment getDescriptionAssignment_6() { return cDescriptionAssignment_6; }
		
		//DRichText
		public RuleCall getDescriptionDRichTextParserRuleCall_6_0() { return cDescriptionDRichTextParserRuleCall_6_0; }
		
		//notes+=DNote*
		public Assignment getNotesAssignment_7() { return cNotesAssignment_7; }
		
		//DNote
		public RuleCall getNotesDNoteParserRuleCall_7_0() { return cNotesDNoteParserRuleCall_7_0; }
		
		//('{' constraints+=DConstraint+ '}')?
		public Group getGroup_8() { return cGroup_8; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_8_0() { return cLeftCurlyBracketKeyword_8_0; }
		
		//constraints+=DConstraint+
		public Assignment getConstraintsAssignment_8_1() { return cConstraintsAssignment_8_1; }
		
		//DConstraint
		public RuleCall getConstraintsDConstraintParserRuleCall_8_1_0() { return cConstraintsDConstraintParserRuleCall_8_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_8_2() { return cRightCurlyBracketKeyword_8_2; }
	}
	public class DimEnumerationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.dim.Dim.DimEnumeration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDimEnumerationAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cEnumerationKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cAliasKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cAliasAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cAliasIDTerminalRuleCall_3_1_0 = (RuleCall)cAliasAssignment_3_1.eContents().get(0);
		private final Assignment cDescriptionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cDescriptionDRichTextParserRuleCall_4_0 = (RuleCall)cDescriptionAssignment_4.eContents().get(0);
		private final Assignment cNotesAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cNotesDNoteParserRuleCall_5_0 = (RuleCall)cNotesAssignment_5.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Assignment cLiteralsAssignment_7_0 = (Assignment)cGroup_7.eContents().get(0);
		private final RuleCall cLiteralsDimLiteralParserRuleCall_7_0_0 = (RuleCall)cLiteralsAssignment_7_0.eContents().get(0);
		private final Group cGroup_7_1 = (Group)cGroup_7.eContents().get(1);
		private final Keyword cCommaKeyword_7_1_0 = (Keyword)cGroup_7_1.eContents().get(0);
		private final Assignment cLiteralsAssignment_7_1_1 = (Assignment)cGroup_7_1.eContents().get(1);
		private final RuleCall cLiteralsDimLiteralParserRuleCall_7_1_1_0 = (RuleCall)cLiteralsAssignment_7_1_1.eContents().get(0);
		private final Assignment cConstraintsAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cConstraintsDConstraintParserRuleCall_8_0 = (RuleCall)cConstraintsAssignment_8.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//DimEnumeration DEnumeration:
		//	{DimEnumeration}
		//	'enumeration'
		//	name=ID ('alias' alias=ID)?
		//	description=DRichText?
		//	notes+=DNote*
		//	'{' (literals+=DimLiteral (',' literals+=DimLiteral)*)?
		//	constraints+=DConstraint*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{DimEnumeration} 'enumeration' name=ID ('alias' alias=ID)? description=DRichText? notes+=DNote* '{'
		//(literals+=DimLiteral (',' literals+=DimLiteral)*)? constraints+=DConstraint* '}'
		public Group getGroup() { return cGroup; }
		
		//{DimEnumeration}
		public Action getDimEnumerationAction_0() { return cDimEnumerationAction_0; }
		
		//'enumeration'
		public Keyword getEnumerationKeyword_1() { return cEnumerationKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//('alias' alias=ID)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'alias'
		public Keyword getAliasKeyword_3_0() { return cAliasKeyword_3_0; }
		
		//alias=ID
		public Assignment getAliasAssignment_3_1() { return cAliasAssignment_3_1; }
		
		//ID
		public RuleCall getAliasIDTerminalRuleCall_3_1_0() { return cAliasIDTerminalRuleCall_3_1_0; }
		
		//description=DRichText?
		public Assignment getDescriptionAssignment_4() { return cDescriptionAssignment_4; }
		
		//DRichText
		public RuleCall getDescriptionDRichTextParserRuleCall_4_0() { return cDescriptionDRichTextParserRuleCall_4_0; }
		
		//notes+=DNote*
		public Assignment getNotesAssignment_5() { return cNotesAssignment_5; }
		
		//DNote
		public RuleCall getNotesDNoteParserRuleCall_5_0() { return cNotesDNoteParserRuleCall_5_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_6() { return cLeftCurlyBracketKeyword_6; }
		
		//(literals+=DimLiteral (',' literals+=DimLiteral)*)?
		public Group getGroup_7() { return cGroup_7; }
		
		//literals+=DimLiteral
		public Assignment getLiteralsAssignment_7_0() { return cLiteralsAssignment_7_0; }
		
		//DimLiteral
		public RuleCall getLiteralsDimLiteralParserRuleCall_7_0_0() { return cLiteralsDimLiteralParserRuleCall_7_0_0; }
		
		//(',' literals+=DimLiteral)*
		public Group getGroup_7_1() { return cGroup_7_1; }
		
		//','
		public Keyword getCommaKeyword_7_1_0() { return cCommaKeyword_7_1_0; }
		
		//literals+=DimLiteral
		public Assignment getLiteralsAssignment_7_1_1() { return cLiteralsAssignment_7_1_1; }
		
		//DimLiteral
		public RuleCall getLiteralsDimLiteralParserRuleCall_7_1_1_0() { return cLiteralsDimLiteralParserRuleCall_7_1_1_0; }
		
		//constraints+=DConstraint*
		public Assignment getConstraintsAssignment_8() { return cConstraintsAssignment_8; }
		
		//DConstraint
		public RuleCall getConstraintsDConstraintParserRuleCall_8_0() { return cConstraintsDConstraintParserRuleCall_8_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_9() { return cRightCurlyBracketKeyword_9; }
	}
	public class DimLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.dim.Dim.DimLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDimLiteralAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cAliasKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cAliasAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cAliasIDTerminalRuleCall_2_1_0 = (RuleCall)cAliasAssignment_2_1.eContents().get(0);
		private final Assignment cDescriptionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDescriptionDRichTextParserRuleCall_3_0 = (RuleCall)cDescriptionAssignment_3.eContents().get(0);
		private final Assignment cNotesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cNotesDNoteParserRuleCall_4_0 = (RuleCall)cNotesAssignment_4.eContents().get(0);
		
		//DimLiteral DLiteral:
		//	{DimLiteral} name=ID ('alias' alias=ID)?
		//	description=DRichText?
		//	notes+=DNote*;
		@Override public ParserRule getRule() { return rule; }
		
		//{DimLiteral} name=ID ('alias' alias=ID)? description=DRichText? notes+=DNote*
		public Group getGroup() { return cGroup; }
		
		//{DimLiteral}
		public Action getDimLiteralAction_0() { return cDimLiteralAction_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//('alias' alias=ID)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'alias'
		public Keyword getAliasKeyword_2_0() { return cAliasKeyword_2_0; }
		
		//alias=ID
		public Assignment getAliasAssignment_2_1() { return cAliasAssignment_2_1; }
		
		//ID
		public RuleCall getAliasIDTerminalRuleCall_2_1_0() { return cAliasIDTerminalRuleCall_2_1_0; }
		
		//description=DRichText?
		public Assignment getDescriptionAssignment_3() { return cDescriptionAssignment_3; }
		
		//DRichText
		public RuleCall getDescriptionDRichTextParserRuleCall_3_0() { return cDescriptionDRichTextParserRuleCall_3_0; }
		
		//notes+=DNote*
		public Assignment getNotesAssignment_4() { return cNotesAssignment_4; }
		
		//DNote
		public RuleCall getNotesDNoteParserRuleCall_4_0() { return cNotesDNoteParserRuleCall_4_0; }
	}
	public class DimEntityTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.dim.Dim.DimEntityType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDimEntityTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cAbstractAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cAbstractAbstractKeyword_1_0 = (Keyword)cAbstractAssignment_1.eContents().get(0);
		private final Assignment cRootAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cRootMainKeyword_2_0 = (Keyword)cRootAssignment_2.eContents().get(0);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Keyword cEntityKeyword_3_0 = (Keyword)cAlternatives_3.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cAlternatives_3.eContents().get(1);
		private final Assignment cNatureAssignment_3_1_0 = (Assignment)cGroup_3_1.eContents().get(0);
		private final RuleCall cNatureDEntityNatureAutonomousEnumRuleCall_3_1_0_0 = (RuleCall)cNatureAssignment_3_1_0.eContents().get(0);
		private final Keyword cEntityKeyword_3_1_1 = (Keyword)cGroup_3_1.eContents().get(1);
		private final Assignment cNatureAssignment_3_2 = (Assignment)cAlternatives_3.eContents().get(2);
		private final RuleCall cNatureDEntityNatureRelationshipEnumRuleCall_3_2_0 = (RuleCall)cNatureAssignment_3_2.eContents().get(0);
		private final RuleCall cDimComplexTypeParserRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cStatesKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Assignment cStatesAssignment_6_2 = (Assignment)cGroup_6.eContents().get(2);
		private final RuleCall cStatesDStateParserRuleCall_6_2_0 = (RuleCall)cStatesAssignment_6_2.eContents().get(0);
		private final Group cGroup_6_3 = (Group)cGroup_6.eContents().get(3);
		private final Keyword cCommaKeyword_6_3_0 = (Keyword)cGroup_6_3.eContents().get(0);
		private final Assignment cStatesAssignment_6_3_1 = (Assignment)cGroup_6_3.eContents().get(1);
		private final RuleCall cStatesDStateParserRuleCall_6_3_1_0 = (RuleCall)cStatesAssignment_6_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6_4 = (Keyword)cGroup_6.eContents().get(4);
		private final Group cGroup_6_5 = (Group)cGroup_6.eContents().get(5);
		private final Keyword cEventsKeyword_6_5_0 = (Keyword)cGroup_6_5.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_6_5_1 = (Keyword)cGroup_6_5.eContents().get(1);
		private final Assignment cEventsAssignment_6_5_2 = (Assignment)cGroup_6_5.eContents().get(2);
		private final RuleCall cEventsDStateEventParserRuleCall_6_5_2_0 = (RuleCall)cEventsAssignment_6_5_2.eContents().get(0);
		private final Group cGroup_6_5_3 = (Group)cGroup_6_5.eContents().get(3);
		private final Keyword cCommaKeyword_6_5_3_0 = (Keyword)cGroup_6_5_3.eContents().get(0);
		private final Assignment cEventsAssignment_6_5_3_1 = (Assignment)cGroup_6_5_3.eContents().get(1);
		private final RuleCall cEventsDStateEventParserRuleCall_6_5_3_1_0 = (RuleCall)cEventsAssignment_6_5_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6_5_4 = (Keyword)cGroup_6_5.eContents().get(4);
		private final Alternatives cAlternatives_7 = (Alternatives)cGroup.eContents().get(7);
		private final Assignment cFeaturesAssignment_7_0 = (Assignment)cAlternatives_7.eContents().get(0);
		private final RuleCall cFeaturesDimFeatureParserRuleCall_7_0_0 = (RuleCall)cFeaturesAssignment_7_0.eContents().get(0);
		private final Assignment cConstraintsAssignment_7_1 = (Assignment)cAlternatives_7.eContents().get(1);
		private final RuleCall cConstraintsDConstraintParserRuleCall_7_1_0 = (RuleCall)cConstraintsAssignment_7_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//DimEntityType DEntityType:
		//	{DimEntityType} abstract?='abstract'?
		//	root?='main'? ('entity'
		//	| nature=DEntityNatureAutonomous 'entity' // validation: cannot be abstract
		//	| nature=DEntityNatureRelationship) DimComplexType
		//	'{' ('states'
		//	'{'
		//	states+=DState (',' states+=DState)*
		//	'}' ('events'
		//	'{'
		//	events+=DStateEvent (',' events+=DStateEvent)*
		//	'}')?)? (features+=DimFeature | constraints+=DConstraint)*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{DimEntityType} abstract?='abstract'? root?='main'? ('entity' | nature=DEntityNatureAutonomous 'entity' // validation: cannot be abstract
		//| nature=DEntityNatureRelationship) DimComplexType '{' ('states' '{' states+=DState (',' states+=DState)* '}' ('events'
		//'{' events+=DStateEvent (',' events+=DStateEvent)* '}')?)? (features+=DimFeature | constraints+=DConstraint)* '}'
		public Group getGroup() { return cGroup; }
		
		//{DimEntityType}
		public Action getDimEntityTypeAction_0() { return cDimEntityTypeAction_0; }
		
		//abstract?='abstract'?
		public Assignment getAbstractAssignment_1() { return cAbstractAssignment_1; }
		
		//'abstract'
		public Keyword getAbstractAbstractKeyword_1_0() { return cAbstractAbstractKeyword_1_0; }
		
		//root?='main'?
		public Assignment getRootAssignment_2() { return cRootAssignment_2; }
		
		//'main'
		public Keyword getRootMainKeyword_2_0() { return cRootMainKeyword_2_0; }
		
		//('entity' | nature=DEntityNatureAutonomous 'entity' // validation: cannot be abstract
		//| nature=DEntityNatureRelationship)
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//'entity'
		public Keyword getEntityKeyword_3_0() { return cEntityKeyword_3_0; }
		
		//nature=DEntityNatureAutonomous 'entity'
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//nature=DEntityNatureAutonomous
		public Assignment getNatureAssignment_3_1_0() { return cNatureAssignment_3_1_0; }
		
		//DEntityNatureAutonomous
		public RuleCall getNatureDEntityNatureAutonomousEnumRuleCall_3_1_0_0() { return cNatureDEntityNatureAutonomousEnumRuleCall_3_1_0_0; }
		
		//'entity'
		public Keyword getEntityKeyword_3_1_1() { return cEntityKeyword_3_1_1; }
		
		//nature=DEntityNatureRelationship
		public Assignment getNatureAssignment_3_2() { return cNatureAssignment_3_2; }
		
		//DEntityNatureRelationship
		public RuleCall getNatureDEntityNatureRelationshipEnumRuleCall_3_2_0() { return cNatureDEntityNatureRelationshipEnumRuleCall_3_2_0; }
		
		//DimComplexType
		public RuleCall getDimComplexTypeParserRuleCall_4() { return cDimComplexTypeParserRuleCall_4; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }
		
		//('states' '{' states+=DState (',' states+=DState)* '}' ('events' '{' events+=DStateEvent (',' events+=DStateEvent)*
		//'}')?)?
		public Group getGroup_6() { return cGroup_6; }
		
		//'states'
		public Keyword getStatesKeyword_6_0() { return cStatesKeyword_6_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_6_1() { return cLeftCurlyBracketKeyword_6_1; }
		
		//states+=DState
		public Assignment getStatesAssignment_6_2() { return cStatesAssignment_6_2; }
		
		//DState
		public RuleCall getStatesDStateParserRuleCall_6_2_0() { return cStatesDStateParserRuleCall_6_2_0; }
		
		//(',' states+=DState)*
		public Group getGroup_6_3() { return cGroup_6_3; }
		
		//','
		public Keyword getCommaKeyword_6_3_0() { return cCommaKeyword_6_3_0; }
		
		//states+=DState
		public Assignment getStatesAssignment_6_3_1() { return cStatesAssignment_6_3_1; }
		
		//DState
		public RuleCall getStatesDStateParserRuleCall_6_3_1_0() { return cStatesDStateParserRuleCall_6_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6_4() { return cRightCurlyBracketKeyword_6_4; }
		
		//('events' '{' events+=DStateEvent (',' events+=DStateEvent)* '}')?
		public Group getGroup_6_5() { return cGroup_6_5; }
		
		//'events'
		public Keyword getEventsKeyword_6_5_0() { return cEventsKeyword_6_5_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_6_5_1() { return cLeftCurlyBracketKeyword_6_5_1; }
		
		//events+=DStateEvent
		public Assignment getEventsAssignment_6_5_2() { return cEventsAssignment_6_5_2; }
		
		//DStateEvent
		public RuleCall getEventsDStateEventParserRuleCall_6_5_2_0() { return cEventsDStateEventParserRuleCall_6_5_2_0; }
		
		//(',' events+=DStateEvent)*
		public Group getGroup_6_5_3() { return cGroup_6_5_3; }
		
		//','
		public Keyword getCommaKeyword_6_5_3_0() { return cCommaKeyword_6_5_3_0; }
		
		//events+=DStateEvent
		public Assignment getEventsAssignment_6_5_3_1() { return cEventsAssignment_6_5_3_1; }
		
		//DStateEvent
		public RuleCall getEventsDStateEventParserRuleCall_6_5_3_1_0() { return cEventsDStateEventParserRuleCall_6_5_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6_5_4() { return cRightCurlyBracketKeyword_6_5_4; }
		
		//(features+=DimFeature | constraints+=DConstraint)*
		public Alternatives getAlternatives_7() { return cAlternatives_7; }
		
		//features+=DimFeature
		public Assignment getFeaturesAssignment_7_0() { return cFeaturesAssignment_7_0; }
		
		//DimFeature
		public RuleCall getFeaturesDimFeatureParserRuleCall_7_0_0() { return cFeaturesDimFeatureParserRuleCall_7_0_0; }
		
		//constraints+=DConstraint
		public Assignment getConstraintsAssignment_7_1() { return cConstraintsAssignment_7_1; }
		
		//DConstraint
		public RuleCall getConstraintsDConstraintParserRuleCall_7_1_0() { return cConstraintsDConstraintParserRuleCall_7_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}
	public class DStateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.dim.Dim.DState");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cAliasKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cAliasAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cAliasIDTerminalRuleCall_1_1_0 = (RuleCall)cAliasAssignment_1_1.eContents().get(0);
		
		//DState:
		//	name=ID ('alias' alias=ID)?;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID ('alias' alias=ID)?
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//('alias' alias=ID)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'alias'
		public Keyword getAliasKeyword_1_0() { return cAliasKeyword_1_0; }
		
		//alias=ID
		public Assignment getAliasAssignment_1_1() { return cAliasAssignment_1_1; }
		
		//ID
		public RuleCall getAliasIDTerminalRuleCall_1_1_0() { return cAliasIDTerminalRuleCall_1_1_0; }
	}
	public class DStateEventElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.dim.Dim.DStateEvent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cAliasKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cAliasAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cAliasIDTerminalRuleCall_1_1_0 = (RuleCall)cAliasAssignment_1_1.eContents().get(0);
		
		//DStateEvent:
		//	name=ID ('alias' alias=ID)?;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID ('alias' alias=ID)?
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//('alias' alias=ID)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'alias'
		public Keyword getAliasKeyword_1_0() { return cAliasKeyword_1_0; }
		
		//alias=ID
		public Assignment getAliasAssignment_1_1() { return cAliasAssignment_1_1; }
		
		//ID
		public RuleCall getAliasIDTerminalRuleCall_1_1_0() { return cAliasIDTerminalRuleCall_1_1_0; }
	}
	public class DimDetailTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.dim.Dim.DimDetailType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDimDetailTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cAbstractAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cAbstractAbstractKeyword_1_0 = (Keyword)cAbstractAssignment_1.eContents().get(0);
		private final Keyword cDetailKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cDimComplexTypeParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Alternatives cAlternatives_5 = (Alternatives)cGroup.eContents().get(5);
		private final Assignment cFeaturesAssignment_5_0 = (Assignment)cAlternatives_5.eContents().get(0);
		private final RuleCall cFeaturesDimFeatureParserRuleCall_5_0_0 = (RuleCall)cFeaturesAssignment_5_0.eContents().get(0);
		private final Assignment cConstraintsAssignment_5_1 = (Assignment)cAlternatives_5.eContents().get(1);
		private final RuleCall cConstraintsDConstraintParserRuleCall_5_1_0 = (RuleCall)cConstraintsAssignment_5_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//DimDetailType DDetailType:
		//	{DimDetailType} abstract?='abstract'?
		//	'detail'
		//	DimComplexType
		//	'{' (features+=DimFeature | constraints+=DConstraint)*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{DimDetailType} abstract?='abstract'? 'detail' DimComplexType '{' (features+=DimFeature | constraints+=DConstraint)* '}'
		public Group getGroup() { return cGroup; }
		
		//{DimDetailType}
		public Action getDimDetailTypeAction_0() { return cDimDetailTypeAction_0; }
		
		//abstract?='abstract'?
		public Assignment getAbstractAssignment_1() { return cAbstractAssignment_1; }
		
		//'abstract'
		public Keyword getAbstractAbstractKeyword_1_0() { return cAbstractAbstractKeyword_1_0; }
		
		//'detail'
		public Keyword getDetailKeyword_2() { return cDetailKeyword_2; }
		
		//DimComplexType
		public RuleCall getDimComplexTypeParserRuleCall_3() { return cDimComplexTypeParserRuleCall_3; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//(features+=DimFeature | constraints+=DConstraint)*
		public Alternatives getAlternatives_5() { return cAlternatives_5; }
		
		//features+=DimFeature
		public Assignment getFeaturesAssignment_5_0() { return cFeaturesAssignment_5_0; }
		
		//DimFeature
		public RuleCall getFeaturesDimFeatureParserRuleCall_5_0_0() { return cFeaturesDimFeatureParserRuleCall_5_0_0; }
		
		//constraints+=DConstraint
		public Assignment getConstraintsAssignment_5_1() { return cConstraintsAssignment_5_1; }
		
		//DConstraint
		public RuleCall getConstraintsDConstraintParserRuleCall_5_1_0() { return cConstraintsDConstraintParserRuleCall_5_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class DimComplexTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.dim.Dim.DimComplexType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cAliasKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cAliasAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cAliasIDTerminalRuleCall_1_1_0 = (RuleCall)cAliasAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cExtendsKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cSuperTypeAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cSuperTypeDComplexTypeCrossReference_2_1_0 = (CrossReference)cSuperTypeAssignment_2_1.eContents().get(0);
		private final RuleCall cSuperTypeDComplexTypeIDTerminalRuleCall_2_1_0_1 = (RuleCall)cSuperTypeDComplexTypeCrossReference_2_1_0.eContents().get(1);
		private final Assignment cDescriptionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDescriptionDRichTextParserRuleCall_3_0 = (RuleCall)cDescriptionAssignment_3.eContents().get(0);
		private final Assignment cNotesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cNotesDNoteParserRuleCall_4_0 = (RuleCall)cNotesAssignment_4.eContents().get(0);
		
		//fragment DimComplexType returns DComplexType:
		//	name=ID ('alias' alias=ID)? ('extends' superType=[DComplexType])?
		//	description=DRichText?
		//	notes+=DNote*;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID ('alias' alias=ID)? ('extends' superType=[DComplexType])? description=DRichText? notes+=DNote*
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//('alias' alias=ID)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'alias'
		public Keyword getAliasKeyword_1_0() { return cAliasKeyword_1_0; }
		
		//alias=ID
		public Assignment getAliasAssignment_1_1() { return cAliasAssignment_1_1; }
		
		//ID
		public RuleCall getAliasIDTerminalRuleCall_1_1_0() { return cAliasIDTerminalRuleCall_1_1_0; }
		
		//('extends' superType=[DComplexType])?
		public Group getGroup_2() { return cGroup_2; }
		
		//'extends'
		public Keyword getExtendsKeyword_2_0() { return cExtendsKeyword_2_0; }
		
		//superType=[DComplexType]
		public Assignment getSuperTypeAssignment_2_1() { return cSuperTypeAssignment_2_1; }
		
		//[DComplexType]
		public CrossReference getSuperTypeDComplexTypeCrossReference_2_1_0() { return cSuperTypeDComplexTypeCrossReference_2_1_0; }
		
		//ID
		public RuleCall getSuperTypeDComplexTypeIDTerminalRuleCall_2_1_0_1() { return cSuperTypeDComplexTypeIDTerminalRuleCall_2_1_0_1; }
		
		//description=DRichText?
		public Assignment getDescriptionAssignment_3() { return cDescriptionAssignment_3; }
		
		//DRichText
		public RuleCall getDescriptionDRichTextParserRuleCall_3_0() { return cDescriptionDRichTextParserRuleCall_3_0; }
		
		//notes+=DNote*
		public Assignment getNotesAssignment_4() { return cNotesAssignment_4; }
		
		//DNote
		public RuleCall getNotesDNoteParserRuleCall_4_0() { return cNotesDNoteParserRuleCall_4_0; }
	}
	public class DimFeatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.dim.Dim.DimFeature");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDimAssociationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDimAttributeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cDimQueryParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//DimFeature DFeature:
		//	DimAssociation | DimAttribute | DimQuery;
		@Override public ParserRule getRule() { return rule; }
		
		//DimAssociation | DimAttribute | DimQuery
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//DimAssociation
		public RuleCall getDimAssociationParserRuleCall_0() { return cDimAssociationParserRuleCall_0; }
		
		//DimAttribute
		public RuleCall getDimAttributeParserRuleCall_1() { return cDimAttributeParserRuleCall_1; }
		
		//DimQuery
		public RuleCall getDimQueryParserRuleCall_2() { return cDimQueryParserRuleCall_2; }
	}
	public class DimAssociationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.dim.Dim.DimAssociation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDimAssociationAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cDerivedAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cDerivedDerivedKeyword_1_0 = (Keyword)cDerivedAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cAliasKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cAliasAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cAliasIDTerminalRuleCall_3_1_0 = (RuleCall)cAliasAssignment_3_1.eContents().get(0);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Assignment cKindAssignment_4_0 = (Assignment)cAlternatives_4.eContents().get(0);
		private final RuleCall cKindDAssociationKindEnumRuleCall_4_0_0 = (RuleCall)cKindAssignment_4_0.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cAlternatives_4.eContents().get(1);
		private final Assignment cKindAssignment_4_1_0 = (Assignment)cGroup_4_1.eContents().get(0);
		private final RuleCall cKindDAssociationKindInverseEnumRuleCall_4_1_0_0 = (RuleCall)cKindAssignment_4_1_0.eContents().get(0);
		private final Keyword cContainsKeyword_4_1_1 = (Keyword)cGroup_4_1.eContents().get(1);
		private final Assignment cTypeAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cTypeDEntityTypeCrossReference_5_0 = (CrossReference)cTypeAssignment_5.eContents().get(0);
		private final RuleCall cTypeDEntityTypeIDTerminalRuleCall_5_0_1 = (RuleCall)cTypeDEntityTypeCrossReference_5_0.eContents().get(1);
		private final Assignment cMultiplicityAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cMultiplicityDMultiplicityParserRuleCall_6_0 = (RuleCall)cMultiplicityAssignment_6.eContents().get(0);
		private final Assignment cDescriptionAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cDescriptionDRichTextParserRuleCall_7_0 = (RuleCall)cDescriptionAssignment_7.eContents().get(0);
		private final Assignment cNotesAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cNotesDNoteParserRuleCall_8_0 = (RuleCall)cNotesAssignment_8.eContents().get(0);
		
		//DimAssociation DAssociation:
		//	{DimAssociation} derived?='derived'?
		//	name=ID ('alias' alias=ID)? (kind=DAssociationKind | kind=DAssociationKindInverse "contains") type=[DEntityType]? // optional: allows parser to continue parsing potential targets, caught by validation
		//	multiplicity=DMultiplicity?
		//	description=DRichText?
		//	notes+=DNote*;
		@Override public ParserRule getRule() { return rule; }
		
		//{DimAssociation} derived?='derived'? name=ID ('alias' alias=ID)? (kind=DAssociationKind | kind=DAssociationKindInverse
		//"contains") type=[DEntityType]? // optional: allows parser to continue parsing potential targets, caught by validation
		//multiplicity=DMultiplicity? description=DRichText? notes+=DNote*
		public Group getGroup() { return cGroup; }
		
		//{DimAssociation}
		public Action getDimAssociationAction_0() { return cDimAssociationAction_0; }
		
		//derived?='derived'?
		public Assignment getDerivedAssignment_1() { return cDerivedAssignment_1; }
		
		//'derived'
		public Keyword getDerivedDerivedKeyword_1_0() { return cDerivedDerivedKeyword_1_0; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//('alias' alias=ID)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'alias'
		public Keyword getAliasKeyword_3_0() { return cAliasKeyword_3_0; }
		
		//alias=ID
		public Assignment getAliasAssignment_3_1() { return cAliasAssignment_3_1; }
		
		//ID
		public RuleCall getAliasIDTerminalRuleCall_3_1_0() { return cAliasIDTerminalRuleCall_3_1_0; }
		
		//(kind=DAssociationKind | kind=DAssociationKindInverse "contains")
		public Alternatives getAlternatives_4() { return cAlternatives_4; }
		
		//kind=DAssociationKind
		public Assignment getKindAssignment_4_0() { return cKindAssignment_4_0; }
		
		//DAssociationKind
		public RuleCall getKindDAssociationKindEnumRuleCall_4_0_0() { return cKindDAssociationKindEnumRuleCall_4_0_0; }
		
		//kind=DAssociationKindInverse "contains"
		public Group getGroup_4_1() { return cGroup_4_1; }
		
		//kind=DAssociationKindInverse
		public Assignment getKindAssignment_4_1_0() { return cKindAssignment_4_1_0; }
		
		//DAssociationKindInverse
		public RuleCall getKindDAssociationKindInverseEnumRuleCall_4_1_0_0() { return cKindDAssociationKindInverseEnumRuleCall_4_1_0_0; }
		
		//"contains"
		public Keyword getContainsKeyword_4_1_1() { return cContainsKeyword_4_1_1; }
		
		//type=[DEntityType]?
		public Assignment getTypeAssignment_5() { return cTypeAssignment_5; }
		
		//[DEntityType]
		public CrossReference getTypeDEntityTypeCrossReference_5_0() { return cTypeDEntityTypeCrossReference_5_0; }
		
		//ID
		public RuleCall getTypeDEntityTypeIDTerminalRuleCall_5_0_1() { return cTypeDEntityTypeIDTerminalRuleCall_5_0_1; }
		
		//// optional: allows parser to continue parsing potential targets, caught by validation
		//multiplicity=DMultiplicity?
		public Assignment getMultiplicityAssignment_6() { return cMultiplicityAssignment_6; }
		
		//DMultiplicity
		public RuleCall getMultiplicityDMultiplicityParserRuleCall_6_0() { return cMultiplicityDMultiplicityParserRuleCall_6_0; }
		
		//description=DRichText?
		public Assignment getDescriptionAssignment_7() { return cDescriptionAssignment_7; }
		
		//DRichText
		public RuleCall getDescriptionDRichTextParserRuleCall_7_0() { return cDescriptionDRichTextParserRuleCall_7_0; }
		
		//notes+=DNote*
		public Assignment getNotesAssignment_8() { return cNotesAssignment_8; }
		
		//DNote
		public RuleCall getNotesDNoteParserRuleCall_8_0() { return cNotesDNoteParserRuleCall_8_0; }
	}
	public class DimAttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.dim.Dim.DimAttribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDimAttributeAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cDetailAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cDetailDetailKeyword_1_0 = (Keyword)cDetailAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cAliasKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cAliasAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cAliasIDTerminalRuleCall_3_1_0 = (RuleCall)cAliasAssignment_3_1.eContents().get(0);
		private final Keyword cColonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cTypeAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cTypeDTypeCrossReference_5_0 = (CrossReference)cTypeAssignment_5.eContents().get(0);
		private final RuleCall cTypeDTypeIDTerminalRuleCall_5_0_1 = (RuleCall)cTypeDTypeCrossReference_5_0.eContents().get(1);
		private final Assignment cMultiplicityAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cMultiplicityDMultiplicityParserRuleCall_6_0 = (RuleCall)cMultiplicityAssignment_6.eContents().get(0);
		private final Assignment cKeyAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final Keyword cKeyKeyKeyword_7_0 = (Keyword)cKeyAssignment_7.eContents().get(0);
		private final Assignment cDescriptionAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cDescriptionDRichTextParserRuleCall_8_0 = (RuleCall)cDescriptionAssignment_8.eContents().get(0);
		private final Assignment cNotesAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cNotesDNoteParserRuleCall_9_0 = (RuleCall)cNotesAssignment_9.eContents().get(0);
		
		//DimAttribute DAttribute:
		//	{DimAttribute} detail?='detail'?
		//	name=ID ('alias' alias=ID)?
		//	':'
		//	type=[DType]? // optional: allows parser to continue parsing potential targets, caught by validation
		//	multiplicity=DMultiplicity?
		//	key?='key'?
		//	description=DRichText?
		//	notes+=DNote*;
		@Override public ParserRule getRule() { return rule; }
		
		//{DimAttribute} detail?='detail'? name=ID ('alias' alias=ID)? ':' type=[DType]? // optional: allows parser to continue parsing potential targets, caught by validation
		//multiplicity=DMultiplicity? key?='key'? description=DRichText? notes+=DNote*
		public Group getGroup() { return cGroup; }
		
		//{DimAttribute}
		public Action getDimAttributeAction_0() { return cDimAttributeAction_0; }
		
		//detail?='detail'?
		public Assignment getDetailAssignment_1() { return cDetailAssignment_1; }
		
		//'detail'
		public Keyword getDetailDetailKeyword_1_0() { return cDetailDetailKeyword_1_0; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//('alias' alias=ID)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'alias'
		public Keyword getAliasKeyword_3_0() { return cAliasKeyword_3_0; }
		
		//alias=ID
		public Assignment getAliasAssignment_3_1() { return cAliasAssignment_3_1; }
		
		//ID
		public RuleCall getAliasIDTerminalRuleCall_3_1_0() { return cAliasIDTerminalRuleCall_3_1_0; }
		
		//':'
		public Keyword getColonKeyword_4() { return cColonKeyword_4; }
		
		//type=[DType]?
		public Assignment getTypeAssignment_5() { return cTypeAssignment_5; }
		
		//[DType]
		public CrossReference getTypeDTypeCrossReference_5_0() { return cTypeDTypeCrossReference_5_0; }
		
		//ID
		public RuleCall getTypeDTypeIDTerminalRuleCall_5_0_1() { return cTypeDTypeIDTerminalRuleCall_5_0_1; }
		
		//// optional: allows parser to continue parsing potential targets, caught by validation
		//multiplicity=DMultiplicity?
		public Assignment getMultiplicityAssignment_6() { return cMultiplicityAssignment_6; }
		
		//DMultiplicity
		public RuleCall getMultiplicityDMultiplicityParserRuleCall_6_0() { return cMultiplicityDMultiplicityParserRuleCall_6_0; }
		
		//key?='key'?
		public Assignment getKeyAssignment_7() { return cKeyAssignment_7; }
		
		//'key'
		public Keyword getKeyKeyKeyword_7_0() { return cKeyKeyKeyword_7_0; }
		
		//description=DRichText?
		public Assignment getDescriptionAssignment_8() { return cDescriptionAssignment_8; }
		
		//DRichText
		public RuleCall getDescriptionDRichTextParserRuleCall_8_0() { return cDescriptionDRichTextParserRuleCall_8_0; }
		
		//notes+=DNote*
		public Assignment getNotesAssignment_9() { return cNotesAssignment_9; }
		
		//DNote
		public RuleCall getNotesDNoteParserRuleCall_9_0() { return cNotesDNoteParserRuleCall_9_0; }
	}
	public class DimQueryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.dim.Dim.DimQuery");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDimQueryAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cAliasKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cAliasAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cAliasIDTerminalRuleCall_2_1_0 = (RuleCall)cAliasAssignment_2_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cParametersAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cParametersDimQueryParameterParserRuleCall_4_0_0 = (RuleCall)cParametersAssignment_4_0.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cGroup_4.eContents().get(1);
		private final Keyword cCommaKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Assignment cParametersAssignment_4_1_1 = (Assignment)cGroup_4_1.eContents().get(1);
		private final RuleCall cParametersDimQueryParameterParserRuleCall_4_1_1_0 = (RuleCall)cParametersAssignment_4_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cColonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cTypeAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final CrossReference cTypeDTypeCrossReference_7_0 = (CrossReference)cTypeAssignment_7.eContents().get(0);
		private final RuleCall cTypeDTypeIDTerminalRuleCall_7_0_1 = (RuleCall)cTypeDTypeCrossReference_7_0.eContents().get(1);
		private final Assignment cMultiplicityAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cMultiplicityDMultiplicityParserRuleCall_8_0 = (RuleCall)cMultiplicityAssignment_8.eContents().get(0);
		private final Group cGroup_9 = (Group)cGroup.eContents().get(9);
		private final Keyword cReturnsKeyword_9_0 = (Keyword)cGroup_9.eContents().get(0);
		private final Assignment cReturnsAssignment_9_1 = (Assignment)cGroup_9.eContents().get(1);
		private final RuleCall cReturnsDExpressionParserRuleCall_9_1_0 = (RuleCall)cReturnsAssignment_9_1.eContents().get(0);
		private final Assignment cDescriptionAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cDescriptionDRichTextParserRuleCall_10_0 = (RuleCall)cDescriptionAssignment_10.eContents().get(0);
		private final Assignment cNotesAssignment_11 = (Assignment)cGroup.eContents().get(11);
		private final RuleCall cNotesDNoteParserRuleCall_11_0 = (RuleCall)cNotesAssignment_11.eContents().get(0);
		
		//DimQuery DQuery:
		//	{DimQuery} name=ID ('alias' alias=ID)?
		//	'(' (parameters+=DimQueryParameter ("," parameters+=DimQueryParameter)*)? ')'
		//	':'
		//	type=[DType]? // optional: allows parser to continue parsing potential targets, caught by validation
		//	multiplicity=DMultiplicity? ('returns' ^returns=DExpression)?
		//	description=DRichText?
		//	notes+=DNote*;
		@Override public ParserRule getRule() { return rule; }
		
		//{DimQuery} name=ID ('alias' alias=ID)? '(' (parameters+=DimQueryParameter ("," parameters+=DimQueryParameter)*)? ')' ':'
		//type=[DType]? // optional: allows parser to continue parsing potential targets, caught by validation
		//multiplicity=DMultiplicity? ('returns' ^returns=DExpression)? description=DRichText? notes+=DNote*
		public Group getGroup() { return cGroup; }
		
		//{DimQuery}
		public Action getDimQueryAction_0() { return cDimQueryAction_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//('alias' alias=ID)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'alias'
		public Keyword getAliasKeyword_2_0() { return cAliasKeyword_2_0; }
		
		//alias=ID
		public Assignment getAliasAssignment_2_1() { return cAliasAssignment_2_1; }
		
		//ID
		public RuleCall getAliasIDTerminalRuleCall_2_1_0() { return cAliasIDTerminalRuleCall_2_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }
		
		//(parameters+=DimQueryParameter ("," parameters+=DimQueryParameter)*)?
		public Group getGroup_4() { return cGroup_4; }
		
		//parameters+=DimQueryParameter
		public Assignment getParametersAssignment_4_0() { return cParametersAssignment_4_0; }
		
		//DimQueryParameter
		public RuleCall getParametersDimQueryParameterParserRuleCall_4_0_0() { return cParametersDimQueryParameterParserRuleCall_4_0_0; }
		
		//("," parameters+=DimQueryParameter)*
		public Group getGroup_4_1() { return cGroup_4_1; }
		
		//","
		public Keyword getCommaKeyword_4_1_0() { return cCommaKeyword_4_1_0; }
		
		//parameters+=DimQueryParameter
		public Assignment getParametersAssignment_4_1_1() { return cParametersAssignment_4_1_1; }
		
		//DimQueryParameter
		public RuleCall getParametersDimQueryParameterParserRuleCall_4_1_1_0() { return cParametersDimQueryParameterParserRuleCall_4_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
		
		//':'
		public Keyword getColonKeyword_6() { return cColonKeyword_6; }
		
		//type=[DType]?
		public Assignment getTypeAssignment_7() { return cTypeAssignment_7; }
		
		//[DType]
		public CrossReference getTypeDTypeCrossReference_7_0() { return cTypeDTypeCrossReference_7_0; }
		
		//ID
		public RuleCall getTypeDTypeIDTerminalRuleCall_7_0_1() { return cTypeDTypeIDTerminalRuleCall_7_0_1; }
		
		//// optional: allows parser to continue parsing potential targets, caught by validation
		//multiplicity=DMultiplicity?
		public Assignment getMultiplicityAssignment_8() { return cMultiplicityAssignment_8; }
		
		//DMultiplicity
		public RuleCall getMultiplicityDMultiplicityParserRuleCall_8_0() { return cMultiplicityDMultiplicityParserRuleCall_8_0; }
		
		//('returns' ^returns=DExpression)?
		public Group getGroup_9() { return cGroup_9; }
		
		//'returns'
		public Keyword getReturnsKeyword_9_0() { return cReturnsKeyword_9_0; }
		
		//^returns=DExpression
		public Assignment getReturnsAssignment_9_1() { return cReturnsAssignment_9_1; }
		
		//DExpression
		public RuleCall getReturnsDExpressionParserRuleCall_9_1_0() { return cReturnsDExpressionParserRuleCall_9_1_0; }
		
		//description=DRichText?
		public Assignment getDescriptionAssignment_10() { return cDescriptionAssignment_10; }
		
		//DRichText
		public RuleCall getDescriptionDRichTextParserRuleCall_10_0() { return cDescriptionDRichTextParserRuleCall_10_0; }
		
		//notes+=DNote*
		public Assignment getNotesAssignment_11() { return cNotesAssignment_11; }
		
		//DNote
		public RuleCall getNotesDNoteParserRuleCall_11_0() { return cNotesDNoteParserRuleCall_11_0; }
	}
	public class DimQueryParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.dim.Dim.DimQueryParameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDimQueryParameterAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cTypeDTypeCrossReference_3_0 = (CrossReference)cTypeAssignment_3.eContents().get(0);
		private final RuleCall cTypeDTypeIDTerminalRuleCall_3_0_1 = (RuleCall)cTypeDTypeCrossReference_3_0.eContents().get(1);
		private final Assignment cMultiplicityAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cMultiplicityDMultiplicityParserRuleCall_4_0 = (RuleCall)cMultiplicityAssignment_4.eContents().get(0);
		private final Assignment cDescriptionAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cDescriptionDRichTextParserRuleCall_5_0 = (RuleCall)cDescriptionAssignment_5.eContents().get(0);
		private final Assignment cNotesAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cNotesDNoteParserRuleCall_6_0 = (RuleCall)cNotesAssignment_6.eContents().get(0);
		
		//DimQueryParameter DQueryParameter:
		//	{DimQueryParameter} name=ID
		//	':'
		//	type=[DType]? // optional: allows parser to continue parsing potential targets, caught by validation
		//	multiplicity=DMultiplicity?
		//	description=DRichText?
		//	notes+=DNote*;
		@Override public ParserRule getRule() { return rule; }
		
		//{DimQueryParameter} name=ID ':' type=[DType]? // optional: allows parser to continue parsing potential targets, caught by validation
		//multiplicity=DMultiplicity? description=DRichText? notes+=DNote*
		public Group getGroup() { return cGroup; }
		
		//{DimQueryParameter}
		public Action getDimQueryParameterAction_0() { return cDimQueryParameterAction_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//type=[DType]?
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }
		
		//[DType]
		public CrossReference getTypeDTypeCrossReference_3_0() { return cTypeDTypeCrossReference_3_0; }
		
		//ID
		public RuleCall getTypeDTypeIDTerminalRuleCall_3_0_1() { return cTypeDTypeIDTerminalRuleCall_3_0_1; }
		
		//// optional: allows parser to continue parsing potential targets, caught by validation
		//multiplicity=DMultiplicity?
		public Assignment getMultiplicityAssignment_4() { return cMultiplicityAssignment_4; }
		
		//DMultiplicity
		public RuleCall getMultiplicityDMultiplicityParserRuleCall_4_0() { return cMultiplicityDMultiplicityParserRuleCall_4_0; }
		
		//description=DRichText?
		public Assignment getDescriptionAssignment_5() { return cDescriptionAssignment_5; }
		
		//DRichText
		public RuleCall getDescriptionDRichTextParserRuleCall_5_0() { return cDescriptionDRichTextParserRuleCall_5_0; }
		
		//notes+=DNote*
		public Assignment getNotesAssignment_6() { return cNotesAssignment_6; }
		
		//DNote
		public RuleCall getNotesDNoteParserRuleCall_6_0() { return cNotesDNoteParserRuleCall_6_0; }
	}
	
	public class DEntityNatureAutonomousElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.dim.Dim.DEntityNatureAutonomous");
		private final EnumLiteralDeclaration cAUTONOMOUS_ENTITYEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cAUTONOMOUS_ENTITYAutonomousKeyword_0 = (Keyword)cAUTONOMOUS_ENTITYEnumLiteralDeclaration.eContents().get(0);
		
		//enum DEntityNatureAutonomous returns DEntityNature:
		//	AUTONOMOUS_ENTITY='autonomous';
		public EnumRule getRule() { return rule; }
		
		//AUTONOMOUS_ENTITY='autonomous'
		public EnumLiteralDeclaration getAUTONOMOUS_ENTITYEnumLiteralDeclaration() { return cAUTONOMOUS_ENTITYEnumLiteralDeclaration; }
		
		//'autonomous'
		public Keyword getAUTONOMOUS_ENTITYAutonomousKeyword_0() { return cAUTONOMOUS_ENTITYAutonomousKeyword_0; }
	}
	public class DEntityNatureRelationshipElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.dim.Dim.DEntityNatureRelationship");
		private final EnumLiteralDeclaration cRELATIONSHIPEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cRELATIONSHIPRelationshipKeyword_0 = (Keyword)cRELATIONSHIPEnumLiteralDeclaration.eContents().get(0);
		
		//enum DEntityNatureRelationship returns DEntityNature:
		//	RELATIONSHIP='relationship';
		public EnumRule getRule() { return rule; }
		
		//RELATIONSHIP='relationship'
		public EnumLiteralDeclaration getRELATIONSHIPEnumLiteralDeclaration() { return cRELATIONSHIPEnumLiteralDeclaration; }
		
		//'relationship'
		public Keyword getRELATIONSHIPRelationshipKeyword_0() { return cRELATIONSHIPRelationshipKeyword_0; }
	}
	public class DAssociationKindElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.dim.Dim.DAssociationKind");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cREFERENCEEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cREFERENCEReferencesKeyword_0_0 = (Keyword)cREFERENCEEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cCOMPOSITEEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cCOMPOSITEContainsKeyword_1_0 = (Keyword)cCOMPOSITEEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum DAssociationKind:
		//	REFERENCE="references" | COMPOSITE="contains";
		public EnumRule getRule() { return rule; }
		
		//REFERENCE="references" | COMPOSITE="contains"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//REFERENCE="references"
		public EnumLiteralDeclaration getREFERENCEEnumLiteralDeclaration_0() { return cREFERENCEEnumLiteralDeclaration_0; }
		
		//"references"
		public Keyword getREFERENCEReferencesKeyword_0_0() { return cREFERENCEReferencesKeyword_0_0; }
		
		//COMPOSITE="contains"
		public EnumLiteralDeclaration getCOMPOSITEEnumLiteralDeclaration_1() { return cCOMPOSITEEnumLiteralDeclaration_1; }
		
		//"contains"
		public Keyword getCOMPOSITEContainsKeyword_1_0() { return cCOMPOSITEContainsKeyword_1_0; }
	}
	public class DAssociationKindInverseElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.dim.Dim.DAssociationKindInverse");
		private final EnumLiteralDeclaration cINVERSE_COMPOSITEEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cINVERSE_COMPOSITEInverseKeyword_0 = (Keyword)cINVERSE_COMPOSITEEnumLiteralDeclaration.eContents().get(0);
		
		//enum DAssociationKindInverse returns DAssociationKind:
		//	INVERSE_COMPOSITE="inverse";
		public EnumRule getRule() { return rule; }
		
		//INVERSE_COMPOSITE="inverse"
		public EnumLiteralDeclaration getINVERSE_COMPOSITEEnumLiteralDeclaration() { return cINVERSE_COMPOSITEEnumLiteralDeclaration; }
		
		//"inverse"
		public Keyword getINVERSE_COMPOSITEInverseKeyword_0() { return cINVERSE_COMPOSITEInverseKeyword_0; }
	}
	
	private final DNamespaceElements pDNamespace;
	private final DomainInformationModelElements pDomainInformationModel;
	private final DimAggregateElements pDimAggregate;
	private final DAggregateKeywordElements pDAggregateKeyword;
	private final DimTypeElements pDimType;
	private final DConstraintElements pDConstraint;
	private final DimPrimitiveElements pDimPrimitive;
	private final DimEnumerationElements pDimEnumeration;
	private final DimLiteralElements pDimLiteral;
	private final DimEntityTypeElements pDimEntityType;
	private final DEntityNatureAutonomousElements eDEntityNatureAutonomous;
	private final DEntityNatureRelationshipElements eDEntityNatureRelationship;
	private final DStateElements pDState;
	private final DStateEventElements pDStateEvent;
	private final DimDetailTypeElements pDimDetailType;
	private final DimComplexTypeElements pDimComplexType;
	private final DimFeatureElements pDimFeature;
	private final DimAssociationElements pDimAssociation;
	private final DAssociationKindElements eDAssociationKind;
	private final DAssociationKindInverseElements eDAssociationKindInverse;
	private final DimAttributeElements pDimAttribute;
	private final DimQueryElements pDimQuery;
	private final DimQueryParameterElements pDimQueryParameter;
	
	private final Grammar grammar;
	
	private final DmxGrammarAccess gaDmx;

	@Inject
	public DimGrammarAccess(GrammarProvider grammarProvider,
			DmxGrammarAccess gaDmx) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaDmx = gaDmx;
		this.pDNamespace = new DNamespaceElements();
		this.pDomainInformationModel = new DomainInformationModelElements();
		this.pDimAggregate = new DimAggregateElements();
		this.pDAggregateKeyword = new DAggregateKeywordElements();
		this.pDimType = new DimTypeElements();
		this.pDConstraint = new DConstraintElements();
		this.pDimPrimitive = new DimPrimitiveElements();
		this.pDimEnumeration = new DimEnumerationElements();
		this.pDimLiteral = new DimLiteralElements();
		this.pDimEntityType = new DimEntityTypeElements();
		this.eDEntityNatureAutonomous = new DEntityNatureAutonomousElements();
		this.eDEntityNatureRelationship = new DEntityNatureRelationshipElements();
		this.pDState = new DStateElements();
		this.pDStateEvent = new DStateEventElements();
		this.pDimDetailType = new DimDetailTypeElements();
		this.pDimComplexType = new DimComplexTypeElements();
		this.pDimFeature = new DimFeatureElements();
		this.pDimAssociation = new DimAssociationElements();
		this.eDAssociationKind = new DAssociationKindElements();
		this.eDAssociationKindInverse = new DAssociationKindInverseElements();
		this.pDimAttribute = new DimAttributeElements();
		this.pDimQuery = new DimQueryElements();
		this.pDimQueryParameter = new DimQueryParameterElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("com.mimacom.ddd.dm.dim.Dim".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public DmxGrammarAccess getDmxGrammarAccess() {
		return gaDmx;
	}

	
	//@Override
	//DNamespace:
	//	'domain'
	//	name=DQualifiedName
	//	imports+=DImport*
	//	model=DomainInformationModel;
	public DNamespaceElements getDNamespaceAccess() {
		return pDNamespace;
	}
	
	public ParserRule getDNamespaceRule() {
		return getDNamespaceAccess().getRule();
	}
	
	//DomainInformationModel:
	//	'information' 'model'
	//	name=ID ('alias' alias=ID)?
	//	description=DRichText?
	//	notes+=DNote*
	//	'{' (types+=DimType | aggregates+=DimAggregate)*
	//	'}';
	public DomainInformationModelElements getDomainInformationModelAccess() {
		return pDomainInformationModel;
	}
	
	public ParserRule getDomainInformationModelRule() {
		return getDomainInformationModelAccess().getRule();
	}
	
	//DimAggregate DAggregate:
	//	DAggregateKeyword {DimAggregate} name=ID ('alias' alias=ID)?
	//	description=DRichText?
	//	notes+=DNote*
	//	'{' ('query' features+=DimQuery)*
	//	types+=DimType*
	//	'}';
	public DimAggregateElements getDimAggregateAccess() {
		return pDimAggregate;
	}
	
	public ParserRule getDimAggregateRule() {
		return getDimAggregateAccess().getRule();
	}
	
	//DAggregateKeyword:
	//	'component';
	public DAggregateKeywordElements getDAggregateKeywordAccess() {
		return pDAggregateKeyword;
	}
	
	public ParserRule getDAggregateKeywordRule() {
		return getDAggregateKeywordAccess().getRule();
	}
	
	///*
	// * TYPES
	// */ DimType DType:
	//	DimPrimitive | DimEnumeration | DimEntityType | DimDetailType;
	public DimTypeElements getDimTypeAccess() {
		return pDimType;
	}
	
	public ParserRule getDimTypeRule() {
		return getDimTypeAccess().getRule();
	}
	
	//DConstraint DNamedPredicate:
	//	'constraint'
	//	name=ID ('alias' alias=ID)?
	//	':'
	//	predicate=DExpression
	//	description=DRichText?
	//	notes+=DNote*;
	public DConstraintElements getDConstraintAccess() {
		return pDConstraint;
	}
	
	public ParserRule getDConstraintRule() {
		return getDConstraintAccess().getRule();
	}
	
	//DimPrimitive DPrimitive:
	//	{DimPrimitive}
	//	'primitive'
	//	name=ID ('alias' alias=ID)?
	//	'redefines' redefines=[DmxArchetype] description=DRichText?
	//	notes+=DNote* ('{'
	//	constraints+=DConstraint+
	//	'}')?;
	public DimPrimitiveElements getDimPrimitiveAccess() {
		return pDimPrimitive;
	}
	
	public ParserRule getDimPrimitiveRule() {
		return getDimPrimitiveAccess().getRule();
	}
	
	//DimEnumeration DEnumeration:
	//	{DimEnumeration}
	//	'enumeration'
	//	name=ID ('alias' alias=ID)?
	//	description=DRichText?
	//	notes+=DNote*
	//	'{' (literals+=DimLiteral (',' literals+=DimLiteral)*)?
	//	constraints+=DConstraint*
	//	'}';
	public DimEnumerationElements getDimEnumerationAccess() {
		return pDimEnumeration;
	}
	
	public ParserRule getDimEnumerationRule() {
		return getDimEnumerationAccess().getRule();
	}
	
	//DimLiteral DLiteral:
	//	{DimLiteral} name=ID ('alias' alias=ID)?
	//	description=DRichText?
	//	notes+=DNote*;
	public DimLiteralElements getDimLiteralAccess() {
		return pDimLiteral;
	}
	
	public ParserRule getDimLiteralRule() {
		return getDimLiteralAccess().getRule();
	}
	
	//DimEntityType DEntityType:
	//	{DimEntityType} abstract?='abstract'?
	//	root?='main'? ('entity'
	//	| nature=DEntityNatureAutonomous 'entity' // validation: cannot be abstract
	//	| nature=DEntityNatureRelationship) DimComplexType
	//	'{' ('states'
	//	'{'
	//	states+=DState (',' states+=DState)*
	//	'}' ('events'
	//	'{'
	//	events+=DStateEvent (',' events+=DStateEvent)*
	//	'}')?)? (features+=DimFeature | constraints+=DConstraint)*
	//	'}';
	public DimEntityTypeElements getDimEntityTypeAccess() {
		return pDimEntityType;
	}
	
	public ParserRule getDimEntityTypeRule() {
		return getDimEntityTypeAccess().getRule();
	}
	
	//enum DEntityNatureAutonomous returns DEntityNature:
	//	AUTONOMOUS_ENTITY='autonomous';
	public DEntityNatureAutonomousElements getDEntityNatureAutonomousAccess() {
		return eDEntityNatureAutonomous;
	}
	
	public EnumRule getDEntityNatureAutonomousRule() {
		return getDEntityNatureAutonomousAccess().getRule();
	}
	
	//enum DEntityNatureRelationship returns DEntityNature:
	//	RELATIONSHIP='relationship';
	public DEntityNatureRelationshipElements getDEntityNatureRelationshipAccess() {
		return eDEntityNatureRelationship;
	}
	
	public EnumRule getDEntityNatureRelationshipRule() {
		return getDEntityNatureRelationshipAccess().getRule();
	}
	
	//DState:
	//	name=ID ('alias' alias=ID)?;
	public DStateElements getDStateAccess() {
		return pDState;
	}
	
	public ParserRule getDStateRule() {
		return getDStateAccess().getRule();
	}
	
	//DStateEvent:
	//	name=ID ('alias' alias=ID)?;
	public DStateEventElements getDStateEventAccess() {
		return pDStateEvent;
	}
	
	public ParserRule getDStateEventRule() {
		return getDStateEventAccess().getRule();
	}
	
	//DimDetailType DDetailType:
	//	{DimDetailType} abstract?='abstract'?
	//	'detail'
	//	DimComplexType
	//	'{' (features+=DimFeature | constraints+=DConstraint)*
	//	'}';
	public DimDetailTypeElements getDimDetailTypeAccess() {
		return pDimDetailType;
	}
	
	public ParserRule getDimDetailTypeRule() {
		return getDimDetailTypeAccess().getRule();
	}
	
	//fragment DimComplexType returns DComplexType:
	//	name=ID ('alias' alias=ID)? ('extends' superType=[DComplexType])?
	//	description=DRichText?
	//	notes+=DNote*;
	public DimComplexTypeElements getDimComplexTypeAccess() {
		return pDimComplexType;
	}
	
	public ParserRule getDimComplexTypeRule() {
		return getDimComplexTypeAccess().getRule();
	}
	
	//DimFeature DFeature:
	//	DimAssociation | DimAttribute | DimQuery;
	public DimFeatureElements getDimFeatureAccess() {
		return pDimFeature;
	}
	
	public ParserRule getDimFeatureRule() {
		return getDimFeatureAccess().getRule();
	}
	
	//DimAssociation DAssociation:
	//	{DimAssociation} derived?='derived'?
	//	name=ID ('alias' alias=ID)? (kind=DAssociationKind | kind=DAssociationKindInverse "contains") type=[DEntityType]? // optional: allows parser to continue parsing potential targets, caught by validation
	//	multiplicity=DMultiplicity?
	//	description=DRichText?
	//	notes+=DNote*;
	public DimAssociationElements getDimAssociationAccess() {
		return pDimAssociation;
	}
	
	public ParserRule getDimAssociationRule() {
		return getDimAssociationAccess().getRule();
	}
	
	//enum DAssociationKind:
	//	REFERENCE="references" | COMPOSITE="contains";
	public DAssociationKindElements getDAssociationKindAccess() {
		return eDAssociationKind;
	}
	
	public EnumRule getDAssociationKindRule() {
		return getDAssociationKindAccess().getRule();
	}
	
	//enum DAssociationKindInverse returns DAssociationKind:
	//	INVERSE_COMPOSITE="inverse";
	public DAssociationKindInverseElements getDAssociationKindInverseAccess() {
		return eDAssociationKindInverse;
	}
	
	public EnumRule getDAssociationKindInverseRule() {
		return getDAssociationKindInverseAccess().getRule();
	}
	
	//DimAttribute DAttribute:
	//	{DimAttribute} detail?='detail'?
	//	name=ID ('alias' alias=ID)?
	//	':'
	//	type=[DType]? // optional: allows parser to continue parsing potential targets, caught by validation
	//	multiplicity=DMultiplicity?
	//	key?='key'?
	//	description=DRichText?
	//	notes+=DNote*;
	public DimAttributeElements getDimAttributeAccess() {
		return pDimAttribute;
	}
	
	public ParserRule getDimAttributeRule() {
		return getDimAttributeAccess().getRule();
	}
	
	//DimQuery DQuery:
	//	{DimQuery} name=ID ('alias' alias=ID)?
	//	'(' (parameters+=DimQueryParameter ("," parameters+=DimQueryParameter)*)? ')'
	//	':'
	//	type=[DType]? // optional: allows parser to continue parsing potential targets, caught by validation
	//	multiplicity=DMultiplicity? ('returns' ^returns=DExpression)?
	//	description=DRichText?
	//	notes+=DNote*;
	public DimQueryElements getDimQueryAccess() {
		return pDimQuery;
	}
	
	public ParserRule getDimQueryRule() {
		return getDimQueryAccess().getRule();
	}
	
	//DimQueryParameter DQueryParameter:
	//	{DimQueryParameter} name=ID
	//	':'
	//	type=[DType]? // optional: allows parser to continue parsing potential targets, caught by validation
	//	multiplicity=DMultiplicity?
	//	description=DRichText?
	//	notes+=DNote*;
	public DimQueryParameterElements getDimQueryParameterAccess() {
		return pDimQueryParameter;
	}
	
	public ParserRule getDimQueryParameterRule() {
		return getDimQueryParameterAccess().getRule();
	}
	
	//DNote:
	//	'NOTE'
	//	name=ID
	//	'{'
	//	text=DRichText
	//	color=DNoteColor?
	//	'}';
	public DmxGrammarAccess.DNoteElements getDNoteAccess() {
		return gaDmx.getDNoteAccess();
	}
	
	public ParserRule getDNoteRule() {
		return getDNoteAccess().getRule();
	}
	
	//enum DNoteColor:
	//	WHITE='white' | RED='red' | ORANGE='orange' | YELLOW='yellow' | GREEN='green' | BLUE='blue' | PINK='pink' |
	//	GREY='grey';
	public DmxGrammarAccess.DNoteColorElements getDNoteColorAccess() {
		return gaDmx.getDNoteColorAccess();
	}
	
	public EnumRule getDNoteColorRule() {
		return getDNoteColorAccess().getRule();
	}
	
	//DmxModel:
	//	{DmxModel} types+=DmxArchetype*
	//	filters+=DmxFilter*
	//	// For unit-testing purposes:
	//	tests+=DmxTest*;
	public DmxGrammarAccess.DmxModelElements getDmxModelAccess() {
		return gaDmx.getDmxModelAccess();
	}
	
	public ParserRule getDmxModelRule() {
		return getDmxModelAccess().getRule();
	}
	
	//DImport:
	//	'import' importedNamespace=DQualifiedNameWithWildcard;
	public DmxGrammarAccess.DImportElements getDImportAccess() {
		return gaDmx.getDImportAccess();
	}
	
	public ParserRule getDImportRule() {
		return getDImportAccess().getRule();
	}
	
	///* 
	// * Testing
	// */ DmxTest:
	//	'test'
	//	name=ID ('context'
	//	context+=DmxTestContext (',' context+=DmxTestContext)*)?
	//	'{'
	//	expr=DExpression
	//	'}';
	public DmxGrammarAccess.DmxTestElements getDmxTestAccess() {
		return gaDmx.getDmxTestAccess();
	}
	
	public ParserRule getDmxTestRule() {
		return getDmxTestAccess().getRule();
	}
	
	//DmxTestContext:
	//	name=ID
	//	':'
	//	type=[DType] multiplicity=DMultiplicity? (':=' (value=DmxLiteralExpression | value=DmxLiteralListExpression))?;
	public DmxGrammarAccess.DmxTestContextElements getDmxTestContextAccess() {
		return gaDmx.getDmxTestContextAccess();
	}
	
	public ParserRule getDmxTestContextRule() {
		return getDmxTestContextAccess().getRule();
	}
	
	//enum DmxBaseType:
	//	VOID | BOOLEAN | NUMBER | TEXT | IDENTIFIER | TIMEPOINT | STATE /*transition*/ | STATE_EVENT | COMPLEX | NOTIFICATION
	//	/*sent* */ | SERVICE /*invoked* */;
	public DmxGrammarAccess.DmxBaseTypeElements getDmxBaseTypeAccess() {
		return gaDmx.getDmxBaseTypeAccess();
	}
	
	public EnumRule getDmxBaseTypeRule() {
		return getDmxBaseTypeAccess().getRule();
	}
	
	//DmxBaseTypeSet:
	//	name=ID
	//	'in'
	//	'(' members+=DmxBaseType (',' members+=DmxBaseType)+ ')';
	public DmxGrammarAccess.DmxBaseTypeSetElements getDmxBaseTypeSetAccess() {
		return gaDmx.getDmxBaseTypeSetAccess();
	}
	
	public ParserRule getDmxBaseTypeSetRule() {
		return getDmxBaseTypeSetAccess().getRule();
	}
	
	//DmxArchetype:
	//	'archetype'
	//	name=ID
	//	'is'
	//	baseType=DmxBaseType
	//	description=DRichText?;
	public DmxGrammarAccess.DmxArchetypeElements getDmxArchetypeAccess() {
		return gaDmx.getDmxArchetypeAccess();
	}
	
	public ParserRule getDmxArchetypeRule() {
		return getDmxArchetypeAccess().getRule();
	}
	
	//DmxFilter:
	//	'filter'
	//	name=ID
	//	'(' (parameters+=DmxFilterParameter (',' parameters+=DmxFilterParameter)*)? ')'
	//	':'
	//	typeDesc=DmxFilterTypeDescriptor ('with' withTypeSet=DmxBaseTypeSet)?;
	public DmxGrammarAccess.DmxFilterElements getDmxFilterAccess() {
		return gaDmx.getDmxFilterAccess();
	}
	
	public ParserRule getDmxFilterRule() {
		return getDmxFilterAccess().getRule();
	}
	
	//DmxFilterTypeDescriptor:
	//	(single=DmxBaseType
	//	| multiple=[DmxBaseTypeSet]) collection?='*'?;
	public DmxGrammarAccess.DmxFilterTypeDescriptorElements getDmxFilterTypeDescriptorAccess() {
		return gaDmx.getDmxFilterTypeDescriptorAccess();
	}
	
	public ParserRule getDmxFilterTypeDescriptorRule() {
		return getDmxFilterTypeDescriptorAccess().getRule();
	}
	
	//DmxFilterParameter:
	//	name=ID
	//	':'
	//	typeDesc=DmxFilterTypeDescriptor;
	public DmxGrammarAccess.DmxFilterParameterElements getDmxFilterParameterAccess() {
		return gaDmx.getDmxFilterParameterAccess();
	}
	
	public ParserRule getDmxFilterParameterRule() {
		return getDmxFilterParameterAccess().getRule();
	}
	
	///*
	// * Expressions
	// */ DExpression:
	//	DmxAssignment | DmxPredicateWithCorrelationVariable | DRichText;
	public DmxGrammarAccess.DExpressionElements getDExpressionAccess() {
		return gaDmx.getDExpressionAccess();
	}
	
	public ParserRule getDExpressionRule() {
		return getDExpressionAccess().getRule();
	}
	
	//DRichText:
	//	segments+=DmxTextOnly
	//	| segments+=DmxTextStart
	//	segments+=DExpression (segments+=DmxTextMiddle segments+=DExpression)*
	//	segments+=DmxTextEnd;
	public DmxGrammarAccess.DRichTextElements getDRichTextAccess() {
		return gaDmx.getDRichTextAccess();
	}
	
	public ParserRule getDRichTextRule() {
		return getDRichTextAccess().getRule();
	}
	
	//DmxTextOnly DTextSegment:
	//	value=PLAIN_TEXT_ONLY;
	public DmxGrammarAccess.DmxTextOnlyElements getDmxTextOnlyAccess() {
		return gaDmx.getDmxTextOnlyAccess();
	}
	
	public ParserRule getDmxTextOnlyRule() {
		return getDmxTextOnlyAccess().getRule();
	}
	
	//DmxTextStart DTextSegment:
	//	value=RICH_TEXT_START;
	public DmxGrammarAccess.DmxTextStartElements getDmxTextStartAccess() {
		return gaDmx.getDmxTextStartAccess();
	}
	
	public ParserRule getDmxTextStartRule() {
		return getDmxTextStartAccess().getRule();
	}
	
	//DmxTextMiddle DTextSegment:
	//	value=RICH_TEXT_MIDDLE;
	public DmxGrammarAccess.DmxTextMiddleElements getDmxTextMiddleAccess() {
		return gaDmx.getDmxTextMiddleAccess();
	}
	
	public ParserRule getDmxTextMiddleRule() {
		return getDmxTextMiddleAccess().getRule();
	}
	
	//DmxTextEnd DTextSegment:
	//	value=RICH_TEXT_END;
	public DmxGrammarAccess.DmxTextEndElements getDmxTextEndAccess() {
		return gaDmx.getDmxTextEndAccess();
	}
	
	public ParserRule getDmxTextEndRule() {
		return getDmxTextEndAccess().getRule();
	}
	
	//DmxNavigableMemberReference DExpression:
	//	DmxPrimaryExpression (=> ({DmxAssignment.precedingNavigationSegment=current} '.'
	//	assignToMember=[DNavigableMember] DmxOpSingleAssign) value=DmxOrExpression
	//	| => ({DmxMemberNavigation.precedingNavigationSegment=current} '.') member=[DNavigableMember] (=>
	//	explicitOperationCall?='(' // => boolean => has 0.n explicit arguments
	//	callArguments=DmxCallArguments
	//	')'
	//	| before?="@before")?)*;
	public DmxGrammarAccess.DmxNavigableMemberReferenceElements getDmxNavigableMemberReferenceAccess() {
		return gaDmx.getDmxNavigableMemberReferenceAccess();
	}
	
	public ParserRule getDmxNavigableMemberReferenceRule() {
		return getDmxNavigableMemberReferenceAccess().getRule();
	}
	
	//DmxCallArguments:
	//	{DmxCallArguments} (arguments+=DmxPredicateWithCorrelationVariable (','
	//	arguments+=DmxPredicateWithCorrelationVariable)*)?;
	public DmxGrammarAccess.DmxCallArgumentsElements getDmxCallArgumentsAccess() {
		return gaDmx.getDmxCallArgumentsAccess();
	}
	
	public ParserRule getDmxCallArgumentsRule() {
		return getDmxCallArgumentsAccess().getRule();
	}
	
	//DmxAssignment DExpression:
	//	{DmxAssignment} assignToMember=[DNavigableMember] DmxOpSingleAssign value=DmxOrExpression;
	public DmxGrammarAccess.DmxAssignmentElements getDmxAssignmentAccess() {
		return gaDmx.getDmxAssignmentAccess();
	}
	
	public ParserRule getDmxAssignmentRule() {
		return getDmxAssignmentAccess().getRule();
	}
	
	//DmxOpSingleAssign:
	//	':=';
	public DmxGrammarAccess.DmxOpSingleAssignElements getDmxOpSingleAssignAccess() {
		return gaDmx.getDmxOpSingleAssignAccess();
	}
	
	public ParserRule getDmxOpSingleAssignRule() {
		return getDmxOpSingleAssignAccess().getRule();
	}
	
	//DmxPredicateWithCorrelationVariable DExpression:
	//	{DmxPredicateWithCorrelationVariable} correlationVariable=DmxCorrelationVariable
	//	'|'
	//	predicate=DmxOrExpression
	//	| DmxOrExpression;
	public DmxGrammarAccess.DmxPredicateWithCorrelationVariableElements getDmxPredicateWithCorrelationVariableAccess() {
		return gaDmx.getDmxPredicateWithCorrelationVariableAccess();
	}
	
	public ParserRule getDmxPredicateWithCorrelationVariableRule() {
		return getDmxPredicateWithCorrelationVariableAccess().getRule();
	}
	
	//DmxCorrelationVariable:
	//	name=ID;
	public DmxGrammarAccess.DmxCorrelationVariableElements getDmxCorrelationVariableAccess() {
		return gaDmx.getDmxCorrelationVariableAccess();
	}
	
	public ParserRule getDmxCorrelationVariableRule() {
		return getDmxCorrelationVariableAccess().getRule();
	}
	
	////	(':' type=[DType])? => type is always NULL!
	//DmxOrExpression DExpression:
	//	DmxAndExpression (=> ({DmxBinaryOperation.leftOperand=current} operator=DmxOpOr) rightOperand=DmxAndExpression)*;
	public DmxGrammarAccess.DmxOrExpressionElements getDmxOrExpressionAccess() {
		return gaDmx.getDmxOrExpressionAccess();
	}
	
	public ParserRule getDmxOrExpressionRule() {
		return getDmxOrExpressionAccess().getRule();
	}
	
	//enum DmxOpOr returns DmxBinaryOperator:
	//	OR | OR='or' | XOR | XOR='xor';
	public DmxGrammarAccess.DmxOpOrElements getDmxOpOrAccess() {
		return gaDmx.getDmxOpOrAccess();
	}
	
	public EnumRule getDmxOpOrRule() {
		return getDmxOpOrAccess().getRule();
	}
	
	//DmxAndExpression DExpression:
	//	DmxEqualityExpression (=> ({DmxBinaryOperation.leftOperand=current} operator=DmxOpAnd)
	//	rightOperand=DmxEqualityExpression)*;
	public DmxGrammarAccess.DmxAndExpressionElements getDmxAndExpressionAccess() {
		return gaDmx.getDmxAndExpressionAccess();
	}
	
	public ParserRule getDmxAndExpressionRule() {
		return getDmxAndExpressionAccess().getRule();
	}
	
	//enum DmxOpAnd returns DmxBinaryOperator:
	//	AND | AND='and';
	public DmxGrammarAccess.DmxOpAndElements getDmxOpAndAccess() {
		return gaDmx.getDmxOpAndAccess();
	}
	
	public EnumRule getDmxOpAndRule() {
		return getDmxOpAndAccess().getRule();
	}
	
	//DmxEqualityExpression DExpression:
	//	DmxRelationalExpression (=> ({DmxBinaryOperation.leftOperand=current} operator=DmxOpEquality)
	//	rightOperand=DmxRelationalExpression)*;
	public DmxGrammarAccess.DmxEqualityExpressionElements getDmxEqualityExpressionAccess() {
		return gaDmx.getDmxEqualityExpressionAccess();
	}
	
	public ParserRule getDmxEqualityExpressionRule() {
		return getDmxEqualityExpressionAccess().getRule();
	}
	
	//enum DmxOpEquality returns DmxBinaryOperator:
	//	EQUAL='=' | NOT_EQUAL='!=' | NOT_EQUAL='<>';
	public DmxGrammarAccess.DmxOpEqualityElements getDmxOpEqualityAccess() {
		return gaDmx.getDmxOpEqualityAccess();
	}
	
	public EnumRule getDmxOpEqualityRule() {
		return getDmxOpEqualityAccess().getRule();
	}
	
	//DmxRelationalExpression DExpression:
	//	DmxOtherOperatorExpression (=> ({DmxInstanceOfExpression.expression=current} DmxOpInstanceOf) type=[DType] | =>
	//	({DmxBinaryOperation.leftOperand=current} operator=OpCompare) rightOperand=DmxOtherOperatorExpression)*;
	public DmxGrammarAccess.DmxRelationalExpressionElements getDmxRelationalExpressionAccess() {
		return gaDmx.getDmxRelationalExpressionAccess();
	}
	
	public ParserRule getDmxRelationalExpressionRule() {
		return getDmxRelationalExpressionAccess().getRule();
	}
	
	//DmxOpInstanceOf:
	//	'ISA' | 'isa';
	public DmxGrammarAccess.DmxOpInstanceOfElements getDmxOpInstanceOfAccess() {
		return gaDmx.getDmxOpInstanceOfAccess();
	}
	
	public ParserRule getDmxOpInstanceOfRule() {
		return getDmxOpInstanceOfAccess().getRule();
	}
	
	//enum OpCompare returns DmxBinaryOperator:
	//	LESS='<' | LESS_OR_EQUAL='<=' | LESS_OR_EQUAL='≤' | GREATER_OR_EQUAL='>=' | GREATER_OR_EQUAL='≥' | GREATER='>';
	public DmxGrammarAccess.OpCompareElements getOpCompareAccess() {
		return gaDmx.getOpCompareAccess();
	}
	
	public EnumRule getOpCompareRule() {
		return getOpCompareAccess().getRule();
	}
	
	//DmxOtherOperatorExpression DExpression:
	//	DmxAdditiveExpression (=> ({DmxBinaryOperation.leftOperand=current} operator=OpOther)
	//	rightOperand=DmxAdditiveExpression)*;
	public DmxGrammarAccess.DmxOtherOperatorExpressionElements getDmxOtherOperatorExpressionAccess() {
		return gaDmx.getDmxOtherOperatorExpressionAccess();
	}
	
	public ParserRule getDmxOtherOperatorExpressionRule() {
		return getDmxOtherOperatorExpressionAccess().getRule();
	}
	
	//enum OpOther returns DmxBinaryOperator:
	//	IN | IN='in' | UNTIL='..' | SINGLE_ARROW='->' | DOUBLE_ARROW='=>';
	public DmxGrammarAccess.OpOtherElements getOpOtherAccess() {
		return gaDmx.getOpOtherAccess();
	}
	
	public EnumRule getOpOtherRule() {
		return getOpOtherAccess().getRule();
	}
	
	//DmxAdditiveExpression DExpression:
	//	DmxMultiplicativeExpression (=> ({DmxBinaryOperation.leftOperand=current} operator=OpAdd)
	//	rightOperand=DmxMultiplicativeExpression)*;
	public DmxGrammarAccess.DmxAdditiveExpressionElements getDmxAdditiveExpressionAccess() {
		return gaDmx.getDmxAdditiveExpressionAccess();
	}
	
	public ParserRule getDmxAdditiveExpressionRule() {
		return getDmxAdditiveExpressionAccess().getRule();
	}
	
	//enum OpAdd returns DmxBinaryOperator:
	//	ADD='+' | SUBTRACT='-';
	public DmxGrammarAccess.OpAddElements getOpAddAccess() {
		return gaDmx.getOpAddAccess();
	}
	
	public EnumRule getOpAddRule() {
		return getOpAddAccess().getRule();
	}
	
	//DmxMultiplicativeExpression DExpression:
	//	DmxUnaryOperation (=> ({DmxBinaryOperation.leftOperand=current} operator=OpMulti) rightOperand=DmxUnaryOperation)*;
	public DmxGrammarAccess.DmxMultiplicativeExpressionElements getDmxMultiplicativeExpressionAccess() {
		return gaDmx.getDmxMultiplicativeExpressionAccess();
	}
	
	public ParserRule getDmxMultiplicativeExpressionRule() {
		return getDmxMultiplicativeExpressionAccess().getRule();
	}
	
	//enum OpMulti returns DmxBinaryOperator:
	//	MULTIPLY='*' | DIVIDE='/' | POWER='**' | MODULO='%';
	public DmxGrammarAccess.OpMultiElements getOpMultiAccess() {
		return gaDmx.getOpMultiAccess();
	}
	
	public EnumRule getOpMultiRule() {
		return getOpMultiAccess().getRule();
	}
	
	//DmxUnaryOperation DExpression:
	//	{DmxUnaryOperation} operator=OpUnary operand=DmxUnaryOperation
	//	| DmxCastExpression;
	public DmxGrammarAccess.DmxUnaryOperationElements getDmxUnaryOperationAccess() {
		return gaDmx.getDmxUnaryOperationAccess();
	}
	
	public ParserRule getDmxUnaryOperationRule() {
		return getDmxUnaryOperationAccess().getRule();
	}
	
	//enum OpUnary returns DmxUnaryOperator:
	//	PLUS='+' | MINUS='-' | NOT='!' | NOT | NOT='not';
	public DmxGrammarAccess.OpUnaryElements getOpUnaryAccess() {
		return gaDmx.getOpUnaryAccess();
	}
	
	public EnumRule getOpUnaryRule() {
		return getOpUnaryAccess().getRule();
	}
	
	//DmxCastExpression DExpression:
	//	DmxNavigableMemberReference (=> ({DmxCastExpression.target=current} DmxOpCast) type=[DType])?;
	public DmxGrammarAccess.DmxCastExpressionElements getDmxCastExpressionAccess() {
		return gaDmx.getDmxCastExpressionAccess();
	}
	
	public ParserRule getDmxCastExpressionRule() {
		return getDmxCastExpressionAccess().getRule();
	}
	
	//DmxOpCast:
	//	'AS' | 'as';
	public DmxGrammarAccess.DmxOpCastElements getDmxOpCastAccess() {
		return gaDmx.getDmxOpCastAccess();
	}
	
	public ParserRule getDmxOpCastRule() {
		return getDmxOpCastAccess().getRule();
	}
	
	//DmxPrimaryExpression DExpression:
	//	DmxLiteralExpression | DmxParenthesizedExpression | DmxListExpression | DmxFunctionCall | DmxStaticReference |
	//	DmxContextReference | DmxIfExpression;
	public DmxGrammarAccess.DmxPrimaryExpressionElements getDmxPrimaryExpressionAccess() {
		return gaDmx.getDmxPrimaryExpressionAccess();
	}
	
	public ParserRule getDmxPrimaryExpressionRule() {
		return getDmxPrimaryExpressionAccess().getRule();
	}
	
	//DmxLiteralExpression DExpression:
	//	DmxBooleanLiteral | DmxStringLiteral | DmxNaturalLiteral | DmxDecimalLiteral | DmxUndefinedLiteral | DmxEntity |
	//	DmxDetail;
	public DmxGrammarAccess.DmxLiteralExpressionElements getDmxLiteralExpressionAccess() {
		return gaDmx.getDmxLiteralExpressionAccess();
	}
	
	public ParserRule getDmxLiteralExpressionRule() {
		return getDmxLiteralExpressionAccess().getRule();
	}
	
	//DmxParenthesizedExpression DExpression:
	//	'(' DExpression ')';
	public DmxGrammarAccess.DmxParenthesizedExpressionElements getDmxParenthesizedExpressionAccess() {
		return gaDmx.getDmxParenthesizedExpressionAccess();
	}
	
	public ParserRule getDmxParenthesizedExpressionRule() {
		return getDmxParenthesizedExpressionAccess().getRule();
	}
	
	//DmxListExpression DExpression:
	//	{DmxListExpression}
	//	'{' (elements+=DExpression (',' elements+=DExpression)*)?
	//	'}';
	public DmxGrammarAccess.DmxListExpressionElements getDmxListExpressionAccess() {
		return gaDmx.getDmxListExpressionAccess();
	}
	
	public ParserRule getDmxListExpressionRule() {
		return getDmxListExpressionAccess().getRule();
	}
	
	//DmxLiteralListExpression DExpression:
	//	{DmxListExpression}
	//	'{' (elements+=DmxLiteralExpression (',' elements+=DmxLiteralExpression)*)?
	//	'}';
	public DmxGrammarAccess.DmxLiteralListExpressionElements getDmxLiteralListExpressionAccess() {
		return gaDmx.getDmxLiteralListExpressionAccess();
	}
	
	public ParserRule getDmxLiteralListExpressionRule() {
		return getDmxLiteralListExpressionAccess().getRule();
	}
	
	//DmxFunctionCall DExpression:
	//	{DmxFunctionCall} function=[DmxFilter]
	//	'('
	//	callArguments=DmxFunctionCallArguments
	//	')';
	public DmxGrammarAccess.DmxFunctionCallElements getDmxFunctionCallAccess() {
		return gaDmx.getDmxFunctionCallAccess();
	}
	
	public ParserRule getDmxFunctionCallRule() {
		return getDmxFunctionCallAccess().getRule();
	}
	
	//DmxFunctionCallArguments DmxCallArguments:
	//	{DmxCallArguments} (arguments+=DExpression (',' arguments+=DExpression)*)?;
	public DmxGrammarAccess.DmxFunctionCallArgumentsElements getDmxFunctionCallArgumentsAccess() {
		return gaDmx.getDmxFunctionCallArgumentsAccess();
	}
	
	public ParserRule getDmxFunctionCallArgumentsRule() {
		return getDmxFunctionCallArgumentsAccess().getRule();
	}
	
	//DmxEntity:
	//	'entity'
	//	DmxComplexObject;
	public DmxGrammarAccess.DmxEntityElements getDmxEntityAccess() {
		return gaDmx.getDmxEntityAccess();
	}
	
	public ParserRule getDmxEntityRule() {
		return getDmxEntityAccess().getRule();
	}
	
	//DmxDetail:
	//	'detail'
	//	DmxComplexObject;
	public DmxGrammarAccess.DmxDetailElements getDmxDetailAccess() {
		return gaDmx.getDmxDetailAccess();
	}
	
	public ParserRule getDmxDetailRule() {
		return getDmxDetailAccess().getRule();
	}
	
	//fragment DmxComplexObject:
	//	type=[DComplexType] DmxFieldListStartSymbol
	//	fields+=DmxField*
	//	'}';
	public DmxGrammarAccess.DmxComplexObjectElements getDmxComplexObjectAccess() {
		return gaDmx.getDmxComplexObjectAccess();
	}
	
	public ParserRule getDmxComplexObjectRule() {
		return getDmxComplexObjectAccess().getRule();
	}
	
	//DmxField:
	//	feature=[DFeature] "=" value=DExpression
	//	description=DRichText?
	//	notes+=DNote*;
	public DmxGrammarAccess.DmxFieldElements getDmxFieldAccess() {
		return gaDmx.getDmxFieldAccess();
	}
	
	public ParserRule getDmxFieldRule() {
		return getDmxFieldAccess().getRule();
	}
	
	//DmxStaticReference DExpression:
	//	{DmxStaticReference}
	//	'['
	//	target=[IStaticReferenceTarget|DQualifiedName] ('#' member=[DNavigableMember])? ("|" (displayName=ID | plural?="*"))?
	//	-> ']';
	public DmxGrammarAccess.DmxStaticReferenceElements getDmxStaticReferenceAccess() {
		return gaDmx.getDmxStaticReferenceAccess();
	}
	
	public ParserRule getDmxStaticReferenceRule() {
		return getDmxStaticReferenceAccess().getRule();
	}
	
	//// '->' gives precedence to this ']' over PLAIN_TEXT_MIDDLE ('=>' works too but generates more lookahead overhead)
	//DmxContextReference DExpression:
	//	{DmxContextReference} target=[DNamedElement] (before?="@before"
	//	| '.' all?='all')?;
	public DmxGrammarAccess.DmxContextReferenceElements getDmxContextReferenceAccess() {
		return gaDmx.getDmxContextReferenceAccess();
	}
	
	public ParserRule getDmxContextReferenceRule() {
		return getDmxContextReferenceAccess().getRule();
	}
	
	//DmxIfExpression DExpression:
	//	{DmxIfExpression}
	//	'if' if=DExpression
	//	'then' then=DExpression (=> 'else' else=DExpression)?
	//	'end';
	public DmxGrammarAccess.DmxIfExpressionElements getDmxIfExpressionAccess() {
		return gaDmx.getDmxIfExpressionAccess();
	}
	
	public ParserRule getDmxIfExpressionRule() {
		return getDmxIfExpressionAccess().getRule();
	}
	
	//DMultiplicity:
	//	shorthand=DMultiplicityShorthand | '(' minOccurs=NATURAL '..' maxOccurs=MULTIPLICITY ')';
	public DmxGrammarAccess.DMultiplicityElements getDMultiplicityAccess() {
		return gaDmx.getDMultiplicityAccess();
	}
	
	public ParserRule getDMultiplicityRule() {
		return getDMultiplicityAccess().getRule();
	}
	
	//enum DMultiplicityShorthand:
	//	ZERO_OR_ONE='?' | ONE_OR_MORE='+' | ZERO_OR_MORE='*';
	public DmxGrammarAccess.DMultiplicityShorthandElements getDMultiplicityShorthandAccess() {
		return gaDmx.getDMultiplicityShorthandAccess();
	}
	
	public EnumRule getDMultiplicityShorthandRule() {
		return getDMultiplicityShorthandAccess().getRule();
	}
	
	//MULTIPLICITY ecore::EInt:
	//	NATURAL | '*';
	public DmxGrammarAccess.MULTIPLICITYElements getMULTIPLICITYAccess() {
		return gaDmx.getMULTIPLICITYAccess();
	}
	
	public ParserRule getMULTIPLICITYRule() {
		return getMULTIPLICITYAccess().getRule();
	}
	
	//DmxBooleanLiteral DExpression:
	//	{DmxBooleanLiteral} (value?='TRUE' | value?='true' | 'FALSE' | 'false');
	public DmxGrammarAccess.DmxBooleanLiteralElements getDmxBooleanLiteralAccess() {
		return gaDmx.getDmxBooleanLiteralAccess();
	}
	
	public ParserRule getDmxBooleanLiteralRule() {
		return getDmxBooleanLiteralAccess().getRule();
	}
	
	//DmxNaturalLiteral DExpression:
	//	{DmxNaturalLiteral} value=NATURAL;
	public DmxGrammarAccess.DmxNaturalLiteralElements getDmxNaturalLiteralAccess() {
		return gaDmx.getDmxNaturalLiteralAccess();
	}
	
	public ParserRule getDmxNaturalLiteralRule() {
		return getDmxNaturalLiteralAccess().getRule();
	}
	
	//DmxDecimalLiteral DExpression:
	//	{DmxDecimalLiteral} value=DECIMAL;
	public DmxGrammarAccess.DmxDecimalLiteralElements getDmxDecimalLiteralAccess() {
		return gaDmx.getDmxDecimalLiteralAccess();
	}
	
	public ParserRule getDmxDecimalLiteralRule() {
		return getDmxDecimalLiteralAccess().getRule();
	}
	
	//DmxStringLiteral DExpression:
	//	{DmxStringLiteral} value=STRING;
	public DmxGrammarAccess.DmxStringLiteralElements getDmxStringLiteralAccess() {
		return gaDmx.getDmxStringLiteralAccess();
	}
	
	public ParserRule getDmxStringLiteralRule() {
		return getDmxStringLiteralAccess().getRule();
	}
	
	//DmxUndefinedLiteral DExpression:
	//	{DmxUndefinedLiteral} ('UNDEFINED' | 'undefined');
	public DmxGrammarAccess.DmxUndefinedLiteralElements getDmxUndefinedLiteralAccess() {
		return gaDmx.getDmxUndefinedLiteralAccess();
	}
	
	public ParserRule getDmxUndefinedLiteralRule() {
		return getDmxUndefinedLiteralAccess().getRule();
	}
	
	//DmxUrlLiteral DExpression:
	//	{DmxUrlLiteral}
	//	'URL:'
	//	value=STRING ('|' display=STRING)?;
	public DmxGrammarAccess.DmxUrlLiteralElements getDmxUrlLiteralAccess() {
		return gaDmx.getDmxUrlLiteralAccess();
	}
	
	public ParserRule getDmxUrlLiteralRule() {
		return getDmxUrlLiteralAccess().getRule();
	}
	
	//DECIMAL:
	//	NATURAL '.' NATURAL (('E' | 'e') ('+' | '-')? NATURAL)?;
	public DmxGrammarAccess.DECIMALElements getDECIMALAccess() {
		return gaDmx.getDECIMALAccess();
	}
	
	public ParserRule getDECIMALRule() {
		return getDECIMALAccess().getRule();
	}
	
	//DmxFieldListStartSymbol:
	//	'{';
	public DmxGrammarAccess.DmxFieldListStartSymbolElements getDmxFieldListStartSymbolAccess() {
		return gaDmx.getDmxFieldListStartSymbolAccess();
	}
	
	public ParserRule getDmxFieldListStartSymbolRule() {
		return getDmxFieldListStartSymbolAccess().getRule();
	}
	
	//DQualifiedNameWithWildcard:
	//	DQualifiedName '.*'?;
	public DmxGrammarAccess.DQualifiedNameWithWildcardElements getDQualifiedNameWithWildcardAccess() {
		return gaDmx.getDQualifiedNameWithWildcardAccess();
	}
	
	public ParserRule getDQualifiedNameWithWildcardRule() {
		return getDQualifiedNameWithWildcardAccess().getRule();
	}
	
	//DQualifiedName:
	//	ID ('.' ID)*;
	public DmxGrammarAccess.DQualifiedNameElements getDQualifiedNameAccess() {
		return gaDmx.getDQualifiedNameAccess();
	}
	
	public ParserRule getDQualifiedNameRule() {
		return getDQualifiedNameAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? (LETTER | '_') (LETTER | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaDmx.getIDRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"';
	public TerminalRule getSTRINGRule() {
		return gaDmx.getSTRINGRule();
	}
	
	//terminal NATURAL returns ecore::EInt:
	//	'0'..'9'+ | '∞';
	public TerminalRule getNATURALRule() {
		return gaDmx.getNATURALRule();
	}
	
	//terminal fragment LETTER:
	//	'a'..'z' | 'A'..'Z' | '\\u00c0'..'\\u00d6' | '\\u00d8'..'\\u00f6' | '\\u00f8'..'\\u00ff';
	public TerminalRule getLETTERRule() {
		return gaDmx.getLETTERRule();
	}
	
	//terminal fragment PLAIN_TEXT:
	//	!('»' | ']' | '[');
	public TerminalRule getPLAIN_TEXTRule() {
		return gaDmx.getPLAIN_TEXTRule();
	}
	
	//terminal PLAIN_TEXT_ONLY:
	//	'«' PLAIN_TEXT* '»';
	public TerminalRule getPLAIN_TEXT_ONLYRule() {
		return gaDmx.getPLAIN_TEXT_ONLYRule();
	}
	
	//terminal RICH_TEXT_START:
	//	'«' PLAIN_TEXT* '[';
	public TerminalRule getRICH_TEXT_STARTRule() {
		return gaDmx.getRICH_TEXT_STARTRule();
	}
	
	//terminal RICH_TEXT_MIDDLE:
	//	']' PLAIN_TEXT* '[';
	public TerminalRule getRICH_TEXT_MIDDLERule() {
		return gaDmx.getRICH_TEXT_MIDDLERule();
	}
	
	//terminal RICH_TEXT_END:
	//	']' PLAIN_TEXT* '»';
	public TerminalRule getRICH_TEXT_ENDRule() {
		return gaDmx.getRICH_TEXT_ENDRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaDmx.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaDmx.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaDmx.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaDmx.getANY_OTHERRule();
	}
}
