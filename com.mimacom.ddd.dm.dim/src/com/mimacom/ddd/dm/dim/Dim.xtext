grammar com.mimacom.ddd.dm.dim.Dim with com.mimacom.ddd.dm.dmx.Dmx

import "http://www.mimacom.com/ddd/dm/dmx" 
import "http://www.mimacom.com/ddd/dm/base" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

/*
 * MODEL STRUCTURE
 */

DDomain:
	'domain'
	name=DQualifiedName
	('alias' aliases+=ID)*
	(description=DRichText)?
	(imports+=DImport)*
	(types+=DType |	functions+=DFunction | aggregates+=DAggregate | applications+=DExistingApplication | actors+=DService)*;

DImport:
	'import' importedNamespace=DQualifiedNameWithWildcard;

DFunction:
	'function' name=ID 
	'(' /*parameterNames+=STRING (','  parameterNames+=STRING)* */ ')'
	':'
	type=[DType|ID]  (multiplicity=DMultiplicity)?;
	
DAggregate:
	{DAggregate}
	'aggregate'
	(description=DRichText)?
	'{'
		( types+=DType)*
	'}';

/*
 * TYPES
 */
DType:
	DPrimitive | DPrimitiveArchetype | DEnumeration | DEntityType | DRelationship | DDetailType;
	
DConstraint returns DCondition:
	'constraint'
	name=ID
	('alias' aliases+=ID)*
	':'
	condition=DExpression
	(description=DRichText)?;

DPrimitive:
	'primitive'
	name=ID
	('alias' aliases+=ID)*
	'redefines' redefines=[DPrimitive]
	(description=DRichText)?
	'{'
		(constraints+=DConstraint)*
	'}';
	
DPrimitiveArchetype returns DPrimitive:
	'archetype'
	name=ID
	('alias' aliases+=ID)*
	(description=DRichText)?
	'{'
		(constraints+=DConstraint)*
	'}';

DEnumeration:
	'enumeration'
	name=ID
	('alias' aliases+=ID)*
	(description=DRichText)?
	'{'
	 	(literals+=DLiteral (',' literals+=DLiteral)*)?
		(constraints+=DConstraint)*
	 '}';

DLiteral:
	name=ID
	('alias' aliases+=ID)*
	(description=DRichText)?;

DEntityType:
	(abstract?='abstract')?
	(root?='root')?
	'entity'
	DComplexType;

DRelationship:
	(abstract?='abstract')?
	(root?='root')?
	'relationship'
	DComplexType;

DDetailType:
	(abstract?='abstract')?
	'detail'
	DComplexType;

fragment DComplexType:
	name=ID
	('alias' aliases+=ID)*
	('extends' superType=[DComplexType|ID])?
	(description=DRichText)?
	'{'
		(features+=DFeature | constraints+=DConstraint)*
	'}';
	
DFeature:
	DAssociation |  DAttribute | DQuery;

DAssociation:
	(derived?='derived')? 
	(kind=DAssociationKind | (kind=DAssociationKindInverse "composite"))
	name=ID
	('alias' aliases+=ID)*
	':'
	type=[DEntityType|ID]  (multiplicity=DMultiplicity)?
	(description=DRichText)?;

enum DAssociationKind:
	REFERENCE="reference" | COMPOSITE="composite";

enum DAssociationKindInverse returns DAssociationKind:	
	 INVERSE_COMPOSITE="inverse";
	
DAttribute:
	(detail?='detail')?
	(name=ID
	('alias' aliases+=ID)*
	':'
	type=[DType|ID] )
	(multiplicity=DMultiplicity)?
	(key?='key')?
	(description=DRichText)?;

DQuery:
	name=ID
	('alias' aliases+=ID)*
	'(' (parameters+=DQueryParameter ( "," parameters+=DQueryParameter)*)? ')'
	':' 
	type=[DType|ID]  (multiplicity=DMultiplicity)?
	('returns' ^returns=DExpression)?
	(description=DRichText)?;

DQueryParameter:
	name=ID 
	':' 
	type=[DType|ID]  (multiplicity=DMultiplicity)?
	(description=DRichText)?;


/*
 * EXISTING APPLICATIONS
 */
DExistingApplication:
	'application'
	name=ID
	(description=DRichText)?
	'{'
		(services+=DService | exceptions+=DException | types+=DType)*
	'}';
	
DService:
	(kind=DServiceKind)? 'service'
	name=ID
	('(' (parameters+=DServiceParameter ( "," parameters+=DServiceParameter)*)? ')' )?
	('raises' raises+=[DException|ID]  ( "," raises+=[DException|ID])* )?
	(description=DRichText)? 
	'{'
	('guard' guards+=DExpression)*
	('effect' effects+=DExpression)*
	(types+=DType)*
	'}';

DServiceParameter:
	direction=DDirection
	name=ID
	':'
	type=[DType|ID]  (multiplicity=DMultiplicity)?
	(description=DRichText)?;

DException:
	'exception'
	name=ID
	(description=DRichText)?;

enum DServiceKind:
				SYNCHRONOUS = 'synchronous' | ASYNCHRONOUS = 'async';

enum DDirection:
				INBOUND = 'in' | OUTBOUND = 'out';
