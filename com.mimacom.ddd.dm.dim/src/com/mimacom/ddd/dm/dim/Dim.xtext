grammar com.mimacom.ddd.dm.dim.Dim with com.mimacom.ddd.dm.dmx.Dmx

import "http://www.mimacom.com/ddd/dm/dmx" 
import "http://www.mimacom.com/ddd/dm/base" 
import "http://www.mimacom.com/ddd/dm/dim"

/*
 * MODEL STRUCTURE
 */

@Override 
DNamespace:
	'domain'
	name=DQualifiedName
	(imports+=DImport)*
	model=DomainInformationModel;

DomainInformationModel:
	'information' 'model'
	name=ID
	('alias' aliases+=ID)*
	(description=DRichText)?
	(notes+=DNote)*
	'{'
	(types+=DimType | aggregates+=DimAggregate)*
	'}';

	
DimAggregate returns DAggregate:
	DAggregateKeyword
	{DimAggregate}
	name=ID
	('alias' aliases+=ID)*
	(description=DRichText)?
	(notes+=DNote)*
	'{'
		('query' features+=DimQuery)*
		( types+=DimType)*
	'}';

DAggregateKeyword:
	'component';
/*
 * TYPES
 */
DimType returns DType:
	DimPrimitive | DimEnumeration | DimEntityType | DimDetailType;
	
DConstraint returns DNamedPredicate:
	'constraint'
	name=ID
	('alias' aliases+=ID)*
	':'
	predicate=DExpression
	(description=DRichText)?
	(notes+=DNote)*;

DimPrimitive returns DPrimitive:
	{DimPrimitive}
	'primitive'
	name=ID
	('alias' aliases+=ID)*
	'redefines' redefines=[DmxArchetype]
	(description=DRichText)?
	(notes+=DNote)*
	(	'{'
		(constraints+=DConstraint)+
		'}'
	)?;


DimEnumeration returns DEnumeration:
	{DimEnumeration}
	'enumeration'
	name=ID
	('alias' aliases+=ID)*
	(description=DRichText)?
	(notes+=DNote)*
	'{'
	 	(literals+=DimLiteral (',' literals+=DimLiteral)*)?
		(constraints+=DConstraint)*
	 '}';

DimLiteral returns DLiteral:
	{DimLiteral}
	name=ID
	('alias' aliases+=ID)*
	(description=DRichText)?
	(notes+=DNote)*;

DimEntityType returns DEntityType:
	{DimEntityType}
	(abstract?='abstract')?
	(root?='main')?
	(	'entity'
	|	nature=DEntityNatureAutonomous 'entity'	// validation: cannot be abstract
	|	nature=DEntityNatureRelationship
	) 
	DimComplexType
	'{'
	(	'states' 
		'{'
		states+=DState (',' states+=DState)*
		'}'
		(	'events'
			'{'
			events+=DStateEvent (',' events+=DStateEvent)*
			'}'
		)?
	)?
	(features+=DimFeature | constraints+=DConstraint)*
	'}';
	
enum DEntityNatureAutonomous returns DEntityNature:
	AUTONOMOUS_ENTITY='autonomous';	
enum DEntityNatureRelationship returns DEntityNature:
	RELATIONSHIP='relationship';	

DState:
	name=ID;

DStateEvent:
	name=ID;

DimDetailType returns DDetailType:
	{DimDetailType}
	(abstract?='abstract')?
	'detail'
	DimComplexType
	'{'
	(features+=DimFeature | constraints+=DConstraint)*
	'}';

fragment DimComplexType returns DComplexType:
	name=ID
	('alias' aliases+=ID)*
	('extends' superType=[DComplexType|ID])?
	(description=DRichText)?
	(notes+=DNote)*;
	
DimFeature returns DFeature:
	DimAssociation |  DimAttribute | DimQuery;

DimAssociation returns DAssociation:
	{DimAssociation}
	(derived?='derived')? 
	name=ID
	('alias' aliases+=ID)*
	(kind=DAssociationKind | (kind=DAssociationKindInverse "contains"))
	(type=[DEntityType|ID])?  // optional: allows parser to continue parsing potential targets, caught by validation
	(multiplicity=DMultiplicity)?
	(description=DRichText)?
	(notes+=DNote)*;

enum DAssociationKind:
	REFERENCE="references" | COMPOSITE="contains";

enum DAssociationKindInverse returns DAssociationKind:	
	 INVERSE_COMPOSITE="inverse";
	
DimAttribute returns DAttribute:
	{DimAttribute}
	(detail?='detail')?
	name=ID
	('alias' aliases+=ID)*
	':'
	(type=[DType|ID])? // optional: allows parser to continue parsing potential targets, caught by validation
	(multiplicity=DMultiplicity)?
	(key?='key')?
	(description=DRichText)?
	(notes+=DNote)*;

DimQuery returns DQuery:
	{DimQuery}
	name=ID
	('alias' aliases+=ID)*
	'(' (parameters+=DimQueryParameter ( "," parameters+=DimQueryParameter)*)? ')'
	':' 
	(type=[DType|ID])?  // optional: allows parser to continue parsing potential targets, caught by validation
	(multiplicity=DMultiplicity)?
	('returns' ^returns=DExpression)?
	(description=DRichText)?
	(notes+=DNote)*;

DimQueryParameter returns DQueryParameter:
	{DimQueryParameter}
	name=ID 
	':' 
	(type=[DType|ID])? // optional: allows parser to continue parsing potential targets, caught by validation
	(multiplicity=DMultiplicity)?
	(description=DRichText)?
	(notes+=DNote)*;

