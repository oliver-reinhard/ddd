/*
 * generated by Xtext 2.16.0
 */
package com.mimacom.ddd.dm.dim.formatting2

import com.google.inject.Inject
import com.mimacom.ddd.dm.base.DAggregate
import com.mimacom.ddd.dm.base.DComplexType
import com.mimacom.ddd.dm.base.DEnumeration
import com.mimacom.ddd.dm.base.DInformationModel
import com.mimacom.ddd.dm.base.DType
import com.mimacom.ddd.dm.dim.services.DimGrammarAccess
import com.mimacom.ddd.dm.dmx.formatting2.DmxFormatter
import org.eclipse.xtext.formatting2.IFormattableDocument

class DimFormatter extends DmxFormatter {
	
	@Inject extension DimGrammarAccess

	def dispatch void format(DInformationModel domain, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		domain.description.format
		
		for (i : domain.imports) {
			i.append[if (i == domain.imports.last) newLines=2 else newLine]
		}
		domain.imports.last.append[newLines = 2]
		
		domain.regionFor.assignment(DInformationModelAccess.nameAssignment_5).append[newLines = 2]
		
		for (type : domain.types) {
			type.format
		}
		for (aggregate : domain.aggregates) {
			aggregate.format
		}
	}
	
	def dispatch void format(DAggregate aggregate, extension IFormattableDocument document) {
		val open = aggregate.regionFor.keyword(DAggregateAccess.leftCurlyBracketKeyword_4)
		val close = aggregate.regionFor.keyword(DAggregateAccess.rightCurlyBracketKeyword_7)
		open.append[newLines = 2]
		interior(open, close) [indent]
		
		for (query : aggregate.features) {
			query.format
		}
		
		for (type : aggregate.types) {
			type.format
		}
	}
	
	def dispatch void format(DEnumeration  en, extension IFormattableDocument document) {
		if (en.literals.size > 3) {
			val open = en.regionFor.keyword(DEnumerationAccess.leftCurlyBracketKeyword_4)
			val close = en.regionFor.keyword(DEnumerationAccess.rightCurlyBracketKeyword_7)
			open.append[newLine]
			interior(open, close) [indent]
			
			for( literal : en.literals) {
				literal.regionFor.assignment(DLiteralAccess.nameAssignment_0).surround[noSpace]
			}
			for( comma : en.regionFor.keywords(DEnumerationAccess.commaKeyword_5_1_0)) {
				comma.append[newLine]
			}
			en.literals.last.append[newLine]
		} 
		en.append[newLines = 2]
	}
	
	def dispatch void format(DComplexType type, extension IFormattableDocument document) {
		val open = type.regionFor.keyword(DEntityTypeAccess.leftCurlyBracketKeyword_3)
		val close = type.regionFor.keyword(DEntityTypeAccess.rightCurlyBracketKeyword_6)
		open.append[newLine]
		interior(open, close) [indent]
		close.append[newLines = 2]
		
		for (feature: type.features) {
			feature.append[newLine]
		}
		
		for (constraint: type.constraints) {
			constraint.append[newLine]
		}
	}
	
	def dispatch void format(DType type, extension IFormattableDocument document) {
		type.append[newLines = 2]
	}
}
