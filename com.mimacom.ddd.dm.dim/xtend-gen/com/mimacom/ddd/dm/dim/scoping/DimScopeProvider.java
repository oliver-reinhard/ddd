/**
 * generated by Xtext 2.16.0
 */
package com.mimacom.ddd.dm.dim.scoping;

import com.google.common.base.Objects;
import com.google.common.collect.Iterables;
import com.google.common.collect.Lists;
import com.mimacom.ddd.dm.base.BasePackage;
import com.mimacom.ddd.dm.base.DAggregate;
import com.mimacom.ddd.dm.base.DAssociation;
import com.mimacom.ddd.dm.base.DAttribute;
import com.mimacom.ddd.dm.base.DDetailType;
import com.mimacom.ddd.dm.base.DEntityType;
import com.mimacom.ddd.dm.base.DQuery;
import com.mimacom.ddd.dm.base.DQueryParameter;
import com.mimacom.ddd.dm.base.IAggregateContainer;
import com.mimacom.ddd.dm.dim.scoping.AbstractDimScopeProvider;
import java.util.ArrayList;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.xtext.EcoreUtil2;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.scoping.Scopes;
import org.eclipse.xtext.xbase.lib.Functions.Function1;
import org.eclipse.xtext.xbase.lib.IterableExtensions;

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
@SuppressWarnings("all")
public class DimScopeProvider extends AbstractDimScopeProvider {
  private final BasePackage BASE = BasePackage.eINSTANCE;
  
  @Override
  public IScope getScope(final EObject context, final EReference reference) {
    EReference _dNavigableMember_Type = this.BASE.getDNavigableMember_Type();
    boolean _equals = Objects.equal(reference, _dNavigableMember_Type);
    if (_equals) {
      return this.getNavigableMemberTypeScope(context, IScope.NULLSCOPE);
    } else {
      EReference _dComplexType_SuperType = this.BASE.getDComplexType_SuperType();
      boolean _equals_1 = Objects.equal(reference, _dComplexType_SuperType);
      if (_equals_1) {
        IScope _switchResult = null;
        boolean _matched = false;
        if (context instanceof DEntityType) {
          _matched=true;
          _switchResult = this.getIdentityTypeScope(((DEntityType)context), DEntityType.class);
        }
        if (!_matched) {
          if (context instanceof DDetailType) {
            _matched=true;
            _switchResult = this.getDefaultScopeOfType(context, this.BASE.getDDetailType());
          }
        }
        if (!_matched) {
          _switchResult = IScope.NULLSCOPE;
        }
        return _switchResult;
      }
    }
    return super.getScope(context, reference);
  }
  
  /**
   * Returns the scope for the 'type' property of DNavigableMembers.
   */
  public IScope getNavigableMemberTypeScope(final EObject context, final IScope outerScope) {
    EClass _switchResult = null;
    boolean _matched = false;
    if (context instanceof DAttribute) {
      _matched=true;
      EClass _xifexpression = null;
      boolean _isDetail = ((DAttribute)context).isDetail();
      if (_isDetail) {
        _xifexpression = this.BASE.getDDetailType();
      } else {
        _xifexpression = this.BASE.getIValueType();
      }
      _switchResult = _xifexpression;
    }
    if (!_matched) {
      if (context instanceof DQuery) {
        _matched=true;
        _switchResult = this.BASE.getDType();
      }
    }
    if (!_matched) {
      if (context instanceof DAssociation) {
        _matched=true;
        _switchResult = this.BASE.getDEntityType();
      }
    }
    if (!_matched) {
      if (context instanceof DQueryParameter) {
        _matched=true;
        _switchResult = this.BASE.getDType();
      }
    }
    if (!_matched) {
      _switchResult = this.BASE.getIValueType();
    }
    final EClass type = _switchResult;
    final IScope scope = this.getDefaultScopeOfType(context, type);
    return scope;
  }
  
  public IScope getIdentityTypeScope(final DEntityType context, final Class<?> type) {
    final IAggregateContainer domain = EcoreUtil2.<IAggregateContainer>getContainerOfType(context, IAggregateContainer.class);
    if ((domain != null)) {
      final ArrayList<DEntityType> list = Lists.<DEntityType>newArrayList();
      EList<DAggregate> _aggregates = domain.getAggregates();
      for (final DAggregate a : _aggregates) {
        {
          final Function1<DEntityType, Boolean> _function = (DEntityType it) -> {
            return Boolean.valueOf(((it != context) && type.isAssignableFrom(it.getClass())));
          };
          final Iterable<DEntityType> roots = IterableExtensions.<DEntityType>filter(a.getRoots(), _function);
          Iterables.<DEntityType>addAll(list, roots);
        }
      }
      return Scopes.scopeFor(list);
    }
    return IScope.NULLSCOPE;
  }
}
