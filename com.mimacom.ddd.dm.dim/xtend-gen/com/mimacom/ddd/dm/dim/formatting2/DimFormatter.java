/**
 * generated by Xtext 2.16.0
 */
package com.mimacom.ddd.dm.dim.formatting2;

import com.google.inject.Inject;
import com.mimacom.ddd.dm.base.DAggregate;
import com.mimacom.ddd.dm.base.DComplexType;
import com.mimacom.ddd.dm.base.DDomain;
import com.mimacom.ddd.dm.base.DEnumeration;
import com.mimacom.ddd.dm.base.DExpression;
import com.mimacom.ddd.dm.base.DFeature;
import com.mimacom.ddd.dm.base.DImport;
import com.mimacom.ddd.dm.base.DLiteral;
import com.mimacom.ddd.dm.base.DNamedPredicate;
import com.mimacom.ddd.dm.base.DQuery;
import com.mimacom.ddd.dm.base.DRichText;
import com.mimacom.ddd.dm.base.DType;
import com.mimacom.ddd.dm.dim.services.DimGrammarAccess;
import com.mimacom.ddd.dm.dmx.DmxNamespace;
import com.mimacom.ddd.dm.dmx.formatting2.DmxFormatter;
import java.util.Arrays;
import java.util.List;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.formatting2.IHiddenRegionFormatter;
import org.eclipse.xtext.formatting2.regionaccess.ISemanticRegion;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.eclipse.xtext.xbase.lib.Procedures.Procedure1;

@SuppressWarnings("all")
public class DimFormatter extends DmxFormatter {
  @Inject
  @Extension
  private DimGrammarAccess _dimGrammarAccess;
  
  protected void _format(final DDomain domain, @Extension final IFormattableDocument document) {
    document.<DRichText>format(domain.getDescription());
    EList<DImport> _imports = domain.getImports();
    for (final DImport i : _imports) {
      final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
        it.newLine();
      };
      document.<DImport>append(i, _function);
    }
    final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
      it.setNewLines(2);
    };
    document.<DImport>append(IterableExtensions.<DImport>last(domain.getImports()), _function_1);
    final Procedure1<IHiddenRegionFormatter> _function_2 = (IHiddenRegionFormatter it) -> {
      it.setNewLines(2);
    };
    document.append(this.textRegionExtensions.regionFor(domain).assignment(this._dimGrammarAccess.getDDomainAccess().getNameAssignment_2()), _function_2);
    EList<DType> _types = domain.getTypes();
    for (final DType type : _types) {
      document.<DType>format(type);
    }
    EList<DAggregate> _aggregates = domain.getAggregates();
    for (final DAggregate aggregate : _aggregates) {
      document.<DAggregate>format(aggregate);
    }
  }
  
  protected void _format(final DAggregate aggregate, @Extension final IFormattableDocument document) {
    final ISemanticRegion open = this.textRegionExtensions.regionFor(aggregate).keyword(this._dimGrammarAccess.getDAggregateAccess().getLeftCurlyBracketKeyword_4());
    final ISemanticRegion close = this.textRegionExtensions.regionFor(aggregate).keyword(this._dimGrammarAccess.getDAggregateAccess().getRightCurlyBracketKeyword_7());
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.setNewLines(2);
    };
    document.append(open, _function);
    final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
      it.indent();
    };
    document.<ISemanticRegion, ISemanticRegion>interior(open, close, _function_1);
    EList<DQuery> _staticQueries = aggregate.getStaticQueries();
    for (final DQuery query : _staticQueries) {
      document.<DQuery>format(query);
    }
    EList<DType> _types = aggregate.getTypes();
    for (final DType type : _types) {
      document.<DType>format(type);
    }
  }
  
  protected void _format(final DEnumeration en, @Extension final IFormattableDocument document) {
    int _size = en.getLiterals().size();
    boolean _greaterThan = (_size > 3);
    if (_greaterThan) {
      final ISemanticRegion open = this.textRegionExtensions.regionFor(en).keyword(this._dimGrammarAccess.getDEnumerationAccess().getLeftCurlyBracketKeyword_4());
      final ISemanticRegion close = this.textRegionExtensions.regionFor(en).keyword(this._dimGrammarAccess.getDEnumerationAccess().getRightCurlyBracketKeyword_7());
      final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
        it.newLine();
      };
      document.append(open, _function);
      final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
        it.indent();
      };
      document.<ISemanticRegion, ISemanticRegion>interior(open, close, _function_1);
      EList<DLiteral> _literals = en.getLiterals();
      for (final DLiteral literal : _literals) {
        final Procedure1<IHiddenRegionFormatter> _function_2 = (IHiddenRegionFormatter it) -> {
          it.noSpace();
        };
        document.surround(this.textRegionExtensions.regionFor(literal).assignment(this._dimGrammarAccess.getDLiteralAccess().getNameAssignment_0()), _function_2);
      }
      List<ISemanticRegion> _keywords = this.textRegionExtensions.regionFor(en).keywords(this._dimGrammarAccess.getDEnumerationAccess().getCommaKeyword_5_1_0());
      for (final ISemanticRegion comma : _keywords) {
        final Procedure1<IHiddenRegionFormatter> _function_3 = (IHiddenRegionFormatter it) -> {
          it.newLine();
        };
        document.append(comma, _function_3);
      }
      final Procedure1<IHiddenRegionFormatter> _function_4 = (IHiddenRegionFormatter it) -> {
        it.newLine();
      };
      document.<DLiteral>append(IterableExtensions.<DLiteral>last(en.getLiterals()), _function_4);
    }
    final Procedure1<IHiddenRegionFormatter> _function_5 = (IHiddenRegionFormatter it) -> {
      it.setNewLines(2);
    };
    document.<DEnumeration>append(en, _function_5);
  }
  
  protected void _format(final DComplexType type, @Extension final IFormattableDocument document) {
    final ISemanticRegion open = this.textRegionExtensions.regionFor(type).keyword(this._dimGrammarAccess.getDEntityTypeAccess().getLeftCurlyBracketKeyword_2());
    final ISemanticRegion close = this.textRegionExtensions.regionFor(type).keyword(this._dimGrammarAccess.getDEntityTypeAccess().getRightCurlyBracketKeyword_6());
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.append(open, _function);
    final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
      it.indent();
    };
    document.<ISemanticRegion, ISemanticRegion>interior(open, close, _function_1);
    final Procedure1<IHiddenRegionFormatter> _function_2 = (IHiddenRegionFormatter it) -> {
      it.setNewLines(2);
    };
    document.append(close, _function_2);
    EList<DFeature> _features = type.getFeatures();
    for (final DFeature feature : _features) {
      final Procedure1<IHiddenRegionFormatter> _function_3 = (IHiddenRegionFormatter it) -> {
        it.newLine();
      };
      document.<DFeature>append(feature, _function_3);
    }
    EList<DNamedPredicate> _constraints = type.getConstraints();
    for (final DNamedPredicate constraint : _constraints) {
      final Procedure1<IHiddenRegionFormatter> _function_4 = (IHiddenRegionFormatter it) -> {
        it.newLine();
      };
      document.<DNamedPredicate>append(constraint, _function_4);
    }
  }
  
  protected void _format(final DType type, @Extension final IFormattableDocument document) {
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.setNewLines(2);
    };
    document.<DType>append(type, _function);
  }
  
  public void format(final Object en, final IFormattableDocument document) {
    if (en instanceof DEnumeration) {
      _format((DEnumeration)en, document);
      return;
    } else if (en instanceof DComplexType) {
      _format((DComplexType)en, document);
      return;
    } else if (en instanceof DAggregate) {
      _format((DAggregate)en, document);
      return;
    } else if (en instanceof DDomain) {
      _format((DDomain)en, document);
      return;
    } else if (en instanceof DRichText) {
      _format((DRichText)en, document);
      return;
    } else if (en instanceof DType) {
      _format((DType)en, document);
      return;
    } else if (en instanceof DmxNamespace) {
      _format((DmxNamespace)en, document);
      return;
    } else if (en instanceof XtextResource) {
      _format((XtextResource)en, document);
      return;
    } else if (en instanceof DExpression) {
      _format((DExpression)en, document);
      return;
    } else if (en instanceof EObject) {
      _format((EObject)en, document);
      return;
    } else if (en == null) {
      _format((Void)null, document);
      return;
    } else if (en != null) {
      _format(en, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(en, document).toString());
    }
  }
}
