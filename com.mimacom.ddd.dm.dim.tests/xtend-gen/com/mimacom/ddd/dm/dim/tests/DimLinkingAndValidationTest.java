/**
 * generated by Xtext 2.16.0
 */
package com.mimacom.ddd.dm.dim.tests;

import com.google.inject.Inject;
import com.google.inject.Injector;
import com.google.inject.Provider;
import com.mimacom.ddd.dm.base.base.DDetailType;
import com.mimacom.ddd.dm.base.base.DEnumeration;
import com.mimacom.ddd.dm.base.base.DFeature;
import com.mimacom.ddd.dm.base.base.DLiteral;
import com.mimacom.ddd.dm.base.base.DModel;
import com.mimacom.ddd.dm.base.base.DNamedPredicate;
import com.mimacom.ddd.dm.base.base.DNamespace;
import com.mimacom.ddd.dm.base.base.DType;
import com.mimacom.ddd.dm.dim.DimPackage;
import com.mimacom.ddd.dm.dim.DimPrimitive;
import com.mimacom.ddd.dm.dim.DomainInformationModel;
import com.mimacom.ddd.dm.dim.tests.DimInjectorProvider;
import com.mimacom.ddd.dm.dmx.DmxModel;
import com.mimacom.ddd.dm.dmx.DmxPackage;
import com.mimacom.ddd.dm.dmx.DmxStandaloneSetup;
import com.mimacom.ddd.dm.dmx.impl.DmxArchetypeImpl;
import java.util.List;
import org.eclipse.emf.common.util.Diagnostic;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.emf.ecore.resource.ResourceSet;
import org.eclipse.emf.ecore.util.Diagnostician;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.testing.InjectWith;
import org.eclipse.xtext.testing.extensions.InjectionExtension;
import org.eclipse.xtext.testing.util.ParseHelper;
import org.eclipse.xtext.xbase.lib.Exceptions;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;

@ExtendWith(InjectionExtension.class)
@InjectWith(DimInjectorProvider.class)
@SuppressWarnings("all")
public class DimLinkingAndValidationTest {
  protected static final DmxPackage DMX = DmxPackage.eINSTANCE;
  
  protected static final DimPackage DIM = DimPackage.eINSTANCE;
  
  @Inject
  private Provider<ResourceSet> resourceSetProvider;
  
  @Inject
  private ParseHelper<DNamespace> dimParseHelper;
  
  private final ParseHelper<DNamespace> dmxParseHelper;
  
  public DimLinkingAndValidationTest() {
    final Injector dmxInjector = new DmxStandaloneSetup().createInjectorAndDoEMFRegistration();
    this.dmxParseHelper = dmxInjector.<ParseHelper>getInstance(ParseHelper.class);
  }
  
  protected DomainInformationModel parse(final CharSequence dimSourceText) {
    try {
      final ResourceSet resourceSet = this.resourceSetProvider.get();
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("namespace dm.types");
      _builder.newLine();
      _builder.append("archetype Boolean\t\tis BOOLEAN");
      _builder.newLine();
      _builder.append("archetype Natural \t\tis NUMBER\t");
      _builder.newLine();
      _builder.append("archetype Text\t\t\tis TEXT");
      _builder.newLine();
      _builder.append("archetype Timepoint\t\tis TIMEPOINT");
      _builder.newLine();
      final DNamespace systemTypes = this.dmxParseHelper.parse(_builder, resourceSet);
      Assertions.assertNotNull(systemTypes);
      final EList<Resource.Diagnostic> stErrors = systemTypes.eResource().getErrors();
      boolean _isEmpty = stErrors.isEmpty();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("Parse errors in system types: ");
      String _join = IterableExtensions.join(stErrors, ", ");
      _builder_1.append(_join);
      Assertions.assertTrue(_isEmpty, _builder_1.toString());
      DModel _model = systemTypes.getModel();
      final DmxModel systemTypesModel = ((DmxModel) _model);
      Assertions.assertNotNull(systemTypesModel);
      this.assertNoValidationErrors(systemTypesModel);
      Assertions.assertEquals(DmxArchetypeImpl.class, systemTypesModel.getTypes().get(0).getClass());
      final DNamespace dimNamespace = this.dimParseHelper.parse(dimSourceText, resourceSet);
      Assertions.assertNotNull(dimNamespace);
      final EList<Resource.Diagnostic> errors = dimNamespace.eResource().getErrors();
      boolean _isEmpty_1 = errors.isEmpty();
      StringConcatenation _builder_2 = new StringConcatenation();
      _builder_2.append("Parse errors DIM: ");
      String _join_1 = IterableExtensions.join(errors, "; ");
      _builder_2.append(_join_1);
      Assertions.assertTrue(_isEmpty_1, _builder_2.toString());
      DModel _model_1 = dimNamespace.getModel();
      final DomainInformationModel dimModel = ((DomainInformationModel) _model_1);
      Assertions.assertNotNull(dimModel);
      this.assertNoValidationErrors(dimModel);
      return dimModel;
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testSystemTypeResolution() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("domain D");
    _builder.newLine();
    _builder.append("information model SystemTypes {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("detail A {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("a0 : Boolean");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("a1 : Natural");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("a2 : Text");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("a3 : Timepoint");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    final DomainInformationModel dimModel = this.parse(_builder);
    Assertions.assertEquals(DimLinkingAndValidationTest.DIM.getDimDetailType(), dimModel.getTypes().get(0).eClass());
    DType _get = dimModel.getTypes().get(0);
    final DDetailType detailA = ((DDetailType) _get);
    final DFeature a0 = detailA.getFeatures().get(0);
    Assertions.assertNotNull(a0.getType());
    Assertions.assertEquals("Boolean", a0.getType().getName());
    Assertions.assertFalse(a0.getType().eIsProxy());
    Assertions.assertEquals(DimLinkingAndValidationTest.DMX.getDmxArchetype(), a0.getType().eClass());
    final DFeature a1 = detailA.getFeatures().get(0);
    Assertions.assertNotNull(a1.getType());
    Assertions.assertEquals("Natural", a1.getType().getName());
    Assertions.assertFalse(a1.getType().eIsProxy());
    Assertions.assertEquals(DimLinkingAndValidationTest.DMX.getDmxArchetype(), a1.getType().eClass());
  }
  
  @Test
  public void testPrimitiveWithContstraint() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("domain D");
    _builder.newLine();
    _builder.append("information model CustomTypes {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("primitive P1 redefines Natural {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("constraint Range: self | self > 10 AND self < 100");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    final DomainInformationModel dimModel = this.parse(_builder);
    Assertions.assertEquals(DimLinkingAndValidationTest.DIM.getDimPrimitive(), dimModel.getTypes().get(0).eClass());
    DType _get = dimModel.getTypes().get(0);
    final DimPrimitive p1 = ((DimPrimitive) _get);
    Assertions.assertEquals("P1", p1.getName());
    Assertions.assertEquals(1, p1.getConstraints().size());
    final DNamedPredicate c1 = p1.getConstraints().get(0);
    Assertions.assertEquals("Range", c1.getName());
  }
  
  @Test
  public void testEnumeration() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("domain D");
    _builder.newLine();
    _builder.append("information model CustomTypes {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("enumeration E1 { L1, L2 }");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    final DomainInformationModel dimModel = this.parse(_builder);
    Assertions.assertEquals(DimLinkingAndValidationTest.DIM.getDimEnumeration(), dimModel.getTypes().get(0).eClass());
    DType _get = dimModel.getTypes().get(0);
    final DEnumeration e1 = ((DEnumeration) _get);
    Assertions.assertEquals(2, e1.getLiterals().size());
    final DLiteral l1 = e1.getLiterals().get(0);
    Assertions.assertEquals("L1", l1.getName());
    final DLiteral l2 = e1.getLiterals().get(1);
    Assertions.assertEquals("L2", l2.getName());
  }
  
  @Test
  public void testComplexTypeWithCustomTypes() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("domain D");
    _builder.newLine();
    _builder.append("information model CustomTypes {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("primitive P1 redefines Natural");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("enumeration E1 { L1, L2 }");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("detail A {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("a0 : Boolean");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("a1 : P1");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("a3 : E1");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("q1(p:P1) : Natural");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("q2(left:P1, right:P1) : Natural");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("q3() : B");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("detail B {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("b1 : Natural");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("q5(p:P1) : Natural");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    final DomainInformationModel dimModel = this.parse(_builder);
    Assertions.assertEquals(DimLinkingAndValidationTest.DIM.getDimPrimitive(), dimModel.getTypes().get(0).eClass());
    Assertions.assertEquals(DimLinkingAndValidationTest.DIM.getDimEnumeration(), dimModel.getTypes().get(1).eClass());
    Assertions.assertEquals(DimLinkingAndValidationTest.DIM.getDimDetailType(), dimModel.getTypes().get(2).eClass());
    DType _get = dimModel.getTypes().get(2);
    final DDetailType detailA = ((DDetailType) _get);
    final DFeature a1 = ((DDetailType) detailA).getFeatures().get(1);
    Assertions.assertNotNull(a1.getType());
    Assertions.assertEquals("P1", a1.getType().getName());
    Assertions.assertFalse(a1.getType().eIsProxy());
    Assertions.assertEquals(DimLinkingAndValidationTest.DIM.getDimPrimitive(), a1.getType().eClass());
  }
  
  protected void assertNoValidationErrors(final EObject obj) {
    final List<Diagnostic> result = Diagnostician.INSTANCE.validate(obj).getChildren();
    boolean _isEmpty = result.isEmpty();
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("No validation errors expected: ");
    String _join = IterableExtensions.join(result, "; ");
    _builder.append(_join);
    Assertions.assertTrue(_isEmpty, _builder.toString());
  }
  
  protected void assertHasValidationERRORS(final EObject obj) {
    final List<Diagnostic> result = Diagnostician.INSTANCE.validate(obj).getChildren();
    int _size = result.size();
    boolean _greaterEqualsThan = (_size >= 1);
    Assertions.assertTrue(_greaterEqualsThan, "Has validation errors");
  }
}
