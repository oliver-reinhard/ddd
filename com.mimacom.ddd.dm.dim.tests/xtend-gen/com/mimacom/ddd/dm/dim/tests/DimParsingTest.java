/**
 * generated by Xtext 2.16.0
 */
package com.mimacom.ddd.dm.dim.tests;

import com.google.inject.Inject;
import com.mimacom.ddd.dm.base.base.DNamespace;
import com.mimacom.ddd.dm.dim.DimPackage;
import com.mimacom.ddd.dm.dim.tests.DimInjectorProvider;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.testing.InjectWith;
import org.eclipse.xtext.testing.extensions.InjectionExtension;
import org.eclipse.xtext.testing.util.ParseHelper;
import org.eclipse.xtext.xbase.lib.Exceptions;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;

@ExtendWith(InjectionExtension.class)
@InjectWith(DimInjectorProvider.class)
@SuppressWarnings("all")
public class DimParsingTest {
  @Inject
  private ParseHelper<DNamespace> parseHelper;
  
  protected static final DimPackage DIM = DimPackage.eINSTANCE;
  
  @Test
  public void parseRestaurantExample() {
    try {
      final String G1 = "«";
      final String G2 = "»";
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("domain dm.Restaurant");
      _builder.newLine();
      _builder.newLine();
      _builder.append("information model ReservationsDM ");
      _builder.newLine();
      _builder.append("NOTE M1 { ");
      _builder.append(G1);
      _builder.append("ReservationsDM");
      _builder.newLineIfNotEmpty();
      _builder.append("   ");
      _builder.append("\'<size:20>Second\' </size> **line**");
      _builder.append(G2, "   ");
      _builder.append(" white");
      _builder.newLineIfNotEmpty();
      _builder.append("} ");
      _builder.newLine();
      _builder.append("{");
      _builder.newLine();
      _builder.newLine();
      _builder.append("\t");
      _builder.append("primitive Size redefines Natural  ");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("NOTE T1 { ");
      _builder.append(G1, "\t");
      _builder.append("Size");
      _builder.append(G2, "\t");
      _builder.append(" blue}");
      _builder.newLineIfNotEmpty();
      _builder.append("\t");
      _builder.append("{");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("constraint NonNegative: ");
      _builder.append(G1, "\t\t");
      _builder.append("value ≥ 0");
      _builder.append(G2, "\t\t");
      _builder.newLineIfNotEmpty();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("\t");
      _builder.append("primitive Message redefines Text");
      _builder.newLine();
      _builder.append("\t");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("enumeration Location {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("WINDOW, CENTER, CORNER NOTE L1 {");
      _builder.append(G1, "\t\t");
      _builder.append("CORNER");
      _builder.append(G2, "\t\t");
      _builder.append("}, TERRACE");
      _builder.newLineIfNotEmpty();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append(" ");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("component Tables {");
      _builder.newLine();
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("query has_Free_Table(minSeats : Size) : Boolean");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("returns Table.all.exists(t | t.details.seats ≥ minSeats AND t.state = Table.FREE)");
      _builder.newLine();
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("query estimated_Wait_Time(seats : Size) : Duration ");
      _builder.newLine();
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("main autonomous entity Table");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append(G1, "\t\t");
      _builder.append("A table in a restaurant");
      _builder.append(G2, "\t\t");
      _builder.newLineIfNotEmpty();
      _builder.append("\t\t");
      _builder.append("NOTE T2 { ");
      _builder.append(G1, "\t\t");
      _builder.append("all_Waiting_Parties");
      _builder.append(G2, "\t\t");
      _builder.append(" }");
      _builder.newLineIfNotEmpty();
      _builder.append("\t ");
      _builder.append("{");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("states { FREE, USED }");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("events { ALLOCATED, CLEANED} ");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("detail details : TableDetails");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("party references Party? ");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("detail TableDetails {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("seats : Size");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("location : Location");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("\t");
      _builder.append("component Parties {");
      _builder.newLine();
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("query all_Waiting_Parties() : Party* ");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("returns Party.all.select(p|p.state = Party.WAITING)");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("NOTE Q1 { ");
      _builder.append(G1, "\t\t");
      _builder.append("all_Waiting_Parties");
      _builder.append(G2, "\t\t");
      _builder.append(" }");
      _builder.newLineIfNotEmpty();
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("query is_Party_Waiting(available_Seats : Size) : Boolean ");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("returns Party.all.exists(p | p.state = Party.WAITING AND p.size ≤ available_Seats)");
      _builder.newLine();
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("main autonomous entity Party {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("states { ARRIVED, WAITING, SEATED, LEFT }");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("events { WAIT, SIT, LEAVE }");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("name : Name ");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("size : Size");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("arrival_Time : Timepoint \t");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("NOTE F1 { ");
      _builder.append(G1, "\t\t\t");
      _builder.append("arrival_Time");
      _builder.append(G2, "\t\t\t");
      _builder.append(" red} // COLOR NOT WORKING");
      _builder.newLineIfNotEmpty();
      _builder.append("\t\t\t");
      _builder.append("NOTE F2 { ");
      _builder.append(G1, "\t\t\t");
      _builder.append("arrival_Time 2");
      _builder.append(G2, "\t\t\t");
      _builder.append(" }");
      _builder.newLineIfNotEmpty();
      _builder.append("\t\t\t");
      _builder.append("max_Wait_Time : Duration");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("time_waited() : Duration returns  now() - arrival_Time");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("NOTE Q2{ ");
      _builder.append(G1, "\t\t\t");
      _builder.append("time_waited");
      _builder.append(G2, "\t\t\t");
      _builder.append(" }");
      _builder.newLineIfNotEmpty();
      _builder.append("\t\t\t");
      _builder.append("waited_more_than(d : Duration) : Boolean returns time_waited > d");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("tab contains Tab?");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("component Reservations ");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("NOTE T2 { ");
      _builder.append(G1, "\t\t");
      _builder.append("Reservations");
      _builder.append(G2, "\t\t");
      _builder.append(" }");
      _builder.newLineIfNotEmpty();
      _builder.append("\t\t");
      _builder.append("{");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("main entity Reservation ");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("NOTE T2 { ");
      _builder.append(G1, "\t\t");
      _builder.append("Reservation");
      _builder.append(G2, "\t\t");
      _builder.append(" }");
      _builder.newLineIfNotEmpty();
      _builder.append("\t\t");
      _builder.append("{");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("party references Party\t \t");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("NOTE F3 { ");
      _builder.append(G1, "\t\t\t");
      _builder.append("party");
      _builder.append(G2, "\t\t\t");
      _builder.append(" }");
      _builder.newLineIfNotEmpty();
      _builder.append("\t\t\t");
      _builder.append("preference : Preference?");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("NOTE F4 { ");
      _builder.append(G1, "\t\t\t");
      _builder.append("preference");
      _builder.append(G2, "\t\t\t");
      _builder.append(" }");
      _builder.newLineIfNotEmpty();
      _builder.append("\t\t\t");
      _builder.append("table references Table?");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("detail Preference {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("location : Location");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("seats : Size");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      final DNamespace result = this.parseHelper.parse(_builder);
      Assertions.assertNotNull(result);
      Assertions.assertNotNull(result.getModel());
      Assertions.assertEquals(DimParsingTest.DIM.getDomainInformationModel(), result.getModel().eClass());
      final EList<Resource.Diagnostic> errors = result.eResource().getErrors();
      boolean _isEmpty = errors.isEmpty();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("Unexpected errors: ");
      String _join = IterableExtensions.join(errors, ", ");
      _builder_1.append(_join);
      Assertions.assertTrue(_isEmpty, _builder_1.toString());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
}
