/*
 * generated by Xtext 2.16.0
 */
package com.mimacom.ddd.dm.dme.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import com.mimacom.ddd.dm.dmx.services.DmxGrammarAccess;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class DmeGrammarAccess extends AbstractGrammarElementFinder {
	
	public class DDomainElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.dme.Dme.DDomain");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDomainKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cDescriptionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDescriptionDRichTextParserRuleCall_2_0 = (RuleCall)cDescriptionAssignment_2.eContents().get(0);
		private final Assignment cImportsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cImportsDImportParserRuleCall_3_0 = (RuleCall)cImportsAssignment_3.eContents().get(0);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Assignment cEventsAssignment_4_0 = (Assignment)cAlternatives_4.eContents().get(0);
		private final RuleCall cEventsDDomainEventParserRuleCall_4_0_0 = (RuleCall)cEventsAssignment_4_0.eContents().get(0);
		private final Assignment cActorsAssignment_4_1 = (Assignment)cAlternatives_4.eContents().get(1);
		private final RuleCall cActorsDActorParserRuleCall_4_1_0 = (RuleCall)cActorsAssignment_4_1.eContents().get(0);
		
		//DDomain:
		//	'domain'
		//	name=ID
		//	description=DRichText?
		//	imports+=DImport* (events+=DDomainEvent | actors+=DActor)*;
		@Override public ParserRule getRule() { return rule; }
		
		//'domain' name=ID description=DRichText? imports+=DImport* (events+=DDomainEvent | actors+=DActor)*
		public Group getGroup() { return cGroup; }
		
		//'domain'
		public Keyword getDomainKeyword_0() { return cDomainKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//description=DRichText?
		public Assignment getDescriptionAssignment_2() { return cDescriptionAssignment_2; }
		
		//DRichText
		public RuleCall getDescriptionDRichTextParserRuleCall_2_0() { return cDescriptionDRichTextParserRuleCall_2_0; }
		
		//imports+=DImport*
		public Assignment getImportsAssignment_3() { return cImportsAssignment_3; }
		
		//DImport
		public RuleCall getImportsDImportParserRuleCall_3_0() { return cImportsDImportParserRuleCall_3_0; }
		
		//(events+=DDomainEvent | actors+=DActor)*
		public Alternatives getAlternatives_4() { return cAlternatives_4; }
		
		//events+=DDomainEvent
		public Assignment getEventsAssignment_4_0() { return cEventsAssignment_4_0; }
		
		//DDomainEvent
		public RuleCall getEventsDDomainEventParserRuleCall_4_0_0() { return cEventsDDomainEventParserRuleCall_4_0_0; }
		
		//actors+=DActor
		public Assignment getActorsAssignment_4_1() { return cActorsAssignment_4_1; }
		
		//DActor
		public RuleCall getActorsDActorParserRuleCall_4_1_0() { return cActorsDActorParserRuleCall_4_1_0; }
	}
	public class DImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.dme.Dme.DImport");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImportedNamespaceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportedNamespaceDQualifiedNameWithWildcardParserRuleCall_1_0 = (RuleCall)cImportedNamespaceAssignment_1.eContents().get(0);
		
		//DImport:
		//	'import' importedNamespace=DQualifiedNameWithWildcard;
		@Override public ParserRule getRule() { return rule; }
		
		//'import' importedNamespace=DQualifiedNameWithWildcard
		public Group getGroup() { return cGroup; }
		
		//'import'
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }
		
		//importedNamespace=DQualifiedNameWithWildcard
		public Assignment getImportedNamespaceAssignment_1() { return cImportedNamespaceAssignment_1; }
		
		//DQualifiedNameWithWildcard
		public RuleCall getImportedNamespaceDQualifiedNameWithWildcardParserRuleCall_1_0() { return cImportedNamespaceDQualifiedNameWithWildcardParserRuleCall_1_0; }
	}
	public class DDomainEventElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.dme.Dme.DDomainEvent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEventKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cTriggeredKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cByKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTriggerAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cTriggerDActorCrossReference_4_0 = (CrossReference)cTriggerAssignment_4.eContents().get(0);
		private final RuleCall cTriggerDActorIDTerminalRuleCall_4_0_1 = (RuleCall)cTriggerDActorCrossReference_4_0.eContents().get(1);
		private final Assignment cDescriptionAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cDescriptionDRichTextParserRuleCall_5_0 = (RuleCall)cDescriptionAssignment_5.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cContextAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cContextDContextParserRuleCall_7_0 = (RuleCall)cContextAssignment_7.eContents().get(0);
		private final Assignment cNotificationsAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cNotificationsDNotificationParserRuleCall_8_0 = (RuleCall)cNotificationsAssignment_8.eContents().get(0);
		private final Group cGroup_9 = (Group)cGroup.eContents().get(9);
		private final Keyword cBeforeKeyword_9_0 = (Keyword)cGroup_9.eContents().get(0);
		private final Assignment cBeforeAssignment_9_1 = (Assignment)cGroup_9.eContents().get(1);
		private final RuleCall cBeforeDConditionParserRuleCall_9_1_0 = (RuleCall)cBeforeAssignment_9_1.eContents().get(0);
		private final Group cGroup_10 = (Group)cGroup.eContents().get(10);
		private final Keyword cAfterKeyword_10_0 = (Keyword)cGroup_10.eContents().get(0);
		private final Assignment cAfterAssignment_10_1 = (Assignment)cGroup_10.eContents().get(1);
		private final RuleCall cAfterDConditionParserRuleCall_10_1_0 = (RuleCall)cAfterAssignment_10_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_11 = (Keyword)cGroup.eContents().get(11);
		
		///*
		// * BEHAVIOUR
		// */ DDomainEvent:
		//	'event'
		//	name=ID
		//	'triggered' 'by' trigger=[DActor] description=DRichText?
		//	'{'
		//	context+=DContext+
		//	notifications+=DNotification+ ('before' before+=DCondition+)? ('after' after+=DCondition+)?
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'event' name=ID 'triggered' 'by' trigger=[DActor] description=DRichText? '{' context+=DContext+
		//notifications+=DNotification+ ('before' before+=DCondition+)? ('after' after+=DCondition+)? '}'
		public Group getGroup() { return cGroup; }
		
		//'event'
		public Keyword getEventKeyword_0() { return cEventKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'triggered'
		public Keyword getTriggeredKeyword_2() { return cTriggeredKeyword_2; }
		
		//'by'
		public Keyword getByKeyword_3() { return cByKeyword_3; }
		
		//trigger=[DActor]
		public Assignment getTriggerAssignment_4() { return cTriggerAssignment_4; }
		
		//[DActor]
		public CrossReference getTriggerDActorCrossReference_4_0() { return cTriggerDActorCrossReference_4_0; }
		
		//ID
		public RuleCall getTriggerDActorIDTerminalRuleCall_4_0_1() { return cTriggerDActorIDTerminalRuleCall_4_0_1; }
		
		//description=DRichText?
		public Assignment getDescriptionAssignment_5() { return cDescriptionAssignment_5; }
		
		//DRichText
		public RuleCall getDescriptionDRichTextParserRuleCall_5_0() { return cDescriptionDRichTextParserRuleCall_5_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_6() { return cLeftCurlyBracketKeyword_6; }
		
		//context+=DContext+
		public Assignment getContextAssignment_7() { return cContextAssignment_7; }
		
		//DContext
		public RuleCall getContextDContextParserRuleCall_7_0() { return cContextDContextParserRuleCall_7_0; }
		
		//notifications+=DNotification+
		public Assignment getNotificationsAssignment_8() { return cNotificationsAssignment_8; }
		
		//DNotification
		public RuleCall getNotificationsDNotificationParserRuleCall_8_0() { return cNotificationsDNotificationParserRuleCall_8_0; }
		
		//('before' before+=DCondition+)?
		public Group getGroup_9() { return cGroup_9; }
		
		//'before'
		public Keyword getBeforeKeyword_9_0() { return cBeforeKeyword_9_0; }
		
		//before+=DCondition+
		public Assignment getBeforeAssignment_9_1() { return cBeforeAssignment_9_1; }
		
		//DCondition
		public RuleCall getBeforeDConditionParserRuleCall_9_1_0() { return cBeforeDConditionParserRuleCall_9_1_0; }
		
		//('after' after+=DCondition+)?
		public Group getGroup_10() { return cGroup_10; }
		
		//'after'
		public Keyword getAfterKeyword_10_0() { return cAfterKeyword_10_0; }
		
		//after+=DCondition+
		public Assignment getAfterAssignment_10_1() { return cAfterAssignment_10_1; }
		
		//DCondition
		public RuleCall getAfterDConditionParserRuleCall_10_1_0() { return cAfterDConditionParserRuleCall_10_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_11() { return cRightCurlyBracketKeyword_11; }
	}
	public class DConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.dme.Dme.DCondition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cConditionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cConditionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cConditionDExpressionParserRuleCall_3_0 = (RuleCall)cConditionAssignment_3.eContents().get(0);
		private final Assignment cDescriptionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cDescriptionDRichTextParserRuleCall_4_0 = (RuleCall)cDescriptionAssignment_4.eContents().get(0);
		
		//DCondition:
		//	'condition'
		//	name=ID
		//	':'
		//	condition=DExpression
		//	description=DRichText?;
		@Override public ParserRule getRule() { return rule; }
		
		//'condition' name=ID ':' condition=DExpression description=DRichText?
		public Group getGroup() { return cGroup; }
		
		//'condition'
		public Keyword getConditionKeyword_0() { return cConditionKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//condition=DExpression
		public Assignment getConditionAssignment_3() { return cConditionAssignment_3; }
		
		//DExpression
		public RuleCall getConditionDExpressionParserRuleCall_3_0() { return cConditionDExpressionParserRuleCall_3_0; }
		
		//description=DRichText?
		public Assignment getDescriptionAssignment_4() { return cDescriptionAssignment_4; }
		
		//DRichText
		public RuleCall getDescriptionDRichTextParserRuleCall_4_0() { return cDescriptionDRichTextParserRuleCall_4_0; }
	}
	public class DNotificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.dme.Dme.DNotification");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNotificationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cTypeDTypeCrossReference_3_0 = (CrossReference)cTypeAssignment_3.eContents().get(0);
		private final RuleCall cTypeDTypeIDTerminalRuleCall_3_0_1 = (RuleCall)cTypeDTypeCrossReference_3_0.eContents().get(1);
		private final Assignment cMultiplicityAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cMultiplicityDMultiplicityParserRuleCall_4_0 = (RuleCall)cMultiplicityAssignment_4.eContents().get(0);
		private final Keyword cSentKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cToKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cNotifiedAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final CrossReference cNotifiedDActorCrossReference_7_0 = (CrossReference)cNotifiedAssignment_7.eContents().get(0);
		private final RuleCall cNotifiedDActorIDTerminalRuleCall_7_0_1 = (RuleCall)cNotifiedDActorCrossReference_7_0.eContents().get(1);
		private final Assignment cDescriptionAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cDescriptionDRichTextParserRuleCall_8_0 = (RuleCall)cDescriptionAssignment_8.eContents().get(0);
		
		//DNotification:
		//	'notification'
		//	name=ID
		//	':'
		//	type=[DType] multiplicity=DMultiplicity?
		//	'sent' 'to' notified=[DActor] description=DRichText?;
		@Override public ParserRule getRule() { return rule; }
		
		//'notification' name=ID ':' type=[DType] multiplicity=DMultiplicity? 'sent' 'to' notified=[DActor] description=DRichText?
		public Group getGroup() { return cGroup; }
		
		//'notification'
		public Keyword getNotificationKeyword_0() { return cNotificationKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//type=[DType]
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }
		
		//[DType]
		public CrossReference getTypeDTypeCrossReference_3_0() { return cTypeDTypeCrossReference_3_0; }
		
		//ID
		public RuleCall getTypeDTypeIDTerminalRuleCall_3_0_1() { return cTypeDTypeIDTerminalRuleCall_3_0_1; }
		
		//multiplicity=DMultiplicity?
		public Assignment getMultiplicityAssignment_4() { return cMultiplicityAssignment_4; }
		
		//DMultiplicity
		public RuleCall getMultiplicityDMultiplicityParserRuleCall_4_0() { return cMultiplicityDMultiplicityParserRuleCall_4_0; }
		
		//'sent'
		public Keyword getSentKeyword_5() { return cSentKeyword_5; }
		
		//'to'
		public Keyword getToKeyword_6() { return cToKeyword_6; }
		
		//notified=[DActor]
		public Assignment getNotifiedAssignment_7() { return cNotifiedAssignment_7; }
		
		//[DActor]
		public CrossReference getNotifiedDActorCrossReference_7_0() { return cNotifiedDActorCrossReference_7_0; }
		
		//ID
		public RuleCall getNotifiedDActorIDTerminalRuleCall_7_0_1() { return cNotifiedDActorIDTerminalRuleCall_7_0_1; }
		
		//description=DRichText?
		public Assignment getDescriptionAssignment_8() { return cDescriptionAssignment_8; }
		
		//DRichText
		public RuleCall getDescriptionDRichTextParserRuleCall_8_0() { return cDescriptionDRichTextParserRuleCall_8_0; }
	}
	public class DContextElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.dme.Dme.DContext");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cContextKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cTypeDTypeCrossReference_3_0 = (CrossReference)cTypeAssignment_3.eContents().get(0);
		private final RuleCall cTypeDTypeIDTerminalRuleCall_3_0_1 = (RuleCall)cTypeDTypeCrossReference_3_0.eContents().get(1);
		private final Assignment cMultiplicityAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cMultiplicityDMultiplicityParserRuleCall_4_0 = (RuleCall)cMultiplicityAssignment_4.eContents().get(0);
		private final Assignment cDescriptionAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cDescriptionDRichTextParserRuleCall_5_0 = (RuleCall)cDescriptionAssignment_5.eContents().get(0);
		
		//DContext:
		//	'context'
		//	name=ID
		//	':'
		//	type=[DType] multiplicity=DMultiplicity?
		//	description=DRichText?;
		@Override public ParserRule getRule() { return rule; }
		
		//'context' name=ID ':' type=[DType] multiplicity=DMultiplicity? description=DRichText?
		public Group getGroup() { return cGroup; }
		
		//'context'
		public Keyword getContextKeyword_0() { return cContextKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//type=[DType]
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }
		
		//[DType]
		public CrossReference getTypeDTypeCrossReference_3_0() { return cTypeDTypeCrossReference_3_0; }
		
		//ID
		public RuleCall getTypeDTypeIDTerminalRuleCall_3_0_1() { return cTypeDTypeIDTerminalRuleCall_3_0_1; }
		
		//multiplicity=DMultiplicity?
		public Assignment getMultiplicityAssignment_4() { return cMultiplicityAssignment_4; }
		
		//DMultiplicity
		public RuleCall getMultiplicityDMultiplicityParserRuleCall_4_0() { return cMultiplicityDMultiplicityParserRuleCall_4_0; }
		
		//description=DRichText?
		public Assignment getDescriptionAssignment_5() { return cDescriptionAssignment_5; }
		
		//DRichText
		public RuleCall getDescriptionDRichTextParserRuleCall_5_0() { return cDescriptionDRichTextParserRuleCall_5_0; }
	}
	public class DActorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.dme.Dme.DActor");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDHumanParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDTimeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//DActor:
		//	DHuman | DTime;
		@Override public ParserRule getRule() { return rule; }
		
		//DHuman | DTime
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//DHuman
		public RuleCall getDHumanParserRuleCall_0() { return cDHumanParserRuleCall_0; }
		
		//DTime
		public RuleCall getDTimeParserRuleCall_1() { return cDTimeParserRuleCall_1; }
	}
	public class DHumanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.dme.Dme.DHuman");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHumanKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cActorKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Assignment cDescriptionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDescriptionDRichTextParserRuleCall_3_0 = (RuleCall)cDescriptionAssignment_3.eContents().get(0);
		
		//DHuman:
		//	'human' 'actor'
		//	name=ID
		//	description=DRichText?;
		@Override public ParserRule getRule() { return rule; }
		
		//'human' 'actor' name=ID description=DRichText?
		public Group getGroup() { return cGroup; }
		
		//'human'
		public Keyword getHumanKeyword_0() { return cHumanKeyword_0; }
		
		//'actor'
		public Keyword getActorKeyword_1() { return cActorKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//description=DRichText?
		public Assignment getDescriptionAssignment_3() { return cDescriptionAssignment_3; }
		
		//DRichText
		public RuleCall getDescriptionDRichTextParserRuleCall_3_0() { return cDescriptionDRichTextParserRuleCall_3_0; }
	}
	public class DTimeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.dme.Dme.DTime");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTimeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cActorKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Assignment cDescriptionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDescriptionDRichTextParserRuleCall_3_0 = (RuleCall)cDescriptionAssignment_3.eContents().get(0);
		
		//DTime:
		//	'time' 'actor'
		//	name=ID
		//	description=DRichText?;
		@Override public ParserRule getRule() { return rule; }
		
		//'time' 'actor' name=ID description=DRichText?
		public Group getGroup() { return cGroup; }
		
		//'time'
		public Keyword getTimeKeyword_0() { return cTimeKeyword_0; }
		
		//'actor'
		public Keyword getActorKeyword_1() { return cActorKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//description=DRichText?
		public Assignment getDescriptionAssignment_3() { return cDescriptionAssignment_3; }
		
		//DRichText
		public RuleCall getDescriptionDRichTextParserRuleCall_3_0() { return cDescriptionDRichTextParserRuleCall_3_0; }
	}
	
	
	private final DDomainElements pDDomain;
	private final DImportElements pDImport;
	private final DDomainEventElements pDDomainEvent;
	private final DConditionElements pDCondition;
	private final DNotificationElements pDNotification;
	private final DContextElements pDContext;
	private final DActorElements pDActor;
	private final DHumanElements pDHuman;
	private final DTimeElements pDTime;
	
	private final Grammar grammar;
	
	private final DmxGrammarAccess gaDmx;

	@Inject
	public DmeGrammarAccess(GrammarProvider grammarProvider,
			DmxGrammarAccess gaDmx) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaDmx = gaDmx;
		this.pDDomain = new DDomainElements();
		this.pDImport = new DImportElements();
		this.pDDomainEvent = new DDomainEventElements();
		this.pDCondition = new DConditionElements();
		this.pDNotification = new DNotificationElements();
		this.pDContext = new DContextElements();
		this.pDActor = new DActorElements();
		this.pDHuman = new DHumanElements();
		this.pDTime = new DTimeElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("com.mimacom.ddd.dm.dme.Dme".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public DmxGrammarAccess getDmxGrammarAccess() {
		return gaDmx;
	}

	
	//DDomain:
	//	'domain'
	//	name=ID
	//	description=DRichText?
	//	imports+=DImport* (events+=DDomainEvent | actors+=DActor)*;
	public DDomainElements getDDomainAccess() {
		return pDDomain;
	}
	
	public ParserRule getDDomainRule() {
		return getDDomainAccess().getRule();
	}
	
	//DImport:
	//	'import' importedNamespace=DQualifiedNameWithWildcard;
	public DImportElements getDImportAccess() {
		return pDImport;
	}
	
	public ParserRule getDImportRule() {
		return getDImportAccess().getRule();
	}
	
	///*
	// * BEHAVIOUR
	// */ DDomainEvent:
	//	'event'
	//	name=ID
	//	'triggered' 'by' trigger=[DActor] description=DRichText?
	//	'{'
	//	context+=DContext+
	//	notifications+=DNotification+ ('before' before+=DCondition+)? ('after' after+=DCondition+)?
	//	'}';
	public DDomainEventElements getDDomainEventAccess() {
		return pDDomainEvent;
	}
	
	public ParserRule getDDomainEventRule() {
		return getDDomainEventAccess().getRule();
	}
	
	//DCondition:
	//	'condition'
	//	name=ID
	//	':'
	//	condition=DExpression
	//	description=DRichText?;
	public DConditionElements getDConditionAccess() {
		return pDCondition;
	}
	
	public ParserRule getDConditionRule() {
		return getDConditionAccess().getRule();
	}
	
	//DNotification:
	//	'notification'
	//	name=ID
	//	':'
	//	type=[DType] multiplicity=DMultiplicity?
	//	'sent' 'to' notified=[DActor] description=DRichText?;
	public DNotificationElements getDNotificationAccess() {
		return pDNotification;
	}
	
	public ParserRule getDNotificationRule() {
		return getDNotificationAccess().getRule();
	}
	
	//DContext:
	//	'context'
	//	name=ID
	//	':'
	//	type=[DType] multiplicity=DMultiplicity?
	//	description=DRichText?;
	public DContextElements getDContextAccess() {
		return pDContext;
	}
	
	public ParserRule getDContextRule() {
		return getDContextAccess().getRule();
	}
	
	//DActor:
	//	DHuman | DTime;
	public DActorElements getDActorAccess() {
		return pDActor;
	}
	
	public ParserRule getDActorRule() {
		return getDActorAccess().getRule();
	}
	
	//DHuman:
	//	'human' 'actor'
	//	name=ID
	//	description=DRichText?;
	public DHumanElements getDHumanAccess() {
		return pDHuman;
	}
	
	public ParserRule getDHumanRule() {
		return getDHumanAccess().getRule();
	}
	
	//DTime:
	//	'time' 'actor'
	//	name=ID
	//	description=DRichText?;
	public DTimeElements getDTimeAccess() {
		return pDTime;
	}
	
	public ParserRule getDTimeRule() {
		return getDTimeAccess().getRule();
	}
	
	//DmxModel:
	//	{DmxModel} ('text' NATURAL ':' texts+=DRichText ';')* ('expr' NATURAL ':' expressions+=DExpression ';')*;
	public DmxGrammarAccess.DmxModelElements getDmxModelAccess() {
		return gaDmx.getDmxModelAccess();
	}
	
	public ParserRule getDmxModelRule() {
		return getDmxModelAccess().getRule();
	}
	
	//DRichText:
	//	elements+=DTextOnly
	//	| elements+=DTextStart
	//	elements+=DExpression (elements+=DTextMiddle elements+=DExpression)*
	//	elements+=DTextEnd;
	public DmxGrammarAccess.DRichTextElements getDRichTextAccess() {
		return gaDmx.getDRichTextAccess();
	}
	
	public ParserRule getDRichTextRule() {
		return getDRichTextAccess().getRule();
	}
	
	//DTextOnly DText:
	//	value=PLAIN_TEXT_ONLY;
	public DmxGrammarAccess.DTextOnlyElements getDTextOnlyAccess() {
		return gaDmx.getDTextOnlyAccess();
	}
	
	public ParserRule getDTextOnlyRule() {
		return getDTextOnlyAccess().getRule();
	}
	
	//DTextStart DText:
	//	value=PLAIN_TEXT_START;
	public DmxGrammarAccess.DTextStartElements getDTextStartAccess() {
		return gaDmx.getDTextStartAccess();
	}
	
	public ParserRule getDTextStartRule() {
		return getDTextStartAccess().getRule();
	}
	
	//DTextMiddle DText:
	//	value=PLAIN_TEXT_MIDDLE;
	public DmxGrammarAccess.DTextMiddleElements getDTextMiddleAccess() {
		return gaDmx.getDTextMiddleAccess();
	}
	
	public ParserRule getDTextMiddleRule() {
		return getDTextMiddleAccess().getRule();
	}
	
	//DTextEnd DText:
	//	value=PLAIN_TEXT_END;
	public DmxGrammarAccess.DTextEndElements getDTextEndAccess() {
		return gaDmx.getDTextEndAccess();
	}
	
	public ParserRule getDTextEndRule() {
		return getDTextEndAccess().getRule();
	}
	
	//DExpression:
	//	DAssignment;
	public DmxGrammarAccess.DExpressionElements getDExpressionAccess() {
		return gaDmx.getDExpressionAccess();
	}
	
	public ParserRule getDExpressionRule() {
		return getDExpressionAccess().getRule();
	}
	
	//DAssignment DExpression:
	//	{DAssignment} member=[DTypedMember] OpSingleAssign value=DAssignment
	//	| DOrExpression;
	public DmxGrammarAccess.DAssignmentElements getDAssignmentAccess() {
		return gaDmx.getDAssignmentAccess();
	}
	
	public ParserRule getDAssignmentRule() {
		return getDAssignmentAccess().getRule();
	}
	
	//OpSingleAssign:
	//	':=';
	public DmxGrammarAccess.OpSingleAssignElements getOpSingleAssignAccess() {
		return gaDmx.getOpSingleAssignAccess();
	}
	
	public ParserRule getOpSingleAssignRule() {
		return getOpSingleAssignAccess().getRule();
	}
	
	//DOrExpression DExpression:
	//	DAndExpression (=> ({DBinaryOperation.leftOperand=current} operator=OpOr) rightOperand=DAndExpression)*;
	public DmxGrammarAccess.DOrExpressionElements getDOrExpressionAccess() {
		return gaDmx.getDOrExpressionAccess();
	}
	
	public ParserRule getDOrExpressionRule() {
		return getDOrExpressionAccess().getRule();
	}
	
	//enum OpOr returns DBinaryOperator:
	//	OR | OR='or' | XOR | XOR='xor';
	public DmxGrammarAccess.OpOrElements getOpOrAccess() {
		return gaDmx.getOpOrAccess();
	}
	
	public EnumRule getOpOrRule() {
		return getOpOrAccess().getRule();
	}
	
	//DAndExpression DExpression:
	//	DEqualityExpression (=> ({DBinaryOperation.leftOperand=current} operator=OpAnd) rightOperand=DEqualityExpression)*;
	public DmxGrammarAccess.DAndExpressionElements getDAndExpressionAccess() {
		return gaDmx.getDAndExpressionAccess();
	}
	
	public ParserRule getDAndExpressionRule() {
		return getDAndExpressionAccess().getRule();
	}
	
	//enum OpAnd returns DBinaryOperator:
	//	AND | AND='and';
	public DmxGrammarAccess.OpAndElements getOpAndAccess() {
		return gaDmx.getOpAndAccess();
	}
	
	public EnumRule getOpAndRule() {
		return getOpAndAccess().getRule();
	}
	
	//DEqualityExpression DExpression:
	//	DRelationalExpression (=> ({DBinaryOperation.leftOperand=current} operator=OpEquality)
	//	rightOperand=DRelationalExpression)*;
	public DmxGrammarAccess.DEqualityExpressionElements getDEqualityExpressionAccess() {
		return gaDmx.getDEqualityExpressionAccess();
	}
	
	public ParserRule getDEqualityExpressionRule() {
		return getDEqualityExpressionAccess().getRule();
	}
	
	//enum OpEquality returns DBinaryOperator:
	//	EQUAL='=' | NOT_EQUAL='!=' | NOT_EQUAL='<>';
	public DmxGrammarAccess.OpEqualityElements getOpEqualityAccess() {
		return gaDmx.getOpEqualityAccess();
	}
	
	public EnumRule getOpEqualityRule() {
		return getOpEqualityAccess().getRule();
	}
	
	//DRelationalExpression DExpression:
	//	DOtherOperatorExpression (=> ({DInstanceOfExpression.expression=current} OpInstanceOf) type=[DType] | =>
	//	({DBinaryOperation.leftOperand=current} operator=OpCompare) rightOperand=DOtherOperatorExpression)*;
	public DmxGrammarAccess.DRelationalExpressionElements getDRelationalExpressionAccess() {
		return gaDmx.getDRelationalExpressionAccess();
	}
	
	public ParserRule getDRelationalExpressionRule() {
		return getDRelationalExpressionAccess().getRule();
	}
	
	//OpInstanceOf:
	//	'ISA' | 'isa';
	public DmxGrammarAccess.OpInstanceOfElements getOpInstanceOfAccess() {
		return gaDmx.getOpInstanceOfAccess();
	}
	
	public ParserRule getOpInstanceOfRule() {
		return getOpInstanceOfAccess().getRule();
	}
	
	//enum OpCompare returns DBinaryOperator:
	//	LESS='<' | LESS_OR_EQUAL='<=' | LESS_OR_EQUAL='≤' | GREATER_OR_EQUAL='>=' | GREATER_OR_EQUAL='≥' | GREATER='>';
	public DmxGrammarAccess.OpCompareElements getOpCompareAccess() {
		return gaDmx.getOpCompareAccess();
	}
	
	public EnumRule getOpCompareRule() {
		return getOpCompareAccess().getRule();
	}
	
	//DOtherOperatorExpression DExpression:
	//	DAdditiveExpression (=> ({DBinaryOperation.leftOperand=current} operator=OpOther) rightOperand=DAdditiveExpression)*;
	public DmxGrammarAccess.DOtherOperatorExpressionElements getDOtherOperatorExpressionAccess() {
		return gaDmx.getDOtherOperatorExpressionAccess();
	}
	
	public ParserRule getDOtherOperatorExpressionRule() {
		return getDOtherOperatorExpressionAccess().getRule();
	}
	
	//enum OpOther returns DBinaryOperator:
	//	UNTIL='..' | SINGLE_ARROW='->' | DOUBLE_ARROW='=>';
	public DmxGrammarAccess.OpOtherElements getOpOtherAccess() {
		return gaDmx.getOpOtherAccess();
	}
	
	public EnumRule getOpOtherRule() {
		return getOpOtherAccess().getRule();
	}
	
	//DAdditiveExpression DExpression:
	//	DMultiplicativeExpression (=> ({DBinaryOperation.leftOperand=current} operator=OpAdd)
	//	rightOperand=DMultiplicativeExpression)*;
	public DmxGrammarAccess.DAdditiveExpressionElements getDAdditiveExpressionAccess() {
		return gaDmx.getDAdditiveExpressionAccess();
	}
	
	public ParserRule getDAdditiveExpressionRule() {
		return getDAdditiveExpressionAccess().getRule();
	}
	
	//enum OpAdd returns DBinaryOperator:
	//	ADD='+' | SUBTRACT='-';
	public DmxGrammarAccess.OpAddElements getOpAddAccess() {
		return gaDmx.getOpAddAccess();
	}
	
	public EnumRule getOpAddRule() {
		return getOpAddAccess().getRule();
	}
	
	//DMultiplicativeExpression DExpression:
	//	DUnaryOperation (=> ({DBinaryOperation.leftOperand=current} operator=OpMulti) rightOperand=DUnaryOperation)*;
	public DmxGrammarAccess.DMultiplicativeExpressionElements getDMultiplicativeExpressionAccess() {
		return gaDmx.getDMultiplicativeExpressionAccess();
	}
	
	public ParserRule getDMultiplicativeExpressionRule() {
		return getDMultiplicativeExpressionAccess().getRule();
	}
	
	//enum OpMulti returns DBinaryOperator:
	//	MULTIPLY='*' | DIVIDE='/' | POWER='**' | MODULO='%';
	public DmxGrammarAccess.OpMultiElements getOpMultiAccess() {
		return gaDmx.getOpMultiAccess();
	}
	
	public EnumRule getOpMultiRule() {
		return getOpMultiAccess().getRule();
	}
	
	//DUnaryOperation DExpression:
	//	{DUnaryOperation} operator=OpUnary operand=DUnaryOperation
	//	| DCastExpression;
	public DmxGrammarAccess.DUnaryOperationElements getDUnaryOperationAccess() {
		return gaDmx.getDUnaryOperationAccess();
	}
	
	public ParserRule getDUnaryOperationRule() {
		return getDUnaryOperationAccess().getRule();
	}
	
	//enum OpUnary returns DUnaryOperator:
	//	PLUS='+' | MINUS='-' | NOT='!' | NOT | NOT='not';
	public DmxGrammarAccess.OpUnaryElements getOpUnaryAccess() {
		return gaDmx.getOpUnaryAccess();
	}
	
	public EnumRule getOpUnaryRule() {
		return getOpUnaryAccess().getRule();
	}
	
	//DCastExpression DExpression:
	//	DTypedMemberReference (=> ({DCastExpression.target=current} OpCast) type=[DType])?;
	public DmxGrammarAccess.DCastExpressionElements getDCastExpressionAccess() {
		return gaDmx.getDCastExpressionAccess();
	}
	
	public ParserRule getDCastExpressionRule() {
		return getDCastExpressionAccess().getRule();
	}
	
	//OpCast:
	//	'AS' | 'as';
	public DmxGrammarAccess.OpCastElements getOpCastAccess() {
		return gaDmx.getOpCastAccess();
	}
	
	public ParserRule getOpCastRule() {
		return getOpCastAccess().getRule();
	}
	
	//DTypedMemberReference DExpression:
	//	DPrimaryExpression (=> ({DAssignment.memberContainer=current} '.' member=[DTypedMember] OpSingleAssign)
	//	value=DAssignment
	//	| => ({DTypedMemberReference.memberContainerReference=current} '.') member=[DTypedMember] (=>
	//	explicitOperationCall?='(' (memberCallArguments+=DExpression (',' memberCallArguments+=DExpression)*)?
	//	')'
	//	| before?="@before")?)*;
	public DmxGrammarAccess.DTypedMemberReferenceElements getDTypedMemberReferenceAccess() {
		return gaDmx.getDTypedMemberReferenceAccess();
	}
	
	public ParserRule getDTypedMemberReferenceRule() {
		return getDTypedMemberReferenceAccess().getRule();
	}
	
	//DPrimaryExpression DExpression:
	//	DLiteralExpression | DSelfExpression | DReturnExpression | DRaiseExpression | DParenthesizedExpression | DFunctionCall
	//	| DConstructorCall | DContextReference | DIfExpression | DForLoopExpression;
	public DmxGrammarAccess.DPrimaryExpressionElements getDPrimaryExpressionAccess() {
		return gaDmx.getDPrimaryExpressionAccess();
	}
	
	public ParserRule getDPrimaryExpressionRule() {
		return getDPrimaryExpressionAccess().getRule();
	}
	
	//DLiteralExpression DExpression:
	//	DBooleanLiteral | DStringLiteral | DNaturalLiteral | DDecimalLiteral | DNilLiteral;
	public DmxGrammarAccess.DLiteralExpressionElements getDLiteralExpressionAccess() {
		return gaDmx.getDLiteralExpressionAccess();
	}
	
	public ParserRule getDLiteralExpressionRule() {
		return getDLiteralExpressionAccess().getRule();
	}
	
	//DSelfExpression DExpression:
	//	{DSelfExpression} ('SELF' | 'self');
	public DmxGrammarAccess.DSelfExpressionElements getDSelfExpressionAccess() {
		return gaDmx.getDSelfExpressionAccess();
	}
	
	public ParserRule getDSelfExpressionRule() {
		return getDSelfExpressionAccess().getRule();
	}
	
	//DReturnExpression DExpression:
	//	{DReturnExpression} ('RETURN' | 'return') -> expression=DExpression?;
	public DmxGrammarAccess.DReturnExpressionElements getDReturnExpressionAccess() {
		return gaDmx.getDReturnExpressionAccess();
	}
	
	public ParserRule getDReturnExpressionRule() {
		return getDReturnExpressionAccess().getRule();
	}
	
	//DRaiseExpression DExpression:
	//	{DRaiseExpression} ('RAISE' | 'raise') expression=DExpression;
	public DmxGrammarAccess.DRaiseExpressionElements getDRaiseExpressionAccess() {
		return gaDmx.getDRaiseExpressionAccess();
	}
	
	public ParserRule getDRaiseExpressionRule() {
		return getDRaiseExpressionAccess().getRule();
	}
	
	//DParenthesizedExpression DExpression:
	//	'(' DExpression ')';
	public DmxGrammarAccess.DParenthesizedExpressionElements getDParenthesizedExpressionAccess() {
		return gaDmx.getDParenthesizedExpressionAccess();
	}
	
	public ParserRule getDParenthesizedExpressionRule() {
		return getDParenthesizedExpressionAccess().getRule();
	}
	
	//DFunctionCall DExpression:
	//	{DFunctionCall} function=[DFunction]
	//	'(' (functionCallArguments+=DExpression (',' functionCallArguments+=DExpression)*)?
	//	')';
	public DmxGrammarAccess.DFunctionCallElements getDFunctionCallAccess() {
		return gaDmx.getDFunctionCallAccess();
	}
	
	public ParserRule getDFunctionCallRule() {
		return getDFunctionCallAccess().getRule();
	}
	
	//DConstructorCall DExpression:
	//	{DConstructorCall} OpConstructor constructor=[DIdentityType] (=> explicitConstructorCall?='(' (arguments+=DExpression
	//	(',' arguments+=DExpression)*)?
	//	')')?;
	public DmxGrammarAccess.DConstructorCallElements getDConstructorCallAccess() {
		return gaDmx.getDConstructorCallAccess();
	}
	
	public ParserRule getDConstructorCallRule() {
		return getDConstructorCallAccess().getRule();
	}
	
	//OpConstructor:
	//	'NEW' | 'new';
	public DmxGrammarAccess.OpConstructorElements getOpConstructorAccess() {
		return gaDmx.getOpConstructorAccess();
	}
	
	public ParserRule getOpConstructorRule() {
		return getOpConstructorAccess().getRule();
	}
	
	//DContextReference DExpression:
	//	{DContextReference} target=[DNamedElement] before?="@before"?;
	public DmxGrammarAccess.DContextReferenceElements getDContextReferenceAccess() {
		return gaDmx.getDContextReferenceAccess();
	}
	
	public ParserRule getDContextReferenceRule() {
		return getDContextReferenceAccess().getRule();
	}
	
	//DIfExpression DExpression:
	//	{DIfExpression}
	//	'if' if=DExpression
	//	'then' then=DExpression (=> 'else' else=DExpression)?
	//	'end';
	public DmxGrammarAccess.DIfExpressionElements getDIfExpressionAccess() {
		return gaDmx.getDIfExpressionAccess();
	}
	
	public ParserRule getDIfExpressionRule() {
		return getDIfExpressionAccess().getRule();
	}
	
	//DForLoopExpression DExpression:
	//	=> ({DForLoopExpression}
	//	'for' declaredParam=ID ':') forExpression=DExpression 'do'
	//	eachExpression=DExpression
	//	'end';
	public DmxGrammarAccess.DForLoopExpressionElements getDForLoopExpressionAccess() {
		return gaDmx.getDForLoopExpressionAccess();
	}
	
	public ParserRule getDForLoopExpressionRule() {
		return getDForLoopExpressionAccess().getRule();
	}
	
	//DMultiplicity:
	//	'(' minOccurs=NATURAL '..' maxOccurs=MULTIPLICITY ')';
	public DmxGrammarAccess.DMultiplicityElements getDMultiplicityAccess() {
		return gaDmx.getDMultiplicityAccess();
	}
	
	public ParserRule getDMultiplicityRule() {
		return getDMultiplicityAccess().getRule();
	}
	
	//MULTIPLICITY ecore::EInt:
	//	NATURAL | '*';
	public DmxGrammarAccess.MULTIPLICITYElements getMULTIPLICITYAccess() {
		return gaDmx.getMULTIPLICITYAccess();
	}
	
	public ParserRule getMULTIPLICITYRule() {
		return getMULTIPLICITYAccess().getRule();
	}
	
	//DBooleanLiteral DExpression:
	//	{DBooleanLiteral} (value?='TRUE' | value?='true' | 'FALSE' | 'false');
	public DmxGrammarAccess.DBooleanLiteralElements getDBooleanLiteralAccess() {
		return gaDmx.getDBooleanLiteralAccess();
	}
	
	public ParserRule getDBooleanLiteralRule() {
		return getDBooleanLiteralAccess().getRule();
	}
	
	//DStringLiteral DExpression:
	//	{DStringLiteral} value=STRING;
	public DmxGrammarAccess.DStringLiteralElements getDStringLiteralAccess() {
		return gaDmx.getDStringLiteralAccess();
	}
	
	public ParserRule getDStringLiteralRule() {
		return getDStringLiteralAccess().getRule();
	}
	
	//DNaturalLiteral DExpression:
	//	{DNaturalLiteral} value=NATURAL;
	public DmxGrammarAccess.DNaturalLiteralElements getDNaturalLiteralAccess() {
		return gaDmx.getDNaturalLiteralAccess();
	}
	
	public ParserRule getDNaturalLiteralRule() {
		return getDNaturalLiteralAccess().getRule();
	}
	
	//DDecimalLiteral DExpression:
	//	{DDecimalLiteral} value=DECIMAL;
	public DmxGrammarAccess.DDecimalLiteralElements getDDecimalLiteralAccess() {
		return gaDmx.getDDecimalLiteralAccess();
	}
	
	public ParserRule getDDecimalLiteralRule() {
		return getDDecimalLiteralAccess().getRule();
	}
	
	//DNilLiteral DExpression:
	//	{DNilLiteral} ('NIL' | 'nil');
	public DmxGrammarAccess.DNilLiteralElements getDNilLiteralAccess() {
		return gaDmx.getDNilLiteralAccess();
	}
	
	public ParserRule getDNilLiteralRule() {
		return getDNilLiteralAccess().getRule();
	}
	
	//DECIMAL:
	//	NATURAL '.' NATURAL (('E' | 'e') ('+' | '-')? NATURAL)?;
	public DmxGrammarAccess.DECIMALElements getDECIMALAccess() {
		return gaDmx.getDECIMALAccess();
	}
	
	public ParserRule getDECIMALRule() {
		return getDECIMALAccess().getRule();
	}
	
	//DQualifiedNameWithWildcard:
	//	DQualifiedName '.*'?;
	public DmxGrammarAccess.DQualifiedNameWithWildcardElements getDQualifiedNameWithWildcardAccess() {
		return gaDmx.getDQualifiedNameWithWildcardAccess();
	}
	
	public ParserRule getDQualifiedNameWithWildcardRule() {
		return getDQualifiedNameWithWildcardAccess().getRule();
	}
	
	//DQualifiedName:
	//	ID ('.' ID)*;
	public DmxGrammarAccess.DQualifiedNameElements getDQualifiedNameAccess() {
		return gaDmx.getDQualifiedNameAccess();
	}
	
	public ParserRule getDQualifiedNameRule() {
		return getDQualifiedNameAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaDmx.getIDRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"';
	public TerminalRule getSTRINGRule() {
		return gaDmx.getSTRINGRule();
	}
	
	//terminal NATURAL returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getNATURALRule() {
		return gaDmx.getNATURALRule();
	}
	
	//terminal fragment PLAIN_TEXT:
	//	!('»' | '[');
	public TerminalRule getPLAIN_TEXTRule() {
		return gaDmx.getPLAIN_TEXTRule();
	}
	
	//terminal PLAIN_TEXT_ONLY:
	//	'«' PLAIN_TEXT* '»';
	public TerminalRule getPLAIN_TEXT_ONLYRule() {
		return gaDmx.getPLAIN_TEXT_ONLYRule();
	}
	
	//terminal PLAIN_TEXT_START:
	//	'«' PLAIN_TEXT* '[';
	public TerminalRule getPLAIN_TEXT_STARTRule() {
		return gaDmx.getPLAIN_TEXT_STARTRule();
	}
	
	//terminal PLAIN_TEXT_MIDDLE:
	//	']' PLAIN_TEXT* '[';
	public TerminalRule getPLAIN_TEXT_MIDDLERule() {
		return gaDmx.getPLAIN_TEXT_MIDDLERule();
	}
	
	//terminal PLAIN_TEXT_END:
	//	']' PLAIN_TEXT* '»';
	public TerminalRule getPLAIN_TEXT_ENDRule() {
		return gaDmx.getPLAIN_TEXT_ENDRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaDmx.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaDmx.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaDmx.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaDmx.getANY_OTHERRule();
	}
}
