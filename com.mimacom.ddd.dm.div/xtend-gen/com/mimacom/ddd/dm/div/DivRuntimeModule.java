/**
 * generated by Xtext 2.19.0
 */
package com.mimacom.ddd.dm.div;

import com.google.inject.Binder;
import com.google.inject.name.Names;
import com.mimacom.ddd.dm.base.transpose.TransposeAwareResource;
import com.mimacom.ddd.dm.div.AbstractDivRuntimeModule;
import com.mimacom.ddd.dm.div.derivedState.DivDerivedStateComputer;
import com.mimacom.ddd.dm.dmx.indexing.DmxResourceDescriptionStrategy;
import com.mimacom.ddd.dm.dmx.parsing.DmxValueConverters;
import com.mimacom.ddd.dm.dmx.scoping.DmxQualifiedNameProvider;
import org.eclipse.xtext.conversion.IValueConverterService;
import org.eclipse.xtext.naming.IQualifiedNameProvider;
import org.eclipse.xtext.resource.DerivedStateAwareResourceDescriptionManager;
import org.eclipse.xtext.resource.IDefaultResourceDescriptionStrategy;
import org.eclipse.xtext.resource.IDerivedStateComputer;
import org.eclipse.xtext.resource.IResourceDescription;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.scoping.IScopeProvider;
import org.eclipse.xtext.scoping.impl.AbstractDeclarativeScopeProvider;
import org.eclipse.xtext.scoping.impl.ImportedNamespaceAwareLocalScopeProvider;

/**
 * Use this class to register components to be used at runtime / without the Equinox extension registry.
 */
@SuppressWarnings("all")
public class DivRuntimeModule extends AbstractDivRuntimeModule {
  @Override
  public Class<? extends IQualifiedNameProvider> bindIQualifiedNameProvider() {
    return DmxQualifiedNameProvider.class;
  }
  
  @Override
  public Class<? extends IValueConverterService> bindIValueConverterService() {
    return DmxValueConverters.class;
  }
  
  @Override
  public void configureIScopeProviderDelegate(final Binder binder) {
    binder.<IScopeProvider>bind(IScopeProvider.class).annotatedWith(Names.named(AbstractDeclarativeScopeProvider.NAMED_DELEGATE)).to(ImportedNamespaceAwareLocalScopeProvider.class);
  }
  
  @Override
  public Class<? extends XtextResource> bindXtextResource() {
    return TransposeAwareResource.class;
  }
  
  public Class<? extends IDerivedStateComputer> bindIDerivedStateComputer() {
    return DivDerivedStateComputer.class;
  }
  
  public Class<? extends IResourceDescription.Manager> bindIResourceDescriptionManager() {
    return DerivedStateAwareResourceDescriptionManager.class;
  }
  
  public Class<? extends IDefaultResourceDescriptionStrategy> bindIDefaultResourceDescriptionStrategy() {
    return DmxResourceDescriptionStrategy.class;
  }
}
