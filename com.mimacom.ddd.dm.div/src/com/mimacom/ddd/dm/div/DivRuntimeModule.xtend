/*
 * generated by Xtext 2.19.0
 */
package com.mimacom.ddd.dm.div

import com.google.inject.Binder
import com.google.inject.name.Names
import com.mimacom.ddd.dm.base.transpose.TransposeAwareResource
import com.mimacom.ddd.dm.div.derivedState.DivDerivedStateComputer
import com.mimacom.ddd.dm.dmx.indexing.DmxResourceDescriptionStrategy
import com.mimacom.ddd.dm.dmx.parsing.DmxValueConverters
import com.mimacom.ddd.dm.dmx.scoping.DmxQualifiedNameProvider
import org.eclipse.xtext.conversion.IValueConverterService
import org.eclipse.xtext.naming.IQualifiedNameProvider
import org.eclipse.xtext.resource.DerivedStateAwareResourceDescriptionManager
import org.eclipse.xtext.resource.IDefaultResourceDescriptionStrategy
import org.eclipse.xtext.resource.IDerivedStateComputer
import org.eclipse.xtext.resource.IResourceDescription
import org.eclipse.xtext.scoping.IScopeProvider
import org.eclipse.xtext.scoping.impl.AbstractDeclarativeScopeProvider
import org.eclipse.xtext.scoping.impl.ImportedNamespaceAwareLocalScopeProvider
import com.mimacom.ddd.dm.dim.scoping.TransposedDimScopeProvider

/**
 * Use this class to register components to be used at runtime / without the Equinox extension registry.
 */
class DivRuntimeModule extends AbstractDivRuntimeModule {
	
	override Class<? extends IQualifiedNameProvider> bindIQualifiedNameProvider()  {
		return DmxQualifiedNameProvider
	}
	
	override Class<? extends IValueConverterService> bindIValueConverterService() {
		return DmxValueConverters
	}
	
	override Class<? extends IScopeProvider> bindIScopeProvider() {
		TransposedDimScopeProvider
	}
	
	override void configureIScopeProviderDelegate(Binder binder) {
		binder.bind(IScopeProvider)
		.annotatedWith(Names.named(AbstractDeclarativeScopeProvider.NAMED_DELEGATE))
		.to(ImportedNamespaceAwareLocalScopeProvider); //DmxImportedNamespaceAwareLocalScopeProvider);
	}

	// derived state:
	
	override bindXtextResource() {
		TransposeAwareResource
	}

	def Class<? extends IDerivedStateComputer> bindIDerivedStateComputer() {
		DivDerivedStateComputer
	}

	def Class<? extends IResourceDescription.Manager> bindIResourceDescriptionManager() {
		DerivedStateAwareResourceDescriptionManager
	}

	def Class<? extends IDefaultResourceDescriptionStrategy> bindIDefaultResourceDescriptionStrategy() {
		return DmxResourceDescriptionStrategy;
	}
}
