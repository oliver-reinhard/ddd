/*
 * generated by Xtext 2.19.0
 */
package com.mimacom.ddd.dm.div.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import com.mimacom.ddd.dm.dim.services.DimGrammarAccess;
import com.mimacom.ddd.dm.dmx.services.DmxGrammarAccess;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class DivGrammarAccess extends AbstractGrammarElementFinder {
	
	public class DNamespaceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.div.Div.DNamespace");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDomainKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameDQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cImportsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cImportsDImportParserRuleCall_2_0 = (RuleCall)cImportsAssignment_2.eContents().get(0);
		private final Assignment cModelAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cModelDomainInformationViewParserRuleCall_3_0 = (RuleCall)cModelAssignment_3.eContents().get(0);
		
		//@Override
		//DNamespace:
		//	'domain'
		//	name=DQualifiedName
		//	imports+=DImport*
		//	model=DomainInformationView;
		@Override public ParserRule getRule() { return rule; }
		
		//'domain' name=DQualifiedName imports+=DImport* model=DomainInformationView
		public Group getGroup() { return cGroup; }
		
		//'domain'
		public Keyword getDomainKeyword_0() { return cDomainKeyword_0; }
		
		//name=DQualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//DQualifiedName
		public RuleCall getNameDQualifiedNameParserRuleCall_1_0() { return cNameDQualifiedNameParserRuleCall_1_0; }
		
		//imports+=DImport*
		public Assignment getImportsAssignment_2() { return cImportsAssignment_2; }
		
		//DImport
		public RuleCall getImportsDImportParserRuleCall_2_0() { return cImportsDImportParserRuleCall_2_0; }
		
		//model=DomainInformationView
		public Assignment getModelAssignment_3() { return cModelAssignment_3; }
		
		//DomainInformationView
		public RuleCall getModelDomainInformationViewParserRuleCall_3_0() { return cModelDomainInformationViewParserRuleCall_3_0; }
	}
	public class DomainInformationViewElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.div.Div.DomainInformationView");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInformationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cViewKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Assignment cReadOnlyViewAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Keyword cReadOnlyViewReadKeyword_3_0 = (Keyword)cReadOnlyViewAssignment_3.eContents().get(0);
		private final Keyword cOnlyKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cDescriptionAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cDescriptionDRichTextParserRuleCall_5_0 = (RuleCall)cDescriptionAssignment_5.eContents().get(0);
		private final Assignment cNotesAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cNotesDNoteParserRuleCall_6_0 = (RuleCall)cNotesAssignment_6.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Alternatives cAlternatives_8 = (Alternatives)cGroup.eContents().get(8);
		private final Assignment cTypesAssignment_8_0 = (Assignment)cAlternatives_8.eContents().get(0);
		private final RuleCall cTypesDivTypeParserRuleCall_8_0_0 = (RuleCall)cTypesAssignment_8_0.eContents().get(0);
		private final Assignment cAggregatesAssignment_8_1 = (Assignment)cAlternatives_8.eContents().get(1);
		private final RuleCall cAggregatesDivAggregateParserRuleCall_8_1_0 = (RuleCall)cAggregatesAssignment_8_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//DomainInformationView:
		//	'information' 'view'
		//	name=ID
		//	readOnlyView?='read' 'only'
		//	//	 (^generate?='generate')?
		//	description=DRichText?
		//	notes+=DNote*
		//	'{' (types+=DivType | aggregates+=DivAggregate)*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'information' 'view' name=ID readOnlyView?='read' 'only' //	 (^generate?='generate')?
		//description=DRichText? notes+=DNote* '{' (types+=DivType | aggregates+=DivAggregate)* '}'
		public Group getGroup() { return cGroup; }
		
		//'information'
		public Keyword getInformationKeyword_0() { return cInformationKeyword_0; }
		
		//'view'
		public Keyword getViewKeyword_1() { return cViewKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//readOnlyView?='read'
		public Assignment getReadOnlyViewAssignment_3() { return cReadOnlyViewAssignment_3; }
		
		//'read'
		public Keyword getReadOnlyViewReadKeyword_3_0() { return cReadOnlyViewReadKeyword_3_0; }
		
		//'only'
		public Keyword getOnlyKeyword_4() { return cOnlyKeyword_4; }
		
		////	 (^generate?='generate')?
		//description=DRichText?
		public Assignment getDescriptionAssignment_5() { return cDescriptionAssignment_5; }
		
		//DRichText
		public RuleCall getDescriptionDRichTextParserRuleCall_5_0() { return cDescriptionDRichTextParserRuleCall_5_0; }
		
		//notes+=DNote*
		public Assignment getNotesAssignment_6() { return cNotesAssignment_6; }
		
		//DNote
		public RuleCall getNotesDNoteParserRuleCall_6_0() { return cNotesDNoteParserRuleCall_6_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_7() { return cLeftCurlyBracketKeyword_7; }
		
		//(types+=DivType | aggregates+=DivAggregate)*
		public Alternatives getAlternatives_8() { return cAlternatives_8; }
		
		//types+=DivType
		public Assignment getTypesAssignment_8_0() { return cTypesAssignment_8_0; }
		
		//DivType
		public RuleCall getTypesDivTypeParserRuleCall_8_0_0() { return cTypesDivTypeParserRuleCall_8_0_0; }
		
		//aggregates+=DivAggregate
		public Assignment getAggregatesAssignment_8_1() { return cAggregatesAssignment_8_1; }
		
		//DivAggregate
		public RuleCall getAggregatesDivAggregateParserRuleCall_8_1_0() { return cAggregatesDivAggregateParserRuleCall_8_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_9() { return cRightCurlyBracketKeyword_9; }
	}
	public class DivGrabAggregateRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.div.Div.DivGrabAggregateRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSourceAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cSourceDimAggregateCrossReference_0_0 = (CrossReference)cSourceAssignment_0.eContents().get(0);
		private final RuleCall cSourceDimAggregateDQualifiedNameParserRuleCall_0_0_1 = (RuleCall)cSourceDimAggregateCrossReference_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cReadOnlyViewAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Keyword cReadOnlyViewReadKeyword_1_0_0 = (Keyword)cReadOnlyViewAssignment_1_0.eContents().get(0);
		private final Keyword cOnlyKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cAsKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cRenameToAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cRenameToIDTerminalRuleCall_2_1_0 = (RuleCall)cRenameToAssignment_2_1.eContents().get(0);
		
		///*
		// * RULEs
		// */ DivGrabAggregateRule TGrabAggregateRule:
		//	source=[DimAggregate|DQualifiedName] (readOnlyView?='read' 'only')? ('as' renameTo=ID)?;
		@Override public ParserRule getRule() { return rule; }
		
		//source=[DimAggregate|DQualifiedName] (readOnlyView?='read' 'only')? ('as' renameTo=ID)?
		public Group getGroup() { return cGroup; }
		
		//source=[DimAggregate|DQualifiedName]
		public Assignment getSourceAssignment_0() { return cSourceAssignment_0; }
		
		//[DimAggregate|DQualifiedName]
		public CrossReference getSourceDimAggregateCrossReference_0_0() { return cSourceDimAggregateCrossReference_0_0; }
		
		//DQualifiedName
		public RuleCall getSourceDimAggregateDQualifiedNameParserRuleCall_0_0_1() { return cSourceDimAggregateDQualifiedNameParserRuleCall_0_0_1; }
		
		//(readOnlyView?='read' 'only')?
		public Group getGroup_1() { return cGroup_1; }
		
		//readOnlyView?='read'
		public Assignment getReadOnlyViewAssignment_1_0() { return cReadOnlyViewAssignment_1_0; }
		
		//'read'
		public Keyword getReadOnlyViewReadKeyword_1_0_0() { return cReadOnlyViewReadKeyword_1_0_0; }
		
		//'only'
		public Keyword getOnlyKeyword_1_1() { return cOnlyKeyword_1_1; }
		
		//('as' renameTo=ID)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'as'
		public Keyword getAsKeyword_2_0() { return cAsKeyword_2_0; }
		
		//renameTo=ID
		public Assignment getRenameToAssignment_2_1() { return cRenameToAssignment_2_1; }
		
		//ID
		public RuleCall getRenameToIDTerminalRuleCall_2_1_0() { return cRenameToIDTerminalRuleCall_2_1_0; }
	}
	public class DivGrabPrimitiveRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.div.Div.DivGrabPrimitiveRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSourceAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cSourceDimPrimitiveCrossReference_0_0 = (CrossReference)cSourceAssignment_0.eContents().get(0);
		private final RuleCall cSourceDimPrimitiveDQualifiedNameParserRuleCall_0_0_1 = (RuleCall)cSourceDimPrimitiveCrossReference_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cAsKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cRenameToAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRenameToIDTerminalRuleCall_1_1_0 = (RuleCall)cRenameToAssignment_1_1.eContents().get(0);
		
		//DivGrabPrimitiveRule TGrabRule:
		//	source=[DimPrimitive|DQualifiedName] ('as' renameTo=ID)?;
		@Override public ParserRule getRule() { return rule; }
		
		//source=[DimPrimitive|DQualifiedName] ('as' renameTo=ID)?
		public Group getGroup() { return cGroup; }
		
		//source=[DimPrimitive|DQualifiedName]
		public Assignment getSourceAssignment_0() { return cSourceAssignment_0; }
		
		//[DimPrimitive|DQualifiedName]
		public CrossReference getSourceDimPrimitiveCrossReference_0_0() { return cSourceDimPrimitiveCrossReference_0_0; }
		
		//DQualifiedName
		public RuleCall getSourceDimPrimitiveDQualifiedNameParserRuleCall_0_0_1() { return cSourceDimPrimitiveDQualifiedNameParserRuleCall_0_0_1; }
		
		//('as' renameTo=ID)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'as'
		public Keyword getAsKeyword_1_0() { return cAsKeyword_1_0; }
		
		//renameTo=ID
		public Assignment getRenameToAssignment_1_1() { return cRenameToAssignment_1_1; }
		
		//ID
		public RuleCall getRenameToIDTerminalRuleCall_1_1_0() { return cRenameToIDTerminalRuleCall_1_1_0; }
	}
	public class DivDitchPrimitiveRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.div.Div.DivDitchPrimitiveRule");
		private final Assignment cSourceAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cSourceDimPrimitiveCrossReference_0 = (CrossReference)cSourceAssignment.eContents().get(0);
		private final RuleCall cSourceDimPrimitiveDQualifiedNameParserRuleCall_0_1 = (RuleCall)cSourceDimPrimitiveCrossReference_0.eContents().get(1);
		
		//DivDitchPrimitiveRule TDitchRule:
		//	source=[DimPrimitive|DQualifiedName];
		@Override public ParserRule getRule() { return rule; }
		
		//source=[DimPrimitive|DQualifiedName]
		public Assignment getSourceAssignment() { return cSourceAssignment; }
		
		//[DimPrimitive|DQualifiedName]
		public CrossReference getSourceDimPrimitiveCrossReference_0() { return cSourceDimPrimitiveCrossReference_0; }
		
		//DQualifiedName
		public RuleCall getSourceDimPrimitiveDQualifiedNameParserRuleCall_0_1() { return cSourceDimPrimitiveDQualifiedNameParserRuleCall_0_1; }
	}
	public class DivGrabEnumerationRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.div.Div.DivGrabEnumerationRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSourceAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cSourceDimEnumerationCrossReference_0_0 = (CrossReference)cSourceAssignment_0.eContents().get(0);
		private final RuleCall cSourceDimEnumerationDQualifiedNameParserRuleCall_0_0_1 = (RuleCall)cSourceDimEnumerationCrossReference_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cAsKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cRenameToAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRenameToIDTerminalRuleCall_1_1_0 = (RuleCall)cRenameToAssignment_1_1.eContents().get(0);
		
		//DivGrabEnumerationRule TGrabRule:
		//	source=[DimEnumeration|DQualifiedName] ('as' renameTo=ID)?;
		@Override public ParserRule getRule() { return rule; }
		
		//source=[DimEnumeration|DQualifiedName] ('as' renameTo=ID)?
		public Group getGroup() { return cGroup; }
		
		//source=[DimEnumeration|DQualifiedName]
		public Assignment getSourceAssignment_0() { return cSourceAssignment_0; }
		
		//[DimEnumeration|DQualifiedName]
		public CrossReference getSourceDimEnumerationCrossReference_0_0() { return cSourceDimEnumerationCrossReference_0_0; }
		
		//DQualifiedName
		public RuleCall getSourceDimEnumerationDQualifiedNameParserRuleCall_0_0_1() { return cSourceDimEnumerationDQualifiedNameParserRuleCall_0_0_1; }
		
		//('as' renameTo=ID)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'as'
		public Keyword getAsKeyword_1_0() { return cAsKeyword_1_0; }
		
		//renameTo=ID
		public Assignment getRenameToAssignment_1_1() { return cRenameToAssignment_1_1; }
		
		//ID
		public RuleCall getRenameToIDTerminalRuleCall_1_1_0() { return cRenameToIDTerminalRuleCall_1_1_0; }
	}
	public class DivDitchEnumerationRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.div.Div.DivDitchEnumerationRule");
		private final Assignment cSourceAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cSourceDimEnumerationCrossReference_0 = (CrossReference)cSourceAssignment.eContents().get(0);
		private final RuleCall cSourceDimEnumerationDQualifiedNameParserRuleCall_0_1 = (RuleCall)cSourceDimEnumerationCrossReference_0.eContents().get(1);
		
		//DivDitchEnumerationRule TDitchRule:
		//	source=[DimEnumeration|DQualifiedName];
		@Override public ParserRule getRule() { return rule; }
		
		//source=[DimEnumeration|DQualifiedName]
		public Assignment getSourceAssignment() { return cSourceAssignment; }
		
		//[DimEnumeration|DQualifiedName]
		public CrossReference getSourceDimEnumerationCrossReference_0() { return cSourceDimEnumerationCrossReference_0; }
		
		//DQualifiedName
		public RuleCall getSourceDimEnumerationDQualifiedNameParserRuleCall_0_1() { return cSourceDimEnumerationDQualifiedNameParserRuleCall_0_1; }
	}
	public class DivGrabEnumerationLiteralRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.div.Div.DivGrabEnumerationLiteralRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSourceAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cSourceDimLiteralCrossReference_0_0 = (CrossReference)cSourceAssignment_0.eContents().get(0);
		private final RuleCall cSourceDimLiteralIDTerminalRuleCall_0_0_1 = (RuleCall)cSourceDimLiteralCrossReference_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cAsKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cRenameToAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRenameToIDTerminalRuleCall_1_1_0 = (RuleCall)cRenameToAssignment_1_1.eContents().get(0);
		
		//DivGrabEnumerationLiteralRule TGrabRule:
		//	source=[DimLiteral] ('as' renameTo=ID)?;
		@Override public ParserRule getRule() { return rule; }
		
		//source=[DimLiteral] ('as' renameTo=ID)?
		public Group getGroup() { return cGroup; }
		
		//source=[DimLiteral]
		public Assignment getSourceAssignment_0() { return cSourceAssignment_0; }
		
		//[DimLiteral]
		public CrossReference getSourceDimLiteralCrossReference_0_0() { return cSourceDimLiteralCrossReference_0_0; }
		
		//ID
		public RuleCall getSourceDimLiteralIDTerminalRuleCall_0_0_1() { return cSourceDimLiteralIDTerminalRuleCall_0_0_1; }
		
		//('as' renameTo=ID)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'as'
		public Keyword getAsKeyword_1_0() { return cAsKeyword_1_0; }
		
		//renameTo=ID
		public Assignment getRenameToAssignment_1_1() { return cRenameToAssignment_1_1; }
		
		//ID
		public RuleCall getRenameToIDTerminalRuleCall_1_1_0() { return cRenameToIDTerminalRuleCall_1_1_0; }
	}
	public class DivDitchEnumerationLiteralRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.div.Div.DivDitchEnumerationLiteralRule");
		private final Assignment cSourceAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cSourceDimLiteralCrossReference_0 = (CrossReference)cSourceAssignment.eContents().get(0);
		private final RuleCall cSourceDimLiteralIDTerminalRuleCall_0_1 = (RuleCall)cSourceDimLiteralCrossReference_0.eContents().get(1);
		
		//DivDitchEnumerationLiteralRule TDitchRule:
		//	source=[DimLiteral];
		@Override public ParserRule getRule() { return rule; }
		
		//source=[DimLiteral]
		public Assignment getSourceAssignment() { return cSourceAssignment; }
		
		//[DimLiteral]
		public CrossReference getSourceDimLiteralCrossReference_0() { return cSourceDimLiteralCrossReference_0; }
		
		//ID
		public RuleCall getSourceDimLiteralIDTerminalRuleCall_0_1() { return cSourceDimLiteralIDTerminalRuleCall_0_1; }
	}
	public class DivGrabComplexTypeRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.div.Div.DivGrabComplexTypeRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSourceAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cSourceDimComplexTypeCrossReference_0_0 = (CrossReference)cSourceAssignment_0.eContents().get(0);
		private final RuleCall cSourceDimComplexTypeDQualifiedNameParserRuleCall_0_0_1 = (RuleCall)cSourceDimComplexTypeCrossReference_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cReadOnlyViewAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Keyword cReadOnlyViewReadKeyword_1_0_0 = (Keyword)cReadOnlyViewAssignment_1_0.eContents().get(0);
		private final Keyword cOnlyKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cAsKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cRenameToAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cRenameToIDTerminalRuleCall_2_1_0 = (RuleCall)cRenameToAssignment_2_1.eContents().get(0);
		
		//DivGrabComplexTypeRule TGrabRule:
		//	source=[DimComplexType|DQualifiedName] (readOnlyView?='read' 'only')? ('as' renameTo=ID)?;
		@Override public ParserRule getRule() { return rule; }
		
		//source=[DimComplexType|DQualifiedName] (readOnlyView?='read' 'only')? ('as' renameTo=ID)?
		public Group getGroup() { return cGroup; }
		
		//source=[DimComplexType|DQualifiedName]
		public Assignment getSourceAssignment_0() { return cSourceAssignment_0; }
		
		//[DimComplexType|DQualifiedName]
		public CrossReference getSourceDimComplexTypeCrossReference_0_0() { return cSourceDimComplexTypeCrossReference_0_0; }
		
		//DQualifiedName
		public RuleCall getSourceDimComplexTypeDQualifiedNameParserRuleCall_0_0_1() { return cSourceDimComplexTypeDQualifiedNameParserRuleCall_0_0_1; }
		
		//(readOnlyView?='read' 'only')?
		public Group getGroup_1() { return cGroup_1; }
		
		//readOnlyView?='read'
		public Assignment getReadOnlyViewAssignment_1_0() { return cReadOnlyViewAssignment_1_0; }
		
		//'read'
		public Keyword getReadOnlyViewReadKeyword_1_0_0() { return cReadOnlyViewReadKeyword_1_0_0; }
		
		//'only'
		public Keyword getOnlyKeyword_1_1() { return cOnlyKeyword_1_1; }
		
		//('as' renameTo=ID)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'as'
		public Keyword getAsKeyword_2_0() { return cAsKeyword_2_0; }
		
		//renameTo=ID
		public Assignment getRenameToAssignment_2_1() { return cRenameToAssignment_2_1; }
		
		//ID
		public RuleCall getRenameToIDTerminalRuleCall_2_1_0() { return cRenameToIDTerminalRuleCall_2_1_0; }
	}
	public class DivDitchComplexTypeRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.div.Div.DivDitchComplexTypeRule");
		private final Assignment cSourceAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cSourceDimComplexTypeCrossReference_0 = (CrossReference)cSourceAssignment.eContents().get(0);
		private final RuleCall cSourceDimComplexTypeDQualifiedNameParserRuleCall_0_1 = (RuleCall)cSourceDimComplexTypeCrossReference_0.eContents().get(1);
		
		//DivDitchComplexTypeRule TDitchRule:
		//	source=[DimComplexType|DQualifiedName];
		@Override public ParserRule getRule() { return rule; }
		
		//source=[DimComplexType|DQualifiedName]
		public Assignment getSourceAssignment() { return cSourceAssignment; }
		
		//[DimComplexType|DQualifiedName]
		public CrossReference getSourceDimComplexTypeCrossReference_0() { return cSourceDimComplexTypeCrossReference_0; }
		
		//DQualifiedName
		public RuleCall getSourceDimComplexTypeDQualifiedNameParserRuleCall_0_1() { return cSourceDimComplexTypeDQualifiedNameParserRuleCall_0_1; }
	}
	public class SimMorphComplexTypeRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.div.Div.SimMorphComplexTypeRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSourceAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cSourceDimComplexTypeCrossReference_0_0 = (CrossReference)cSourceAssignment_0.eContents().get(0);
		private final RuleCall cSourceDimComplexTypeDQualifiedNameParserRuleCall_0_0_1 = (RuleCall)cSourceDimComplexTypeCrossReference_0_0.eContents().get(1);
		private final Keyword cToKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cReadOnlyViewAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cReadOnlyViewReadKeyword_2_0 = (Keyword)cReadOnlyViewAssignment_2.eContents().get(0);
		private final Keyword cOnlyKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//SimMorphComplexTypeRule TMorphRule:
		//	source=[DimComplexType|DQualifiedName]
		//	'to'
		//	readOnlyView?='read' 'only';
		@Override public ParserRule getRule() { return rule; }
		
		//source=[DimComplexType|DQualifiedName] 'to' readOnlyView?='read' 'only'
		public Group getGroup() { return cGroup; }
		
		//source=[DimComplexType|DQualifiedName]
		public Assignment getSourceAssignment_0() { return cSourceAssignment_0; }
		
		//[DimComplexType|DQualifiedName]
		public CrossReference getSourceDimComplexTypeCrossReference_0_0() { return cSourceDimComplexTypeCrossReference_0_0; }
		
		//DQualifiedName
		public RuleCall getSourceDimComplexTypeDQualifiedNameParserRuleCall_0_0_1() { return cSourceDimComplexTypeDQualifiedNameParserRuleCall_0_0_1; }
		
		//'to'
		public Keyword getToKeyword_1() { return cToKeyword_1; }
		
		//readOnlyView?='read'
		public Assignment getReadOnlyViewAssignment_2() { return cReadOnlyViewAssignment_2; }
		
		//'read'
		public Keyword getReadOnlyViewReadKeyword_2_0() { return cReadOnlyViewReadKeyword_2_0; }
		
		//'only'
		public Keyword getOnlyKeyword_3() { return cOnlyKeyword_3; }
	}
	public class DivGrabFeatureRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.div.Div.DivGrabFeatureRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSourceAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cSourceDimFeatureCrossReference_0_0 = (CrossReference)cSourceAssignment_0.eContents().get(0);
		private final RuleCall cSourceDimFeatureIDTerminalRuleCall_0_0_1 = (RuleCall)cSourceDimFeatureCrossReference_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cReadOnlyViewAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Keyword cReadOnlyViewReadKeyword_1_0_0 = (Keyword)cReadOnlyViewAssignment_1_0.eContents().get(0);
		private final Keyword cOnlyKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cAsKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cRenameToAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cRenameToIDTerminalRuleCall_2_1_0 = (RuleCall)cRenameToAssignment_2_1.eContents().get(0);
		
		//DivGrabFeatureRule TGrabRule:
		//	source=[DimFeature] (readOnlyView?='read' 'only')? ('as' renameTo=ID)?;
		@Override public ParserRule getRule() { return rule; }
		
		//source=[DimFeature] (readOnlyView?='read' 'only')? ('as' renameTo=ID)?
		public Group getGroup() { return cGroup; }
		
		//source=[DimFeature]
		public Assignment getSourceAssignment_0() { return cSourceAssignment_0; }
		
		//[DimFeature]
		public CrossReference getSourceDimFeatureCrossReference_0_0() { return cSourceDimFeatureCrossReference_0_0; }
		
		//ID
		public RuleCall getSourceDimFeatureIDTerminalRuleCall_0_0_1() { return cSourceDimFeatureIDTerminalRuleCall_0_0_1; }
		
		//(readOnlyView?='read' 'only')?
		public Group getGroup_1() { return cGroup_1; }
		
		//readOnlyView?='read'
		public Assignment getReadOnlyViewAssignment_1_0() { return cReadOnlyViewAssignment_1_0; }
		
		//'read'
		public Keyword getReadOnlyViewReadKeyword_1_0_0() { return cReadOnlyViewReadKeyword_1_0_0; }
		
		//'only'
		public Keyword getOnlyKeyword_1_1() { return cOnlyKeyword_1_1; }
		
		//('as' renameTo=ID)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'as'
		public Keyword getAsKeyword_2_0() { return cAsKeyword_2_0; }
		
		//renameTo=ID
		public Assignment getRenameToAssignment_2_1() { return cRenameToAssignment_2_1; }
		
		//ID
		public RuleCall getRenameToIDTerminalRuleCall_2_1_0() { return cRenameToIDTerminalRuleCall_2_1_0; }
	}
	public class DivDitchFeatureRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.div.Div.DivDitchFeatureRule");
		private final Assignment cSourceAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cSourceDimFeatureCrossReference_0 = (CrossReference)cSourceAssignment.eContents().get(0);
		private final RuleCall cSourceDimFeatureIDTerminalRuleCall_0_1 = (RuleCall)cSourceDimFeatureCrossReference_0.eContents().get(1);
		
		//DivDitchFeatureRule TDitchRule:
		//	source=[DimFeature];
		@Override public ParserRule getRule() { return rule; }
		
		//source=[DimFeature]
		public Assignment getSourceAssignment() { return cSourceAssignment; }
		
		//[DimFeature]
		public CrossReference getSourceDimFeatureCrossReference_0() { return cSourceDimFeatureCrossReference_0; }
		
		//ID
		public RuleCall getSourceDimFeatureIDTerminalRuleCall_0_1() { return cSourceDimFeatureIDTerminalRuleCall_0_1; }
	}
	public class DivMorphFeatureRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.div.Div.DivMorphFeatureRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSourceAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cSourceDimFeatureCrossReference_0_0 = (CrossReference)cSourceAssignment_0.eContents().get(0);
		private final RuleCall cSourceDimFeatureIDTerminalRuleCall_0_0_1 = (RuleCall)cSourceDimFeatureCrossReference_0_0.eContents().get(1);
		private final Keyword cToKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cReadOnlyViewAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cReadOnlyViewReadKeyword_2_0 = (Keyword)cReadOnlyViewAssignment_2.eContents().get(0);
		private final Keyword cOnlyKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//DivMorphFeatureRule TMorphRule:
		//	source=[DimFeature]
		//	'to'
		//	readOnlyView?='read' 'only';
		@Override public ParserRule getRule() { return rule; }
		
		//source=[DimFeature] 'to' readOnlyView?='read' 'only'
		public Group getGroup() { return cGroup; }
		
		//source=[DimFeature]
		public Assignment getSourceAssignment_0() { return cSourceAssignment_0; }
		
		//[DimFeature]
		public CrossReference getSourceDimFeatureCrossReference_0_0() { return cSourceDimFeatureCrossReference_0_0; }
		
		//ID
		public RuleCall getSourceDimFeatureIDTerminalRuleCall_0_0_1() { return cSourceDimFeatureIDTerminalRuleCall_0_0_1; }
		
		//'to'
		public Keyword getToKeyword_1() { return cToKeyword_1; }
		
		//readOnlyView?='read'
		public Assignment getReadOnlyViewAssignment_2() { return cReadOnlyViewAssignment_2; }
		
		//'read'
		public Keyword getReadOnlyViewReadKeyword_2_0() { return cReadOnlyViewReadKeyword_2_0; }
		
		//'only'
		public Keyword getOnlyKeyword_3() { return cOnlyKeyword_3; }
	}
	public class DivAggregateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.div.Div.DivAggregate");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDivAggregateTranspositionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDimAggregateParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//DivAggregate DAggregate:
		//	DivAggregateTransposition | DimAggregate;
		@Override public ParserRule getRule() { return rule; }
		
		//DivAggregateTransposition | DimAggregate
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//DivAggregateTransposition
		public RuleCall getDivAggregateTranspositionParserRuleCall_0() { return cDivAggregateTranspositionParserRuleCall_0; }
		
		//DimAggregate
		public RuleCall getDimAggregateParserRuleCall_1() { return cDimAggregateParserRuleCall_1; }
	}
	public class DivAggregateTranspositionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.div.Div.DivAggregateTransposition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTAggregateTranspositionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cGrabKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cAggregateKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRuleAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRuleDivGrabAggregateRuleParserRuleCall_3_0 = (RuleCall)cRuleAssignment_3.eContents().get(0);
		private final Assignment cDescriptionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cDescriptionDRichTextParserRuleCall_4_0 = (RuleCall)cDescriptionAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cLeftCurlyBracketKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cFeaturesAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cFeaturesDivQueryTranspositionParserRuleCall_5_1_0 = (RuleCall)cFeaturesAssignment_5_1.eContents().get(0);
		private final Assignment cTypesAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cTypesDivTypeParserRuleCall_5_2_0 = (RuleCall)cTypesAssignment_5_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5_3 = (Keyword)cGroup_5.eContents().get(3);
		
		//DivAggregateTransposition TAggregateTransposition:
		//	{TAggregateTransposition}
		//	'grab' 'aggregate' rule=DivGrabAggregateRule
		//	description=DRichText? ('{'
		//	features+=DivQueryTransposition*
		//	types+=DivType*
		//	'}')?;
		@Override public ParserRule getRule() { return rule; }
		
		//{TAggregateTransposition} 'grab' 'aggregate' rule=DivGrabAggregateRule description=DRichText? ('{'
		//features+=DivQueryTransposition* types+=DivType* '}')?
		public Group getGroup() { return cGroup; }
		
		//{TAggregateTransposition}
		public Action getTAggregateTranspositionAction_0() { return cTAggregateTranspositionAction_0; }
		
		//'grab'
		public Keyword getGrabKeyword_1() { return cGrabKeyword_1; }
		
		//'aggregate'
		public Keyword getAggregateKeyword_2() { return cAggregateKeyword_2; }
		
		//rule=DivGrabAggregateRule
		public Assignment getRuleAssignment_3() { return cRuleAssignment_3; }
		
		//DivGrabAggregateRule
		public RuleCall getRuleDivGrabAggregateRuleParserRuleCall_3_0() { return cRuleDivGrabAggregateRuleParserRuleCall_3_0; }
		
		//description=DRichText?
		public Assignment getDescriptionAssignment_4() { return cDescriptionAssignment_4; }
		
		//DRichText
		public RuleCall getDescriptionDRichTextParserRuleCall_4_0() { return cDescriptionDRichTextParserRuleCall_4_0; }
		
		//('{' features+=DivQueryTransposition* types+=DivType* '}')?
		public Group getGroup_5() { return cGroup_5; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_5_0() { return cLeftCurlyBracketKeyword_5_0; }
		
		//features+=DivQueryTransposition*
		public Assignment getFeaturesAssignment_5_1() { return cFeaturesAssignment_5_1; }
		
		//DivQueryTransposition
		public RuleCall getFeaturesDivQueryTranspositionParserRuleCall_5_1_0() { return cFeaturesDivQueryTranspositionParserRuleCall_5_1_0; }
		
		//types+=DivType*
		public Assignment getTypesAssignment_5_2() { return cTypesAssignment_5_2; }
		
		//DivType
		public RuleCall getTypesDivTypeParserRuleCall_5_2_0() { return cTypesDivTypeParserRuleCall_5_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5_3() { return cRightCurlyBracketKeyword_5_3; }
	}
	public class DivTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.div.Div.DivType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDivPrimitiveTranspositionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDivEnumerationTranspositionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cDivEntityTypeTranspositionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cDivDetailTypeTranspositionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		///*
		// * TYPES
		// */ DivType DType:
		//	DivPrimitiveTransposition
		//	| DivEnumerationTransposition
		//	| DivEntityTypeTransposition
		//	| DivDetailTypeTransposition;
		@Override public ParserRule getRule() { return rule; }
		
		//DivPrimitiveTransposition | DivEnumerationTransposition | DivEntityTypeTransposition | DivDetailTypeTransposition
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//DivPrimitiveTransposition
		public RuleCall getDivPrimitiveTranspositionParserRuleCall_0() { return cDivPrimitiveTranspositionParserRuleCall_0; }
		
		//DivEnumerationTransposition
		public RuleCall getDivEnumerationTranspositionParserRuleCall_1() { return cDivEnumerationTranspositionParserRuleCall_1; }
		
		//DivEntityTypeTransposition
		public RuleCall getDivEntityTypeTranspositionParserRuleCall_2() { return cDivEntityTypeTranspositionParserRuleCall_2; }
		
		//DivDetailTypeTransposition
		public RuleCall getDivDetailTypeTranspositionParserRuleCall_3() { return cDivDetailTypeTranspositionParserRuleCall_3; }
	}
	public class DivPrimitiveTranspositionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.div.Div.DivPrimitiveTransposition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTPrimitiveTranspositionAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cGrabKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Keyword cPrimitiveKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Assignment cRuleAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cRuleDivGrabPrimitiveRuleParserRuleCall_1_0_2_0 = (RuleCall)cRuleAssignment_1_0_2.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cDitchKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Keyword cPrimitiveKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		private final Assignment cRuleAssignment_1_1_2 = (Assignment)cGroup_1_1.eContents().get(2);
		private final RuleCall cRuleDivDitchPrimitiveRuleParserRuleCall_1_1_2_0 = (RuleCall)cRuleAssignment_1_1_2.eContents().get(0);
		private final Assignment cDescriptionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDescriptionDRichTextParserRuleCall_2_0 = (RuleCall)cDescriptionAssignment_2.eContents().get(0);
		private final Assignment cNotesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNotesDNoteParserRuleCall_3_0 = (RuleCall)cNotesAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cLeftCurlyBracketKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cGroup_4.eContents().get(1);
		private final Keyword cAddKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Assignment cConstraintsAssignment_4_1_1 = (Assignment)cGroup_4_1.eContents().get(1);
		private final RuleCall cConstraintsDConstraintParserRuleCall_4_1_1_0 = (RuleCall)cConstraintsAssignment_4_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		
		//DivPrimitiveTransposition TPrimitiveTransposition:
		//	{TPrimitiveTransposition} ('grab' 'primitive' rule=DivGrabPrimitiveRule
		//	| 'ditch' 'primitive' rule=DivDitchPrimitiveRule) description=DRichText?
		//	notes+=DNote* ('{' ('add' constraints+=DConstraint)*
		//	'}')?;
		@Override public ParserRule getRule() { return rule; }
		
		//{TPrimitiveTransposition} ('grab' 'primitive' rule=DivGrabPrimitiveRule | 'ditch' 'primitive'
		//rule=DivDitchPrimitiveRule) description=DRichText? notes+=DNote* ('{' ('add' constraints+=DConstraint)* '}')?
		public Group getGroup() { return cGroup; }
		
		//{TPrimitiveTransposition}
		public Action getTPrimitiveTranspositionAction_0() { return cTPrimitiveTranspositionAction_0; }
		
		//('grab' 'primitive' rule=DivGrabPrimitiveRule | 'ditch' 'primitive' rule=DivDitchPrimitiveRule)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'grab' 'primitive' rule=DivGrabPrimitiveRule
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//'grab'
		public Keyword getGrabKeyword_1_0_0() { return cGrabKeyword_1_0_0; }
		
		//'primitive'
		public Keyword getPrimitiveKeyword_1_0_1() { return cPrimitiveKeyword_1_0_1; }
		
		//rule=DivGrabPrimitiveRule
		public Assignment getRuleAssignment_1_0_2() { return cRuleAssignment_1_0_2; }
		
		//DivGrabPrimitiveRule
		public RuleCall getRuleDivGrabPrimitiveRuleParserRuleCall_1_0_2_0() { return cRuleDivGrabPrimitiveRuleParserRuleCall_1_0_2_0; }
		
		//'ditch' 'primitive' rule=DivDitchPrimitiveRule
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//'ditch'
		public Keyword getDitchKeyword_1_1_0() { return cDitchKeyword_1_1_0; }
		
		//'primitive'
		public Keyword getPrimitiveKeyword_1_1_1() { return cPrimitiveKeyword_1_1_1; }
		
		//rule=DivDitchPrimitiveRule
		public Assignment getRuleAssignment_1_1_2() { return cRuleAssignment_1_1_2; }
		
		//DivDitchPrimitiveRule
		public RuleCall getRuleDivDitchPrimitiveRuleParserRuleCall_1_1_2_0() { return cRuleDivDitchPrimitiveRuleParserRuleCall_1_1_2_0; }
		
		//description=DRichText?
		public Assignment getDescriptionAssignment_2() { return cDescriptionAssignment_2; }
		
		//DRichText
		public RuleCall getDescriptionDRichTextParserRuleCall_2_0() { return cDescriptionDRichTextParserRuleCall_2_0; }
		
		//notes+=DNote*
		public Assignment getNotesAssignment_3() { return cNotesAssignment_3; }
		
		//DNote
		public RuleCall getNotesDNoteParserRuleCall_3_0() { return cNotesDNoteParserRuleCall_3_0; }
		
		//('{' ('add' constraints+=DConstraint)* '}')?
		public Group getGroup_4() { return cGroup_4; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4_0() { return cLeftCurlyBracketKeyword_4_0; }
		
		//('add' constraints+=DConstraint)*
		public Group getGroup_4_1() { return cGroup_4_1; }
		
		//'add'
		public Keyword getAddKeyword_4_1_0() { return cAddKeyword_4_1_0; }
		
		//constraints+=DConstraint
		public Assignment getConstraintsAssignment_4_1_1() { return cConstraintsAssignment_4_1_1; }
		
		//DConstraint
		public RuleCall getConstraintsDConstraintParserRuleCall_4_1_1_0() { return cConstraintsDConstraintParserRuleCall_4_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4_2() { return cRightCurlyBracketKeyword_4_2; }
	}
	public class DivEnumerationTranspositionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.div.Div.DivEnumerationTransposition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTEnumerationTranspositionAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cGrabKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Keyword cEnumerationKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Assignment cRuleAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cRuleDivGrabEnumerationRuleParserRuleCall_1_0_2_0 = (RuleCall)cRuleAssignment_1_0_2.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cDitchKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Keyword cEnumerationKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		private final Assignment cRuleAssignment_1_1_2 = (Assignment)cGroup_1_1.eContents().get(2);
		private final RuleCall cRuleDivDitchEnumerationRuleParserRuleCall_1_1_2_0 = (RuleCall)cRuleAssignment_1_1_2.eContents().get(0);
		private final Assignment cDescriptionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDescriptionDRichTextParserRuleCall_2_0 = (RuleCall)cDescriptionAssignment_2.eContents().get(0);
		private final Assignment cNotesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNotesDNoteParserRuleCall_3_0 = (RuleCall)cNotesAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cLeftCurlyBracketKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cGroup_4.eContents().get(1);
		private final Assignment cLiteralsAssignment_4_1_0 = (Assignment)cGroup_4_1.eContents().get(0);
		private final RuleCall cLiteralsDivLiteralTranspositionParserRuleCall_4_1_0_0 = (RuleCall)cLiteralsAssignment_4_1_0.eContents().get(0);
		private final Group cGroup_4_1_1 = (Group)cGroup_4_1.eContents().get(1);
		private final Keyword cCommaKeyword_4_1_1_0 = (Keyword)cGroup_4_1_1.eContents().get(0);
		private final Assignment cLiteralsAssignment_4_1_1_1 = (Assignment)cGroup_4_1_1.eContents().get(1);
		private final RuleCall cLiteralsDivLiteralTranspositionParserRuleCall_4_1_1_1_0 = (RuleCall)cLiteralsAssignment_4_1_1_1.eContents().get(0);
		private final Group cGroup_4_2 = (Group)cGroup_4.eContents().get(2);
		private final Keyword cAddKeyword_4_2_0 = (Keyword)cGroup_4_2.eContents().get(0);
		private final Assignment cConstraintsAssignment_4_2_1 = (Assignment)cGroup_4_2.eContents().get(1);
		private final RuleCall cConstraintsDConstraintParserRuleCall_4_2_1_0 = (RuleCall)cConstraintsAssignment_4_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4_3 = (Keyword)cGroup_4.eContents().get(3);
		
		//DivEnumerationTransposition TEnumerationTransposition:
		//	{TEnumerationTransposition} ('grab' 'enumeration' rule=DivGrabEnumerationRule
		//	| 'ditch' 'enumeration' rule=DivDitchEnumerationRule) description=DRichText?
		//	notes+=DNote* ('{' (literals+=DivLiteralTransposition (',' literals+=DivLiteralTransposition)*)? ('add'
		//	constraints+=DConstraint)*
		//	'}')?;
		@Override public ParserRule getRule() { return rule; }
		
		//{TEnumerationTransposition} ('grab' 'enumeration' rule=DivGrabEnumerationRule | 'ditch' 'enumeration'
		//rule=DivDitchEnumerationRule) description=DRichText? notes+=DNote* ('{' (literals+=DivLiteralTransposition (','
		//literals+=DivLiteralTransposition)*)? ('add' constraints+=DConstraint)* '}')?
		public Group getGroup() { return cGroup; }
		
		//{TEnumerationTransposition}
		public Action getTEnumerationTranspositionAction_0() { return cTEnumerationTranspositionAction_0; }
		
		//('grab' 'enumeration' rule=DivGrabEnumerationRule | 'ditch' 'enumeration' rule=DivDitchEnumerationRule)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'grab' 'enumeration' rule=DivGrabEnumerationRule
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//'grab'
		public Keyword getGrabKeyword_1_0_0() { return cGrabKeyword_1_0_0; }
		
		//'enumeration'
		public Keyword getEnumerationKeyword_1_0_1() { return cEnumerationKeyword_1_0_1; }
		
		//rule=DivGrabEnumerationRule
		public Assignment getRuleAssignment_1_0_2() { return cRuleAssignment_1_0_2; }
		
		//DivGrabEnumerationRule
		public RuleCall getRuleDivGrabEnumerationRuleParserRuleCall_1_0_2_0() { return cRuleDivGrabEnumerationRuleParserRuleCall_1_0_2_0; }
		
		//'ditch' 'enumeration' rule=DivDitchEnumerationRule
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//'ditch'
		public Keyword getDitchKeyword_1_1_0() { return cDitchKeyword_1_1_0; }
		
		//'enumeration'
		public Keyword getEnumerationKeyword_1_1_1() { return cEnumerationKeyword_1_1_1; }
		
		//rule=DivDitchEnumerationRule
		public Assignment getRuleAssignment_1_1_2() { return cRuleAssignment_1_1_2; }
		
		//DivDitchEnumerationRule
		public RuleCall getRuleDivDitchEnumerationRuleParserRuleCall_1_1_2_0() { return cRuleDivDitchEnumerationRuleParserRuleCall_1_1_2_0; }
		
		//description=DRichText?
		public Assignment getDescriptionAssignment_2() { return cDescriptionAssignment_2; }
		
		//DRichText
		public RuleCall getDescriptionDRichTextParserRuleCall_2_0() { return cDescriptionDRichTextParserRuleCall_2_0; }
		
		//notes+=DNote*
		public Assignment getNotesAssignment_3() { return cNotesAssignment_3; }
		
		//DNote
		public RuleCall getNotesDNoteParserRuleCall_3_0() { return cNotesDNoteParserRuleCall_3_0; }
		
		//('{' (literals+=DivLiteralTransposition (',' literals+=DivLiteralTransposition)*)? ('add' constraints+=DConstraint)*
		//'}')?
		public Group getGroup_4() { return cGroup_4; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4_0() { return cLeftCurlyBracketKeyword_4_0; }
		
		//(literals+=DivLiteralTransposition (',' literals+=DivLiteralTransposition)*)?
		public Group getGroup_4_1() { return cGroup_4_1; }
		
		//literals+=DivLiteralTransposition
		public Assignment getLiteralsAssignment_4_1_0() { return cLiteralsAssignment_4_1_0; }
		
		//DivLiteralTransposition
		public RuleCall getLiteralsDivLiteralTranspositionParserRuleCall_4_1_0_0() { return cLiteralsDivLiteralTranspositionParserRuleCall_4_1_0_0; }
		
		//(',' literals+=DivLiteralTransposition)*
		public Group getGroup_4_1_1() { return cGroup_4_1_1; }
		
		//','
		public Keyword getCommaKeyword_4_1_1_0() { return cCommaKeyword_4_1_1_0; }
		
		//literals+=DivLiteralTransposition
		public Assignment getLiteralsAssignment_4_1_1_1() { return cLiteralsAssignment_4_1_1_1; }
		
		//DivLiteralTransposition
		public RuleCall getLiteralsDivLiteralTranspositionParserRuleCall_4_1_1_1_0() { return cLiteralsDivLiteralTranspositionParserRuleCall_4_1_1_1_0; }
		
		//('add' constraints+=DConstraint)*
		public Group getGroup_4_2() { return cGroup_4_2; }
		
		//'add'
		public Keyword getAddKeyword_4_2_0() { return cAddKeyword_4_2_0; }
		
		//constraints+=DConstraint
		public Assignment getConstraintsAssignment_4_2_1() { return cConstraintsAssignment_4_2_1; }
		
		//DConstraint
		public RuleCall getConstraintsDConstraintParserRuleCall_4_2_1_0() { return cConstraintsDConstraintParserRuleCall_4_2_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4_3() { return cRightCurlyBracketKeyword_4_3; }
	}
	public class DivLiteralTranspositionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.div.Div.DivLiteralTransposition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTLiteralTranspositionAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cGrabKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Assignment cRuleAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cRuleDivGrabEnumerationLiteralRuleParserRuleCall_1_0_1_0 = (RuleCall)cRuleAssignment_1_0_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cDitchKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cRuleAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cRuleDivDitchEnumerationLiteralRuleParserRuleCall_1_1_1_0 = (RuleCall)cRuleAssignment_1_1_1.eContents().get(0);
		private final Assignment cDescriptionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDescriptionDRichTextParserRuleCall_2_0 = (RuleCall)cDescriptionAssignment_2.eContents().get(0);
		private final Assignment cNotesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNotesDNoteParserRuleCall_3_0 = (RuleCall)cNotesAssignment_3.eContents().get(0);
		
		//DivLiteralTransposition TLiteralTransposition:
		//	{TLiteralTransposition} ('grab' rule=DivGrabEnumerationLiteralRule
		//	| 'ditch' rule=DivDitchEnumerationLiteralRule) description=DRichText?
		//	notes+=DNote*;
		@Override public ParserRule getRule() { return rule; }
		
		//{TLiteralTransposition} ('grab' rule=DivGrabEnumerationLiteralRule | 'ditch' rule=DivDitchEnumerationLiteralRule)
		//description=DRichText? notes+=DNote*
		public Group getGroup() { return cGroup; }
		
		//{TLiteralTransposition}
		public Action getTLiteralTranspositionAction_0() { return cTLiteralTranspositionAction_0; }
		
		//('grab' rule=DivGrabEnumerationLiteralRule | 'ditch' rule=DivDitchEnumerationLiteralRule)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'grab' rule=DivGrabEnumerationLiteralRule
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//'grab'
		public Keyword getGrabKeyword_1_0_0() { return cGrabKeyword_1_0_0; }
		
		//rule=DivGrabEnumerationLiteralRule
		public Assignment getRuleAssignment_1_0_1() { return cRuleAssignment_1_0_1; }
		
		//DivGrabEnumerationLiteralRule
		public RuleCall getRuleDivGrabEnumerationLiteralRuleParserRuleCall_1_0_1_0() { return cRuleDivGrabEnumerationLiteralRuleParserRuleCall_1_0_1_0; }
		
		//'ditch' rule=DivDitchEnumerationLiteralRule
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//'ditch'
		public Keyword getDitchKeyword_1_1_0() { return cDitchKeyword_1_1_0; }
		
		//rule=DivDitchEnumerationLiteralRule
		public Assignment getRuleAssignment_1_1_1() { return cRuleAssignment_1_1_1; }
		
		//DivDitchEnumerationLiteralRule
		public RuleCall getRuleDivDitchEnumerationLiteralRuleParserRuleCall_1_1_1_0() { return cRuleDivDitchEnumerationLiteralRuleParserRuleCall_1_1_1_0; }
		
		//description=DRichText?
		public Assignment getDescriptionAssignment_2() { return cDescriptionAssignment_2; }
		
		//DRichText
		public RuleCall getDescriptionDRichTextParserRuleCall_2_0() { return cDescriptionDRichTextParserRuleCall_2_0; }
		
		//notes+=DNote*
		public Assignment getNotesAssignment_3() { return cNotesAssignment_3; }
		
		//DNote
		public RuleCall getNotesDNoteParserRuleCall_3_0() { return cNotesDNoteParserRuleCall_3_0; }
	}
	public class DivEntityTypeTranspositionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.div.Div.DivEntityTypeTransposition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTEntityTypeTranspositionAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cGrabKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Assignment cRootAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final Keyword cRootRootKeyword_1_0_1_0 = (Keyword)cRootAssignment_1_0_1.eContents().get(0);
		private final Keyword cEntityKeyword_1_0_2 = (Keyword)cGroup_1_0.eContents().get(2);
		private final Assignment cRuleAssignment_1_0_3 = (Assignment)cGroup_1_0.eContents().get(3);
		private final RuleCall cRuleDivGrabComplexTypeRuleParserRuleCall_1_0_3_0 = (RuleCall)cRuleAssignment_1_0_3.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cDitchKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cRootAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final Keyword cRootRootKeyword_1_1_1_0 = (Keyword)cRootAssignment_1_1_1.eContents().get(0);
		private final Keyword cEntityKeyword_1_1_2 = (Keyword)cGroup_1_1.eContents().get(2);
		private final Assignment cRuleAssignment_1_1_3 = (Assignment)cGroup_1_1.eContents().get(3);
		private final RuleCall cRuleDivDitchComplexTypeRuleParserRuleCall_1_1_3_0 = (RuleCall)cRuleAssignment_1_1_3.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cAlternatives_1.eContents().get(2);
		private final Keyword cMotphKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cRootAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final Keyword cRootRootKeyword_1_2_1_0 = (Keyword)cRootAssignment_1_2_1.eContents().get(0);
		private final Keyword cEntityKeyword_1_2_2 = (Keyword)cGroup_1_2.eContents().get(2);
		private final Assignment cRuleAssignment_1_2_3 = (Assignment)cGroup_1_2.eContents().get(3);
		private final RuleCall cRuleSimMorphComplexTypeRuleParserRuleCall_1_2_3_0 = (RuleCall)cRuleAssignment_1_2_3.eContents().get(0);
		private final Assignment cDescriptionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDescriptionDRichTextParserRuleCall_2_0 = (RuleCall)cDescriptionAssignment_2.eContents().get(0);
		private final Assignment cNotesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNotesDNoteParserRuleCall_3_0 = (RuleCall)cNotesAssignment_3.eContents().get(0);
		private final RuleCall cTComplexTypeFeaturesParserRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		
		//DivEntityTypeTransposition TEntityTypeTransposition:
		//	{TEntityTypeTransposition} ('grab' root?='root'? 'entity' rule=DivGrabComplexTypeRule
		//	| 'ditch' root?='root'? 'entity' rule=DivDitchComplexTypeRule
		//	| 'motph' root?='root'? 'entity' rule=SimMorphComplexTypeRule) description=DRichText?
		//	notes+=DNote*
		//	TComplexTypeFeatures?;
		@Override public ParserRule getRule() { return rule; }
		
		//{TEntityTypeTransposition} ('grab' root?='root'? 'entity' rule=DivGrabComplexTypeRule | 'ditch' root?='root'? 'entity'
		//rule=DivDitchComplexTypeRule | 'motph' root?='root'? 'entity' rule=SimMorphComplexTypeRule) description=DRichText?
		//notes+=DNote* TComplexTypeFeatures?
		public Group getGroup() { return cGroup; }
		
		//{TEntityTypeTransposition}
		public Action getTEntityTypeTranspositionAction_0() { return cTEntityTypeTranspositionAction_0; }
		
		//('grab' root?='root'? 'entity' rule=DivGrabComplexTypeRule | 'ditch' root?='root'? 'entity' rule=DivDitchComplexTypeRule
		//| 'motph' root?='root'? 'entity' rule=SimMorphComplexTypeRule)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'grab' root?='root'? 'entity' rule=DivGrabComplexTypeRule
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//'grab'
		public Keyword getGrabKeyword_1_0_0() { return cGrabKeyword_1_0_0; }
		
		//root?='root'?
		public Assignment getRootAssignment_1_0_1() { return cRootAssignment_1_0_1; }
		
		//'root'
		public Keyword getRootRootKeyword_1_0_1_0() { return cRootRootKeyword_1_0_1_0; }
		
		//'entity'
		public Keyword getEntityKeyword_1_0_2() { return cEntityKeyword_1_0_2; }
		
		//rule=DivGrabComplexTypeRule
		public Assignment getRuleAssignment_1_0_3() { return cRuleAssignment_1_0_3; }
		
		//DivGrabComplexTypeRule
		public RuleCall getRuleDivGrabComplexTypeRuleParserRuleCall_1_0_3_0() { return cRuleDivGrabComplexTypeRuleParserRuleCall_1_0_3_0; }
		
		//'ditch' root?='root'? 'entity' rule=DivDitchComplexTypeRule
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//'ditch'
		public Keyword getDitchKeyword_1_1_0() { return cDitchKeyword_1_1_0; }
		
		//root?='root'?
		public Assignment getRootAssignment_1_1_1() { return cRootAssignment_1_1_1; }
		
		//'root'
		public Keyword getRootRootKeyword_1_1_1_0() { return cRootRootKeyword_1_1_1_0; }
		
		//'entity'
		public Keyword getEntityKeyword_1_1_2() { return cEntityKeyword_1_1_2; }
		
		//rule=DivDitchComplexTypeRule
		public Assignment getRuleAssignment_1_1_3() { return cRuleAssignment_1_1_3; }
		
		//DivDitchComplexTypeRule
		public RuleCall getRuleDivDitchComplexTypeRuleParserRuleCall_1_1_3_0() { return cRuleDivDitchComplexTypeRuleParserRuleCall_1_1_3_0; }
		
		//'motph' root?='root'? 'entity' rule=SimMorphComplexTypeRule
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//'motph'
		public Keyword getMotphKeyword_1_2_0() { return cMotphKeyword_1_2_0; }
		
		//root?='root'?
		public Assignment getRootAssignment_1_2_1() { return cRootAssignment_1_2_1; }
		
		//'root'
		public Keyword getRootRootKeyword_1_2_1_0() { return cRootRootKeyword_1_2_1_0; }
		
		//'entity'
		public Keyword getEntityKeyword_1_2_2() { return cEntityKeyword_1_2_2; }
		
		//rule=SimMorphComplexTypeRule
		public Assignment getRuleAssignment_1_2_3() { return cRuleAssignment_1_2_3; }
		
		//SimMorphComplexTypeRule
		public RuleCall getRuleSimMorphComplexTypeRuleParserRuleCall_1_2_3_0() { return cRuleSimMorphComplexTypeRuleParserRuleCall_1_2_3_0; }
		
		//description=DRichText?
		public Assignment getDescriptionAssignment_2() { return cDescriptionAssignment_2; }
		
		//DRichText
		public RuleCall getDescriptionDRichTextParserRuleCall_2_0() { return cDescriptionDRichTextParserRuleCall_2_0; }
		
		//notes+=DNote*
		public Assignment getNotesAssignment_3() { return cNotesAssignment_3; }
		
		//DNote
		public RuleCall getNotesDNoteParserRuleCall_3_0() { return cNotesDNoteParserRuleCall_3_0; }
		
		//TComplexTypeFeatures?
		public RuleCall getTComplexTypeFeaturesParserRuleCall_4() { return cTComplexTypeFeaturesParserRuleCall_4; }
	}
	public class DivDetailTypeTranspositionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.div.Div.DivDetailTypeTransposition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTDetailTypeTranspositionAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cGrabKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Keyword cDetailKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Assignment cRuleAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cRuleDivGrabComplexTypeRuleParserRuleCall_1_0_2_0 = (RuleCall)cRuleAssignment_1_0_2.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cDitchKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Keyword cDetailKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		private final Assignment cRuleAssignment_1_1_2 = (Assignment)cGroup_1_1.eContents().get(2);
		private final RuleCall cRuleDivDitchComplexTypeRuleParserRuleCall_1_1_2_0 = (RuleCall)cRuleAssignment_1_1_2.eContents().get(0);
		private final Assignment cDescriptionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDescriptionDRichTextParserRuleCall_2_0 = (RuleCall)cDescriptionAssignment_2.eContents().get(0);
		private final Assignment cNotesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNotesDNoteParserRuleCall_3_0 = (RuleCall)cNotesAssignment_3.eContents().get(0);
		private final RuleCall cTComplexTypeFeaturesParserRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		
		//DivDetailTypeTransposition TDetailTypeTransposition:
		//	{TDetailTypeTransposition} ('grab' 'detail' rule=DivGrabComplexTypeRule
		//	| 'ditch' 'detail' rule=DivDitchComplexTypeRule) description=DRichText?
		//	notes+=DNote*
		//	TComplexTypeFeatures?;
		@Override public ParserRule getRule() { return rule; }
		
		//{TDetailTypeTransposition} ('grab' 'detail' rule=DivGrabComplexTypeRule | 'ditch' 'detail' rule=DivDitchComplexTypeRule)
		//description=DRichText? notes+=DNote* TComplexTypeFeatures?
		public Group getGroup() { return cGroup; }
		
		//{TDetailTypeTransposition}
		public Action getTDetailTypeTranspositionAction_0() { return cTDetailTypeTranspositionAction_0; }
		
		//('grab' 'detail' rule=DivGrabComplexTypeRule | 'ditch' 'detail' rule=DivDitchComplexTypeRule)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'grab' 'detail' rule=DivGrabComplexTypeRule
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//'grab'
		public Keyword getGrabKeyword_1_0_0() { return cGrabKeyword_1_0_0; }
		
		//'detail'
		public Keyword getDetailKeyword_1_0_1() { return cDetailKeyword_1_0_1; }
		
		//rule=DivGrabComplexTypeRule
		public Assignment getRuleAssignment_1_0_2() { return cRuleAssignment_1_0_2; }
		
		//DivGrabComplexTypeRule
		public RuleCall getRuleDivGrabComplexTypeRuleParserRuleCall_1_0_2_0() { return cRuleDivGrabComplexTypeRuleParserRuleCall_1_0_2_0; }
		
		//'ditch' 'detail' rule=DivDitchComplexTypeRule
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//'ditch'
		public Keyword getDitchKeyword_1_1_0() { return cDitchKeyword_1_1_0; }
		
		//'detail'
		public Keyword getDetailKeyword_1_1_1() { return cDetailKeyword_1_1_1; }
		
		//rule=DivDitchComplexTypeRule
		public Assignment getRuleAssignment_1_1_2() { return cRuleAssignment_1_1_2; }
		
		//DivDitchComplexTypeRule
		public RuleCall getRuleDivDitchComplexTypeRuleParserRuleCall_1_1_2_0() { return cRuleDivDitchComplexTypeRuleParserRuleCall_1_1_2_0; }
		
		//description=DRichText?
		public Assignment getDescriptionAssignment_2() { return cDescriptionAssignment_2; }
		
		//DRichText
		public RuleCall getDescriptionDRichTextParserRuleCall_2_0() { return cDescriptionDRichTextParserRuleCall_2_0; }
		
		//notes+=DNote*
		public Assignment getNotesAssignment_3() { return cNotesAssignment_3; }
		
		//DNote
		public RuleCall getNotesDNoteParserRuleCall_3_0() { return cNotesDNoteParserRuleCall_3_0; }
		
		//TComplexTypeFeatures?
		public RuleCall getTComplexTypeFeaturesParserRuleCall_4() { return cTComplexTypeFeaturesParserRuleCall_4; }
	}
	public class TComplexTypeFeaturesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.div.Div.TComplexTypeFeatures");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cFeaturesAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cFeaturesDivFeatureParserRuleCall_1_0_0 = (RuleCall)cFeaturesAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cAddKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cConstraintsAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cConstraintsDConstraintParserRuleCall_1_1_1_0 = (RuleCall)cConstraintsAssignment_1_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//fragment TComplexTypeFeatures returns DComplexType:
		//	'{' (features+=DivFeature | 'add' constraints+=DConstraint)*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'{' (features+=DivFeature | 'add' constraints+=DConstraint)* '}'
		public Group getGroup() { return cGroup; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }
		
		//(features+=DivFeature | 'add' constraints+=DConstraint)*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//features+=DivFeature
		public Assignment getFeaturesAssignment_1_0() { return cFeaturesAssignment_1_0; }
		
		//DivFeature
		public RuleCall getFeaturesDivFeatureParserRuleCall_1_0_0() { return cFeaturesDivFeatureParserRuleCall_1_0_0; }
		
		//'add' constraints+=DConstraint
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//'add'
		public Keyword getAddKeyword_1_1_0() { return cAddKeyword_1_1_0; }
		
		//constraints+=DConstraint
		public Assignment getConstraintsAssignment_1_1_1() { return cConstraintsAssignment_1_1_1; }
		
		//DConstraint
		public RuleCall getConstraintsDConstraintParserRuleCall_1_1_1_0() { return cConstraintsDConstraintParserRuleCall_1_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_2() { return cRightCurlyBracketKeyword_2; }
	}
	public class DivFeatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.div.Div.DivFeature");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDivAssociationTranspositionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDivAttributeTranspositionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cDivQueryTranspositionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		///*
		// * FEATURES
		// */ DivFeature DFeature:
		//	DivAssociationTransposition
		//	| DivAttributeTransposition
		//	| DivQueryTransposition;
		@Override public ParserRule getRule() { return rule; }
		
		//DivAssociationTransposition | DivAttributeTransposition | DivQueryTransposition
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//DivAssociationTransposition
		public RuleCall getDivAssociationTranspositionParserRuleCall_0() { return cDivAssociationTranspositionParserRuleCall_0; }
		
		//DivAttributeTransposition
		public RuleCall getDivAttributeTranspositionParserRuleCall_1() { return cDivAttributeTranspositionParserRuleCall_1; }
		
		//DivQueryTransposition
		public RuleCall getDivQueryTranspositionParserRuleCall_2() { return cDivQueryTranspositionParserRuleCall_2; }
	}
	public class DivAssociationTranspositionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.div.Div.DivAssociationTransposition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTAssociationTranspositionAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cGrabKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Alternatives cAlternatives_1_0_1 = (Alternatives)cGroup_1_0.eContents().get(1);
		private final Keyword cReferenceKeyword_1_0_1_0 = (Keyword)cAlternatives_1_0_1.eContents().get(0);
		private final Keyword cCompositeKeyword_1_0_1_1 = (Keyword)cAlternatives_1_0_1.eContents().get(1);
		private final Assignment cRuleAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cRuleDivGrabFeatureRuleParserRuleCall_1_0_2_0 = (RuleCall)cRuleAssignment_1_0_2.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cDitchKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1_1 = (Alternatives)cGroup_1_1.eContents().get(1);
		private final Keyword cReferenceKeyword_1_1_1_0 = (Keyword)cAlternatives_1_1_1.eContents().get(0);
		private final Keyword cCompositeKeyword_1_1_1_1 = (Keyword)cAlternatives_1_1_1.eContents().get(1);
		private final Assignment cRuleAssignment_1_1_2 = (Assignment)cGroup_1_1.eContents().get(2);
		private final RuleCall cRuleDivDitchFeatureRuleParserRuleCall_1_1_2_0 = (RuleCall)cRuleAssignment_1_1_2.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cAlternatives_1.eContents().get(2);
		private final Keyword cMorphKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Alternatives cAlternatives_1_2_1 = (Alternatives)cGroup_1_2.eContents().get(1);
		private final Keyword cReferenceKeyword_1_2_1_0 = (Keyword)cAlternatives_1_2_1.eContents().get(0);
		private final Keyword cCompositeKeyword_1_2_1_1 = (Keyword)cAlternatives_1_2_1.eContents().get(1);
		private final Assignment cRuleAssignment_1_2_2 = (Assignment)cGroup_1_2.eContents().get(2);
		private final RuleCall cRuleDivMorphFeatureRuleParserRuleCall_1_2_2_0 = (RuleCall)cRuleAssignment_1_2_2.eContents().get(0);
		private final Assignment cDescriptionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDescriptionDRichTextParserRuleCall_2_0 = (RuleCall)cDescriptionAssignment_2.eContents().get(0);
		private final Assignment cNotesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNotesDNoteParserRuleCall_3_0 = (RuleCall)cNotesAssignment_3.eContents().get(0);
		
		//DivAssociationTransposition TAssociationTransposition:
		//	{TAssociationTransposition} ('grab' ('reference' | 'composite') rule=DivGrabFeatureRule
		//	| 'ditch' ('reference' | 'composite') rule=DivDitchFeatureRule
		//	| 'morph' ('reference' | 'composite') rule=DivMorphFeatureRule) description=DRichText?
		//	notes+=DNote*;
		@Override public ParserRule getRule() { return rule; }
		
		//{TAssociationTransposition} ('grab' ('reference' | 'composite') rule=DivGrabFeatureRule | 'ditch' ('reference' |
		//'composite') rule=DivDitchFeatureRule | 'morph' ('reference' | 'composite') rule=DivMorphFeatureRule)
		//description=DRichText? notes+=DNote*
		public Group getGroup() { return cGroup; }
		
		//{TAssociationTransposition}
		public Action getTAssociationTranspositionAction_0() { return cTAssociationTranspositionAction_0; }
		
		//('grab' ('reference' | 'composite') rule=DivGrabFeatureRule | 'ditch' ('reference' | 'composite')
		//rule=DivDitchFeatureRule | 'morph' ('reference' | 'composite') rule=DivMorphFeatureRule)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'grab' ('reference' | 'composite') rule=DivGrabFeatureRule
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//'grab'
		public Keyword getGrabKeyword_1_0_0() { return cGrabKeyword_1_0_0; }
		
		//('reference' | 'composite')
		public Alternatives getAlternatives_1_0_1() { return cAlternatives_1_0_1; }
		
		//'reference'
		public Keyword getReferenceKeyword_1_0_1_0() { return cReferenceKeyword_1_0_1_0; }
		
		//'composite'
		public Keyword getCompositeKeyword_1_0_1_1() { return cCompositeKeyword_1_0_1_1; }
		
		//rule=DivGrabFeatureRule
		public Assignment getRuleAssignment_1_0_2() { return cRuleAssignment_1_0_2; }
		
		//DivGrabFeatureRule
		public RuleCall getRuleDivGrabFeatureRuleParserRuleCall_1_0_2_0() { return cRuleDivGrabFeatureRuleParserRuleCall_1_0_2_0; }
		
		//'ditch' ('reference' | 'composite') rule=DivDitchFeatureRule
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//'ditch'
		public Keyword getDitchKeyword_1_1_0() { return cDitchKeyword_1_1_0; }
		
		//('reference' | 'composite')
		public Alternatives getAlternatives_1_1_1() { return cAlternatives_1_1_1; }
		
		//'reference'
		public Keyword getReferenceKeyword_1_1_1_0() { return cReferenceKeyword_1_1_1_0; }
		
		//'composite'
		public Keyword getCompositeKeyword_1_1_1_1() { return cCompositeKeyword_1_1_1_1; }
		
		//rule=DivDitchFeatureRule
		public Assignment getRuleAssignment_1_1_2() { return cRuleAssignment_1_1_2; }
		
		//DivDitchFeatureRule
		public RuleCall getRuleDivDitchFeatureRuleParserRuleCall_1_1_2_0() { return cRuleDivDitchFeatureRuleParserRuleCall_1_1_2_0; }
		
		//'morph' ('reference' | 'composite') rule=DivMorphFeatureRule
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//'morph'
		public Keyword getMorphKeyword_1_2_0() { return cMorphKeyword_1_2_0; }
		
		//('reference' | 'composite')
		public Alternatives getAlternatives_1_2_1() { return cAlternatives_1_2_1; }
		
		//'reference'
		public Keyword getReferenceKeyword_1_2_1_0() { return cReferenceKeyword_1_2_1_0; }
		
		//'composite'
		public Keyword getCompositeKeyword_1_2_1_1() { return cCompositeKeyword_1_2_1_1; }
		
		//rule=DivMorphFeatureRule
		public Assignment getRuleAssignment_1_2_2() { return cRuleAssignment_1_2_2; }
		
		//DivMorphFeatureRule
		public RuleCall getRuleDivMorphFeatureRuleParserRuleCall_1_2_2_0() { return cRuleDivMorphFeatureRuleParserRuleCall_1_2_2_0; }
		
		//description=DRichText?
		public Assignment getDescriptionAssignment_2() { return cDescriptionAssignment_2; }
		
		//DRichText
		public RuleCall getDescriptionDRichTextParserRuleCall_2_0() { return cDescriptionDRichTextParserRuleCall_2_0; }
		
		//notes+=DNote*
		public Assignment getNotesAssignment_3() { return cNotesAssignment_3; }
		
		//DNote
		public RuleCall getNotesDNoteParserRuleCall_3_0() { return cNotesDNoteParserRuleCall_3_0; }
	}
	public class DivAttributeTranspositionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.div.Div.DivAttributeTransposition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTAttributeTranspositionAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cGrabKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Alternatives cAlternatives_1_0_1 = (Alternatives)cGroup_1_0.eContents().get(1);
		private final Keyword cAttributeKeyword_1_0_1_0 = (Keyword)cAlternatives_1_0_1.eContents().get(0);
		private final Assignment cDetailAssignment_1_0_1_1 = (Assignment)cAlternatives_1_0_1.eContents().get(1);
		private final Keyword cDetailDetailKeyword_1_0_1_1_0 = (Keyword)cDetailAssignment_1_0_1_1.eContents().get(0);
		private final Assignment cRuleAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cRuleDivGrabFeatureRuleParserRuleCall_1_0_2_0 = (RuleCall)cRuleAssignment_1_0_2.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cDitchKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1_1 = (Alternatives)cGroup_1_1.eContents().get(1);
		private final Keyword cAttributeKeyword_1_1_1_0 = (Keyword)cAlternatives_1_1_1.eContents().get(0);
		private final Assignment cDetailAssignment_1_1_1_1 = (Assignment)cAlternatives_1_1_1.eContents().get(1);
		private final Keyword cDetailDetailKeyword_1_1_1_1_0 = (Keyword)cDetailAssignment_1_1_1_1.eContents().get(0);
		private final Assignment cRuleAssignment_1_1_2 = (Assignment)cGroup_1_1.eContents().get(2);
		private final RuleCall cRuleDivDitchFeatureRuleParserRuleCall_1_1_2_0 = (RuleCall)cRuleAssignment_1_1_2.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cAlternatives_1.eContents().get(2);
		private final Keyword cMorphKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Alternatives cAlternatives_1_2_1 = (Alternatives)cGroup_1_2.eContents().get(1);
		private final Keyword cAttributeKeyword_1_2_1_0 = (Keyword)cAlternatives_1_2_1.eContents().get(0);
		private final Assignment cDetailAssignment_1_2_1_1 = (Assignment)cAlternatives_1_2_1.eContents().get(1);
		private final Keyword cDetailDetailKeyword_1_2_1_1_0 = (Keyword)cDetailAssignment_1_2_1_1.eContents().get(0);
		private final Assignment cRuleAssignment_1_2_2 = (Assignment)cGroup_1_2.eContents().get(2);
		private final RuleCall cRuleDivMorphFeatureRuleParserRuleCall_1_2_2_0 = (RuleCall)cRuleAssignment_1_2_2.eContents().get(0);
		private final Assignment cDescriptionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDescriptionDRichTextParserRuleCall_2_0 = (RuleCall)cDescriptionAssignment_2.eContents().get(0);
		private final Assignment cNotesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNotesDNoteParserRuleCall_3_0 = (RuleCall)cNotesAssignment_3.eContents().get(0);
		
		//DivAttributeTransposition TAttributeTransposition:
		//	{TAttributeTransposition} ('grab' ('attribute' | detail?='detail')? rule=DivGrabFeatureRule
		//	| 'ditch' ('attribute' | detail?='detail')? rule=DivDitchFeatureRule
		//	| 'morph' ('attribute' | detail?='detail')? rule=DivMorphFeatureRule) description=DRichText?
		//	notes+=DNote*;
		@Override public ParserRule getRule() { return rule; }
		
		//{TAttributeTransposition} ('grab' ('attribute' | detail?='detail')? rule=DivGrabFeatureRule | 'ditch' ('attribute' |
		//detail?='detail')? rule=DivDitchFeatureRule | 'morph' ('attribute' | detail?='detail')? rule=DivMorphFeatureRule)
		//description=DRichText? notes+=DNote*
		public Group getGroup() { return cGroup; }
		
		//{TAttributeTransposition}
		public Action getTAttributeTranspositionAction_0() { return cTAttributeTranspositionAction_0; }
		
		//('grab' ('attribute' | detail?='detail')? rule=DivGrabFeatureRule | 'ditch' ('attribute' | detail?='detail')?
		//rule=DivDitchFeatureRule | 'morph' ('attribute' | detail?='detail')? rule=DivMorphFeatureRule)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'grab' ('attribute' | detail?='detail')? rule=DivGrabFeatureRule
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//'grab'
		public Keyword getGrabKeyword_1_0_0() { return cGrabKeyword_1_0_0; }
		
		//('attribute' | detail?='detail')?
		public Alternatives getAlternatives_1_0_1() { return cAlternatives_1_0_1; }
		
		//'attribute'
		public Keyword getAttributeKeyword_1_0_1_0() { return cAttributeKeyword_1_0_1_0; }
		
		//detail?='detail'
		public Assignment getDetailAssignment_1_0_1_1() { return cDetailAssignment_1_0_1_1; }
		
		//'detail'
		public Keyword getDetailDetailKeyword_1_0_1_1_0() { return cDetailDetailKeyword_1_0_1_1_0; }
		
		//rule=DivGrabFeatureRule
		public Assignment getRuleAssignment_1_0_2() { return cRuleAssignment_1_0_2; }
		
		//DivGrabFeatureRule
		public RuleCall getRuleDivGrabFeatureRuleParserRuleCall_1_0_2_0() { return cRuleDivGrabFeatureRuleParserRuleCall_1_0_2_0; }
		
		//'ditch' ('attribute' | detail?='detail')? rule=DivDitchFeatureRule
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//'ditch'
		public Keyword getDitchKeyword_1_1_0() { return cDitchKeyword_1_1_0; }
		
		//('attribute' | detail?='detail')?
		public Alternatives getAlternatives_1_1_1() { return cAlternatives_1_1_1; }
		
		//'attribute'
		public Keyword getAttributeKeyword_1_1_1_0() { return cAttributeKeyword_1_1_1_0; }
		
		//detail?='detail'
		public Assignment getDetailAssignment_1_1_1_1() { return cDetailAssignment_1_1_1_1; }
		
		//'detail'
		public Keyword getDetailDetailKeyword_1_1_1_1_0() { return cDetailDetailKeyword_1_1_1_1_0; }
		
		//rule=DivDitchFeatureRule
		public Assignment getRuleAssignment_1_1_2() { return cRuleAssignment_1_1_2; }
		
		//DivDitchFeatureRule
		public RuleCall getRuleDivDitchFeatureRuleParserRuleCall_1_1_2_0() { return cRuleDivDitchFeatureRuleParserRuleCall_1_1_2_0; }
		
		//'morph' ('attribute' | detail?='detail')? rule=DivMorphFeatureRule
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//'morph'
		public Keyword getMorphKeyword_1_2_0() { return cMorphKeyword_1_2_0; }
		
		//('attribute' | detail?='detail')?
		public Alternatives getAlternatives_1_2_1() { return cAlternatives_1_2_1; }
		
		//'attribute'
		public Keyword getAttributeKeyword_1_2_1_0() { return cAttributeKeyword_1_2_1_0; }
		
		//detail?='detail'
		public Assignment getDetailAssignment_1_2_1_1() { return cDetailAssignment_1_2_1_1; }
		
		//'detail'
		public Keyword getDetailDetailKeyword_1_2_1_1_0() { return cDetailDetailKeyword_1_2_1_1_0; }
		
		//rule=DivMorphFeatureRule
		public Assignment getRuleAssignment_1_2_2() { return cRuleAssignment_1_2_2; }
		
		//DivMorphFeatureRule
		public RuleCall getRuleDivMorphFeatureRuleParserRuleCall_1_2_2_0() { return cRuleDivMorphFeatureRuleParserRuleCall_1_2_2_0; }
		
		//description=DRichText?
		public Assignment getDescriptionAssignment_2() { return cDescriptionAssignment_2; }
		
		//DRichText
		public RuleCall getDescriptionDRichTextParserRuleCall_2_0() { return cDescriptionDRichTextParserRuleCall_2_0; }
		
		//notes+=DNote*
		public Assignment getNotesAssignment_3() { return cNotesAssignment_3; }
		
		//DNote
		public RuleCall getNotesDNoteParserRuleCall_3_0() { return cNotesDNoteParserRuleCall_3_0; }
	}
	public class DivQueryTranspositionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.div.Div.DivQueryTransposition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTQueryTranspositionAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cGrabKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Keyword cQueryKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Assignment cRuleAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cRuleDivGrabFeatureRuleParserRuleCall_1_0_2_0 = (RuleCall)cRuleAssignment_1_0_2.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cDitchKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Keyword cQueryKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		private final Assignment cRuleAssignment_1_1_2 = (Assignment)cGroup_1_1.eContents().get(2);
		private final RuleCall cRuleDivDitchFeatureRuleParserRuleCall_1_1_2_0 = (RuleCall)cRuleAssignment_1_1_2.eContents().get(0);
		private final Assignment cDescriptionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDescriptionDRichTextParserRuleCall_2_0 = (RuleCall)cDescriptionAssignment_2.eContents().get(0);
		private final Assignment cNotesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNotesDNoteParserRuleCall_3_0 = (RuleCall)cNotesAssignment_3.eContents().get(0);
		
		//DivQueryTransposition TQueryTransposition:
		//	{TQueryTransposition} ('grab' 'query' rule=DivGrabFeatureRule | 'ditch' 'query' rule=DivDitchFeatureRule)
		//	description=DRichText?
		//	notes+=DNote*;
		@Override public ParserRule getRule() { return rule; }
		
		//{TQueryTransposition} ('grab' 'query' rule=DivGrabFeatureRule | 'ditch' 'query' rule=DivDitchFeatureRule)
		//description=DRichText? notes+=DNote*
		public Group getGroup() { return cGroup; }
		
		//{TQueryTransposition}
		public Action getTQueryTranspositionAction_0() { return cTQueryTranspositionAction_0; }
		
		//('grab' 'query' rule=DivGrabFeatureRule | 'ditch' 'query' rule=DivDitchFeatureRule)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'grab' 'query' rule=DivGrabFeatureRule
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//'grab'
		public Keyword getGrabKeyword_1_0_0() { return cGrabKeyword_1_0_0; }
		
		//'query'
		public Keyword getQueryKeyword_1_0_1() { return cQueryKeyword_1_0_1; }
		
		//rule=DivGrabFeatureRule
		public Assignment getRuleAssignment_1_0_2() { return cRuleAssignment_1_0_2; }
		
		//DivGrabFeatureRule
		public RuleCall getRuleDivGrabFeatureRuleParserRuleCall_1_0_2_0() { return cRuleDivGrabFeatureRuleParserRuleCall_1_0_2_0; }
		
		//'ditch' 'query' rule=DivDitchFeatureRule
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//'ditch'
		public Keyword getDitchKeyword_1_1_0() { return cDitchKeyword_1_1_0; }
		
		//'query'
		public Keyword getQueryKeyword_1_1_1() { return cQueryKeyword_1_1_1; }
		
		//rule=DivDitchFeatureRule
		public Assignment getRuleAssignment_1_1_2() { return cRuleAssignment_1_1_2; }
		
		//DivDitchFeatureRule
		public RuleCall getRuleDivDitchFeatureRuleParserRuleCall_1_1_2_0() { return cRuleDivDitchFeatureRuleParserRuleCall_1_1_2_0; }
		
		//description=DRichText?
		public Assignment getDescriptionAssignment_2() { return cDescriptionAssignment_2; }
		
		//DRichText
		public RuleCall getDescriptionDRichTextParserRuleCall_2_0() { return cDescriptionDRichTextParserRuleCall_2_0; }
		
		//notes+=DNote*
		public Assignment getNotesAssignment_3() { return cNotesAssignment_3; }
		
		//DNote
		public RuleCall getNotesDNoteParserRuleCall_3_0() { return cNotesDNoteParserRuleCall_3_0; }
	}
	
	
	private final DNamespaceElements pDNamespace;
	private final DomainInformationViewElements pDomainInformationView;
	private final DivGrabAggregateRuleElements pDivGrabAggregateRule;
	private final DivGrabPrimitiveRuleElements pDivGrabPrimitiveRule;
	private final DivDitchPrimitiveRuleElements pDivDitchPrimitiveRule;
	private final DivGrabEnumerationRuleElements pDivGrabEnumerationRule;
	private final DivDitchEnumerationRuleElements pDivDitchEnumerationRule;
	private final DivGrabEnumerationLiteralRuleElements pDivGrabEnumerationLiteralRule;
	private final DivDitchEnumerationLiteralRuleElements pDivDitchEnumerationLiteralRule;
	private final DivGrabComplexTypeRuleElements pDivGrabComplexTypeRule;
	private final DivDitchComplexTypeRuleElements pDivDitchComplexTypeRule;
	private final SimMorphComplexTypeRuleElements pSimMorphComplexTypeRule;
	private final DivGrabFeatureRuleElements pDivGrabFeatureRule;
	private final DivDitchFeatureRuleElements pDivDitchFeatureRule;
	private final DivMorphFeatureRuleElements pDivMorphFeatureRule;
	private final DivAggregateElements pDivAggregate;
	private final DivAggregateTranspositionElements pDivAggregateTransposition;
	private final DivTypeElements pDivType;
	private final DivPrimitiveTranspositionElements pDivPrimitiveTransposition;
	private final DivEnumerationTranspositionElements pDivEnumerationTransposition;
	private final DivLiteralTranspositionElements pDivLiteralTransposition;
	private final DivEntityTypeTranspositionElements pDivEntityTypeTransposition;
	private final DivDetailTypeTranspositionElements pDivDetailTypeTransposition;
	private final TComplexTypeFeaturesElements pTComplexTypeFeatures;
	private final DivFeatureElements pDivFeature;
	private final DivAssociationTranspositionElements pDivAssociationTransposition;
	private final DivAttributeTranspositionElements pDivAttributeTransposition;
	private final DivQueryTranspositionElements pDivQueryTransposition;
	
	private final Grammar grammar;
	
	private final DimGrammarAccess gaDim;
	
	private final DmxGrammarAccess gaDmx;

	@Inject
	public DivGrammarAccess(GrammarProvider grammarProvider,
			DimGrammarAccess gaDim,
			DmxGrammarAccess gaDmx) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaDim = gaDim;
		this.gaDmx = gaDmx;
		this.pDNamespace = new DNamespaceElements();
		this.pDomainInformationView = new DomainInformationViewElements();
		this.pDivGrabAggregateRule = new DivGrabAggregateRuleElements();
		this.pDivGrabPrimitiveRule = new DivGrabPrimitiveRuleElements();
		this.pDivDitchPrimitiveRule = new DivDitchPrimitiveRuleElements();
		this.pDivGrabEnumerationRule = new DivGrabEnumerationRuleElements();
		this.pDivDitchEnumerationRule = new DivDitchEnumerationRuleElements();
		this.pDivGrabEnumerationLiteralRule = new DivGrabEnumerationLiteralRuleElements();
		this.pDivDitchEnumerationLiteralRule = new DivDitchEnumerationLiteralRuleElements();
		this.pDivGrabComplexTypeRule = new DivGrabComplexTypeRuleElements();
		this.pDivDitchComplexTypeRule = new DivDitchComplexTypeRuleElements();
		this.pSimMorphComplexTypeRule = new SimMorphComplexTypeRuleElements();
		this.pDivGrabFeatureRule = new DivGrabFeatureRuleElements();
		this.pDivDitchFeatureRule = new DivDitchFeatureRuleElements();
		this.pDivMorphFeatureRule = new DivMorphFeatureRuleElements();
		this.pDivAggregate = new DivAggregateElements();
		this.pDivAggregateTransposition = new DivAggregateTranspositionElements();
		this.pDivType = new DivTypeElements();
		this.pDivPrimitiveTransposition = new DivPrimitiveTranspositionElements();
		this.pDivEnumerationTransposition = new DivEnumerationTranspositionElements();
		this.pDivLiteralTransposition = new DivLiteralTranspositionElements();
		this.pDivEntityTypeTransposition = new DivEntityTypeTranspositionElements();
		this.pDivDetailTypeTransposition = new DivDetailTypeTranspositionElements();
		this.pTComplexTypeFeatures = new TComplexTypeFeaturesElements();
		this.pDivFeature = new DivFeatureElements();
		this.pDivAssociationTransposition = new DivAssociationTranspositionElements();
		this.pDivAttributeTransposition = new DivAttributeTranspositionElements();
		this.pDivQueryTransposition = new DivQueryTranspositionElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("com.mimacom.ddd.dm.div.Div".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public DimGrammarAccess getDimGrammarAccess() {
		return gaDim;
	}
	
	public DmxGrammarAccess getDmxGrammarAccess() {
		return gaDmx;
	}

	
	//@Override
	//DNamespace:
	//	'domain'
	//	name=DQualifiedName
	//	imports+=DImport*
	//	model=DomainInformationView;
	public DNamespaceElements getDNamespaceAccess() {
		return pDNamespace;
	}
	
	public ParserRule getDNamespaceRule() {
		return getDNamespaceAccess().getRule();
	}
	
	//DomainInformationView:
	//	'information' 'view'
	//	name=ID
	//	readOnlyView?='read' 'only'
	//	//	 (^generate?='generate')?
	//	description=DRichText?
	//	notes+=DNote*
	//	'{' (types+=DivType | aggregates+=DivAggregate)*
	//	'}';
	public DomainInformationViewElements getDomainInformationViewAccess() {
		return pDomainInformationView;
	}
	
	public ParserRule getDomainInformationViewRule() {
		return getDomainInformationViewAccess().getRule();
	}
	
	///*
	// * RULEs
	// */ DivGrabAggregateRule TGrabAggregateRule:
	//	source=[DimAggregate|DQualifiedName] (readOnlyView?='read' 'only')? ('as' renameTo=ID)?;
	public DivGrabAggregateRuleElements getDivGrabAggregateRuleAccess() {
		return pDivGrabAggregateRule;
	}
	
	public ParserRule getDivGrabAggregateRuleRule() {
		return getDivGrabAggregateRuleAccess().getRule();
	}
	
	//DivGrabPrimitiveRule TGrabRule:
	//	source=[DimPrimitive|DQualifiedName] ('as' renameTo=ID)?;
	public DivGrabPrimitiveRuleElements getDivGrabPrimitiveRuleAccess() {
		return pDivGrabPrimitiveRule;
	}
	
	public ParserRule getDivGrabPrimitiveRuleRule() {
		return getDivGrabPrimitiveRuleAccess().getRule();
	}
	
	//DivDitchPrimitiveRule TDitchRule:
	//	source=[DimPrimitive|DQualifiedName];
	public DivDitchPrimitiveRuleElements getDivDitchPrimitiveRuleAccess() {
		return pDivDitchPrimitiveRule;
	}
	
	public ParserRule getDivDitchPrimitiveRuleRule() {
		return getDivDitchPrimitiveRuleAccess().getRule();
	}
	
	//DivGrabEnumerationRule TGrabRule:
	//	source=[DimEnumeration|DQualifiedName] ('as' renameTo=ID)?;
	public DivGrabEnumerationRuleElements getDivGrabEnumerationRuleAccess() {
		return pDivGrabEnumerationRule;
	}
	
	public ParserRule getDivGrabEnumerationRuleRule() {
		return getDivGrabEnumerationRuleAccess().getRule();
	}
	
	//DivDitchEnumerationRule TDitchRule:
	//	source=[DimEnumeration|DQualifiedName];
	public DivDitchEnumerationRuleElements getDivDitchEnumerationRuleAccess() {
		return pDivDitchEnumerationRule;
	}
	
	public ParserRule getDivDitchEnumerationRuleRule() {
		return getDivDitchEnumerationRuleAccess().getRule();
	}
	
	//DivGrabEnumerationLiteralRule TGrabRule:
	//	source=[DimLiteral] ('as' renameTo=ID)?;
	public DivGrabEnumerationLiteralRuleElements getDivGrabEnumerationLiteralRuleAccess() {
		return pDivGrabEnumerationLiteralRule;
	}
	
	public ParserRule getDivGrabEnumerationLiteralRuleRule() {
		return getDivGrabEnumerationLiteralRuleAccess().getRule();
	}
	
	//DivDitchEnumerationLiteralRule TDitchRule:
	//	source=[DimLiteral];
	public DivDitchEnumerationLiteralRuleElements getDivDitchEnumerationLiteralRuleAccess() {
		return pDivDitchEnumerationLiteralRule;
	}
	
	public ParserRule getDivDitchEnumerationLiteralRuleRule() {
		return getDivDitchEnumerationLiteralRuleAccess().getRule();
	}
	
	//DivGrabComplexTypeRule TGrabRule:
	//	source=[DimComplexType|DQualifiedName] (readOnlyView?='read' 'only')? ('as' renameTo=ID)?;
	public DivGrabComplexTypeRuleElements getDivGrabComplexTypeRuleAccess() {
		return pDivGrabComplexTypeRule;
	}
	
	public ParserRule getDivGrabComplexTypeRuleRule() {
		return getDivGrabComplexTypeRuleAccess().getRule();
	}
	
	//DivDitchComplexTypeRule TDitchRule:
	//	source=[DimComplexType|DQualifiedName];
	public DivDitchComplexTypeRuleElements getDivDitchComplexTypeRuleAccess() {
		return pDivDitchComplexTypeRule;
	}
	
	public ParserRule getDivDitchComplexTypeRuleRule() {
		return getDivDitchComplexTypeRuleAccess().getRule();
	}
	
	//SimMorphComplexTypeRule TMorphRule:
	//	source=[DimComplexType|DQualifiedName]
	//	'to'
	//	readOnlyView?='read' 'only';
	public SimMorphComplexTypeRuleElements getSimMorphComplexTypeRuleAccess() {
		return pSimMorphComplexTypeRule;
	}
	
	public ParserRule getSimMorphComplexTypeRuleRule() {
		return getSimMorphComplexTypeRuleAccess().getRule();
	}
	
	//DivGrabFeatureRule TGrabRule:
	//	source=[DimFeature] (readOnlyView?='read' 'only')? ('as' renameTo=ID)?;
	public DivGrabFeatureRuleElements getDivGrabFeatureRuleAccess() {
		return pDivGrabFeatureRule;
	}
	
	public ParserRule getDivGrabFeatureRuleRule() {
		return getDivGrabFeatureRuleAccess().getRule();
	}
	
	//DivDitchFeatureRule TDitchRule:
	//	source=[DimFeature];
	public DivDitchFeatureRuleElements getDivDitchFeatureRuleAccess() {
		return pDivDitchFeatureRule;
	}
	
	public ParserRule getDivDitchFeatureRuleRule() {
		return getDivDitchFeatureRuleAccess().getRule();
	}
	
	//DivMorphFeatureRule TMorphRule:
	//	source=[DimFeature]
	//	'to'
	//	readOnlyView?='read' 'only';
	public DivMorphFeatureRuleElements getDivMorphFeatureRuleAccess() {
		return pDivMorphFeatureRule;
	}
	
	public ParserRule getDivMorphFeatureRuleRule() {
		return getDivMorphFeatureRuleAccess().getRule();
	}
	
	//DivAggregate DAggregate:
	//	DivAggregateTransposition | DimAggregate;
	public DivAggregateElements getDivAggregateAccess() {
		return pDivAggregate;
	}
	
	public ParserRule getDivAggregateRule() {
		return getDivAggregateAccess().getRule();
	}
	
	//DivAggregateTransposition TAggregateTransposition:
	//	{TAggregateTransposition}
	//	'grab' 'aggregate' rule=DivGrabAggregateRule
	//	description=DRichText? ('{'
	//	features+=DivQueryTransposition*
	//	types+=DivType*
	//	'}')?;
	public DivAggregateTranspositionElements getDivAggregateTranspositionAccess() {
		return pDivAggregateTransposition;
	}
	
	public ParserRule getDivAggregateTranspositionRule() {
		return getDivAggregateTranspositionAccess().getRule();
	}
	
	///*
	// * TYPES
	// */ DivType DType:
	//	DivPrimitiveTransposition
	//	| DivEnumerationTransposition
	//	| DivEntityTypeTransposition
	//	| DivDetailTypeTransposition;
	public DivTypeElements getDivTypeAccess() {
		return pDivType;
	}
	
	public ParserRule getDivTypeRule() {
		return getDivTypeAccess().getRule();
	}
	
	//DivPrimitiveTransposition TPrimitiveTransposition:
	//	{TPrimitiveTransposition} ('grab' 'primitive' rule=DivGrabPrimitiveRule
	//	| 'ditch' 'primitive' rule=DivDitchPrimitiveRule) description=DRichText?
	//	notes+=DNote* ('{' ('add' constraints+=DConstraint)*
	//	'}')?;
	public DivPrimitiveTranspositionElements getDivPrimitiveTranspositionAccess() {
		return pDivPrimitiveTransposition;
	}
	
	public ParserRule getDivPrimitiveTranspositionRule() {
		return getDivPrimitiveTranspositionAccess().getRule();
	}
	
	//DivEnumerationTransposition TEnumerationTransposition:
	//	{TEnumerationTransposition} ('grab' 'enumeration' rule=DivGrabEnumerationRule
	//	| 'ditch' 'enumeration' rule=DivDitchEnumerationRule) description=DRichText?
	//	notes+=DNote* ('{' (literals+=DivLiteralTransposition (',' literals+=DivLiteralTransposition)*)? ('add'
	//	constraints+=DConstraint)*
	//	'}')?;
	public DivEnumerationTranspositionElements getDivEnumerationTranspositionAccess() {
		return pDivEnumerationTransposition;
	}
	
	public ParserRule getDivEnumerationTranspositionRule() {
		return getDivEnumerationTranspositionAccess().getRule();
	}
	
	//DivLiteralTransposition TLiteralTransposition:
	//	{TLiteralTransposition} ('grab' rule=DivGrabEnumerationLiteralRule
	//	| 'ditch' rule=DivDitchEnumerationLiteralRule) description=DRichText?
	//	notes+=DNote*;
	public DivLiteralTranspositionElements getDivLiteralTranspositionAccess() {
		return pDivLiteralTransposition;
	}
	
	public ParserRule getDivLiteralTranspositionRule() {
		return getDivLiteralTranspositionAccess().getRule();
	}
	
	//DivEntityTypeTransposition TEntityTypeTransposition:
	//	{TEntityTypeTransposition} ('grab' root?='root'? 'entity' rule=DivGrabComplexTypeRule
	//	| 'ditch' root?='root'? 'entity' rule=DivDitchComplexTypeRule
	//	| 'motph' root?='root'? 'entity' rule=SimMorphComplexTypeRule) description=DRichText?
	//	notes+=DNote*
	//	TComplexTypeFeatures?;
	public DivEntityTypeTranspositionElements getDivEntityTypeTranspositionAccess() {
		return pDivEntityTypeTransposition;
	}
	
	public ParserRule getDivEntityTypeTranspositionRule() {
		return getDivEntityTypeTranspositionAccess().getRule();
	}
	
	//DivDetailTypeTransposition TDetailTypeTransposition:
	//	{TDetailTypeTransposition} ('grab' 'detail' rule=DivGrabComplexTypeRule
	//	| 'ditch' 'detail' rule=DivDitchComplexTypeRule) description=DRichText?
	//	notes+=DNote*
	//	TComplexTypeFeatures?;
	public DivDetailTypeTranspositionElements getDivDetailTypeTranspositionAccess() {
		return pDivDetailTypeTransposition;
	}
	
	public ParserRule getDivDetailTypeTranspositionRule() {
		return getDivDetailTypeTranspositionAccess().getRule();
	}
	
	//fragment TComplexTypeFeatures returns DComplexType:
	//	'{' (features+=DivFeature | 'add' constraints+=DConstraint)*
	//	'}';
	public TComplexTypeFeaturesElements getTComplexTypeFeaturesAccess() {
		return pTComplexTypeFeatures;
	}
	
	public ParserRule getTComplexTypeFeaturesRule() {
		return getTComplexTypeFeaturesAccess().getRule();
	}
	
	///*
	// * FEATURES
	// */ DivFeature DFeature:
	//	DivAssociationTransposition
	//	| DivAttributeTransposition
	//	| DivQueryTransposition;
	public DivFeatureElements getDivFeatureAccess() {
		return pDivFeature;
	}
	
	public ParserRule getDivFeatureRule() {
		return getDivFeatureAccess().getRule();
	}
	
	//DivAssociationTransposition TAssociationTransposition:
	//	{TAssociationTransposition} ('grab' ('reference' | 'composite') rule=DivGrabFeatureRule
	//	| 'ditch' ('reference' | 'composite') rule=DivDitchFeatureRule
	//	| 'morph' ('reference' | 'composite') rule=DivMorphFeatureRule) description=DRichText?
	//	notes+=DNote*;
	public DivAssociationTranspositionElements getDivAssociationTranspositionAccess() {
		return pDivAssociationTransposition;
	}
	
	public ParserRule getDivAssociationTranspositionRule() {
		return getDivAssociationTranspositionAccess().getRule();
	}
	
	//DivAttributeTransposition TAttributeTransposition:
	//	{TAttributeTransposition} ('grab' ('attribute' | detail?='detail')? rule=DivGrabFeatureRule
	//	| 'ditch' ('attribute' | detail?='detail')? rule=DivDitchFeatureRule
	//	| 'morph' ('attribute' | detail?='detail')? rule=DivMorphFeatureRule) description=DRichText?
	//	notes+=DNote*;
	public DivAttributeTranspositionElements getDivAttributeTranspositionAccess() {
		return pDivAttributeTransposition;
	}
	
	public ParserRule getDivAttributeTranspositionRule() {
		return getDivAttributeTranspositionAccess().getRule();
	}
	
	//DivQueryTransposition TQueryTransposition:
	//	{TQueryTransposition} ('grab' 'query' rule=DivGrabFeatureRule | 'ditch' 'query' rule=DivDitchFeatureRule)
	//	description=DRichText?
	//	notes+=DNote*;
	public DivQueryTranspositionElements getDivQueryTranspositionAccess() {
		return pDivQueryTransposition;
	}
	
	public ParserRule getDivQueryTranspositionRule() {
		return getDivQueryTranspositionAccess().getRule();
	}
	
	//DomainInformationModel:
	//	'information' 'model'
	//	name=ID ('alias' aliases+=ID)*
	//	description=DRichText?
	//	notes+=DNote*
	//	'{' (types+=DimType | aggregates+=DimAggregate)*
	//	'}';
	public DimGrammarAccess.DomainInformationModelElements getDomainInformationModelAccess() {
		return gaDim.getDomainInformationModelAccess();
	}
	
	public ParserRule getDomainInformationModelRule() {
		return getDomainInformationModelAccess().getRule();
	}
	
	//DimAggregate DAggregate:
	//	DAggregateKeyword {DimAggregate} name=ID ('alias' aliases+=ID)*
	//	description=DRichText?
	//	notes+=DNote*
	//	'{' ('query' features+=DimQuery)*
	//	types+=DimType*
	//	'}';
	public DimGrammarAccess.DimAggregateElements getDimAggregateAccess() {
		return gaDim.getDimAggregateAccess();
	}
	
	public ParserRule getDimAggregateRule() {
		return getDimAggregateAccess().getRule();
	}
	
	//DAggregateKeyword:
	//	'component';
	public DimGrammarAccess.DAggregateKeywordElements getDAggregateKeywordAccess() {
		return gaDim.getDAggregateKeywordAccess();
	}
	
	public ParserRule getDAggregateKeywordRule() {
		return getDAggregateKeywordAccess().getRule();
	}
	
	///*
	// * TYPES
	// */ DimType DType:
	//	DimPrimitive | DimEnumeration | DimEntityType | DimDetailType;
	public DimGrammarAccess.DimTypeElements getDimTypeAccess() {
		return gaDim.getDimTypeAccess();
	}
	
	public ParserRule getDimTypeRule() {
		return getDimTypeAccess().getRule();
	}
	
	//DConstraint DNamedPredicate:
	//	'constraint'
	//	name=ID ('alias' aliases+=ID)*
	//	':'
	//	predicate=DExpression
	//	description=DRichText?
	//	notes+=DNote*;
	public DimGrammarAccess.DConstraintElements getDConstraintAccess() {
		return gaDim.getDConstraintAccess();
	}
	
	public ParserRule getDConstraintRule() {
		return getDConstraintAccess().getRule();
	}
	
	//DimPrimitive DPrimitive:
	//	{DimPrimitive}
	//	'primitive'
	//	name=ID ('alias' aliases+=ID)*
	//	'redefines' redefines=[DmxArchetype] description=DRichText?
	//	notes+=DNote* ('{'
	//	constraints+=DConstraint+
	//	'}')?;
	public DimGrammarAccess.DimPrimitiveElements getDimPrimitiveAccess() {
		return gaDim.getDimPrimitiveAccess();
	}
	
	public ParserRule getDimPrimitiveRule() {
		return getDimPrimitiveAccess().getRule();
	}
	
	//DimEnumeration DEnumeration:
	//	{DimEnumeration}
	//	'enumeration'
	//	name=ID ('alias' aliases+=ID)*
	//	description=DRichText?
	//	notes+=DNote*
	//	'{' (literals+=DimLiteral (',' literals+=DimLiteral)*)?
	//	constraints+=DConstraint*
	//	'}';
	public DimGrammarAccess.DimEnumerationElements getDimEnumerationAccess() {
		return gaDim.getDimEnumerationAccess();
	}
	
	public ParserRule getDimEnumerationRule() {
		return getDimEnumerationAccess().getRule();
	}
	
	//DimLiteral DLiteral:
	//	{DimLiteral} name=ID ('alias' aliases+=ID)*
	//	description=DRichText?
	//	notes+=DNote*;
	public DimGrammarAccess.DimLiteralElements getDimLiteralAccess() {
		return gaDim.getDimLiteralAccess();
	}
	
	public ParserRule getDimLiteralRule() {
		return getDimLiteralAccess().getRule();
	}
	
	//DimEntityType DEntityType:
	//	{DimEntityType} abstract?='abstract'?
	//	root?='main'? ('entity'
	//	| nature=DEntityNatureAutonomous 'entity' // validation: cannot be abstract
	//	| nature=DEntityNatureRelationship) DimComplexType
	//	'{' ('states'
	//	'{'
	//	states+=DState (',' states+=DState)*
	//	'}' ('events'
	//	'{'
	//	events+=DStateEvent (',' events+=DStateEvent)*
	//	'}')?)? (features+=DimFeature | constraints+=DConstraint)*
	//	'}';
	public DimGrammarAccess.DimEntityTypeElements getDimEntityTypeAccess() {
		return gaDim.getDimEntityTypeAccess();
	}
	
	public ParserRule getDimEntityTypeRule() {
		return getDimEntityTypeAccess().getRule();
	}
	
	//enum DEntityNatureAutonomous returns DEntityNature:
	//	AUTONOMOUS_ENTITY='autonomous';
	public DimGrammarAccess.DEntityNatureAutonomousElements getDEntityNatureAutonomousAccess() {
		return gaDim.getDEntityNatureAutonomousAccess();
	}
	
	public EnumRule getDEntityNatureAutonomousRule() {
		return getDEntityNatureAutonomousAccess().getRule();
	}
	
	//enum DEntityNatureRelationship returns DEntityNature:
	//	RELATIONSHIP='relationship';
	public DimGrammarAccess.DEntityNatureRelationshipElements getDEntityNatureRelationshipAccess() {
		return gaDim.getDEntityNatureRelationshipAccess();
	}
	
	public EnumRule getDEntityNatureRelationshipRule() {
		return getDEntityNatureRelationshipAccess().getRule();
	}
	
	//DState:
	//	name=ID;
	public DimGrammarAccess.DStateElements getDStateAccess() {
		return gaDim.getDStateAccess();
	}
	
	public ParserRule getDStateRule() {
		return getDStateAccess().getRule();
	}
	
	//DStateEvent:
	//	name=ID;
	public DimGrammarAccess.DStateEventElements getDStateEventAccess() {
		return gaDim.getDStateEventAccess();
	}
	
	public ParserRule getDStateEventRule() {
		return getDStateEventAccess().getRule();
	}
	
	//DimDetailType DDetailType:
	//	{DimDetailType} abstract?='abstract'?
	//	'detail'
	//	DimComplexType
	//	'{' (features+=DimFeature | constraints+=DConstraint)*
	//	'}';
	public DimGrammarAccess.DimDetailTypeElements getDimDetailTypeAccess() {
		return gaDim.getDimDetailTypeAccess();
	}
	
	public ParserRule getDimDetailTypeRule() {
		return getDimDetailTypeAccess().getRule();
	}
	
	//fragment DimComplexType returns DComplexType:
	//	name=ID ('alias' aliases+=ID)* ('extends' superType=[DComplexType])?
	//	description=DRichText?
	//	notes+=DNote*;
	public DimGrammarAccess.DimComplexTypeElements getDimComplexTypeAccess() {
		return gaDim.getDimComplexTypeAccess();
	}
	
	public ParserRule getDimComplexTypeRule() {
		return getDimComplexTypeAccess().getRule();
	}
	
	//DimFeature DFeature:
	//	DimAssociation | DimAttribute | DimQuery;
	public DimGrammarAccess.DimFeatureElements getDimFeatureAccess() {
		return gaDim.getDimFeatureAccess();
	}
	
	public ParserRule getDimFeatureRule() {
		return getDimFeatureAccess().getRule();
	}
	
	//DimAssociation DAssociation:
	//	{DimAssociation} derived?='derived'?
	//	name=ID ('alias' aliases+=ID)* (kind=DAssociationKind | kind=DAssociationKindInverse "contains") type=[DEntityType]? // optional: allows parser to continue parsing potential targets, caught by validation
	//	multiplicity=DMultiplicity?
	//	description=DRichText?
	//	notes+=DNote*;
	public DimGrammarAccess.DimAssociationElements getDimAssociationAccess() {
		return gaDim.getDimAssociationAccess();
	}
	
	public ParserRule getDimAssociationRule() {
		return getDimAssociationAccess().getRule();
	}
	
	//enum DAssociationKind:
	//	REFERENCE="references" | COMPOSITE="contains";
	public DimGrammarAccess.DAssociationKindElements getDAssociationKindAccess() {
		return gaDim.getDAssociationKindAccess();
	}
	
	public EnumRule getDAssociationKindRule() {
		return getDAssociationKindAccess().getRule();
	}
	
	//enum DAssociationKindInverse returns DAssociationKind:
	//	INVERSE_COMPOSITE="inverse";
	public DimGrammarAccess.DAssociationKindInverseElements getDAssociationKindInverseAccess() {
		return gaDim.getDAssociationKindInverseAccess();
	}
	
	public EnumRule getDAssociationKindInverseRule() {
		return getDAssociationKindInverseAccess().getRule();
	}
	
	//DimAttribute DAttribute:
	//	{DimAttribute} detail?='detail'?
	//	name=ID ('alias' aliases+=ID)*
	//	':'
	//	type=[DType]? // optional: allows parser to continue parsing potential targets, caught by validation
	//	multiplicity=DMultiplicity?
	//	key?='key'?
	//	description=DRichText?
	//	notes+=DNote*;
	public DimGrammarAccess.DimAttributeElements getDimAttributeAccess() {
		return gaDim.getDimAttributeAccess();
	}
	
	public ParserRule getDimAttributeRule() {
		return getDimAttributeAccess().getRule();
	}
	
	//DimQuery DQuery:
	//	{DimQuery} name=ID ('alias' aliases+=ID)*
	//	'(' (parameters+=DimQueryParameter ("," parameters+=DimQueryParameter)*)? ')'
	//	':'
	//	type=[DType]? // optional: allows parser to continue parsing potential targets, caught by validation
	//	multiplicity=DMultiplicity? ('returns' ^returns=DExpression)?
	//	description=DRichText?
	//	notes+=DNote*;
	public DimGrammarAccess.DimQueryElements getDimQueryAccess() {
		return gaDim.getDimQueryAccess();
	}
	
	public ParserRule getDimQueryRule() {
		return getDimQueryAccess().getRule();
	}
	
	//DimQueryParameter DQueryParameter:
	//	{DimQueryParameter} name=ID
	//	':'
	//	type=[DType]? // optional: allows parser to continue parsing potential targets, caught by validation
	//	multiplicity=DMultiplicity?
	//	description=DRichText?
	//	notes+=DNote*;
	public DimGrammarAccess.DimQueryParameterElements getDimQueryParameterAccess() {
		return gaDim.getDimQueryParameterAccess();
	}
	
	public ParserRule getDimQueryParameterRule() {
		return getDimQueryParameterAccess().getRule();
	}
	
	//DNote:
	//	'NOTE'
	//	name=ID
	//	'{'
	//	text=DRichText
	//	color=DNoteColor?
	//	'}';
	public DmxGrammarAccess.DNoteElements getDNoteAccess() {
		return gaDmx.getDNoteAccess();
	}
	
	public ParserRule getDNoteRule() {
		return getDNoteAccess().getRule();
	}
	
	//enum DNoteColor:
	//	WHITE='white' | RED='red' | ORANGE='orange' | YELLOW='yellow' | GREEN='green' | BLUE='blue' | PINK='pink' |
	//	GREY='grey';
	public DmxGrammarAccess.DNoteColorElements getDNoteColorAccess() {
		return gaDmx.getDNoteColorAccess();
	}
	
	public EnumRule getDNoteColorRule() {
		return getDNoteColorAccess().getRule();
	}
	
	//DmxModel:
	//	{DmxModel} types+=DmxArchetype*
	//	filters+=DmxFilter*
	//	// For unit-testing purposes:
	//	tests+=DmxTest*;
	public DmxGrammarAccess.DmxModelElements getDmxModelAccess() {
		return gaDmx.getDmxModelAccess();
	}
	
	public ParserRule getDmxModelRule() {
		return getDmxModelAccess().getRule();
	}
	
	//DImport:
	//	'import' importedNamespace=DQualifiedNameWithWildcard;
	public DmxGrammarAccess.DImportElements getDImportAccess() {
		return gaDmx.getDImportAccess();
	}
	
	public ParserRule getDImportRule() {
		return getDImportAccess().getRule();
	}
	
	///* 
	// * Testing
	// */ DmxTest:
	//	'test'
	//	name=ID ('context'
	//	context+=DmxTestContext (',' context+=DmxTestContext)*)?
	//	'{'
	//	expr=DExpression
	//	'}';
	public DmxGrammarAccess.DmxTestElements getDmxTestAccess() {
		return gaDmx.getDmxTestAccess();
	}
	
	public ParserRule getDmxTestRule() {
		return getDmxTestAccess().getRule();
	}
	
	//DmxTestContext:
	//	name=ID
	//	':'
	//	type=[DType] multiplicity=DMultiplicity? (':=' (value=DmxLiteralExpression | value=DmxLiteralListExpression))?;
	public DmxGrammarAccess.DmxTestContextElements getDmxTestContextAccess() {
		return gaDmx.getDmxTestContextAccess();
	}
	
	public ParserRule getDmxTestContextRule() {
		return getDmxTestContextAccess().getRule();
	}
	
	//enum DmxBaseType:
	//	VOID | BOOLEAN | NUMBER | TEXT | IDENTIFIER | TIMEPOINT | STATE /*transition*/ | STATE_EVENT | COMPLEX | NOTIFICATION
	//	/*sent* */ | SERVICE /*invoked* */;
	public DmxGrammarAccess.DmxBaseTypeElements getDmxBaseTypeAccess() {
		return gaDmx.getDmxBaseTypeAccess();
	}
	
	public EnumRule getDmxBaseTypeRule() {
		return getDmxBaseTypeAccess().getRule();
	}
	
	//DmxBaseTypeSet:
	//	name=ID
	//	'in'
	//	'(' members+=DmxBaseType (',' members+=DmxBaseType)+ ')';
	public DmxGrammarAccess.DmxBaseTypeSetElements getDmxBaseTypeSetAccess() {
		return gaDmx.getDmxBaseTypeSetAccess();
	}
	
	public ParserRule getDmxBaseTypeSetRule() {
		return getDmxBaseTypeSetAccess().getRule();
	}
	
	//DmxArchetype:
	//	'archetype'
	//	name=ID
	//	'is'
	//	baseType=DmxBaseType
	//	description=DRichText?;
	public DmxGrammarAccess.DmxArchetypeElements getDmxArchetypeAccess() {
		return gaDmx.getDmxArchetypeAccess();
	}
	
	public ParserRule getDmxArchetypeRule() {
		return getDmxArchetypeAccess().getRule();
	}
	
	//DmxFilter:
	//	'filter'
	//	name=ID
	//	'(' (parameters+=DmxFilterParameter (',' parameters+=DmxFilterParameter)*)? ')'
	//	':'
	//	typeDesc=DmxFilterTypeDescriptor ('with' withTypeSet=DmxBaseTypeSet)?;
	public DmxGrammarAccess.DmxFilterElements getDmxFilterAccess() {
		return gaDmx.getDmxFilterAccess();
	}
	
	public ParserRule getDmxFilterRule() {
		return getDmxFilterAccess().getRule();
	}
	
	//DmxFilterTypeDescriptor:
	//	(single=DmxBaseType
	//	| multiple=[DmxBaseTypeSet]) collection?='*'?;
	public DmxGrammarAccess.DmxFilterTypeDescriptorElements getDmxFilterTypeDescriptorAccess() {
		return gaDmx.getDmxFilterTypeDescriptorAccess();
	}
	
	public ParserRule getDmxFilterTypeDescriptorRule() {
		return getDmxFilterTypeDescriptorAccess().getRule();
	}
	
	//DmxFilterParameter:
	//	name=ID
	//	':'
	//	typeDesc=DmxFilterTypeDescriptor;
	public DmxGrammarAccess.DmxFilterParameterElements getDmxFilterParameterAccess() {
		return gaDmx.getDmxFilterParameterAccess();
	}
	
	public ParserRule getDmxFilterParameterRule() {
		return getDmxFilterParameterAccess().getRule();
	}
	
	///*
	// * Expressions
	// */ DExpression:
	//	DmxAssignment | DmxPredicateWithCorrelationVariable | DRichText;
	public DmxGrammarAccess.DExpressionElements getDExpressionAccess() {
		return gaDmx.getDExpressionAccess();
	}
	
	public ParserRule getDExpressionRule() {
		return getDExpressionAccess().getRule();
	}
	
	//DRichText:
	//	segments+=DmxTextOnly
	//	| segments+=DmxTextStart
	//	segments+=DExpression (segments+=DmxTextMiddle segments+=DExpression)*
	//	segments+=DmxTextEnd;
	public DmxGrammarAccess.DRichTextElements getDRichTextAccess() {
		return gaDmx.getDRichTextAccess();
	}
	
	public ParserRule getDRichTextRule() {
		return getDRichTextAccess().getRule();
	}
	
	//DmxTextOnly DTextSegment:
	//	value=PLAIN_TEXT_ONLY;
	public DmxGrammarAccess.DmxTextOnlyElements getDmxTextOnlyAccess() {
		return gaDmx.getDmxTextOnlyAccess();
	}
	
	public ParserRule getDmxTextOnlyRule() {
		return getDmxTextOnlyAccess().getRule();
	}
	
	//DmxTextStart DTextSegment:
	//	value=RICH_TEXT_START;
	public DmxGrammarAccess.DmxTextStartElements getDmxTextStartAccess() {
		return gaDmx.getDmxTextStartAccess();
	}
	
	public ParserRule getDmxTextStartRule() {
		return getDmxTextStartAccess().getRule();
	}
	
	//DmxTextMiddle DTextSegment:
	//	value=RICH_TEXT_MIDDLE;
	public DmxGrammarAccess.DmxTextMiddleElements getDmxTextMiddleAccess() {
		return gaDmx.getDmxTextMiddleAccess();
	}
	
	public ParserRule getDmxTextMiddleRule() {
		return getDmxTextMiddleAccess().getRule();
	}
	
	//DmxTextEnd DTextSegment:
	//	value=RICH_TEXT_END;
	public DmxGrammarAccess.DmxTextEndElements getDmxTextEndAccess() {
		return gaDmx.getDmxTextEndAccess();
	}
	
	public ParserRule getDmxTextEndRule() {
		return getDmxTextEndAccess().getRule();
	}
	
	//DmxNavigableMemberReference DExpression:
	//	DmxPrimaryExpression (=> ({DmxAssignment.precedingNavigationSegment=current} '.'
	//	assignToMember=[DNavigableMember] DmxOpSingleAssign) value=DmxOrExpression
	//	| => ({DmxMemberNavigation.precedingNavigationSegment=current} '.') member=[DNavigableMember] (=>
	//	explicitOperationCall?='(' // => boolean => has 0.n explicit arguments
	//	callArguments=DmxCallArguments
	//	')'
	//	| before?="@before")?)*;
	public DmxGrammarAccess.DmxNavigableMemberReferenceElements getDmxNavigableMemberReferenceAccess() {
		return gaDmx.getDmxNavigableMemberReferenceAccess();
	}
	
	public ParserRule getDmxNavigableMemberReferenceRule() {
		return getDmxNavigableMemberReferenceAccess().getRule();
	}
	
	//DmxCallArguments:
	//	{DmxCallArguments} (arguments+=DmxPredicateWithCorrelationVariable (','
	//	arguments+=DmxPredicateWithCorrelationVariable)*)?;
	public DmxGrammarAccess.DmxCallArgumentsElements getDmxCallArgumentsAccess() {
		return gaDmx.getDmxCallArgumentsAccess();
	}
	
	public ParserRule getDmxCallArgumentsRule() {
		return getDmxCallArgumentsAccess().getRule();
	}
	
	//DmxAssignment DExpression:
	//	{DmxAssignment} assignToMember=[DNavigableMember] DmxOpSingleAssign value=DmxOrExpression;
	public DmxGrammarAccess.DmxAssignmentElements getDmxAssignmentAccess() {
		return gaDmx.getDmxAssignmentAccess();
	}
	
	public ParserRule getDmxAssignmentRule() {
		return getDmxAssignmentAccess().getRule();
	}
	
	//DmxOpSingleAssign:
	//	':=';
	public DmxGrammarAccess.DmxOpSingleAssignElements getDmxOpSingleAssignAccess() {
		return gaDmx.getDmxOpSingleAssignAccess();
	}
	
	public ParserRule getDmxOpSingleAssignRule() {
		return getDmxOpSingleAssignAccess().getRule();
	}
	
	//DmxPredicateWithCorrelationVariable DExpression:
	//	{DmxPredicateWithCorrelationVariable} correlationVariable=DmxCorrelationVariable
	//	'|'
	//	predicate=DmxOrExpression
	//	| DmxOrExpression;
	public DmxGrammarAccess.DmxPredicateWithCorrelationVariableElements getDmxPredicateWithCorrelationVariableAccess() {
		return gaDmx.getDmxPredicateWithCorrelationVariableAccess();
	}
	
	public ParserRule getDmxPredicateWithCorrelationVariableRule() {
		return getDmxPredicateWithCorrelationVariableAccess().getRule();
	}
	
	//DmxCorrelationVariable:
	//	name=ID;
	public DmxGrammarAccess.DmxCorrelationVariableElements getDmxCorrelationVariableAccess() {
		return gaDmx.getDmxCorrelationVariableAccess();
	}
	
	public ParserRule getDmxCorrelationVariableRule() {
		return getDmxCorrelationVariableAccess().getRule();
	}
	
	////	(':' type=[DType])? => type is always NULL!
	//DmxOrExpression DExpression:
	//	DmxAndExpression (=> ({DmxBinaryOperation.leftOperand=current} operator=DmxOpOr) rightOperand=DmxAndExpression)*;
	public DmxGrammarAccess.DmxOrExpressionElements getDmxOrExpressionAccess() {
		return gaDmx.getDmxOrExpressionAccess();
	}
	
	public ParserRule getDmxOrExpressionRule() {
		return getDmxOrExpressionAccess().getRule();
	}
	
	//enum DmxOpOr returns DmxBinaryOperator:
	//	OR | OR='or' | XOR | XOR='xor';
	public DmxGrammarAccess.DmxOpOrElements getDmxOpOrAccess() {
		return gaDmx.getDmxOpOrAccess();
	}
	
	public EnumRule getDmxOpOrRule() {
		return getDmxOpOrAccess().getRule();
	}
	
	//DmxAndExpression DExpression:
	//	DmxEqualityExpression (=> ({DmxBinaryOperation.leftOperand=current} operator=DmxOpAnd)
	//	rightOperand=DmxEqualityExpression)*;
	public DmxGrammarAccess.DmxAndExpressionElements getDmxAndExpressionAccess() {
		return gaDmx.getDmxAndExpressionAccess();
	}
	
	public ParserRule getDmxAndExpressionRule() {
		return getDmxAndExpressionAccess().getRule();
	}
	
	//enum DmxOpAnd returns DmxBinaryOperator:
	//	AND | AND='and';
	public DmxGrammarAccess.DmxOpAndElements getDmxOpAndAccess() {
		return gaDmx.getDmxOpAndAccess();
	}
	
	public EnumRule getDmxOpAndRule() {
		return getDmxOpAndAccess().getRule();
	}
	
	//DmxEqualityExpression DExpression:
	//	DmxRelationalExpression (=> ({DmxBinaryOperation.leftOperand=current} operator=DmxOpEquality)
	//	rightOperand=DmxRelationalExpression)*;
	public DmxGrammarAccess.DmxEqualityExpressionElements getDmxEqualityExpressionAccess() {
		return gaDmx.getDmxEqualityExpressionAccess();
	}
	
	public ParserRule getDmxEqualityExpressionRule() {
		return getDmxEqualityExpressionAccess().getRule();
	}
	
	//enum DmxOpEquality returns DmxBinaryOperator:
	//	EQUAL='=' | NOT_EQUAL='!=' | NOT_EQUAL='<>';
	public DmxGrammarAccess.DmxOpEqualityElements getDmxOpEqualityAccess() {
		return gaDmx.getDmxOpEqualityAccess();
	}
	
	public EnumRule getDmxOpEqualityRule() {
		return getDmxOpEqualityAccess().getRule();
	}
	
	//DmxRelationalExpression DExpression:
	//	DmxOtherOperatorExpression (=> ({DmxInstanceOfExpression.expression=current} DmxOpInstanceOf) type=[DType] | =>
	//	({DmxBinaryOperation.leftOperand=current} operator=OpCompare) rightOperand=DmxOtherOperatorExpression)*;
	public DmxGrammarAccess.DmxRelationalExpressionElements getDmxRelationalExpressionAccess() {
		return gaDmx.getDmxRelationalExpressionAccess();
	}
	
	public ParserRule getDmxRelationalExpressionRule() {
		return getDmxRelationalExpressionAccess().getRule();
	}
	
	//DmxOpInstanceOf:
	//	'ISA' | 'isa';
	public DmxGrammarAccess.DmxOpInstanceOfElements getDmxOpInstanceOfAccess() {
		return gaDmx.getDmxOpInstanceOfAccess();
	}
	
	public ParserRule getDmxOpInstanceOfRule() {
		return getDmxOpInstanceOfAccess().getRule();
	}
	
	//enum OpCompare returns DmxBinaryOperator:
	//	LESS='<' | LESS_OR_EQUAL='<=' | LESS_OR_EQUAL='≤' | GREATER_OR_EQUAL='>=' | GREATER_OR_EQUAL='≥' | GREATER='>';
	public DmxGrammarAccess.OpCompareElements getOpCompareAccess() {
		return gaDmx.getOpCompareAccess();
	}
	
	public EnumRule getOpCompareRule() {
		return getOpCompareAccess().getRule();
	}
	
	//DmxOtherOperatorExpression DExpression:
	//	DmxAdditiveExpression (=> ({DmxBinaryOperation.leftOperand=current} operator=OpOther)
	//	rightOperand=DmxAdditiveExpression)*;
	public DmxGrammarAccess.DmxOtherOperatorExpressionElements getDmxOtherOperatorExpressionAccess() {
		return gaDmx.getDmxOtherOperatorExpressionAccess();
	}
	
	public ParserRule getDmxOtherOperatorExpressionRule() {
		return getDmxOtherOperatorExpressionAccess().getRule();
	}
	
	//enum OpOther returns DmxBinaryOperator:
	//	IN | IN='in' | UNTIL='..' | SINGLE_ARROW='->' | DOUBLE_ARROW='=>';
	public DmxGrammarAccess.OpOtherElements getOpOtherAccess() {
		return gaDmx.getOpOtherAccess();
	}
	
	public EnumRule getOpOtherRule() {
		return getOpOtherAccess().getRule();
	}
	
	//DmxAdditiveExpression DExpression:
	//	DmxMultiplicativeExpression (=> ({DmxBinaryOperation.leftOperand=current} operator=OpAdd)
	//	rightOperand=DmxMultiplicativeExpression)*;
	public DmxGrammarAccess.DmxAdditiveExpressionElements getDmxAdditiveExpressionAccess() {
		return gaDmx.getDmxAdditiveExpressionAccess();
	}
	
	public ParserRule getDmxAdditiveExpressionRule() {
		return getDmxAdditiveExpressionAccess().getRule();
	}
	
	//enum OpAdd returns DmxBinaryOperator:
	//	ADD='+' | SUBTRACT='-';
	public DmxGrammarAccess.OpAddElements getOpAddAccess() {
		return gaDmx.getOpAddAccess();
	}
	
	public EnumRule getOpAddRule() {
		return getOpAddAccess().getRule();
	}
	
	//DmxMultiplicativeExpression DExpression:
	//	DmxUnaryOperation (=> ({DmxBinaryOperation.leftOperand=current} operator=OpMulti) rightOperand=DmxUnaryOperation)*;
	public DmxGrammarAccess.DmxMultiplicativeExpressionElements getDmxMultiplicativeExpressionAccess() {
		return gaDmx.getDmxMultiplicativeExpressionAccess();
	}
	
	public ParserRule getDmxMultiplicativeExpressionRule() {
		return getDmxMultiplicativeExpressionAccess().getRule();
	}
	
	//enum OpMulti returns DmxBinaryOperator:
	//	MULTIPLY='*' | DIVIDE='/' | POWER='**' | MODULO='%';
	public DmxGrammarAccess.OpMultiElements getOpMultiAccess() {
		return gaDmx.getOpMultiAccess();
	}
	
	public EnumRule getOpMultiRule() {
		return getOpMultiAccess().getRule();
	}
	
	//DmxUnaryOperation DExpression:
	//	{DmxUnaryOperation} operator=OpUnary operand=DmxUnaryOperation
	//	| DmxCastExpression;
	public DmxGrammarAccess.DmxUnaryOperationElements getDmxUnaryOperationAccess() {
		return gaDmx.getDmxUnaryOperationAccess();
	}
	
	public ParserRule getDmxUnaryOperationRule() {
		return getDmxUnaryOperationAccess().getRule();
	}
	
	//enum OpUnary returns DmxUnaryOperator:
	//	PLUS='+' | MINUS='-' | NOT='!' | NOT | NOT='not';
	public DmxGrammarAccess.OpUnaryElements getOpUnaryAccess() {
		return gaDmx.getOpUnaryAccess();
	}
	
	public EnumRule getOpUnaryRule() {
		return getOpUnaryAccess().getRule();
	}
	
	//DmxCastExpression DExpression:
	//	DmxNavigableMemberReference (=> ({DmxCastExpression.target=current} DmxOpCast) type=[DType])?;
	public DmxGrammarAccess.DmxCastExpressionElements getDmxCastExpressionAccess() {
		return gaDmx.getDmxCastExpressionAccess();
	}
	
	public ParserRule getDmxCastExpressionRule() {
		return getDmxCastExpressionAccess().getRule();
	}
	
	//DmxOpCast:
	//	'AS' | 'as';
	public DmxGrammarAccess.DmxOpCastElements getDmxOpCastAccess() {
		return gaDmx.getDmxOpCastAccess();
	}
	
	public ParserRule getDmxOpCastRule() {
		return getDmxOpCastAccess().getRule();
	}
	
	//DmxPrimaryExpression DExpression:
	//	DmxLiteralExpression | DmxParenthesizedExpression | DmxListExpression | DmxFunctionCall | DmxStaticReference |
	//	DmxContextReference | DmxIfExpression;
	public DmxGrammarAccess.DmxPrimaryExpressionElements getDmxPrimaryExpressionAccess() {
		return gaDmx.getDmxPrimaryExpressionAccess();
	}
	
	public ParserRule getDmxPrimaryExpressionRule() {
		return getDmxPrimaryExpressionAccess().getRule();
	}
	
	//DmxLiteralExpression DExpression:
	//	DmxBooleanLiteral | DmxStringLiteral | DmxNaturalLiteral | DmxDecimalLiteral | DmxUndefinedLiteral | DmxEntity |
	//	DmxDetail;
	public DmxGrammarAccess.DmxLiteralExpressionElements getDmxLiteralExpressionAccess() {
		return gaDmx.getDmxLiteralExpressionAccess();
	}
	
	public ParserRule getDmxLiteralExpressionRule() {
		return getDmxLiteralExpressionAccess().getRule();
	}
	
	//DmxParenthesizedExpression DExpression:
	//	'(' DExpression ')';
	public DmxGrammarAccess.DmxParenthesizedExpressionElements getDmxParenthesizedExpressionAccess() {
		return gaDmx.getDmxParenthesizedExpressionAccess();
	}
	
	public ParserRule getDmxParenthesizedExpressionRule() {
		return getDmxParenthesizedExpressionAccess().getRule();
	}
	
	//DmxListExpression DExpression:
	//	{DmxListExpression}
	//	'{' (elements+=DExpression (',' elements+=DExpression)*)?
	//	'}';
	public DmxGrammarAccess.DmxListExpressionElements getDmxListExpressionAccess() {
		return gaDmx.getDmxListExpressionAccess();
	}
	
	public ParserRule getDmxListExpressionRule() {
		return getDmxListExpressionAccess().getRule();
	}
	
	//DmxLiteralListExpression DExpression:
	//	{DmxListExpression}
	//	'{' (elements+=DmxLiteralExpression (',' elements+=DmxLiteralExpression)*)?
	//	'}';
	public DmxGrammarAccess.DmxLiteralListExpressionElements getDmxLiteralListExpressionAccess() {
		return gaDmx.getDmxLiteralListExpressionAccess();
	}
	
	public ParserRule getDmxLiteralListExpressionRule() {
		return getDmxLiteralListExpressionAccess().getRule();
	}
	
	//DmxFunctionCall DExpression:
	//	{DmxFunctionCall} function=[DmxFilter]
	//	'('
	//	callArguments=DmxFunctionCallArguments
	//	')';
	public DmxGrammarAccess.DmxFunctionCallElements getDmxFunctionCallAccess() {
		return gaDmx.getDmxFunctionCallAccess();
	}
	
	public ParserRule getDmxFunctionCallRule() {
		return getDmxFunctionCallAccess().getRule();
	}
	
	//DmxFunctionCallArguments DmxCallArguments:
	//	{DmxCallArguments} (arguments+=DExpression (',' arguments+=DExpression)*)?;
	public DmxGrammarAccess.DmxFunctionCallArgumentsElements getDmxFunctionCallArgumentsAccess() {
		return gaDmx.getDmxFunctionCallArgumentsAccess();
	}
	
	public ParserRule getDmxFunctionCallArgumentsRule() {
		return getDmxFunctionCallArgumentsAccess().getRule();
	}
	
	//DmxEntity:
	//	'entity'
	//	DmxComplexObject;
	public DmxGrammarAccess.DmxEntityElements getDmxEntityAccess() {
		return gaDmx.getDmxEntityAccess();
	}
	
	public ParserRule getDmxEntityRule() {
		return getDmxEntityAccess().getRule();
	}
	
	//DmxDetail:
	//	'detail'
	//	DmxComplexObject;
	public DmxGrammarAccess.DmxDetailElements getDmxDetailAccess() {
		return gaDmx.getDmxDetailAccess();
	}
	
	public ParserRule getDmxDetailRule() {
		return getDmxDetailAccess().getRule();
	}
	
	//fragment DmxComplexObject:
	//	type=[DComplexType] DomFieldListStartSymbol
	//	fields+=DmxField*
	//	'}';
	public DmxGrammarAccess.DmxComplexObjectElements getDmxComplexObjectAccess() {
		return gaDmx.getDmxComplexObjectAccess();
	}
	
	public ParserRule getDmxComplexObjectRule() {
		return getDmxComplexObjectAccess().getRule();
	}
	
	//DmxField:
	//	feature=[DFeature] "=" value=DExpression;
	public DmxGrammarAccess.DmxFieldElements getDmxFieldAccess() {
		return gaDmx.getDmxFieldAccess();
	}
	
	public ParserRule getDmxFieldRule() {
		return getDmxFieldAccess().getRule();
	}
	
	//DmxStaticReference DExpression:
	//	{DmxStaticReference}
	//	'['
	//	target=[IStaticReferenceTarget|DQualifiedName] ('#' member=[DNavigableMember])? ("|" (displayName=ID | plural?="*"))?
	//	-> ']';
	public DmxGrammarAccess.DmxStaticReferenceElements getDmxStaticReferenceAccess() {
		return gaDmx.getDmxStaticReferenceAccess();
	}
	
	public ParserRule getDmxStaticReferenceRule() {
		return getDmxStaticReferenceAccess().getRule();
	}
	
	//// '->' gives precedence to this ']' over PLAIN_TEXT_MIDDLE ('=>' works too but generates more lookahead overhead)
	//DmxContextReference DExpression:
	//	{DmxContextReference} target=[DNamedElement] (before?="@before"
	//	| '.' all?='all')?;
	public DmxGrammarAccess.DmxContextReferenceElements getDmxContextReferenceAccess() {
		return gaDmx.getDmxContextReferenceAccess();
	}
	
	public ParserRule getDmxContextReferenceRule() {
		return getDmxContextReferenceAccess().getRule();
	}
	
	//DmxIfExpression DExpression:
	//	{DmxIfExpression}
	//	'if' if=DExpression
	//	'then' then=DExpression (=> 'else' else=DExpression)?
	//	'end';
	public DmxGrammarAccess.DmxIfExpressionElements getDmxIfExpressionAccess() {
		return gaDmx.getDmxIfExpressionAccess();
	}
	
	public ParserRule getDmxIfExpressionRule() {
		return getDmxIfExpressionAccess().getRule();
	}
	
	//DMultiplicity:
	//	shorthand=DMultiplicityShorthand | '(' minOccurs=NATURAL '..' maxOccurs=MULTIPLICITY ')';
	public DmxGrammarAccess.DMultiplicityElements getDMultiplicityAccess() {
		return gaDmx.getDMultiplicityAccess();
	}
	
	public ParserRule getDMultiplicityRule() {
		return getDMultiplicityAccess().getRule();
	}
	
	//enum DMultiplicityShorthand:
	//	ZERO_OR_ONE='?' | ONE_OR_MORE='+' | ZERO_OR_MORE='*';
	public DmxGrammarAccess.DMultiplicityShorthandElements getDMultiplicityShorthandAccess() {
		return gaDmx.getDMultiplicityShorthandAccess();
	}
	
	public EnumRule getDMultiplicityShorthandRule() {
		return getDMultiplicityShorthandAccess().getRule();
	}
	
	//MULTIPLICITY ecore::EInt:
	//	NATURAL | '*';
	public DmxGrammarAccess.MULTIPLICITYElements getMULTIPLICITYAccess() {
		return gaDmx.getMULTIPLICITYAccess();
	}
	
	public ParserRule getMULTIPLICITYRule() {
		return getMULTIPLICITYAccess().getRule();
	}
	
	//DmxBooleanLiteral DExpression:
	//	{DmxBooleanLiteral} (value?='TRUE' | value?='true' | 'FALSE' | 'false');
	public DmxGrammarAccess.DmxBooleanLiteralElements getDmxBooleanLiteralAccess() {
		return gaDmx.getDmxBooleanLiteralAccess();
	}
	
	public ParserRule getDmxBooleanLiteralRule() {
		return getDmxBooleanLiteralAccess().getRule();
	}
	
	//DmxNaturalLiteral DExpression:
	//	{DmxNaturalLiteral} value=NATURAL;
	public DmxGrammarAccess.DmxNaturalLiteralElements getDmxNaturalLiteralAccess() {
		return gaDmx.getDmxNaturalLiteralAccess();
	}
	
	public ParserRule getDmxNaturalLiteralRule() {
		return getDmxNaturalLiteralAccess().getRule();
	}
	
	//DmxDecimalLiteral DExpression:
	//	{DmxDecimalLiteral} value=DECIMAL;
	public DmxGrammarAccess.DmxDecimalLiteralElements getDmxDecimalLiteralAccess() {
		return gaDmx.getDmxDecimalLiteralAccess();
	}
	
	public ParserRule getDmxDecimalLiteralRule() {
		return getDmxDecimalLiteralAccess().getRule();
	}
	
	//DmxStringLiteral DExpression:
	//	{DmxStringLiteral} value=STRING;
	public DmxGrammarAccess.DmxStringLiteralElements getDmxStringLiteralAccess() {
		return gaDmx.getDmxStringLiteralAccess();
	}
	
	public ParserRule getDmxStringLiteralRule() {
		return getDmxStringLiteralAccess().getRule();
	}
	
	//DmxUndefinedLiteral DExpression:
	//	{DmxUndefinedLiteral} ('UNDEFINED' | 'undefined');
	public DmxGrammarAccess.DmxUndefinedLiteralElements getDmxUndefinedLiteralAccess() {
		return gaDmx.getDmxUndefinedLiteralAccess();
	}
	
	public ParserRule getDmxUndefinedLiteralRule() {
		return getDmxUndefinedLiteralAccess().getRule();
	}
	
	//DmxUrlLiteral DExpression:
	//	{DmxUrlLiteral}
	//	'URL:'
	//	value=STRING ('|' display=STRING)?;
	public DmxGrammarAccess.DmxUrlLiteralElements getDmxUrlLiteralAccess() {
		return gaDmx.getDmxUrlLiteralAccess();
	}
	
	public ParserRule getDmxUrlLiteralRule() {
		return getDmxUrlLiteralAccess().getRule();
	}
	
	//DECIMAL:
	//	NATURAL '.' NATURAL (('E' | 'e') ('+' | '-')? NATURAL)?;
	public DmxGrammarAccess.DECIMALElements getDECIMALAccess() {
		return gaDmx.getDECIMALAccess();
	}
	
	public ParserRule getDECIMALRule() {
		return getDECIMALAccess().getRule();
	}
	
	//DomFieldListStartSymbol:
	//	'{';
	public DmxGrammarAccess.DomFieldListStartSymbolElements getDomFieldListStartSymbolAccess() {
		return gaDmx.getDomFieldListStartSymbolAccess();
	}
	
	public ParserRule getDomFieldListStartSymbolRule() {
		return getDomFieldListStartSymbolAccess().getRule();
	}
	
	//DQualifiedNameWithWildcard:
	//	DQualifiedName '.*'?;
	public DmxGrammarAccess.DQualifiedNameWithWildcardElements getDQualifiedNameWithWildcardAccess() {
		return gaDmx.getDQualifiedNameWithWildcardAccess();
	}
	
	public ParserRule getDQualifiedNameWithWildcardRule() {
		return getDQualifiedNameWithWildcardAccess().getRule();
	}
	
	//DQualifiedName:
	//	ID ('.' ID)*;
	public DmxGrammarAccess.DQualifiedNameElements getDQualifiedNameAccess() {
		return gaDmx.getDQualifiedNameAccess();
	}
	
	public ParserRule getDQualifiedNameRule() {
		return getDQualifiedNameAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? (LETTER | '_') (LETTER | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaDmx.getIDRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"';
	public TerminalRule getSTRINGRule() {
		return gaDmx.getSTRINGRule();
	}
	
	//terminal NATURAL returns ecore::EInt:
	//	'0'..'9'+ | '∞';
	public TerminalRule getNATURALRule() {
		return gaDmx.getNATURALRule();
	}
	
	//terminal fragment LETTER:
	//	'a'..'z' | 'A'..'Z' | '\\u00c0'..'\\u00d6' | '\\u00d8'..'\\u00f6' | '\\u00f8'..'\\u00ff';
	public TerminalRule getLETTERRule() {
		return gaDmx.getLETTERRule();
	}
	
	//terminal fragment PLAIN_TEXT:
	//	!('»' | ']' | '[');
	public TerminalRule getPLAIN_TEXTRule() {
		return gaDmx.getPLAIN_TEXTRule();
	}
	
	//terminal PLAIN_TEXT_ONLY:
	//	'«' PLAIN_TEXT* '»';
	public TerminalRule getPLAIN_TEXT_ONLYRule() {
		return gaDmx.getPLAIN_TEXT_ONLYRule();
	}
	
	//terminal RICH_TEXT_START:
	//	'«' PLAIN_TEXT* '[';
	public TerminalRule getRICH_TEXT_STARTRule() {
		return gaDmx.getRICH_TEXT_STARTRule();
	}
	
	//terminal RICH_TEXT_MIDDLE:
	//	']' PLAIN_TEXT* '[';
	public TerminalRule getRICH_TEXT_MIDDLERule() {
		return gaDmx.getRICH_TEXT_MIDDLERule();
	}
	
	//terminal RICH_TEXT_END:
	//	']' PLAIN_TEXT* '»';
	public TerminalRule getRICH_TEXT_ENDRule() {
		return gaDmx.getRICH_TEXT_ENDRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaDmx.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaDmx.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaDmx.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaDmx.getANY_OTHERRule();
	}
}
