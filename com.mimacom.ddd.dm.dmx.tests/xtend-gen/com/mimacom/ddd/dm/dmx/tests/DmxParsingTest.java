/**
 * generated by Xtext 2.16.0
 */
package com.mimacom.ddd.dm.dmx.tests;

import com.google.inject.Inject;
import com.mimacom.ddd.dm.base.DExpression;
import com.mimacom.ddd.dm.base.DIdentityType;
import com.mimacom.ddd.dm.base.DNamedElement;
import com.mimacom.ddd.dm.base.impl.DFunctionImpl;
import com.mimacom.ddd.dm.dmx.DmxModel;
import com.mimacom.ddd.dm.dmx.impl.DAssignmentImpl;
import com.mimacom.ddd.dm.dmx.impl.DBooleanLiteralImpl;
import com.mimacom.ddd.dm.dmx.impl.DConstructorCallImpl;
import com.mimacom.ddd.dm.dmx.impl.DContextReferenceImpl;
import com.mimacom.ddd.dm.dmx.impl.DDecimalLiteralImpl;
import com.mimacom.ddd.dm.dmx.impl.DFunctionCallImpl;
import com.mimacom.ddd.dm.dmx.impl.DNaturalLiteralImpl;
import com.mimacom.ddd.dm.dmx.impl.DRaiseExpressionImpl;
import com.mimacom.ddd.dm.dmx.impl.DReturnExpressionImpl;
import com.mimacom.ddd.dm.dmx.impl.DSelfExpressionImpl;
import com.mimacom.ddd.dm.dmx.impl.DStringLiteralImpl;
import com.mimacom.ddd.dm.dmx.impl.DTypedMemberReferenceImpl;
import com.mimacom.ddd.dm.dmx.impl.DUndefinedLiteralImpl;
import com.mimacom.ddd.dm.dmx.tests.DmxInjectorProvider;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.testing.InjectWith;
import org.eclipse.xtext.testing.extensions.InjectionExtension;
import org.eclipse.xtext.testing.util.ParseHelper;
import org.eclipse.xtext.xbase.lib.Exceptions;
import org.eclipse.xtext.xbase.lib.Extension;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.junit.Assert;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;

@ExtendWith(InjectionExtension.class)
@InjectWith(DmxInjectorProvider.class)
@SuppressWarnings("all")
public class DmxParsingTest {
  @Inject
  @Extension
  private ParseHelper<DmxModel> parseHelper;
  
  @Test
  public void testLiterals() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("expr 0: true;");
      _builder.newLine();
      _builder.append("expr 1: \"Domain Model\";");
      _builder.newLine();
      _builder.append("expr 2: 2;");
      _builder.newLine();
      _builder.append("expr 3: 314.159E-2;");
      _builder.newLine();
      _builder.append("expr 4: nil;");
      _builder.newLine();
      _builder.append("expr 5: NIL;");
      _builder.newLine();
      final DmxModel result = this.parseHelper.parse(_builder);
      Assert.assertNotNull(result);
      final EList<Resource.Diagnostic> errors = result.eResource().getErrors();
      boolean _isEmpty = errors.isEmpty();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("Literal errors: ");
      String _join = IterableExtensions.join(errors, "; ");
      _builder_1.append(_join);
      Assertions.assertTrue(_isEmpty, _builder_1.toString());
      final EList<DExpression> expr = result.getExpressions();
      final DExpression e0 = expr.get(0);
      Assert.assertEquals(DBooleanLiteralImpl.class, e0.getClass());
      Assert.assertEquals(Boolean.valueOf(true), Boolean.valueOf(((DBooleanLiteralImpl) e0).isValue()));
      final DExpression e1 = expr.get(1);
      Assert.assertEquals(DStringLiteralImpl.class, e1.getClass());
      Assert.assertEquals("Domain Model", ((DStringLiteralImpl) e1).getValue());
      final DExpression e2 = expr.get(2);
      Assert.assertEquals(e2.getClass(), DNaturalLiteralImpl.class);
      Assert.assertEquals(2, ((DNaturalLiteralImpl) e2).getValue());
      final DExpression e3 = expr.get(3);
      Assert.assertEquals(e3.getClass(), DDecimalLiteralImpl.class);
      Assert.assertEquals("314.159E-2", ((DDecimalLiteralImpl) e3).getValue());
      final DExpression e4 = expr.get(4);
      Assert.assertEquals(DUndefinedLiteralImpl.class, e4.getClass());
      final DExpression e5 = expr.get(5);
      Assert.assertEquals(DUndefinedLiteralImpl.class, e5.getClass());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testPrimaries() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("expr 0: self;");
      _builder.newLine();
      _builder.append("expr 1: return;");
      _builder.newLine();
      _builder.append("expr 2: return 2;");
      _builder.newLine();
      _builder.append("expr 3: raise \"Expression\";");
      _builder.newLine();
      _builder.append("expr 4: (4);");
      _builder.newLine();
      _builder.newLine();
      _builder.append("expr 5: f();");
      _builder.newLine();
      _builder.append("expr 6: f(6);");
      _builder.newLine();
      _builder.append("expr 7: new X;");
      _builder.newLine();
      _builder.append("expr 8: new X(9);");
      _builder.newLine();
      _builder.append("expr 9: A;");
      _builder.newLine();
      final DmxModel result = this.parseHelper.parse(_builder);
      Assert.assertNotNull(result);
      final EList<Resource.Diagnostic> errors = result.eResource().getErrors();
      boolean _isEmpty = errors.isEmpty();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("Primaries errors: ");
      String _join = IterableExtensions.join(errors, "; ");
      _builder_1.append(_join);
      Assertions.assertTrue(_isEmpty, _builder_1.toString());
      final EList<DExpression> expr = result.getExpressions();
      final DExpression e0 = expr.get(0);
      Assert.assertEquals(DSelfExpressionImpl.class, e0.getClass());
      final DExpression e1 = expr.get(1);
      Assert.assertEquals(DReturnExpressionImpl.class, e1.getClass());
      Assert.assertEquals(null, ((DReturnExpressionImpl) e1).getExpression());
      final DExpression e2 = expr.get(2);
      Assert.assertEquals(DReturnExpressionImpl.class, e2.getClass());
      Assert.assertEquals(DNaturalLiteralImpl.class, ((DReturnExpressionImpl) e2).getExpression().getClass());
      final DExpression e3 = expr.get(3);
      Assert.assertEquals(DRaiseExpressionImpl.class, e3.getClass());
      Assert.assertEquals(DStringLiteralImpl.class, ((DRaiseExpressionImpl) e3).getExpression().getClass());
      final DExpression e4 = expr.get(4);
      Assert.assertEquals(DNaturalLiteralImpl.class, e4.getClass());
      Assert.assertEquals(4, ((DNaturalLiteralImpl) e4).getValue());
      final DExpression e5 = expr.get(5);
      Assert.assertEquals(DFunctionCallImpl.class, e5.getClass());
      Assert.assertTrue(((DFunctionCallImpl) e5).basicGetFunction().eIsProxy());
      Assert.assertEquals(DFunctionImpl.class, ((DFunctionCallImpl) e5).basicGetFunction().getClass());
      Assert.assertEquals(0, ((DFunctionCallImpl) e5).getFunctionCallArguments().size());
      final DExpression e6 = expr.get(6);
      Assert.assertEquals(DFunctionImpl.class, ((DFunctionCallImpl) e6).basicGetFunction().getClass());
      Assert.assertEquals(1, ((DFunctionCallImpl) e6).getFunctionCallArguments().size());
      Assert.assertEquals(DNaturalLiteralImpl.class, ((DFunctionCallImpl) e6).getFunctionCallArguments().get(0).getClass());
      final DExpression e7 = expr.get(7);
      Assert.assertEquals(DConstructorCallImpl.class, e7.getClass());
      Assert.assertTrue(((DConstructorCallImpl) e7).basicGetConstructor().eIsProxy());
      DIdentityType _basicGetConstructor = ((DConstructorCallImpl) e7).basicGetConstructor();
      Assert.assertTrue((_basicGetConstructor instanceof DIdentityType));
      Assert.assertFalse(((DConstructorCallImpl) e7).isExplicitConstructorCall());
      final DExpression e8 = expr.get(8);
      Assert.assertEquals(DConstructorCallImpl.class, e8.getClass());
      DIdentityType _basicGetConstructor_1 = ((DConstructorCallImpl) e8).basicGetConstructor();
      Assert.assertTrue((_basicGetConstructor_1 instanceof DIdentityType));
      Assert.assertTrue(((DConstructorCallImpl) e8).isExplicitConstructorCall());
      Assert.assertEquals(1, ((DConstructorCallImpl) e8).getArguments().size());
      Assert.assertEquals(DNaturalLiteralImpl.class, ((DConstructorCallImpl) e8).getArguments().get(0).getClass());
      final DExpression e9 = expr.get(9);
      Assert.assertEquals(DContextReferenceImpl.class, e9.getClass());
      Assert.assertTrue(((DContextReferenceImpl) e9).basicGetTarget().eIsProxy());
      DNamedElement _basicGetTarget = ((DContextReferenceImpl) e9).basicGetTarget();
      Assert.assertTrue((_basicGetTarget instanceof DNamedElement));
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testMemberFeatureCalls() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("expr 0: self.a;");
      _builder.newLine();
      _builder.append("expr 1: self.a.b;");
      _builder.newLine();
      _builder.append("expr 2: A.b;");
      _builder.newLine();
      _builder.append("expr 3: A.b.c;");
      _builder.newLine();
      final DmxModel result = this.parseHelper.parse(_builder);
      Assert.assertNotNull(result);
      final EList<Resource.Diagnostic> errors = result.eResource().getErrors();
      boolean _isEmpty = errors.isEmpty();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("MemberFeatureCalls errors: ");
      String _join = IterableExtensions.join(errors, "; ");
      _builder_1.append(_join);
      Assertions.assertTrue(_isEmpty, _builder_1.toString());
      final EList<DExpression> expr = result.getExpressions();
      final DExpression e0 = expr.get(0);
      Assert.assertEquals(DTypedMemberReferenceImpl.class, e0.getClass());
      Assert.assertTrue(((DTypedMemberReferenceImpl) e0).basicGetMember().eIsProxy());
      Assert.assertEquals(DSelfExpressionImpl.class, ((DTypedMemberReferenceImpl) e0).getMemberContainerReference().getClass());
      final DExpression e1 = expr.get(1);
      Assert.assertEquals(DTypedMemberReferenceImpl.class, e1.getClass());
      final DTypedMemberReferenceImpl e1_1 = ((DTypedMemberReferenceImpl) e1);
      Assert.assertTrue(e1_1.basicGetMember().eIsProxy());
      Assert.assertEquals(DTypedMemberReferenceImpl.class, e1_1.getMemberContainerReference().getClass());
      DExpression _memberContainerReference = e1_1.getMemberContainerReference();
      final DTypedMemberReferenceImpl e1_2 = ((DTypedMemberReferenceImpl) _memberContainerReference);
      Assert.assertTrue(e1_2.basicGetMember().eIsProxy());
      Assert.assertEquals(DSelfExpressionImpl.class, e1_2.getMemberContainerReference().getClass());
      final DExpression e2 = expr.get(2);
      Assert.assertEquals(DTypedMemberReferenceImpl.class, e2.getClass());
      final DTypedMemberReferenceImpl e2_1 = ((DTypedMemberReferenceImpl) e2);
      Assert.assertTrue(((DTypedMemberReferenceImpl) e2_1).basicGetMember().eIsProxy());
      Assert.assertEquals(DContextReferenceImpl.class, e2_1.getMemberContainerReference().getClass());
      DExpression _memberContainerReference_1 = e2_1.getMemberContainerReference();
      final DContextReferenceImpl e2_2 = ((DContextReferenceImpl) _memberContainerReference_1);
      Assert.assertTrue(e2_2.basicGetTarget().eIsProxy());
      DNamedElement _basicGetTarget = e2_2.basicGetTarget();
      Assert.assertTrue((_basicGetTarget instanceof DNamedElement));
      final DExpression e3 = expr.get(3);
      Assert.assertEquals(DTypedMemberReferenceImpl.class, e3.getClass());
      final DTypedMemberReferenceImpl e3_1 = ((DTypedMemberReferenceImpl) e3);
      Assert.assertTrue(e3_1.basicGetMember().eIsProxy());
      Assert.assertEquals(DTypedMemberReferenceImpl.class, e3_1.getMemberContainerReference().getClass());
      DExpression _memberContainerReference_2 = e3_1.getMemberContainerReference();
      final DTypedMemberReferenceImpl e3_2 = ((DTypedMemberReferenceImpl) _memberContainerReference_2);
      Assert.assertTrue(e3_2.basicGetMember().eIsProxy());
      Assert.assertEquals(DContextReferenceImpl.class, e3_2.getMemberContainerReference().getClass());
      DExpression _memberContainerReference_3 = e3_2.getMemberContainerReference();
      final DContextReferenceImpl e3_3 = ((DContextReferenceImpl) _memberContainerReference_3);
      Assert.assertTrue(e3_3.basicGetTarget().eIsProxy());
      DNamedElement _basicGetTarget_1 = e3_3.basicGetTarget();
      Assert.assertTrue((_basicGetTarget_1 instanceof DNamedElement));
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void testAssignment() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("expr 0: a := 0;");
      _builder.newLine();
      _builder.append("expr 1: self.a := 1;");
      _builder.newLine();
      _builder.append("expr 2: A.b := 2;");
      _builder.newLine();
      _builder.append("expr 3: A.b.c := 3;");
      _builder.newLine();
      final DmxModel result = this.parseHelper.parse(_builder);
      Assert.assertNotNull(result);
      final EList<Resource.Diagnostic> errors = result.eResource().getErrors();
      boolean _isEmpty = errors.isEmpty();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("Assignment errors: ");
      String _join = IterableExtensions.join(errors, "; ");
      _builder_1.append(_join);
      Assertions.assertTrue(_isEmpty, _builder_1.toString());
      final EList<DExpression> expr = result.getExpressions();
      final DExpression e0 = expr.get(0);
      Assert.assertEquals(DAssignmentImpl.class, e0.getClass());
      Assert.assertTrue(((DAssignmentImpl) e0).basicGetMember().eIsProxy());
      Assert.assertNull(((DAssignmentImpl) e0).getMemberContainer());
      Assert.assertEquals(DNaturalLiteralImpl.class, ((DAssignmentImpl) e0).getValue().getClass());
      final DExpression e1 = expr.get(1);
      Assert.assertEquals(DAssignmentImpl.class, e1.getClass());
      Assert.assertTrue(((DAssignmentImpl) e1).basicGetMember().eIsProxy());
      Assert.assertEquals(DSelfExpressionImpl.class, ((DAssignmentImpl) e1).getMemberContainer().getClass());
      Assert.assertEquals(DNaturalLiteralImpl.class, ((DAssignmentImpl) e1).getValue().getClass());
      final DExpression e2 = expr.get(2);
      Assert.assertEquals(DAssignmentImpl.class, e2.getClass());
      Assert.assertTrue(((DAssignmentImpl) e2).basicGetMember().eIsProxy());
      Assert.assertEquals(DContextReferenceImpl.class, ((DAssignmentImpl) e2).getMemberContainer().getClass());
      Assert.assertEquals(DNaturalLiteralImpl.class, ((DAssignmentImpl) e2).getValue().getClass());
      final DExpression e3 = expr.get(3);
      Assert.assertEquals(DAssignmentImpl.class, e3.getClass());
      Assert.assertTrue(((DAssignmentImpl) e3).basicGetMember().eIsProxy());
      Assert.assertEquals(DTypedMemberReferenceImpl.class, ((DAssignmentImpl) e3).getMemberContainer().getClass());
      DExpression _memberContainer = ((DAssignmentImpl) e3).getMemberContainer();
      final DTypedMemberReferenceImpl e3_1 = ((DTypedMemberReferenceImpl) _memberContainer);
      Assert.assertTrue(e3_1.basicGetMember().eIsProxy());
      Assert.assertEquals(DContextReferenceImpl.class, e3_1.getMemberContainerReference().getClass());
      Assert.assertEquals(DNaturalLiteralImpl.class, ((DAssignmentImpl) e3).getValue().getClass());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
}
