/*
 * generated by Xtext 2.17.1
 */
package com.mimacom.ddd.sm.asm.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import com.mimacom.ddd.sm.asm.ide.contentassist.antlr.internal.InternalAsmParser;
import com.mimacom.ddd.sm.asm.services.AsmGrammarAccess;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class AsmParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(AsmGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, AsmGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getModelAccess().getAlternatives(), "rule__Model__Alternatives");
			builder.put(grammarAccess.getSActorAccess().getAlternatives(), "rule__SActor__Alternatives");
			builder.put(grammarAccess.getSApplicationAccess().getGroup(), "rule__SApplication__Group__0");
			builder.put(grammarAccess.getSServiceInterfaceAccess().getGroup(), "rule__SServiceInterface__Group__0");
			builder.put(grammarAccess.getDImportAccess().getGroup(), "rule__DImport__Group__0");
			builder.put(grammarAccess.getSWatchdogAccess().getGroup(), "rule__SWatchdog__Group__0");
			builder.put(grammarAccess.getSHumanAccess().getGroup(), "rule__SHuman__Group__0");
			builder.put(grammarAccess.getSServiceOperationAccess().getGroup(), "rule__SServiceOperation__Group__0");
			builder.put(grammarAccess.getSServiceOperationAccess().getGroup_5(), "rule__SServiceOperation__Group_5__0");
			builder.put(grammarAccess.getSQualifiedNameWithWildcardAccess().getGroup(), "rule__SQualifiedNameWithWildcard__Group__0");
			builder.put(grammarAccess.getSQualifiedNameAccess().getGroup(), "rule__SQualifiedName__Group__0");
			builder.put(grammarAccess.getSQualifiedNameAccess().getGroup_1(), "rule__SQualifiedName__Group_1__0");
			builder.put(grammarAccess.getSApplicationAccess().getNameAssignment_1(), "rule__SApplication__NameAssignment_1");
			builder.put(grammarAccess.getSApplicationAccess().getImportsAssignment_2(), "rule__SApplication__ImportsAssignment_2");
			builder.put(grammarAccess.getSApplicationAccess().getModelAssignment_5(), "rule__SApplication__ModelAssignment_5");
			builder.put(grammarAccess.getSApplicationAccess().getActorsAssignment_6(), "rule__SApplication__ActorsAssignment_6");
			builder.put(grammarAccess.getSServiceInterfaceAccess().getNameAssignment_2(), "rule__SServiceInterface__NameAssignment_2");
			builder.put(grammarAccess.getSServiceInterfaceAccess().getImportsAssignment_3(), "rule__SServiceInterface__ImportsAssignment_3");
			builder.put(grammarAccess.getSServiceInterfaceAccess().getModelAssignment_6(), "rule__SServiceInterface__ModelAssignment_6");
			builder.put(grammarAccess.getSServiceInterfaceAccess().getOperationsAssignment_7(), "rule__SServiceInterface__OperationsAssignment_7");
			builder.put(grammarAccess.getDImportAccess().getImportedNamespaceAssignment_1(), "rule__DImport__ImportedNamespaceAssignment_1");
			builder.put(grammarAccess.getSWatchdogAccess().getNameAssignment_1(), "rule__SWatchdog__NameAssignment_1");
			builder.put(grammarAccess.getSHumanAccess().getNameAssignment_1(), "rule__SHuman__NameAssignment_1");
			builder.put(grammarAccess.getSServiceOperationAccess().getNameAssignment_1(), "rule__SServiceOperation__NameAssignment_1");
			builder.put(grammarAccess.getSServiceOperationAccess().getParametersAssignment_3(), "rule__SServiceOperation__ParametersAssignment_3");
			builder.put(grammarAccess.getSServiceOperationAccess().getExceptionsAssignment_5_1(), "rule__SServiceOperation__ExceptionsAssignment_5_1");
			builder.put(grammarAccess.getSOperationParameterAccess().getNameAssignment(), "rule__SOperationParameter__NameAssignment");
			builder.put(grammarAccess.getSExceptionAccess().getNameAssignment(), "rule__SException__NameAssignment");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private AsmGrammarAccess grammarAccess;

	@Override
	protected InternalAsmParser createParser() {
		InternalAsmParser result = new InternalAsmParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public AsmGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(AsmGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
