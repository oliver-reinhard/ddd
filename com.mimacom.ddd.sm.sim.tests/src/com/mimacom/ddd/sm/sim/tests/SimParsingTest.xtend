/*
 * generated by Xtext 2.16.0
 */
package com.mimacom.ddd.sm.sim.tests

import com.google.inject.Inject
import com.google.inject.Provider
import com.mimacom.ddd.dm.base.DNamespace
import com.mimacom.ddd.dm.dim.DimStandaloneSetup
import com.mimacom.ddd.dm.dmx.DmxStandaloneSetup
import org.eclipse.emf.ecore.resource.ResourceSet
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.extensions.InjectionExtension
import org.eclipse.xtext.testing.util.ParseHelper
import org.junit.jupiter.api.Assertions
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.^extension.ExtendWith

@ExtendWith(InjectionExtension)
@InjectWith(SimInjectorProvider)
class SimParsingTest {
	@Inject 
	ParseHelper<DNamespace> simParseHelper
	
	final ParseHelper<DNamespace> dmxParseHelper
	final ParseHelper<DNamespace> dimParseHelper
	
	@Inject
	Provider<ResourceSet> resourceSetProvider
	
	new() {
		val dimInjector = new DimStandaloneSetup().createInjectorAndDoEMFRegistration()
		dimParseHelper = dimInjector.getInstance(ParseHelper)
		val dmxInjector = new DmxStandaloneSetup().createInjectorAndDoEMFRegistration()
		dmxParseHelper = dmxInjector.getInstance(ParseHelper)
	}
	
	@Test
	def void grabArchetype() {
		val resourceSet = resourceSetProvider.get
		val dmx = dmxParseHelper.parse('''
			namespace dm.types
			archetype AT is NUMBER
		''', resourceSet)
		val dm = dimParseHelper.parse('''
			domain DM
			information model IM {
				primitive DT redefines AT
			}
		''', resourceSet)
		val sm = simParseHelper.parse('''
			system SM
			base information model SM1 {
				grab primitive DM.DT as ST
			}
		''', resourceSet)
		Assertions.assertNotNull(dmx)
		val dmxErrors = dmx.eResource.errors
		Assertions.assertTrue(dmxErrors.isEmpty, '''Unexpected errors in dmx: «dmxErrors.join(", ")»''')
		Assertions.assertNotNull(dm)
		val dmErrors = dm.eResource.errors
		Assertions.assertTrue(dmErrors.isEmpty, '''Unexpected errors in dm: «dmErrors.join(", ")»''')
		Assertions.assertNotNull(sm)
		val smErrors = sm.eResource.errors
		Assertions.assertTrue(smErrors.isEmpty, '''Unexpected errors in sm: «smErrors.join(", ")»''')
	}
}
