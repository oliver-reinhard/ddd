/*
 * generated by Xtext 2.16.0
 */
package com.mimacom.ddd.sm.sim.tests

import com.google.inject.Inject
import com.google.inject.Provider
import com.mimacom.ddd.dm.base.DDomain
import com.mimacom.ddd.sm.sim.SInformationModel
import org.eclipse.emf.ecore.resource.ResourceSet
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.extensions.InjectionExtension
import org.eclipse.xtext.testing.util.ParseHelper
import org.junit.jupiter.api.Assertions
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.^extension.ExtendWith
import org.junit.jupiter.api.Disabled

@ExtendWith(InjectionExtension)
@InjectWith(SimInjectorProvider)
class SimParsingTest {
	@Inject 
	ParseHelper<DDomain> dmParseHelper
	
	@Inject 
	ParseHelper<SInformationModel> smParseHelper
	
	@Inject
	Provider<ResourceSet> resourceSetProvider
	
	@Test
    @Disabled("java.lang.ClassCastException: com.mimacom.ddd.sm.sim.impl.SInformationModelImpl cannot be cast to com.mimacom.ddd.dm.base.DDomain")
	def void grabArchetype() {
		val resourceSet = resourceSetProvider.get
		val dm = dmParseHelper.parse('''
			domain DM
			archetype DT { }
		''', resourceSet)
		val sm = smParseHelper.parse('''
			base information model SM
			grab primitive DM.DT as ST 
		''', resourceSet)
		Assertions.assertNotNull(dm)
		val dmErrors = dm.eResource.errors
		Assertions.assertTrue(dmErrors.isEmpty, '''Unexpected errors in dm: «dmErrors.join(", ")»''')
		Assertions.assertNotNull(sm)
		val smErrors = sm.eResource.errors
		Assertions.assertTrue(smErrors.isEmpty, '''Unexpected errors in sm: «smErrors.join(", ")»''')
	}
}
