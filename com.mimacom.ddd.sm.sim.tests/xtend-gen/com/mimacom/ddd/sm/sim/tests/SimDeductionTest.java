/**
 * generated by Xtext 2.16.0
 */
package com.mimacom.ddd.sm.sim.tests;

import com.google.inject.Inject;
import com.google.inject.Injector;
import com.google.inject.Provider;
import com.mimacom.ddd.dm.base.DAggregate;
import com.mimacom.ddd.dm.base.DAttribute;
import com.mimacom.ddd.dm.base.DDeductionRule;
import com.mimacom.ddd.dm.base.DEntityType;
import com.mimacom.ddd.dm.base.DEnumeration;
import com.mimacom.ddd.dm.base.DFeature;
import com.mimacom.ddd.dm.base.DInformationModel;
import com.mimacom.ddd.dm.base.DLiteral;
import com.mimacom.ddd.dm.base.DModel;
import com.mimacom.ddd.dm.base.DNamespace;
import com.mimacom.ddd.dm.base.DPrimitive;
import com.mimacom.ddd.dm.base.DQuery;
import com.mimacom.ddd.dm.base.DQueryParameter;
import com.mimacom.ddd.dm.base.DType;
import com.mimacom.ddd.dm.base.IDeductionDefinition;
import com.mimacom.ddd.dm.dim.DimStandaloneSetup;
import com.mimacom.ddd.dm.dmx.DmxArchetype;
import com.mimacom.ddd.dm.dmx.DmxModel;
import com.mimacom.ddd.dm.dmx.DmxStandaloneSetup;
import com.mimacom.ddd.sm.sim.SAggregateDeduction;
import com.mimacom.ddd.sm.sim.SEntityTypeDeduction;
import com.mimacom.ddd.sm.sim.SEnumerationDeduction;
import com.mimacom.ddd.sm.sim.SFeatureDeduction;
import com.mimacom.ddd.sm.sim.SGrabAggregateRule;
import com.mimacom.ddd.sm.sim.SGrabRule;
import com.mimacom.ddd.sm.sim.SImplicitElementDeduction;
import com.mimacom.ddd.sm.sim.SInformationModel;
import com.mimacom.ddd.sm.sim.SLiteralDeduction;
import com.mimacom.ddd.sm.sim.SPrimitiveDeduction;
import com.mimacom.ddd.sm.sim.SQueryDeduction;
import com.mimacom.ddd.sm.sim.SQueryParameterDeduction;
import com.mimacom.ddd.sm.sim.tests.SimInjectorProvider;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.emf.ecore.resource.ResourceSet;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.testing.InjectWith;
import org.eclipse.xtext.testing.extensions.InjectionExtension;
import org.eclipse.xtext.testing.util.ParseHelper;
import org.eclipse.xtext.xbase.lib.Exceptions;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;

@ExtendWith(InjectionExtension.class)
@InjectWith(SimInjectorProvider.class)
@SuppressWarnings("all")
public class SimDeductionTest {
  @Inject
  private ParseHelper<DNamespace> simParseHelper;
  
  private final ParseHelper<DNamespace> dmxParseHelper;
  
  private final ParseHelper<DNamespace> dimParseHelper;
  
  @Inject
  private Provider<ResourceSet> resourceSetProvider;
  
  public SimDeductionTest() {
    final Injector dimInjector = new DimStandaloneSetup().createInjectorAndDoEMFRegistration();
    this.dimParseHelper = dimInjector.<ParseHelper>getInstance(ParseHelper.class);
    final Injector dmxInjector = new DmxStandaloneSetup().createInjectorAndDoEMFRegistration();
    this.dmxParseHelper = dmxInjector.<ParseHelper>getInstance(ParseHelper.class);
  }
  
  protected DmxModel loadDmx(final ResourceSet rs) {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("namespace dm.types");
      _builder.newLine();
      _builder.append("archetype AT is NUMBER");
      _builder.newLine();
      final DNamespace dmxNS = this.dmxParseHelper.parse(_builder, rs);
      this.assertNoParseErrors(dmxNS, "dmx");
      DModel _model = dmxNS.getModel();
      final DmxModel dmx = ((DmxModel) _model);
      Assertions.assertNotNull(dmx);
      Assertions.assertEquals(1, dmx.getTypes().size());
      DType _get = dmx.getTypes().get(0);
      Assertions.assertTrue((_get instanceof DmxArchetype));
      return dmx;
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  protected DInformationModel loadSimpleDim(final ResourceSet rs, final DmxArchetype at) {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("domain DM");
      _builder.newLine();
      _builder.append("information model DIM {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("primitive DT redefines AT");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("enumeration En { L1, L2 }");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      final DNamespace dmNS = this.dimParseHelper.parse(_builder, rs);
      this.assertNoParseErrors(dmNS, "dm");
      DModel _model = dmNS.getModel();
      final DInformationModel dim = ((DInformationModel) _model);
      Assertions.assertNotNull(dim);
      Assertions.assertEquals(2, dim.getTypes().size());
      DType _get = dim.getTypes().get(0);
      final DPrimitive dt = ((DPrimitive) _get);
      Assertions.assertFalse(dt.isSynthetic());
      Assertions.assertEquals("DT", dt.getName());
      Assertions.assertEquals(at, dt.getRedefines());
      DType _get_1 = dim.getTypes().get(1);
      final DEnumeration en = ((DEnumeration) _get_1);
      Assertions.assertFalse(dt.isSynthetic());
      Assertions.assertEquals("En", en.getName());
      Assertions.assertEquals(2, en.getLiterals().size());
      Assertions.assertEquals("L1", en.getLiterals().get(0).getName());
      Assertions.assertEquals("L2", en.getLiterals().get(1).getName());
      return dim;
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  protected DInformationModel loadComponentDim(final ResourceSet rs, final DmxArchetype at) {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("domain DM");
      _builder.newLine();
      _builder.append("information model DIM {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("component AComp {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("query q(p1 : AT) : AT");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("main entity A {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("x : AT");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      final DNamespace dimNS = this.dimParseHelper.parse(_builder, rs);
      this.assertNoParseErrors(dimNS, "dm");
      DModel _model = dimNS.getModel();
      final DInformationModel dim = ((DInformationModel) _model);
      Assertions.assertNotNull(dim);
      Assertions.assertEquals(1, dim.getAggregates().size());
      final DAggregate acomp = dim.getAggregates().get(0);
      Assertions.assertFalse(acomp.isSynthetic());
      Assertions.assertEquals("AComp", acomp.getName());
      Assertions.assertEquals(1, acomp.getFeatures().size());
      DFeature _get = acomp.getFeatures().get(0);
      final DQuery q = ((DQuery) _get);
      Assertions.assertFalse(q.isSynthetic());
      Assertions.assertEquals("q", q.getName());
      Assertions.assertEquals(at, q.getType());
      {
        Assertions.assertEquals(1, q.getParameters().size());
        DQueryParameter _get_1 = q.getParameters().get(0);
        final DQueryParameter p1 = ((DQueryParameter) _get_1);
        Assertions.assertFalse(p1.isSynthetic());
        Assertions.assertEquals("p1", p1.getName());
        Assertions.assertEquals(at, p1.getType());
      }
      Assertions.assertEquals(1, acomp.getTypes().size());
      DType _get_1 = acomp.getTypes().get(0);
      final DEntityType a = ((DEntityType) _get_1);
      Assertions.assertFalse(a.isSynthetic());
      Assertions.assertEquals("A", a.getName());
      {
        Assertions.assertEquals(1, a.getFeatures().size());
        DFeature _get_2 = a.getFeatures().get(0);
        final DAttribute x = ((DAttribute) _get_2);
        Assertions.assertFalse(x.isSynthetic());
        Assertions.assertEquals("x", x.getName());
        Assertions.assertEquals(at, x.getType());
      }
      return dim;
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void grabPrimitive() {
    try {
      final ResourceSet resourceSet = this.resourceSetProvider.get();
      final DmxModel dmx = this.loadDmx(resourceSet);
      DType _get = dmx.getTypes().get(0);
      final DmxArchetype at = ((DmxArchetype) _get);
      final DInformationModel dim = this.loadSimpleDim(resourceSet, at);
      DType _get_1 = dim.getTypes().get(0);
      final DPrimitive dt = ((DPrimitive) _get_1);
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("system SM");
      _builder.newLine();
      _builder.append("base information model SM1 {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("grab primitive DM.DT as ST");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      final DNamespace smNS = this.simParseHelper.parse(_builder, resourceSet);
      this.assertNoParseErrors(smNS, "sm");
      DModel _model = smNS.getModel();
      final SInformationModel sm = ((SInformationModel) _model);
      Assertions.assertNotNull(sm);
      Assertions.assertEquals(2, sm.getTypes().size());
      DType _get_2 = sm.getTypes().get(0);
      final SPrimitiveDeduction stDeduction = ((SPrimitiveDeduction) _get_2);
      Assertions.assertFalse(stDeduction.isSynthetic());
      DDeductionRule _deductionRule = stDeduction.getDeductionRule();
      Assertions.assertTrue((_deductionRule instanceof SGrabRule));
      DType _get_3 = sm.getTypes().get(1);
      final DPrimitive st = ((DPrimitive) _get_3);
      Assertions.assertEquals("ST", st.getName());
      Assertions.assertTrue(st.isSynthetic());
      Assertions.assertEquals(stDeduction, st.getDeducedFrom());
      Assertions.assertEquals(dt, st.getDeducedFrom().getDeductionRule().getSource());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void grabEnumeration() {
    try {
      final ResourceSet resourceSet = this.resourceSetProvider.get();
      final DmxModel dmx = this.loadDmx(resourceSet);
      DType _get = dmx.getTypes().get(0);
      final DmxArchetype at = ((DmxArchetype) _get);
      final DInformationModel dim = this.loadSimpleDim(resourceSet, at);
      DType _get_1 = dim.getTypes().get(1);
      final DEnumeration en = ((DEnumeration) _get_1);
      final DLiteral l1 = en.getLiterals().get(0);
      final DLiteral l2 = en.getLiterals().get(1);
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("system SM");
      _builder.newLine();
      _builder.append("base information model SM1 {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("grab enumeration DM.En as SEn1 { add L3 }");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("grab enumeration DM.En as SEn2 { grab L2 as L0 }");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      final DNamespace smNS = this.simParseHelper.parse(_builder, resourceSet);
      this.assertNoParseErrors(smNS, "sm");
      DModel _model = smNS.getModel();
      final SInformationModel sm = ((SInformationModel) _model);
      Assertions.assertNotNull(sm);
      Assertions.assertEquals(4, sm.getTypes().size());
      DType _get_2 = sm.getTypes().get(0);
      final SEnumerationDeduction sen1Deduction = ((SEnumerationDeduction) _get_2);
      Assertions.assertFalse(sen1Deduction.isSynthetic());
      DDeductionRule _deductionRule = sen1Deduction.getDeductionRule();
      Assertions.assertTrue((_deductionRule instanceof SGrabRule));
      DType _get_3 = sm.getTypes().get(1);
      final SEnumerationDeduction sen2Deduction = ((SEnumerationDeduction) _get_3);
      Assertions.assertFalse(sen2Deduction.isSynthetic());
      DDeductionRule _deductionRule_1 = sen2Deduction.getDeductionRule();
      Assertions.assertTrue((_deductionRule_1 instanceof SGrabRule));
      {
        DType _get_4 = sm.getTypes().get(2);
        final DEnumeration sen1 = ((DEnumeration) _get_4);
        Assertions.assertEquals("SEn1", sen1.getName());
        Assertions.assertTrue(sen1.isSynthetic());
        Assertions.assertEquals(sen1Deduction, sen1.getDeducedFrom());
        Assertions.assertEquals(en, sen1.getDeducedFrom().getDeductionRule().getSource());
        Assertions.assertEquals(3, sen1.getLiterals().size());
        final DLiteral sl1 = sen1.getLiterals().get(0);
        Assertions.assertEquals("L1", sl1.getName());
        IDeductionDefinition _deducedFrom = sl1.getDeducedFrom();
        final SImplicitElementDeduction sl1Deduction = ((SImplicitElementDeduction) _deducedFrom);
        DDeductionRule _deductionRule_2 = sl1Deduction.getDeductionRule();
        Assertions.assertTrue((_deductionRule_2 instanceof SGrabRule));
        Assertions.assertEquals(l1, sl1Deduction.getDeductionRule().getSource());
        Assertions.assertEquals("L2", sen1.getLiterals().get(1).getName());
        final DLiteral sl3 = sen1.getLiterals().get(2);
        Assertions.assertEquals("L3", sl3.getName());
        Assertions.assertNull(sl3.getDeducedFrom());
      }
      {
        DType _get_4 = sm.getTypes().get(3);
        final DEnumeration sen2 = ((DEnumeration) _get_4);
        Assertions.assertEquals("SEn2", sen2.getName());
        Assertions.assertTrue(sen2.isSynthetic());
        Assertions.assertEquals(sen2Deduction, sen2.getDeducedFrom());
        Assertions.assertEquals(en, sen2.getDeducedFrom().getDeductionRule().getSource());
        Assertions.assertEquals(1, sen2.getLiterals().size());
        final DLiteral sl0 = sen2.getLiterals().get(0);
        Assertions.assertEquals("L0", sl0.getName());
        IDeductionDefinition _deducedFrom = sl0.getDeducedFrom();
        final SLiteralDeduction sl0Deduction = ((SLiteralDeduction) _deducedFrom);
        DDeductionRule _deductionRule_2 = sl0Deduction.getDeductionRule();
        Assertions.assertTrue((_deductionRule_2 instanceof SGrabRule));
        Assertions.assertEquals(l2, sl0Deduction.getDeductionRule().getSource());
      }
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void grabEntity() {
    try {
      final ResourceSet resourceSet = this.resourceSetProvider.get();
      final DmxModel dmx = this.loadDmx(resourceSet);
      DType _get = dmx.getTypes().get(0);
      final DmxArchetype at = ((DmxArchetype) _get);
      final DInformationModel dim = this.loadComponentDim(resourceSet, at);
      final DAggregate acomp = dim.getAggregates().get(0);
      DType _get_1 = acomp.getTypes().get(0);
      final DEntityType a = ((DEntityType) _get_1);
      DFeature _get_2 = a.getFeatures().get(0);
      final DAttribute x = ((DAttribute) _get_2);
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("system SM");
      _builder.newLine();
      _builder.append("core information model SM1 {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("grab primitive dm.types.AT as ST");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("grab root entity DM.A as SMA1 { add y : ST}");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("grab root entity DM.A as SMA2 { grab x}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      final DNamespace smNS = this.simParseHelper.parse(_builder, resourceSet);
      this.assertNoParseErrors(smNS, "sm");
      DModel _model = smNS.getModel();
      final SInformationModel sm = ((SInformationModel) _model);
      Assertions.assertNotNull(sm);
      Assertions.assertEquals(6, sm.getTypes().size());
      DType _get_3 = sm.getTypes().get(0);
      final SPrimitiveDeduction stDeduction = ((SPrimitiveDeduction) _get_3);
      Assertions.assertFalse(stDeduction.isSynthetic());
      DDeductionRule _deductionRule = stDeduction.getDeductionRule();
      Assertions.assertTrue((_deductionRule instanceof SGrabRule));
      DType _get_4 = sm.getTypes().get(1);
      final SEntityTypeDeduction sma1Deduction = ((SEntityTypeDeduction) _get_4);
      Assertions.assertFalse(sma1Deduction.isSynthetic());
      DDeductionRule _deductionRule_1 = sma1Deduction.getDeductionRule();
      Assertions.assertTrue((_deductionRule_1 instanceof SGrabRule));
      DType _get_5 = sm.getTypes().get(2);
      final SEntityTypeDeduction sma2Deduction = ((SEntityTypeDeduction) _get_5);
      Assertions.assertFalse(sma2Deduction.isSynthetic());
      DDeductionRule _deductionRule_2 = sma2Deduction.getDeductionRule();
      Assertions.assertTrue((_deductionRule_2 instanceof SGrabRule));
      DType _get_6 = sm.getTypes().get(3);
      final DPrimitive st = ((DPrimitive) _get_6);
      Assertions.assertEquals("ST", st.getName());
      Assertions.assertTrue(st.isSynthetic());
      Assertions.assertEquals(stDeduction, st.getDeducedFrom());
      Assertions.assertEquals(at, st.getDeducedFrom().getDeductionRule().getSource());
      DType _get_7 = sm.getTypes().get(4);
      final DEntityType sma1 = ((DEntityType) _get_7);
      Assertions.assertEquals("SMA1", sma1.getName());
      Assertions.assertTrue(sma1.isSynthetic());
      Assertions.assertEquals(sma1Deduction, sma1.getDeducedFrom());
      Assertions.assertEquals(a, sma1.getDeducedFrom().getDeductionRule().getSource());
      {
        Assertions.assertEquals(2, sma1.getFeatures().size());
        DFeature _get_8 = sma1.getFeatures().get(0);
        final DAttribute smx = ((DAttribute) _get_8);
        Assertions.assertTrue(smx.isSynthetic());
        Assertions.assertEquals("x", smx.getName());
        Assertions.assertEquals(st, smx.getType());
        IDeductionDefinition _deducedFrom = smx.getDeducedFrom();
        final SImplicitElementDeduction smxDeduction = ((SImplicitElementDeduction) _deducedFrom);
        DDeductionRule _deductionRule_3 = smxDeduction.getDeductionRule();
        Assertions.assertTrue((_deductionRule_3 instanceof SGrabRule));
        Assertions.assertEquals(x, smx.getDeducedFrom().getDeductionRule().getSource());
        DFeature _get_9 = sma1.getFeatures().get(1);
        final DAttribute smy = ((DAttribute) _get_9);
        Assertions.assertTrue(smy.isSynthetic());
        Assertions.assertEquals("y", smy.getName());
        Assertions.assertEquals(st, smy.getType());
        Assertions.assertNull(smy.getDeducedFrom());
      }
      DType _get_8 = sm.getTypes().get(5);
      final DEntityType sma2 = ((DEntityType) _get_8);
      Assertions.assertEquals("SMA2", sma2.getName());
      Assertions.assertTrue(sma2.isSynthetic());
      Assertions.assertEquals(sma2Deduction, sma2.getDeducedFrom());
      Assertions.assertEquals(a, sma2.getDeducedFrom().getDeductionRule().getSource());
      {
        Assertions.assertEquals(1, sma2.getFeatures().size());
        DFeature _get_9 = sma2.getFeatures().get(0);
        final DAttribute smx = ((DAttribute) _get_9);
        Assertions.assertTrue(smx.isSynthetic());
        Assertions.assertEquals("x", smx.getName());
        Assertions.assertEquals(st, smx.getType());
        IDeductionDefinition _deducedFrom = smx.getDeducedFrom();
        final SFeatureDeduction smxDeduction = ((SFeatureDeduction) _deducedFrom);
        DDeductionRule _deductionRule_3 = smxDeduction.getDeductionRule();
        Assertions.assertTrue((_deductionRule_3 instanceof SGrabRule));
        Assertions.assertEquals(x, smx.getDeducedFrom().getDeductionRule().getSource());
      }
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void grabQuery() {
    try {
      final ResourceSet resourceSet = this.resourceSetProvider.get();
      final DmxModel dmx = this.loadDmx(resourceSet);
      DType _get = dmx.getTypes().get(0);
      final DmxArchetype at = ((DmxArchetype) _get);
      final DInformationModel dim = this.loadComponentDim(resourceSet, at);
      final DAggregate acomp = dim.getAggregates().get(0);
      DFeature _get_1 = acomp.getFeatures().get(0);
      final DQuery q = ((DQuery) _get_1);
      DQueryParameter _get_2 = q.getParameters().get(0);
      final DQueryParameter p1 = ((DQueryParameter) _get_2);
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("system SM");
      _builder.newLine();
      _builder.append("core information model SM1 {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("grab primitive dm.types.AT as ST");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("grab aggregate DM.AComp as SAggr {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("grab query q as sq1 (add p2 : ST)");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("grab query q as sq2 (grab p1 as p0)");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      final DNamespace smNS = this.simParseHelper.parse(_builder, resourceSet);
      this.assertNoParseErrors(smNS, "sm");
      DModel _model = smNS.getModel();
      final SInformationModel sm = ((SInformationModel) _model);
      Assertions.assertNotNull(sm);
      Assertions.assertEquals(2, sm.getTypes().size());
      DType _get_3 = sm.getTypes().get(0);
      final SPrimitiveDeduction stDeduction = ((SPrimitiveDeduction) _get_3);
      Assertions.assertFalse(stDeduction.isSynthetic());
      DDeductionRule _deductionRule = stDeduction.getDeductionRule();
      Assertions.assertTrue((_deductionRule instanceof SGrabRule));
      DType _get_4 = sm.getTypes().get(1);
      final DPrimitive st = ((DPrimitive) _get_4);
      Assertions.assertEquals("ST", st.getName());
      Assertions.assertTrue(st.isSynthetic());
      Assertions.assertEquals(stDeduction, st.getDeducedFrom());
      Assertions.assertEquals(at, st.getDeducedFrom().getDeductionRule().getSource());
      Assertions.assertEquals(2, sm.getAggregates().size());
      DAggregate _get_5 = sm.getAggregates().get(0);
      final SAggregateDeduction sAggrDeduction = ((SAggregateDeduction) _get_5);
      Assertions.assertFalse(sAggrDeduction.isSynthetic());
      DDeductionRule _deductionRule_1 = sAggrDeduction.getDeductionRule();
      Assertions.assertTrue((_deductionRule_1 instanceof SGrabAggregateRule));
      Assertions.assertEquals(2, sAggrDeduction.getFeatures().size());
      DFeature _get_6 = sAggrDeduction.getFeatures().get(0);
      final SQueryDeduction sq1Deduction = ((SQueryDeduction) _get_6);
      DFeature _get_7 = sAggrDeduction.getFeatures().get(1);
      final SQueryDeduction sq2Deduction = ((SQueryDeduction) _get_7);
      DAggregate _get_8 = sm.getAggregates().get(1);
      final DAggregate sAggr = ((DAggregate) _get_8);
      Assertions.assertTrue(sAggr.isSynthetic());
      Assertions.assertEquals(sAggrDeduction, sAggr.getDeducedFrom());
      Assertions.assertEquals(acomp, sAggr.getDeducedFrom().getDeductionRule().getSource());
      Assertions.assertEquals(2, sAggr.getFeatures().size());
      DFeature _get_9 = sAggr.getFeatures().get(0);
      final DQuery sq1 = ((DQuery) _get_9);
      Assertions.assertEquals("sq1", sq1.getName());
      Assertions.assertTrue(sq1.isSynthetic());
      Assertions.assertEquals(sq1Deduction, sq1.getDeducedFrom());
      Assertions.assertEquals(q, sq1.getDeducedFrom().getDeductionRule().getSource());
      {
        Assertions.assertEquals(2, sq1.getParameters().size());
        DQueryParameter _get_10 = sq1.getParameters().get(0);
        final DQueryParameter sp1 = ((DQueryParameter) _get_10);
        Assertions.assertTrue(sp1.isSynthetic());
        Assertions.assertEquals("p1", sp1.getName());
        Assertions.assertEquals(st, sp1.getType());
        IDeductionDefinition _deducedFrom = sp1.getDeducedFrom();
        final SImplicitElementDeduction sp1Deduction = ((SImplicitElementDeduction) _deducedFrom);
        DDeductionRule _deductionRule_2 = sp1Deduction.getDeductionRule();
        Assertions.assertTrue((_deductionRule_2 instanceof SGrabRule));
        Assertions.assertEquals(p1, sp1.getDeducedFrom().getDeductionRule().getSource());
        DQueryParameter _get_11 = sq1.getParameters().get(1);
        final DQueryParameter sp2 = ((DQueryParameter) _get_11);
        Assertions.assertTrue(sp2.isSynthetic());
        Assertions.assertEquals("p2", sp2.getName());
        Assertions.assertEquals(st, sp2.getType());
        Assertions.assertNull(sp2.getDeducedFrom());
      }
      DFeature _get_10 = sAggr.getFeatures().get(1);
      final DQuery sq2 = ((DQuery) _get_10);
      Assertions.assertEquals("sq2", sq2.getName());
      Assertions.assertTrue(sq2.isSynthetic());
      Assertions.assertEquals(sq2Deduction, sq2.getDeducedFrom());
      Assertions.assertEquals(q, sq2.getDeducedFrom().getDeductionRule().getSource());
      {
        Assertions.assertEquals(1, sq2.getParameters().size());
        DQueryParameter _get_11 = sq2.getParameters().get(0);
        final DQueryParameter sp0 = ((DQueryParameter) _get_11);
        Assertions.assertTrue(sp0.isSynthetic());
        Assertions.assertEquals("p0", sp0.getName());
        Assertions.assertEquals(st, sp0.getType());
        IDeductionDefinition _deducedFrom = sp0.getDeducedFrom();
        final SQueryParameterDeduction sp0Deduction = ((SQueryParameterDeduction) _deducedFrom);
        DDeductionRule _deductionRule_2 = sp0Deduction.getDeductionRule();
        Assertions.assertTrue((_deductionRule_2 instanceof SGrabRule));
        Assertions.assertEquals(p1, sp0.getDeducedFrom().getDeductionRule().getSource());
      }
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void grabAggregate() {
    try {
      final ResourceSet resourceSet = this.resourceSetProvider.get();
      final DmxModel dmx = this.loadDmx(resourceSet);
      DType _get = dmx.getTypes().get(0);
      final DmxArchetype at = ((DmxArchetype) _get);
      final DInformationModel dim = this.loadComponentDim(resourceSet, at);
      final DAggregate acomp = dim.getAggregates().get(0);
      DType _get_1 = acomp.getTypes().get(0);
      final DEntityType a = ((DEntityType) _get_1);
      DFeature _get_2 = a.getFeatures().get(0);
      final DAttribute x = ((DAttribute) _get_2);
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("system SM");
      _builder.newLine();
      _builder.append("core information model SM1 {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("grab primitive dm.types.AT as ST");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("grab aggregate DM.AComp as SAggr {}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      final DNamespace smNS = this.simParseHelper.parse(_builder, resourceSet);
      this.assertNoParseErrors(smNS, "sm");
      DModel _model = smNS.getModel();
      final SInformationModel sm = ((SInformationModel) _model);
      Assertions.assertNotNull(sm);
      Assertions.assertEquals(2, sm.getTypes().size());
      DType _get_3 = sm.getTypes().get(0);
      final SPrimitiveDeduction stDeduction = ((SPrimitiveDeduction) _get_3);
      Assertions.assertFalse(stDeduction.isSynthetic());
      DDeductionRule _deductionRule = stDeduction.getDeductionRule();
      Assertions.assertTrue((_deductionRule instanceof SGrabRule));
      DType _get_4 = sm.getTypes().get(1);
      final DPrimitive st = ((DPrimitive) _get_4);
      Assertions.assertEquals("ST", st.getName());
      Assertions.assertTrue(st.isSynthetic());
      Assertions.assertEquals(stDeduction, st.getDeducedFrom());
      Assertions.assertEquals(at, st.getDeducedFrom().getDeductionRule().getSource());
      Assertions.assertEquals(2, sm.getAggregates().size());
      DAggregate _get_5 = sm.getAggregates().get(0);
      final SAggregateDeduction sAggrDeduction = ((SAggregateDeduction) _get_5);
      Assertions.assertFalse(sAggrDeduction.isSynthetic());
      DDeductionRule _deductionRule_1 = sAggrDeduction.getDeductionRule();
      Assertions.assertTrue((_deductionRule_1 instanceof SGrabAggregateRule));
      DAggregate _get_6 = sm.getAggregates().get(1);
      final DAggregate sAggr = ((DAggregate) _get_6);
      Assertions.assertTrue(sAggr.isSynthetic());
      Assertions.assertEquals(sAggrDeduction, sAggr.getDeducedFrom());
      Assertions.assertEquals(acomp, sAggr.getDeducedFrom().getDeductionRule().getSource());
      Assertions.assertEquals(1, sAggr.getTypes().size());
      DType _get_7 = sAggr.getTypes().get(0);
      final DEntityType sma = ((DEntityType) _get_7);
      Assertions.assertEquals("A", sma.getName());
      Assertions.assertTrue(sma.isSynthetic());
      IDeductionDefinition _deducedFrom = sma.getDeducedFrom();
      final SImplicitElementDeduction smaDeduction = ((SImplicitElementDeduction) _deducedFrom);
      DDeductionRule _deductionRule_2 = smaDeduction.getDeductionRule();
      Assertions.assertTrue((_deductionRule_2 instanceof SGrabRule));
      Assertions.assertEquals(a, sma.getDeducedFrom().getDeductionRule().getSource());
      Assertions.assertEquals(1, sma.getFeatures().size());
      DFeature _get_8 = sma.getFeatures().get(0);
      final DAttribute smx = ((DAttribute) _get_8);
      Assertions.assertTrue(smx.isSynthetic());
      Assertions.assertEquals("x", smx.getName());
      Assertions.assertEquals(st, smx.getType());
      IDeductionDefinition _deducedFrom_1 = smx.getDeducedFrom();
      final SImplicitElementDeduction smxDeduction = ((SImplicitElementDeduction) _deducedFrom_1);
      DDeductionRule _deductionRule_3 = smxDeduction.getDeductionRule();
      Assertions.assertTrue((_deductionRule_3 instanceof SGrabRule));
      Assertions.assertEquals(x, smx.getDeducedFrom().getDeductionRule().getSource());
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  protected void assertNoParseErrors(final DNamespace ns, final String name) {
    Assertions.assertNotNull(ns);
    final EList<Resource.Diagnostic> errors = ns.eResource().getErrors();
    boolean _isEmpty = errors.isEmpty();
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("Unexpected errors in ");
    _builder.append(name);
    _builder.append(" \': ");
    String _join = IterableExtensions.join(errors, ", ");
    _builder.append(_join);
    Assertions.assertTrue(_isEmpty, _builder.toString());
  }
}
