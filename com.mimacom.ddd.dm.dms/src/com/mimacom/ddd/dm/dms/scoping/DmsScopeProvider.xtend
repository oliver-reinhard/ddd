/*
 * generated by Xtext 2.16.0
 */
package com.mimacom.ddd.dm.dms.scoping

import com.google.common.collect.Lists
import com.mimacom.ddd.dm.base.BasePackage
import com.mimacom.ddd.dm.base.DAggregate
import com.mimacom.ddd.dm.base.DAssociation
import com.mimacom.ddd.dm.base.DAttribute
import com.mimacom.ddd.dm.base.DDetailType
import com.mimacom.ddd.dm.base.DDomain
import com.mimacom.ddd.dm.base.DFunction
import com.mimacom.ddd.dm.base.DIdentityType
import com.mimacom.ddd.dm.base.DQuery
import com.mimacom.ddd.dm.base.DQueryParameter
import com.mimacom.ddd.dm.base.DRelationship
import com.mimacom.ddd.dm.base.DRootType
import com.mimacom.ddd.dm.base.DServiceParameter
import com.mimacom.ddd.dm.base.IValueType
import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.EReference
import org.eclipse.xtext.EcoreUtil2
import org.eclipse.xtext.scoping.IScope
import org.eclipse.xtext.scoping.Scopes
import org.eclipse.xtext.scoping.impl.SimpleScope

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
class DmsScopeProvider extends AbstractDmsScopeProvider {
	
	val epackage = BasePackage.eINSTANCE

	override getScope(EObject context, EReference reference) {
		
		if (reference == epackage.DTypedMember_Type) {
			
			 val IScope scope = switch context {	
				DAttribute: getContainerTypesOfTypeScope(context, IValueType, true)
				DQuery: getLocalRootTypeScope(context, getContainerTypesOfTypeScope(context, IValueType, true))
				DAssociation: getContainerTypesOfTypeScope(context, DRootType, true)
				DQueryParameter: getContainerTypesOfTypeScope(context, IValueType, true)
				DServiceParameter: getContainerTypesOfTypeScope(context, IValueType, true)
//				DContext: getContainerTypesOfTypeScope(context, DType, true)
//				DNotification: getContainerTypesOfTypeScope(context, DType, true)
				DFunction: getContainerTypesOfTypeScope(context, IValueType, true)
				default:  IScope.NULLSCOPE
			}
			return new SimpleScope(super.getScope(context, reference), scope.allElements)  // TODO Replace: is not filtering result from super!.
			
		} else if (reference == epackage.DComplexType_SuperType) {
			
			return switch context {
				DRootType:  getIdentityTypeScope(context, DRootType)
				DRelationship: getIdentityTypeScope(context, DRelationship)
				DDetailType: getContainerTypesOfTypeScope(context, DDetailType, false)
				default:  IScope.NULLSCOPE
			}
			
//		} else if (reference == epackage.DDomainEvent_Trigger || reference == epackage.DNotification_Notified) {
//			val domain = EcoreUtil2.getContainerOfType(context, DDomain)
//			if (domain !== null) {
//				return Scopes.scopeFor(domain.actors, getImportedObjectsOfTypeScope(context, DActor))
//			}
		} 
		return super.getScope(context, reference)
	}
		
	def IScope getLocalRootTypeScope(DQuery query, IScope outerScope) {
		val aggregate = EcoreUtil2.getContainerOfType(query, DAggregate)
		if (aggregate?.root !== null) {
			return Scopes.scopeFor(Lists.newArrayList(aggregate.root), outerScope)	
		}
		return outerScope
	}
		
	def IScope getIdentityTypeScope(DIdentityType context, Class<?> type) {
		val domain = EcoreUtil2.getContainerOfType(context, DDomain)
		if (domain !==  null) {
			val list = Lists.newArrayList
			for (a:domain.aggregates) {
				val root = a.root
				if (root !== null && root !== context && type.isAssignableFrom(root.class) ) {
					list.add(root)
				}
			}
			return Scopes.scopeFor(list)
		}
		return IScope.NULLSCOPE
	}
}
