/**
 * generated by Xtext 2.16.0
 */
package com.mimacom.ddd.dm.dms.scoping;

import com.google.common.base.Objects;
import com.google.common.collect.Lists;
import com.mimacom.ddd.dm.base.BasePackage;
import com.mimacom.ddd.dm.base.DAggregate;
import com.mimacom.ddd.dm.base.DAssociation;
import com.mimacom.ddd.dm.base.DDetailType;
import com.mimacom.ddd.dm.base.DDomain;
import com.mimacom.ddd.dm.base.DIdentityType;
import com.mimacom.ddd.dm.base.DQuery;
import com.mimacom.ddd.dm.base.DQueryParameter;
import com.mimacom.ddd.dm.base.DRelationship;
import com.mimacom.ddd.dm.base.DRootType;
import com.mimacom.ddd.dm.base.DTypedMember;
import com.mimacom.ddd.dm.dms.scoping.AbstractDmsScopeProvider;
import java.util.ArrayList;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.xtext.EcoreUtil2;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.scoping.Scopes;

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
@SuppressWarnings("all")
public class DmsScopeProvider extends AbstractDmsScopeProvider {
  private final BasePackage epackage = BasePackage.eINSTANCE;
  
  @Override
  public IScope getScope(final EObject context, final EReference reference) {
    EReference _dTypedMember_Type = this.epackage.getDTypedMember_Type();
    boolean _equals = Objects.equal(reference, _dTypedMember_Type);
    if (_equals) {
      IScope _switchResult = null;
      boolean _matched = false;
      if (context instanceof DQuery) {
        _matched=true;
        _switchResult = this.getLocalRootTypeScope(((DTypedMember)context), this.getDefaultScopeForType(context, this.epackage.getIValueType()));
      }
      if (!_matched) {
        if (context instanceof DAssociation) {
          _matched=true;
          _switchResult = this.getDefaultScopeForType(context, this.epackage.getDRootType());
        }
      }
      if (!_matched) {
        if (context instanceof DQueryParameter) {
          _matched=true;
          _switchResult = this.getLocalRootTypeScope(((DTypedMember)context), this.getDefaultScopeForType(context, this.epackage.getIValueType()));
        }
      }
      if (!_matched) {
        _switchResult = this.getDefaultScopeForType(context, this.epackage.getIValueType());
      }
      final IScope scope = _switchResult;
      return scope;
    } else {
      EReference _dComplexType_SuperType = this.epackage.getDComplexType_SuperType();
      boolean _equals_1 = Objects.equal(reference, _dComplexType_SuperType);
      if (_equals_1) {
        IScope _switchResult_1 = null;
        boolean _matched_1 = false;
        if (context instanceof DRootType) {
          _matched_1=true;
          _switchResult_1 = this.getIdentityTypeScope(((DIdentityType)context), DRootType.class);
        }
        if (!_matched_1) {
          if (context instanceof DRelationship) {
            _matched_1=true;
            _switchResult_1 = this.getIdentityTypeScope(((DIdentityType)context), DRelationship.class);
          }
        }
        if (!_matched_1) {
          if (context instanceof DDetailType) {
            _matched_1=true;
            _switchResult_1 = this.getDefaultScopeForType(context, this.epackage.getDDetailType());
          }
        }
        if (!_matched_1) {
          _switchResult_1 = IScope.NULLSCOPE;
        }
        return _switchResult_1;
      }
    }
    return super.getScope(context, reference);
  }
  
  public IScope getLocalRootTypeScope(final DTypedMember context, final IScope outerScope) {
    final DAggregate aggregate = EcoreUtil2.<DAggregate>getContainerOfType(context, DAggregate.class);
    DIdentityType _root = null;
    if (aggregate!=null) {
      _root=aggregate.getRoot();
    }
    boolean _tripleNotEquals = (_root != null);
    if (_tripleNotEquals) {
      return Scopes.scopeFor(Lists.<DIdentityType>newArrayList(aggregate.getRoot()), outerScope);
    }
    return outerScope;
  }
  
  public IScope getIdentityTypeScope(final DIdentityType context, final Class<?> type) {
    final DDomain domain = EcoreUtil2.<DDomain>getContainerOfType(context, DDomain.class);
    if ((domain != null)) {
      final ArrayList<DIdentityType> list = Lists.<DIdentityType>newArrayList();
      EList<DAggregate> _aggregates = domain.getAggregates();
      for (final DAggregate a : _aggregates) {
        {
          final DIdentityType root = a.getRoot();
          if ((((root != null) && (root != context)) && type.isAssignableFrom(root.getClass()))) {
            list.add(root);
          }
        }
      }
      return Scopes.scopeFor(list);
    }
    return IScope.NULLSCOPE;
  }
}
