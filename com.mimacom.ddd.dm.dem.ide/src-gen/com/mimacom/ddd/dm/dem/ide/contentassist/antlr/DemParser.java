/*
 * generated by Xtext 2.16.0
 */
package com.mimacom.ddd.dm.dem.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import com.mimacom.ddd.dm.dem.ide.contentassist.antlr.internal.InternalDemParser;
import com.mimacom.ddd.dm.dem.services.DemGrammarAccess;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class DemParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(DemGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, DemGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getDDomainAccess().getAlternatives_5(), "rule__DDomain__Alternatives_5");
			builder.put(grammarAccess.getDActorAccess().getAlternatives(), "rule__DActor__Alternatives");
			builder.put(grammarAccess.getDExpressionAccess().getAlternatives(), "rule__DExpression__Alternatives");
			builder.put(grammarAccess.getDRichTextAccess().getAlternatives(), "rule__DRichText__Alternatives");
			builder.put(grammarAccess.getDAssignmentAccess().getAlternatives(), "rule__DAssignment__Alternatives");
			builder.put(grammarAccess.getDRelationalExpressionAccess().getAlternatives_1(), "rule__DRelationalExpression__Alternatives_1");
			builder.put(grammarAccess.getOpInstanceOfAccess().getAlternatives(), "rule__OpInstanceOf__Alternatives");
			builder.put(grammarAccess.getDUnaryOperationAccess().getAlternatives(), "rule__DUnaryOperation__Alternatives");
			builder.put(grammarAccess.getOpCastAccess().getAlternatives(), "rule__OpCast__Alternatives");
			builder.put(grammarAccess.getDTypedMemberReferenceAccess().getAlternatives_1(), "rule__DTypedMemberReference__Alternatives_1");
			builder.put(grammarAccess.getDTypedMemberReferenceAccess().getAlternatives_1_1_2(), "rule__DTypedMemberReference__Alternatives_1_1_2");
			builder.put(grammarAccess.getDPrimaryExpressionAccess().getAlternatives(), "rule__DPrimaryExpression__Alternatives");
			builder.put(grammarAccess.getDLiteralExpressionAccess().getAlternatives(), "rule__DLiteralExpression__Alternatives");
			builder.put(grammarAccess.getDSelfExpressionAccess().getAlternatives_1(), "rule__DSelfExpression__Alternatives_1");
			builder.put(grammarAccess.getDReturnExpressionAccess().getAlternatives_1(), "rule__DReturnExpression__Alternatives_1");
			builder.put(grammarAccess.getDRaiseExpressionAccess().getAlternatives_1(), "rule__DRaiseExpression__Alternatives_1");
			builder.put(grammarAccess.getOpConstructorAccess().getAlternatives(), "rule__OpConstructor__Alternatives");
			builder.put(grammarAccess.getMULTIPLICITYAccess().getAlternatives(), "rule__MULTIPLICITY__Alternatives");
			builder.put(grammarAccess.getDBooleanLiteralAccess().getAlternatives_1(), "rule__DBooleanLiteral__Alternatives_1");
			builder.put(grammarAccess.getDNilLiteralAccess().getAlternatives_1(), "rule__DNilLiteral__Alternatives_1");
			builder.put(grammarAccess.getDECIMALAccess().getAlternatives_3_0(), "rule__DECIMAL__Alternatives_3_0");
			builder.put(grammarAccess.getDECIMALAccess().getAlternatives_3_1(), "rule__DECIMAL__Alternatives_3_1");
			builder.put(grammarAccess.getOpOrAccess().getAlternatives(), "rule__OpOr__Alternatives");
			builder.put(grammarAccess.getOpAndAccess().getAlternatives(), "rule__OpAnd__Alternatives");
			builder.put(grammarAccess.getOpEqualityAccess().getAlternatives(), "rule__OpEquality__Alternatives");
			builder.put(grammarAccess.getOpCompareAccess().getAlternatives(), "rule__OpCompare__Alternatives");
			builder.put(grammarAccess.getOpOtherAccess().getAlternatives(), "rule__OpOther__Alternatives");
			builder.put(grammarAccess.getOpAddAccess().getAlternatives(), "rule__OpAdd__Alternatives");
			builder.put(grammarAccess.getOpMultiAccess().getAlternatives(), "rule__OpMulti__Alternatives");
			builder.put(grammarAccess.getOpUnaryAccess().getAlternatives(), "rule__OpUnary__Alternatives");
			builder.put(grammarAccess.getDDomainAccess().getGroup(), "rule__DDomain__Group__0");
			builder.put(grammarAccess.getDDomainAccess().getGroup_2(), "rule__DDomain__Group_2__0");
			builder.put(grammarAccess.getDImportAccess().getGroup(), "rule__DImport__Group__0");
			builder.put(grammarAccess.getDDomainEventAccess().getGroup(), "rule__DDomainEvent__Group__0");
			builder.put(grammarAccess.getDDomainEventAccess().getGroup_2(), "rule__DDomainEvent__Group_2__0");
			builder.put(grammarAccess.getDDomainEventAccess().getGroup_10(), "rule__DDomainEvent__Group_10__0");
			builder.put(grammarAccess.getDDomainEventAccess().getGroup_11(), "rule__DDomainEvent__Group_11__0");
			builder.put(grammarAccess.getDDomainEventAccess().getGroup_12(), "rule__DDomainEvent__Group_12__0");
			builder.put(grammarAccess.getDConditionAccess().getGroup(), "rule__DCondition__Group__0");
			builder.put(grammarAccess.getDConditionAccess().getGroup_1(), "rule__DCondition__Group_1__0");
			builder.put(grammarAccess.getDNotificationAccess().getGroup(), "rule__DNotification__Group__0");
			builder.put(grammarAccess.getDNotificationAccess().getGroup_1(), "rule__DNotification__Group_1__0");
			builder.put(grammarAccess.getDContextAccess().getGroup(), "rule__DContext__Group__0");
			builder.put(grammarAccess.getDContextAccess().getGroup_1(), "rule__DContext__Group_1__0");
			builder.put(grammarAccess.getDHumanAccess().getGroup(), "rule__DHuman__Group__0");
			builder.put(grammarAccess.getDHumanAccess().getGroup_3(), "rule__DHuman__Group_3__0");
			builder.put(grammarAccess.getDTimeAccess().getGroup(), "rule__DTime__Group__0");
			builder.put(grammarAccess.getDTimeAccess().getGroup_3(), "rule__DTime__Group_3__0");
			builder.put(grammarAccess.getDmxModelAccess().getGroup(), "rule__DmxModel__Group__0");
			builder.put(grammarAccess.getDmxModelAccess().getGroup_1(), "rule__DmxModel__Group_1__0");
			builder.put(grammarAccess.getDmxModelAccess().getGroup_2(), "rule__DmxModel__Group_2__0");
			builder.put(grammarAccess.getDRichTextAccess().getGroup_1(), "rule__DRichText__Group_1__0");
			builder.put(grammarAccess.getDRichTextAccess().getGroup_1_2(), "rule__DRichText__Group_1_2__0");
			builder.put(grammarAccess.getDAssignmentAccess().getGroup_0(), "rule__DAssignment__Group_0__0");
			builder.put(grammarAccess.getDOrExpressionAccess().getGroup(), "rule__DOrExpression__Group__0");
			builder.put(grammarAccess.getDOrExpressionAccess().getGroup_1(), "rule__DOrExpression__Group_1__0");
			builder.put(grammarAccess.getDOrExpressionAccess().getGroup_1_0(), "rule__DOrExpression__Group_1_0__0");
			builder.put(grammarAccess.getDOrExpressionAccess().getGroup_1_0_0(), "rule__DOrExpression__Group_1_0_0__0");
			builder.put(grammarAccess.getDAndExpressionAccess().getGroup(), "rule__DAndExpression__Group__0");
			builder.put(grammarAccess.getDAndExpressionAccess().getGroup_1(), "rule__DAndExpression__Group_1__0");
			builder.put(grammarAccess.getDAndExpressionAccess().getGroup_1_0(), "rule__DAndExpression__Group_1_0__0");
			builder.put(grammarAccess.getDAndExpressionAccess().getGroup_1_0_0(), "rule__DAndExpression__Group_1_0_0__0");
			builder.put(grammarAccess.getDEqualityExpressionAccess().getGroup(), "rule__DEqualityExpression__Group__0");
			builder.put(grammarAccess.getDEqualityExpressionAccess().getGroup_1(), "rule__DEqualityExpression__Group_1__0");
			builder.put(grammarAccess.getDEqualityExpressionAccess().getGroup_1_0(), "rule__DEqualityExpression__Group_1_0__0");
			builder.put(grammarAccess.getDEqualityExpressionAccess().getGroup_1_0_0(), "rule__DEqualityExpression__Group_1_0_0__0");
			builder.put(grammarAccess.getDRelationalExpressionAccess().getGroup(), "rule__DRelationalExpression__Group__0");
			builder.put(grammarAccess.getDRelationalExpressionAccess().getGroup_1_0(), "rule__DRelationalExpression__Group_1_0__0");
			builder.put(grammarAccess.getDRelationalExpressionAccess().getGroup_1_0_0(), "rule__DRelationalExpression__Group_1_0_0__0");
			builder.put(grammarAccess.getDRelationalExpressionAccess().getGroup_1_0_0_0(), "rule__DRelationalExpression__Group_1_0_0_0__0");
			builder.put(grammarAccess.getDRelationalExpressionAccess().getGroup_1_1(), "rule__DRelationalExpression__Group_1_1__0");
			builder.put(grammarAccess.getDRelationalExpressionAccess().getGroup_1_1_0(), "rule__DRelationalExpression__Group_1_1_0__0");
			builder.put(grammarAccess.getDRelationalExpressionAccess().getGroup_1_1_0_0(), "rule__DRelationalExpression__Group_1_1_0_0__0");
			builder.put(grammarAccess.getDOtherOperatorExpressionAccess().getGroup(), "rule__DOtherOperatorExpression__Group__0");
			builder.put(grammarAccess.getDOtherOperatorExpressionAccess().getGroup_1(), "rule__DOtherOperatorExpression__Group_1__0");
			builder.put(grammarAccess.getDOtherOperatorExpressionAccess().getGroup_1_0(), "rule__DOtherOperatorExpression__Group_1_0__0");
			builder.put(grammarAccess.getDOtherOperatorExpressionAccess().getGroup_1_0_0(), "rule__DOtherOperatorExpression__Group_1_0_0__0");
			builder.put(grammarAccess.getDAdditiveExpressionAccess().getGroup(), "rule__DAdditiveExpression__Group__0");
			builder.put(grammarAccess.getDAdditiveExpressionAccess().getGroup_1(), "rule__DAdditiveExpression__Group_1__0");
			builder.put(grammarAccess.getDAdditiveExpressionAccess().getGroup_1_0(), "rule__DAdditiveExpression__Group_1_0__0");
			builder.put(grammarAccess.getDAdditiveExpressionAccess().getGroup_1_0_0(), "rule__DAdditiveExpression__Group_1_0_0__0");
			builder.put(grammarAccess.getDMultiplicativeExpressionAccess().getGroup(), "rule__DMultiplicativeExpression__Group__0");
			builder.put(grammarAccess.getDMultiplicativeExpressionAccess().getGroup_1(), "rule__DMultiplicativeExpression__Group_1__0");
			builder.put(grammarAccess.getDMultiplicativeExpressionAccess().getGroup_1_0(), "rule__DMultiplicativeExpression__Group_1_0__0");
			builder.put(grammarAccess.getDMultiplicativeExpressionAccess().getGroup_1_0_0(), "rule__DMultiplicativeExpression__Group_1_0_0__0");
			builder.put(grammarAccess.getDUnaryOperationAccess().getGroup_0(), "rule__DUnaryOperation__Group_0__0");
			builder.put(grammarAccess.getDCastExpressionAccess().getGroup(), "rule__DCastExpression__Group__0");
			builder.put(grammarAccess.getDCastExpressionAccess().getGroup_1(), "rule__DCastExpression__Group_1__0");
			builder.put(grammarAccess.getDCastExpressionAccess().getGroup_1_0(), "rule__DCastExpression__Group_1_0__0");
			builder.put(grammarAccess.getDCastExpressionAccess().getGroup_1_0_0(), "rule__DCastExpression__Group_1_0_0__0");
			builder.put(grammarAccess.getDTypedMemberReferenceAccess().getGroup(), "rule__DTypedMemberReference__Group__0");
			builder.put(grammarAccess.getDTypedMemberReferenceAccess().getGroup_1_0(), "rule__DTypedMemberReference__Group_1_0__0");
			builder.put(grammarAccess.getDTypedMemberReferenceAccess().getGroup_1_0_0(), "rule__DTypedMemberReference__Group_1_0_0__0");
			builder.put(grammarAccess.getDTypedMemberReferenceAccess().getGroup_1_0_0_0(), "rule__DTypedMemberReference__Group_1_0_0_0__0");
			builder.put(grammarAccess.getDTypedMemberReferenceAccess().getGroup_1_1(), "rule__DTypedMemberReference__Group_1_1__0");
			builder.put(grammarAccess.getDTypedMemberReferenceAccess().getGroup_1_1_0(), "rule__DTypedMemberReference__Group_1_1_0__0");
			builder.put(grammarAccess.getDTypedMemberReferenceAccess().getGroup_1_1_0_0(), "rule__DTypedMemberReference__Group_1_1_0_0__0");
			builder.put(grammarAccess.getDTypedMemberReferenceAccess().getGroup_1_1_2_0(), "rule__DTypedMemberReference__Group_1_1_2_0__0");
			builder.put(grammarAccess.getDTypedMemberReferenceAccess().getGroup_1_1_2_0_1(), "rule__DTypedMemberReference__Group_1_1_2_0_1__0");
			builder.put(grammarAccess.getDTypedMemberReferenceAccess().getGroup_1_1_2_0_1_1(), "rule__DTypedMemberReference__Group_1_1_2_0_1_1__0");
			builder.put(grammarAccess.getDSelfExpressionAccess().getGroup(), "rule__DSelfExpression__Group__0");
			builder.put(grammarAccess.getDReturnExpressionAccess().getGroup(), "rule__DReturnExpression__Group__0");
			builder.put(grammarAccess.getDRaiseExpressionAccess().getGroup(), "rule__DRaiseExpression__Group__0");
			builder.put(grammarAccess.getDParenthesizedExpressionAccess().getGroup(), "rule__DParenthesizedExpression__Group__0");
			builder.put(grammarAccess.getDFunctionCallAccess().getGroup(), "rule__DFunctionCall__Group__0");
			builder.put(grammarAccess.getDFunctionCallAccess().getGroup_3(), "rule__DFunctionCall__Group_3__0");
			builder.put(grammarAccess.getDFunctionCallAccess().getGroup_3_1(), "rule__DFunctionCall__Group_3_1__0");
			builder.put(grammarAccess.getDConstructorCallAccess().getGroup(), "rule__DConstructorCall__Group__0");
			builder.put(grammarAccess.getDConstructorCallAccess().getGroup_3(), "rule__DConstructorCall__Group_3__0");
			builder.put(grammarAccess.getDConstructorCallAccess().getGroup_3_1(), "rule__DConstructorCall__Group_3_1__0");
			builder.put(grammarAccess.getDConstructorCallAccess().getGroup_3_1_1(), "rule__DConstructorCall__Group_3_1_1__0");
			builder.put(grammarAccess.getDContextReferenceAccess().getGroup(), "rule__DContextReference__Group__0");
			builder.put(grammarAccess.getDIfExpressionAccess().getGroup(), "rule__DIfExpression__Group__0");
			builder.put(grammarAccess.getDIfExpressionAccess().getGroup_5(), "rule__DIfExpression__Group_5__0");
			builder.put(grammarAccess.getDForLoopExpressionAccess().getGroup(), "rule__DForLoopExpression__Group__0");
			builder.put(grammarAccess.getDForLoopExpressionAccess().getGroup_0(), "rule__DForLoopExpression__Group_0__0");
			builder.put(grammarAccess.getDForLoopExpressionAccess().getGroup_0_0(), "rule__DForLoopExpression__Group_0_0__0");
			builder.put(grammarAccess.getDMultiplicityAccess().getGroup(), "rule__DMultiplicity__Group__0");
			builder.put(grammarAccess.getDBooleanLiteralAccess().getGroup(), "rule__DBooleanLiteral__Group__0");
			builder.put(grammarAccess.getDStringLiteralAccess().getGroup(), "rule__DStringLiteral__Group__0");
			builder.put(grammarAccess.getDNaturalLiteralAccess().getGroup(), "rule__DNaturalLiteral__Group__0");
			builder.put(grammarAccess.getDDecimalLiteralAccess().getGroup(), "rule__DDecimalLiteral__Group__0");
			builder.put(grammarAccess.getDNilLiteralAccess().getGroup(), "rule__DNilLiteral__Group__0");
			builder.put(grammarAccess.getDECIMALAccess().getGroup(), "rule__DECIMAL__Group__0");
			builder.put(grammarAccess.getDECIMALAccess().getGroup_3(), "rule__DECIMAL__Group_3__0");
			builder.put(grammarAccess.getDQualifiedNameWithWildcardAccess().getGroup(), "rule__DQualifiedNameWithWildcard__Group__0");
			builder.put(grammarAccess.getDQualifiedNameAccess().getGroup(), "rule__DQualifiedName__Group__0");
			builder.put(grammarAccess.getDQualifiedNameAccess().getGroup_1(), "rule__DQualifiedName__Group_1__0");
			builder.put(grammarAccess.getDDomainAccess().getNameAssignment_1(), "rule__DDomain__NameAssignment_1");
			builder.put(grammarAccess.getDDomainAccess().getAliasesAssignment_2_1(), "rule__DDomain__AliasesAssignment_2_1");
			builder.put(grammarAccess.getDDomainAccess().getDescriptionAssignment_3(), "rule__DDomain__DescriptionAssignment_3");
			builder.put(grammarAccess.getDDomainAccess().getImportsAssignment_4(), "rule__DDomain__ImportsAssignment_4");
			builder.put(grammarAccess.getDDomainAccess().getEventsAssignment_5_0(), "rule__DDomain__EventsAssignment_5_0");
			builder.put(grammarAccess.getDDomainAccess().getActorsAssignment_5_1(), "rule__DDomain__ActorsAssignment_5_1");
			builder.put(grammarAccess.getDImportAccess().getImportedNamespaceAssignment_1(), "rule__DImport__ImportedNamespaceAssignment_1");
			builder.put(grammarAccess.getDDomainEventAccess().getNameAssignment_1(), "rule__DDomainEvent__NameAssignment_1");
			builder.put(grammarAccess.getDDomainEventAccess().getAliasesAssignment_2_1(), "rule__DDomainEvent__AliasesAssignment_2_1");
			builder.put(grammarAccess.getDDomainEventAccess().getDescriptionAssignment_3(), "rule__DDomainEvent__DescriptionAssignment_3");
			builder.put(grammarAccess.getDDomainEventAccess().getContextAssignment_6(), "rule__DDomainEvent__ContextAssignment_6");
			builder.put(grammarAccess.getDDomainEventAccess().getTriggerAssignment_9(), "rule__DDomainEvent__TriggerAssignment_9");
			builder.put(grammarAccess.getDDomainEventAccess().getNotificationsAssignment_10_1(), "rule__DDomainEvent__NotificationsAssignment_10_1");
			builder.put(grammarAccess.getDDomainEventAccess().getBeforeAssignment_11_2(), "rule__DDomainEvent__BeforeAssignment_11_2");
			builder.put(grammarAccess.getDDomainEventAccess().getAfterAssignment_12_2(), "rule__DDomainEvent__AfterAssignment_12_2");
			builder.put(grammarAccess.getDConditionAccess().getNameAssignment_0(), "rule__DCondition__NameAssignment_0");
			builder.put(grammarAccess.getDConditionAccess().getAliasesAssignment_1_1(), "rule__DCondition__AliasesAssignment_1_1");
			builder.put(grammarAccess.getDConditionAccess().getConditionAssignment_3(), "rule__DCondition__ConditionAssignment_3");
			builder.put(grammarAccess.getDConditionAccess().getDescriptionAssignment_4(), "rule__DCondition__DescriptionAssignment_4");
			builder.put(grammarAccess.getDNotificationAccess().getNameAssignment_0(), "rule__DNotification__NameAssignment_0");
			builder.put(grammarAccess.getDNotificationAccess().getAliasesAssignment_1_1(), "rule__DNotification__AliasesAssignment_1_1");
			builder.put(grammarAccess.getDNotificationAccess().getTypeAssignment_3(), "rule__DNotification__TypeAssignment_3");
			builder.put(grammarAccess.getDNotificationAccess().getMultiplicityAssignment_4(), "rule__DNotification__MultiplicityAssignment_4");
			builder.put(grammarAccess.getDNotificationAccess().getNotifiedAssignment_7(), "rule__DNotification__NotifiedAssignment_7");
			builder.put(grammarAccess.getDNotificationAccess().getDescriptionAssignment_8(), "rule__DNotification__DescriptionAssignment_8");
			builder.put(grammarAccess.getDContextAccess().getNameAssignment_0(), "rule__DContext__NameAssignment_0");
			builder.put(grammarAccess.getDContextAccess().getAliasesAssignment_1_1(), "rule__DContext__AliasesAssignment_1_1");
			builder.put(grammarAccess.getDContextAccess().getTypeAssignment_3(), "rule__DContext__TypeAssignment_3");
			builder.put(grammarAccess.getDContextAccess().getMultiplicityAssignment_4(), "rule__DContext__MultiplicityAssignment_4");
			builder.put(grammarAccess.getDContextAccess().getDescriptionAssignment_5(), "rule__DContext__DescriptionAssignment_5");
			builder.put(grammarAccess.getDHumanAccess().getNameAssignment_2(), "rule__DHuman__NameAssignment_2");
			builder.put(grammarAccess.getDHumanAccess().getAliasesAssignment_3_1(), "rule__DHuman__AliasesAssignment_3_1");
			builder.put(grammarAccess.getDHumanAccess().getDescriptionAssignment_4(), "rule__DHuman__DescriptionAssignment_4");
			builder.put(grammarAccess.getDTimeAccess().getNameAssignment_2(), "rule__DTime__NameAssignment_2");
			builder.put(grammarAccess.getDTimeAccess().getAliasesAssignment_3_1(), "rule__DTime__AliasesAssignment_3_1");
			builder.put(grammarAccess.getDTimeAccess().getDescriptionAssignment_4(), "rule__DTime__DescriptionAssignment_4");
			builder.put(grammarAccess.getDmxModelAccess().getTextsAssignment_1_3(), "rule__DmxModel__TextsAssignment_1_3");
			builder.put(grammarAccess.getDmxModelAccess().getExpressionsAssignment_2_3(), "rule__DmxModel__ExpressionsAssignment_2_3");
			builder.put(grammarAccess.getDRichTextAccess().getSegmentsAssignment_0(), "rule__DRichText__SegmentsAssignment_0");
			builder.put(grammarAccess.getDRichTextAccess().getSegmentsAssignment_1_0(), "rule__DRichText__SegmentsAssignment_1_0");
			builder.put(grammarAccess.getDRichTextAccess().getSegmentsAssignment_1_1(), "rule__DRichText__SegmentsAssignment_1_1");
			builder.put(grammarAccess.getDRichTextAccess().getSegmentsAssignment_1_2_0(), "rule__DRichText__SegmentsAssignment_1_2_0");
			builder.put(grammarAccess.getDRichTextAccess().getSegmentsAssignment_1_2_1(), "rule__DRichText__SegmentsAssignment_1_2_1");
			builder.put(grammarAccess.getDRichTextAccess().getSegmentsAssignment_1_3(), "rule__DRichText__SegmentsAssignment_1_3");
			builder.put(grammarAccess.getDTextOnlyAccess().getValueAssignment(), "rule__DTextOnly__ValueAssignment");
			builder.put(grammarAccess.getDTextStartAccess().getValueAssignment(), "rule__DTextStart__ValueAssignment");
			builder.put(grammarAccess.getDTextMiddleAccess().getValueAssignment(), "rule__DTextMiddle__ValueAssignment");
			builder.put(grammarAccess.getDTextEndAccess().getValueAssignment(), "rule__DTextEnd__ValueAssignment");
			builder.put(grammarAccess.getDAssignmentAccess().getMemberAssignment_0_1(), "rule__DAssignment__MemberAssignment_0_1");
			builder.put(grammarAccess.getDAssignmentAccess().getValueAssignment_0_3(), "rule__DAssignment__ValueAssignment_0_3");
			builder.put(grammarAccess.getDOrExpressionAccess().getOperatorAssignment_1_0_0_1(), "rule__DOrExpression__OperatorAssignment_1_0_0_1");
			builder.put(grammarAccess.getDOrExpressionAccess().getRightOperandAssignment_1_1(), "rule__DOrExpression__RightOperandAssignment_1_1");
			builder.put(grammarAccess.getDAndExpressionAccess().getOperatorAssignment_1_0_0_1(), "rule__DAndExpression__OperatorAssignment_1_0_0_1");
			builder.put(grammarAccess.getDAndExpressionAccess().getRightOperandAssignment_1_1(), "rule__DAndExpression__RightOperandAssignment_1_1");
			builder.put(grammarAccess.getDEqualityExpressionAccess().getOperatorAssignment_1_0_0_1(), "rule__DEqualityExpression__OperatorAssignment_1_0_0_1");
			builder.put(grammarAccess.getDEqualityExpressionAccess().getRightOperandAssignment_1_1(), "rule__DEqualityExpression__RightOperandAssignment_1_1");
			builder.put(grammarAccess.getDRelationalExpressionAccess().getTypeAssignment_1_0_1(), "rule__DRelationalExpression__TypeAssignment_1_0_1");
			builder.put(grammarAccess.getDRelationalExpressionAccess().getOperatorAssignment_1_1_0_0_1(), "rule__DRelationalExpression__OperatorAssignment_1_1_0_0_1");
			builder.put(grammarAccess.getDRelationalExpressionAccess().getRightOperandAssignment_1_1_1(), "rule__DRelationalExpression__RightOperandAssignment_1_1_1");
			builder.put(grammarAccess.getDOtherOperatorExpressionAccess().getOperatorAssignment_1_0_0_1(), "rule__DOtherOperatorExpression__OperatorAssignment_1_0_0_1");
			builder.put(grammarAccess.getDOtherOperatorExpressionAccess().getRightOperandAssignment_1_1(), "rule__DOtherOperatorExpression__RightOperandAssignment_1_1");
			builder.put(grammarAccess.getDAdditiveExpressionAccess().getOperatorAssignment_1_0_0_1(), "rule__DAdditiveExpression__OperatorAssignment_1_0_0_1");
			builder.put(grammarAccess.getDAdditiveExpressionAccess().getRightOperandAssignment_1_1(), "rule__DAdditiveExpression__RightOperandAssignment_1_1");
			builder.put(grammarAccess.getDMultiplicativeExpressionAccess().getOperatorAssignment_1_0_0_1(), "rule__DMultiplicativeExpression__OperatorAssignment_1_0_0_1");
			builder.put(grammarAccess.getDMultiplicativeExpressionAccess().getRightOperandAssignment_1_1(), "rule__DMultiplicativeExpression__RightOperandAssignment_1_1");
			builder.put(grammarAccess.getDUnaryOperationAccess().getOperatorAssignment_0_1(), "rule__DUnaryOperation__OperatorAssignment_0_1");
			builder.put(grammarAccess.getDUnaryOperationAccess().getOperandAssignment_0_2(), "rule__DUnaryOperation__OperandAssignment_0_2");
			builder.put(grammarAccess.getDCastExpressionAccess().getTypeAssignment_1_1(), "rule__DCastExpression__TypeAssignment_1_1");
			builder.put(grammarAccess.getDTypedMemberReferenceAccess().getMemberAssignment_1_0_0_0_2(), "rule__DTypedMemberReference__MemberAssignment_1_0_0_0_2");
			builder.put(grammarAccess.getDTypedMemberReferenceAccess().getValueAssignment_1_0_1(), "rule__DTypedMemberReference__ValueAssignment_1_0_1");
			builder.put(grammarAccess.getDTypedMemberReferenceAccess().getMemberAssignment_1_1_1(), "rule__DTypedMemberReference__MemberAssignment_1_1_1");
			builder.put(grammarAccess.getDTypedMemberReferenceAccess().getExplicitOperationCallAssignment_1_1_2_0_0(), "rule__DTypedMemberReference__ExplicitOperationCallAssignment_1_1_2_0_0");
			builder.put(grammarAccess.getDTypedMemberReferenceAccess().getMemberCallArgumentsAssignment_1_1_2_0_1_0(), "rule__DTypedMemberReference__MemberCallArgumentsAssignment_1_1_2_0_1_0");
			builder.put(grammarAccess.getDTypedMemberReferenceAccess().getMemberCallArgumentsAssignment_1_1_2_0_1_1_1(), "rule__DTypedMemberReference__MemberCallArgumentsAssignment_1_1_2_0_1_1_1");
			builder.put(grammarAccess.getDTypedMemberReferenceAccess().getBeforeAssignment_1_1_2_1(), "rule__DTypedMemberReference__BeforeAssignment_1_1_2_1");
			builder.put(grammarAccess.getDReturnExpressionAccess().getExpressionAssignment_2(), "rule__DReturnExpression__ExpressionAssignment_2");
			builder.put(grammarAccess.getDRaiseExpressionAccess().getExpressionAssignment_2(), "rule__DRaiseExpression__ExpressionAssignment_2");
			builder.put(grammarAccess.getDFunctionCallAccess().getFunctionAssignment_1(), "rule__DFunctionCall__FunctionAssignment_1");
			builder.put(grammarAccess.getDFunctionCallAccess().getFunctionCallArgumentsAssignment_3_0(), "rule__DFunctionCall__FunctionCallArgumentsAssignment_3_0");
			builder.put(grammarAccess.getDFunctionCallAccess().getFunctionCallArgumentsAssignment_3_1_1(), "rule__DFunctionCall__FunctionCallArgumentsAssignment_3_1_1");
			builder.put(grammarAccess.getDConstructorCallAccess().getConstructorAssignment_2(), "rule__DConstructorCall__ConstructorAssignment_2");
			builder.put(grammarAccess.getDConstructorCallAccess().getExplicitConstructorCallAssignment_3_0(), "rule__DConstructorCall__ExplicitConstructorCallAssignment_3_0");
			builder.put(grammarAccess.getDConstructorCallAccess().getArgumentsAssignment_3_1_0(), "rule__DConstructorCall__ArgumentsAssignment_3_1_0");
			builder.put(grammarAccess.getDConstructorCallAccess().getArgumentsAssignment_3_1_1_1(), "rule__DConstructorCall__ArgumentsAssignment_3_1_1_1");
			builder.put(grammarAccess.getDContextReferenceAccess().getTargetAssignment_1(), "rule__DContextReference__TargetAssignment_1");
			builder.put(grammarAccess.getDContextReferenceAccess().getBeforeAssignment_2(), "rule__DContextReference__BeforeAssignment_2");
			builder.put(grammarAccess.getDIfExpressionAccess().getIfAssignment_2(), "rule__DIfExpression__IfAssignment_2");
			builder.put(grammarAccess.getDIfExpressionAccess().getThenAssignment_4(), "rule__DIfExpression__ThenAssignment_4");
			builder.put(grammarAccess.getDIfExpressionAccess().getElseAssignment_5_1(), "rule__DIfExpression__ElseAssignment_5_1");
			builder.put(grammarAccess.getDForLoopExpressionAccess().getDeclaredParamAssignment_0_0_2(), "rule__DForLoopExpression__DeclaredParamAssignment_0_0_2");
			builder.put(grammarAccess.getDForLoopExpressionAccess().getForExpressionAssignment_1(), "rule__DForLoopExpression__ForExpressionAssignment_1");
			builder.put(grammarAccess.getDForLoopExpressionAccess().getEachExpressionAssignment_3(), "rule__DForLoopExpression__EachExpressionAssignment_3");
			builder.put(grammarAccess.getDMultiplicityAccess().getMinOccursAssignment_1(), "rule__DMultiplicity__MinOccursAssignment_1");
			builder.put(grammarAccess.getDMultiplicityAccess().getMaxOccursAssignment_3(), "rule__DMultiplicity__MaxOccursAssignment_3");
			builder.put(grammarAccess.getDBooleanLiteralAccess().getValueAssignment_1_0(), "rule__DBooleanLiteral__ValueAssignment_1_0");
			builder.put(grammarAccess.getDBooleanLiteralAccess().getValueAssignment_1_1(), "rule__DBooleanLiteral__ValueAssignment_1_1");
			builder.put(grammarAccess.getDStringLiteralAccess().getValueAssignment_1(), "rule__DStringLiteral__ValueAssignment_1");
			builder.put(grammarAccess.getDNaturalLiteralAccess().getValueAssignment_1(), "rule__DNaturalLiteral__ValueAssignment_1");
			builder.put(grammarAccess.getDDecimalLiteralAccess().getValueAssignment_1(), "rule__DDecimalLiteral__ValueAssignment_1");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private DemGrammarAccess grammarAccess;

	@Override
	protected InternalDemParser createParser() {
		InternalDemParser result = new InternalDemParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public DemGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(DemGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
