/*
 * generated by Xtext 2.17.1
 */
package com.mimacom.ddd.dm.dmx.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import com.mimacom.ddd.dm.dmx.ide.contentassist.antlr.internal.InternalDmxParser;
import com.mimacom.ddd.dm.dmx.services.DmxGrammarAccess;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class DmxParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(DmxGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, DmxGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getDmxFilterAccess().getAlternatives(), "rule__DmxFilter__Alternatives");
			builder.put(grammarAccess.getDExpressionAccess().getAlternatives(), "rule__DExpression__Alternatives");
			builder.put(grammarAccess.getDRichTextAccess().getAlternatives(), "rule__DRichText__Alternatives");
			builder.put(grammarAccess.getDNavigableMemberReferenceAccess().getAlternatives_1(), "rule__DNavigableMemberReference__Alternatives_1");
			builder.put(grammarAccess.getDNavigableMemberReferenceAccess().getAlternatives_1_1_2(), "rule__DNavigableMemberReference__Alternatives_1_1_2");
			builder.put(grammarAccess.getDPredicateAccess().getAlternatives(), "rule__DPredicate__Alternatives");
			builder.put(grammarAccess.getDRelationalExpressionAccess().getAlternatives_1(), "rule__DRelationalExpression__Alternatives_1");
			builder.put(grammarAccess.getOpInstanceOfAccess().getAlternatives(), "rule__OpInstanceOf__Alternatives");
			builder.put(grammarAccess.getDUnaryOperationAccess().getAlternatives(), "rule__DUnaryOperation__Alternatives");
			builder.put(grammarAccess.getOpCastAccess().getAlternatives(), "rule__OpCast__Alternatives");
			builder.put(grammarAccess.getDPrimaryExpressionAccess().getAlternatives(), "rule__DPrimaryExpression__Alternatives");
			builder.put(grammarAccess.getDLiteralExpressionAccess().getAlternatives(), "rule__DLiteralExpression__Alternatives");
			builder.put(grammarAccess.getDSelfExpressionAccess().getAlternatives_1(), "rule__DSelfExpression__Alternatives_1");
			builder.put(grammarAccess.getDReturnExpressionAccess().getAlternatives_1(), "rule__DReturnExpression__Alternatives_1");
			builder.put(grammarAccess.getDRaiseExpressionAccess().getAlternatives_1(), "rule__DRaiseExpression__Alternatives_1");
			builder.put(grammarAccess.getOpConstructorAccess().getAlternatives(), "rule__OpConstructor__Alternatives");
			builder.put(grammarAccess.getDmxStaticReferenceAccess().getAlternatives_4_1(), "rule__DmxStaticReference__Alternatives_4_1");
			builder.put(grammarAccess.getDmxContextReferenceAccess().getAlternatives_2(), "rule__DmxContextReference__Alternatives_2");
			builder.put(grammarAccess.getMULTIPLICITYAccess().getAlternatives(), "rule__MULTIPLICITY__Alternatives");
			builder.put(grammarAccess.getDBooleanLiteralAccess().getAlternatives_1(), "rule__DBooleanLiteral__Alternatives_1");
			builder.put(grammarAccess.getDUndefinedLiteralAccess().getAlternatives_1(), "rule__DUndefinedLiteral__Alternatives_1");
			builder.put(grammarAccess.getDECIMALAccess().getAlternatives_3_0(), "rule__DECIMAL__Alternatives_3_0");
			builder.put(grammarAccess.getDECIMALAccess().getAlternatives_3_1(), "rule__DECIMAL__Alternatives_3_1");
			builder.put(grammarAccess.getDmxBaseTypeAccess().getAlternatives(), "rule__DmxBaseType__Alternatives");
			builder.put(grammarAccess.getOpOrAccess().getAlternatives(), "rule__OpOr__Alternatives");
			builder.put(grammarAccess.getOpAndAccess().getAlternatives(), "rule__OpAnd__Alternatives");
			builder.put(grammarAccess.getOpEqualityAccess().getAlternatives(), "rule__OpEquality__Alternatives");
			builder.put(grammarAccess.getOpCompareAccess().getAlternatives(), "rule__OpCompare__Alternatives");
			builder.put(grammarAccess.getOpOtherAccess().getAlternatives(), "rule__OpOther__Alternatives");
			builder.put(grammarAccess.getOpAddAccess().getAlternatives(), "rule__OpAdd__Alternatives");
			builder.put(grammarAccess.getOpMultiAccess().getAlternatives(), "rule__OpMulti__Alternatives");
			builder.put(grammarAccess.getOpUnaryAccess().getAlternatives(), "rule__OpUnary__Alternatives");
			builder.put(grammarAccess.getDmxNamespaceAccess().getGroup(), "rule__DmxNamespace__Group__0");
			builder.put(grammarAccess.getDImportAccess().getGroup(), "rule__DImport__Group__0");
			builder.put(grammarAccess.getDmxTestAccess().getGroup(), "rule__DmxTest__Group__0");
			builder.put(grammarAccess.getDmxTestAccess().getGroup_2(), "rule__DmxTest__Group_2__0");
			builder.put(grammarAccess.getDmxTestAccess().getGroup_2_2(), "rule__DmxTest__Group_2_2__0");
			builder.put(grammarAccess.getDmxTestContextAccess().getGroup(), "rule__DmxTestContext__Group__0");
			builder.put(grammarAccess.getDmxArchetypeAccess().getGroup(), "rule__DmxArchetype__Group__0");
			builder.put(grammarAccess.getDmxFunctionAccess().getGroup(), "rule__DmxFunction__Group__0");
			builder.put(grammarAccess.getDmxFunctionAccess().getGroup_3(), "rule__DmxFunction__Group_3__0");
			builder.put(grammarAccess.getDmxFunctionAccess().getGroup_3_1(), "rule__DmxFunction__Group_3_1__0");
			builder.put(grammarAccess.getDmxFunctionParameterAccess().getGroup(), "rule__DmxFunctionParameter__Group__0");
			builder.put(grammarAccess.getDmxIteratorAccess().getGroup(), "rule__DmxIterator__Group__0");
			builder.put(grammarAccess.getDRichTextAccess().getGroup_1(), "rule__DRichText__Group_1__0");
			builder.put(grammarAccess.getDRichTextAccess().getGroup_1_2(), "rule__DRichText__Group_1_2__0");
			builder.put(grammarAccess.getDNavigableMemberReferenceAccess().getGroup(), "rule__DNavigableMemberReference__Group__0");
			builder.put(grammarAccess.getDNavigableMemberReferenceAccess().getGroup_1_0(), "rule__DNavigableMemberReference__Group_1_0__0");
			builder.put(grammarAccess.getDNavigableMemberReferenceAccess().getGroup_1_0_0(), "rule__DNavigableMemberReference__Group_1_0_0__0");
			builder.put(grammarAccess.getDNavigableMemberReferenceAccess().getGroup_1_0_0_0(), "rule__DNavigableMemberReference__Group_1_0_0_0__0");
			builder.put(grammarAccess.getDNavigableMemberReferenceAccess().getGroup_1_1(), "rule__DNavigableMemberReference__Group_1_1__0");
			builder.put(grammarAccess.getDNavigableMemberReferenceAccess().getGroup_1_1_0(), "rule__DNavigableMemberReference__Group_1_1_0__0");
			builder.put(grammarAccess.getDNavigableMemberReferenceAccess().getGroup_1_1_0_0(), "rule__DNavigableMemberReference__Group_1_1_0_0__0");
			builder.put(grammarAccess.getDNavigableMemberReferenceAccess().getGroup_1_1_2_0(), "rule__DNavigableMemberReference__Group_1_1_2_0__0");
			builder.put(grammarAccess.getDNavigableMemberReferenceAccess().getGroup_1_1_2_0_1(), "rule__DNavigableMemberReference__Group_1_1_2_0_1__0");
			builder.put(grammarAccess.getDNavigableMemberReferenceAccess().getGroup_1_1_2_0_1_1(), "rule__DNavigableMemberReference__Group_1_1_2_0_1_1__0");
			builder.put(grammarAccess.getDAssignmentAccess().getGroup(), "rule__DAssignment__Group__0");
			builder.put(grammarAccess.getDPredicateAccess().getGroup_0(), "rule__DPredicate__Group_0__0");
			builder.put(grammarAccess.getDPredicateContextAccess().getGroup(), "rule__DPredicateContext__Group__0");
			builder.put(grammarAccess.getDPredicateContextAccess().getGroup_1(), "rule__DPredicateContext__Group_1__0");
			builder.put(grammarAccess.getDOrExpressionAccess().getGroup(), "rule__DOrExpression__Group__0");
			builder.put(grammarAccess.getDOrExpressionAccess().getGroup_1(), "rule__DOrExpression__Group_1__0");
			builder.put(grammarAccess.getDOrExpressionAccess().getGroup_1_0(), "rule__DOrExpression__Group_1_0__0");
			builder.put(grammarAccess.getDOrExpressionAccess().getGroup_1_0_0(), "rule__DOrExpression__Group_1_0_0__0");
			builder.put(grammarAccess.getDAndExpressionAccess().getGroup(), "rule__DAndExpression__Group__0");
			builder.put(grammarAccess.getDAndExpressionAccess().getGroup_1(), "rule__DAndExpression__Group_1__0");
			builder.put(grammarAccess.getDAndExpressionAccess().getGroup_1_0(), "rule__DAndExpression__Group_1_0__0");
			builder.put(grammarAccess.getDAndExpressionAccess().getGroup_1_0_0(), "rule__DAndExpression__Group_1_0_0__0");
			builder.put(grammarAccess.getDEqualityExpressionAccess().getGroup(), "rule__DEqualityExpression__Group__0");
			builder.put(grammarAccess.getDEqualityExpressionAccess().getGroup_1(), "rule__DEqualityExpression__Group_1__0");
			builder.put(grammarAccess.getDEqualityExpressionAccess().getGroup_1_0(), "rule__DEqualityExpression__Group_1_0__0");
			builder.put(grammarAccess.getDEqualityExpressionAccess().getGroup_1_0_0(), "rule__DEqualityExpression__Group_1_0_0__0");
			builder.put(grammarAccess.getDRelationalExpressionAccess().getGroup(), "rule__DRelationalExpression__Group__0");
			builder.put(grammarAccess.getDRelationalExpressionAccess().getGroup_1_0(), "rule__DRelationalExpression__Group_1_0__0");
			builder.put(grammarAccess.getDRelationalExpressionAccess().getGroup_1_0_0(), "rule__DRelationalExpression__Group_1_0_0__0");
			builder.put(grammarAccess.getDRelationalExpressionAccess().getGroup_1_0_0_0(), "rule__DRelationalExpression__Group_1_0_0_0__0");
			builder.put(grammarAccess.getDRelationalExpressionAccess().getGroup_1_1(), "rule__DRelationalExpression__Group_1_1__0");
			builder.put(grammarAccess.getDRelationalExpressionAccess().getGroup_1_1_0(), "rule__DRelationalExpression__Group_1_1_0__0");
			builder.put(grammarAccess.getDRelationalExpressionAccess().getGroup_1_1_0_0(), "rule__DRelationalExpression__Group_1_1_0_0__0");
			builder.put(grammarAccess.getDOtherOperatorExpressionAccess().getGroup(), "rule__DOtherOperatorExpression__Group__0");
			builder.put(grammarAccess.getDOtherOperatorExpressionAccess().getGroup_1(), "rule__DOtherOperatorExpression__Group_1__0");
			builder.put(grammarAccess.getDOtherOperatorExpressionAccess().getGroup_1_0(), "rule__DOtherOperatorExpression__Group_1_0__0");
			builder.put(grammarAccess.getDOtherOperatorExpressionAccess().getGroup_1_0_0(), "rule__DOtherOperatorExpression__Group_1_0_0__0");
			builder.put(grammarAccess.getDAdditiveExpressionAccess().getGroup(), "rule__DAdditiveExpression__Group__0");
			builder.put(grammarAccess.getDAdditiveExpressionAccess().getGroup_1(), "rule__DAdditiveExpression__Group_1__0");
			builder.put(grammarAccess.getDAdditiveExpressionAccess().getGroup_1_0(), "rule__DAdditiveExpression__Group_1_0__0");
			builder.put(grammarAccess.getDAdditiveExpressionAccess().getGroup_1_0_0(), "rule__DAdditiveExpression__Group_1_0_0__0");
			builder.put(grammarAccess.getDMultiplicativeExpressionAccess().getGroup(), "rule__DMultiplicativeExpression__Group__0");
			builder.put(grammarAccess.getDMultiplicativeExpressionAccess().getGroup_1(), "rule__DMultiplicativeExpression__Group_1__0");
			builder.put(grammarAccess.getDMultiplicativeExpressionAccess().getGroup_1_0(), "rule__DMultiplicativeExpression__Group_1_0__0");
			builder.put(grammarAccess.getDMultiplicativeExpressionAccess().getGroup_1_0_0(), "rule__DMultiplicativeExpression__Group_1_0_0__0");
			builder.put(grammarAccess.getDUnaryOperationAccess().getGroup_0(), "rule__DUnaryOperation__Group_0__0");
			builder.put(grammarAccess.getDCastExpressionAccess().getGroup(), "rule__DCastExpression__Group__0");
			builder.put(grammarAccess.getDCastExpressionAccess().getGroup_1(), "rule__DCastExpression__Group_1__0");
			builder.put(grammarAccess.getDCastExpressionAccess().getGroup_1_0(), "rule__DCastExpression__Group_1_0__0");
			builder.put(grammarAccess.getDCastExpressionAccess().getGroup_1_0_0(), "rule__DCastExpression__Group_1_0_0__0");
			builder.put(grammarAccess.getDSelfExpressionAccess().getGroup(), "rule__DSelfExpression__Group__0");
			builder.put(grammarAccess.getDReturnExpressionAccess().getGroup(), "rule__DReturnExpression__Group__0");
			builder.put(grammarAccess.getDRaiseExpressionAccess().getGroup(), "rule__DRaiseExpression__Group__0");
			builder.put(grammarAccess.getDParenthesizedExpressionAccess().getGroup(), "rule__DParenthesizedExpression__Group__0");
			builder.put(grammarAccess.getDFunctionCallAccess().getGroup(), "rule__DFunctionCall__Group__0");
			builder.put(grammarAccess.getDFunctionCallAccess().getGroup_3(), "rule__DFunctionCall__Group_3__0");
			builder.put(grammarAccess.getDFunctionCallAccess().getGroup_3_1(), "rule__DFunctionCall__Group_3_1__0");
			builder.put(grammarAccess.getDConstructorCallAccess().getGroup(), "rule__DConstructorCall__Group__0");
			builder.put(grammarAccess.getDConstructorCallAccess().getGroup_3(), "rule__DConstructorCall__Group_3__0");
			builder.put(grammarAccess.getDConstructorCallAccess().getGroup_3_1(), "rule__DConstructorCall__Group_3_1__0");
			builder.put(grammarAccess.getDConstructorCallAccess().getGroup_3_1_1(), "rule__DConstructorCall__Group_3_1_1__0");
			builder.put(grammarAccess.getDmxStaticReferenceAccess().getGroup(), "rule__DmxStaticReference__Group__0");
			builder.put(grammarAccess.getDmxStaticReferenceAccess().getGroup_3(), "rule__DmxStaticReference__Group_3__0");
			builder.put(grammarAccess.getDmxStaticReferenceAccess().getGroup_4(), "rule__DmxStaticReference__Group_4__0");
			builder.put(grammarAccess.getDmxContextReferenceAccess().getGroup(), "rule__DmxContextReference__Group__0");
			builder.put(grammarAccess.getDmxContextReferenceAccess().getGroup_2_1(), "rule__DmxContextReference__Group_2_1__0");
			builder.put(grammarAccess.getDIfExpressionAccess().getGroup(), "rule__DIfExpression__Group__0");
			builder.put(grammarAccess.getDIfExpressionAccess().getGroup_5(), "rule__DIfExpression__Group_5__0");
			builder.put(grammarAccess.getDForLoopExpressionAccess().getGroup(), "rule__DForLoopExpression__Group__0");
			builder.put(grammarAccess.getDForLoopExpressionAccess().getGroup_0(), "rule__DForLoopExpression__Group_0__0");
			builder.put(grammarAccess.getDForLoopExpressionAccess().getGroup_0_0(), "rule__DForLoopExpression__Group_0_0__0");
			builder.put(grammarAccess.getDMultiplicityAccess().getGroup(), "rule__DMultiplicity__Group__0");
			builder.put(grammarAccess.getDBooleanLiteralAccess().getGroup(), "rule__DBooleanLiteral__Group__0");
			builder.put(grammarAccess.getDNaturalLiteralAccess().getGroup(), "rule__DNaturalLiteral__Group__0");
			builder.put(grammarAccess.getDDecimalLiteralAccess().getGroup(), "rule__DDecimalLiteral__Group__0");
			builder.put(grammarAccess.getDStringLiteralAccess().getGroup(), "rule__DStringLiteral__Group__0");
			builder.put(grammarAccess.getDUndefinedLiteralAccess().getGroup(), "rule__DUndefinedLiteral__Group__0");
			builder.put(grammarAccess.getDECIMALAccess().getGroup(), "rule__DECIMAL__Group__0");
			builder.put(grammarAccess.getDECIMALAccess().getGroup_3(), "rule__DECIMAL__Group_3__0");
			builder.put(grammarAccess.getDQualifiedNameWithWildcardAccess().getGroup(), "rule__DQualifiedNameWithWildcard__Group__0");
			builder.put(grammarAccess.getDQualifiedNameAccess().getGroup(), "rule__DQualifiedName__Group__0");
			builder.put(grammarAccess.getDQualifiedNameAccess().getGroup_1(), "rule__DQualifiedName__Group_1__0");
			builder.put(grammarAccess.getDmxNamespaceAccess().getImportsAssignment_0(), "rule__DmxNamespace__ImportsAssignment_0");
			builder.put(grammarAccess.getDmxNamespaceAccess().getNameAssignment_2(), "rule__DmxNamespace__NameAssignment_2");
			builder.put(grammarAccess.getDmxNamespaceAccess().getTypesAssignment_3(), "rule__DmxNamespace__TypesAssignment_3");
			builder.put(grammarAccess.getDmxNamespaceAccess().getFiltersAssignment_4(), "rule__DmxNamespace__FiltersAssignment_4");
			builder.put(grammarAccess.getDmxNamespaceAccess().getTestsAssignment_5(), "rule__DmxNamespace__TestsAssignment_5");
			builder.put(grammarAccess.getDImportAccess().getImportedNamespaceAssignment_1(), "rule__DImport__ImportedNamespaceAssignment_1");
			builder.put(grammarAccess.getDmxTestAccess().getNameAssignment_1(), "rule__DmxTest__NameAssignment_1");
			builder.put(grammarAccess.getDmxTestAccess().getContextAssignment_2_1(), "rule__DmxTest__ContextAssignment_2_1");
			builder.put(grammarAccess.getDmxTestAccess().getContextAssignment_2_2_1(), "rule__DmxTest__ContextAssignment_2_2_1");
			builder.put(grammarAccess.getDmxTestAccess().getExprAssignment_4(), "rule__DmxTest__ExprAssignment_4");
			builder.put(grammarAccess.getDmxTestContextAccess().getNameAssignment_0(), "rule__DmxTestContext__NameAssignment_0");
			builder.put(grammarAccess.getDmxTestContextAccess().getTypeAssignment_2(), "rule__DmxTestContext__TypeAssignment_2");
			builder.put(grammarAccess.getDmxTestContextAccess().getMultiplicityAssignment_3(), "rule__DmxTestContext__MultiplicityAssignment_3");
			builder.put(grammarAccess.getDmxArchetypeAccess().getNameAssignment_1(), "rule__DmxArchetype__NameAssignment_1");
			builder.put(grammarAccess.getDmxArchetypeAccess().getBaseTypeAssignment_3(), "rule__DmxArchetype__BaseTypeAssignment_3");
			builder.put(grammarAccess.getDmxArchetypeAccess().getDescriptionAssignment_4(), "rule__DmxArchetype__DescriptionAssignment_4");
			builder.put(grammarAccess.getDmxFunctionAccess().getNameAssignment_1(), "rule__DmxFunction__NameAssignment_1");
			builder.put(grammarAccess.getDmxFunctionAccess().getParametersAssignment_3_0(), "rule__DmxFunction__ParametersAssignment_3_0");
			builder.put(grammarAccess.getDmxFunctionAccess().getParametersAssignment_3_1_1(), "rule__DmxFunction__ParametersAssignment_3_1_1");
			builder.put(grammarAccess.getDmxFunctionAccess().getBaseTypeAssignment_6(), "rule__DmxFunction__BaseTypeAssignment_6");
			builder.put(grammarAccess.getDmxFunctionAccess().getBaseTypeCollectionAssignment_7(), "rule__DmxFunction__BaseTypeCollectionAssignment_7");
			builder.put(grammarAccess.getDmxFunctionParameterAccess().getNameAssignment_0(), "rule__DmxFunctionParameter__NameAssignment_0");
			builder.put(grammarAccess.getDmxFunctionParameterAccess().getBaseTypeAssignment_2(), "rule__DmxFunctionParameter__BaseTypeAssignment_2");
			builder.put(grammarAccess.getDmxFunctionParameterAccess().getBaseTypeCollectionAssignment_3(), "rule__DmxFunctionParameter__BaseTypeCollectionAssignment_3");
			builder.put(grammarAccess.getDmxIteratorAccess().getNameAssignment_1(), "rule__DmxIterator__NameAssignment_1");
			builder.put(grammarAccess.getDmxIteratorAccess().getBaseTypeAssignment_3(), "rule__DmxIterator__BaseTypeAssignment_3");
			builder.put(grammarAccess.getDmxIteratorAccess().getBaseTypeCollectionAssignment_4(), "rule__DmxIterator__BaseTypeCollectionAssignment_4");
			builder.put(grammarAccess.getDRichTextAccess().getSegmentsAssignment_0(), "rule__DRichText__SegmentsAssignment_0");
			builder.put(grammarAccess.getDRichTextAccess().getSegmentsAssignment_1_0(), "rule__DRichText__SegmentsAssignment_1_0");
			builder.put(grammarAccess.getDRichTextAccess().getSegmentsAssignment_1_1(), "rule__DRichText__SegmentsAssignment_1_1");
			builder.put(grammarAccess.getDRichTextAccess().getSegmentsAssignment_1_2_0(), "rule__DRichText__SegmentsAssignment_1_2_0");
			builder.put(grammarAccess.getDRichTextAccess().getSegmentsAssignment_1_2_1(), "rule__DRichText__SegmentsAssignment_1_2_1");
			builder.put(grammarAccess.getDRichTextAccess().getSegmentsAssignment_1_3(), "rule__DRichText__SegmentsAssignment_1_3");
			builder.put(grammarAccess.getDTextOnlyAccess().getValueAssignment(), "rule__DTextOnly__ValueAssignment");
			builder.put(grammarAccess.getDTextStartAccess().getValueAssignment(), "rule__DTextStart__ValueAssignment");
			builder.put(grammarAccess.getDTextMiddleAccess().getValueAssignment(), "rule__DTextMiddle__ValueAssignment");
			builder.put(grammarAccess.getDTextEndAccess().getValueAssignment(), "rule__DTextEnd__ValueAssignment");
			builder.put(grammarAccess.getDNavigableMemberReferenceAccess().getAssignToMemberAssignment_1_0_0_0_2(), "rule__DNavigableMemberReference__AssignToMemberAssignment_1_0_0_0_2");
			builder.put(grammarAccess.getDNavigableMemberReferenceAccess().getValueAssignment_1_0_1(), "rule__DNavigableMemberReference__ValueAssignment_1_0_1");
			builder.put(grammarAccess.getDNavigableMemberReferenceAccess().getMemberAssignment_1_1_1(), "rule__DNavigableMemberReference__MemberAssignment_1_1_1");
			builder.put(grammarAccess.getDNavigableMemberReferenceAccess().getExplicitOperationCallAssignment_1_1_2_0_0(), "rule__DNavigableMemberReference__ExplicitOperationCallAssignment_1_1_2_0_0");
			builder.put(grammarAccess.getDNavigableMemberReferenceAccess().getMemberCallArgumentsAssignment_1_1_2_0_1_0(), "rule__DNavigableMemberReference__MemberCallArgumentsAssignment_1_1_2_0_1_0");
			builder.put(grammarAccess.getDNavigableMemberReferenceAccess().getMemberCallArgumentsAssignment_1_1_2_0_1_1_1(), "rule__DNavigableMemberReference__MemberCallArgumentsAssignment_1_1_2_0_1_1_1");
			builder.put(grammarAccess.getDNavigableMemberReferenceAccess().getBeforeAssignment_1_1_2_1(), "rule__DNavigableMemberReference__BeforeAssignment_1_1_2_1");
			builder.put(grammarAccess.getDAssignmentAccess().getAssignToMemberAssignment_1(), "rule__DAssignment__AssignToMemberAssignment_1");
			builder.put(grammarAccess.getDAssignmentAccess().getValueAssignment_3(), "rule__DAssignment__ValueAssignment_3");
			builder.put(grammarAccess.getDPredicateAccess().getVarAssignment_0_1(), "rule__DPredicate__VarAssignment_0_1");
			builder.put(grammarAccess.getDPredicateAccess().getValueAssignment_0_3(), "rule__DPredicate__ValueAssignment_0_3");
			builder.put(grammarAccess.getDPredicateContextAccess().getNameAssignment_0(), "rule__DPredicateContext__NameAssignment_0");
			builder.put(grammarAccess.getDPredicateContextAccess().getTypeAssignment_1_1(), "rule__DPredicateContext__TypeAssignment_1_1");
			builder.put(grammarAccess.getDOrExpressionAccess().getOperatorAssignment_1_0_0_1(), "rule__DOrExpression__OperatorAssignment_1_0_0_1");
			builder.put(grammarAccess.getDOrExpressionAccess().getRightOperandAssignment_1_1(), "rule__DOrExpression__RightOperandAssignment_1_1");
			builder.put(grammarAccess.getDAndExpressionAccess().getOperatorAssignment_1_0_0_1(), "rule__DAndExpression__OperatorAssignment_1_0_0_1");
			builder.put(grammarAccess.getDAndExpressionAccess().getRightOperandAssignment_1_1(), "rule__DAndExpression__RightOperandAssignment_1_1");
			builder.put(grammarAccess.getDEqualityExpressionAccess().getOperatorAssignment_1_0_0_1(), "rule__DEqualityExpression__OperatorAssignment_1_0_0_1");
			builder.put(grammarAccess.getDEqualityExpressionAccess().getRightOperandAssignment_1_1(), "rule__DEqualityExpression__RightOperandAssignment_1_1");
			builder.put(grammarAccess.getDRelationalExpressionAccess().getTypeAssignment_1_0_1(), "rule__DRelationalExpression__TypeAssignment_1_0_1");
			builder.put(grammarAccess.getDRelationalExpressionAccess().getOperatorAssignment_1_1_0_0_1(), "rule__DRelationalExpression__OperatorAssignment_1_1_0_0_1");
			builder.put(grammarAccess.getDRelationalExpressionAccess().getRightOperandAssignment_1_1_1(), "rule__DRelationalExpression__RightOperandAssignment_1_1_1");
			builder.put(grammarAccess.getDOtherOperatorExpressionAccess().getOperatorAssignment_1_0_0_1(), "rule__DOtherOperatorExpression__OperatorAssignment_1_0_0_1");
			builder.put(grammarAccess.getDOtherOperatorExpressionAccess().getRightOperandAssignment_1_1(), "rule__DOtherOperatorExpression__RightOperandAssignment_1_1");
			builder.put(grammarAccess.getDAdditiveExpressionAccess().getOperatorAssignment_1_0_0_1(), "rule__DAdditiveExpression__OperatorAssignment_1_0_0_1");
			builder.put(grammarAccess.getDAdditiveExpressionAccess().getRightOperandAssignment_1_1(), "rule__DAdditiveExpression__RightOperandAssignment_1_1");
			builder.put(grammarAccess.getDMultiplicativeExpressionAccess().getOperatorAssignment_1_0_0_1(), "rule__DMultiplicativeExpression__OperatorAssignment_1_0_0_1");
			builder.put(grammarAccess.getDMultiplicativeExpressionAccess().getRightOperandAssignment_1_1(), "rule__DMultiplicativeExpression__RightOperandAssignment_1_1");
			builder.put(grammarAccess.getDUnaryOperationAccess().getOperatorAssignment_0_1(), "rule__DUnaryOperation__OperatorAssignment_0_1");
			builder.put(grammarAccess.getDUnaryOperationAccess().getOperandAssignment_0_2(), "rule__DUnaryOperation__OperandAssignment_0_2");
			builder.put(grammarAccess.getDCastExpressionAccess().getTypeAssignment_1_1(), "rule__DCastExpression__TypeAssignment_1_1");
			builder.put(grammarAccess.getDReturnExpressionAccess().getExpressionAssignment_2(), "rule__DReturnExpression__ExpressionAssignment_2");
			builder.put(grammarAccess.getDRaiseExpressionAccess().getExpressionAssignment_2(), "rule__DRaiseExpression__ExpressionAssignment_2");
			builder.put(grammarAccess.getDFunctionCallAccess().getFunctionAssignment_1(), "rule__DFunctionCall__FunctionAssignment_1");
			builder.put(grammarAccess.getDFunctionCallAccess().getFunctionCallArgumentsAssignment_3_0(), "rule__DFunctionCall__FunctionCallArgumentsAssignment_3_0");
			builder.put(grammarAccess.getDFunctionCallAccess().getFunctionCallArgumentsAssignment_3_1_1(), "rule__DFunctionCall__FunctionCallArgumentsAssignment_3_1_1");
			builder.put(grammarAccess.getDConstructorCallAccess().getConstructorAssignment_2(), "rule__DConstructorCall__ConstructorAssignment_2");
			builder.put(grammarAccess.getDConstructorCallAccess().getExplicitConstructorCallAssignment_3_0(), "rule__DConstructorCall__ExplicitConstructorCallAssignment_3_0");
			builder.put(grammarAccess.getDConstructorCallAccess().getArgumentsAssignment_3_1_0(), "rule__DConstructorCall__ArgumentsAssignment_3_1_0");
			builder.put(grammarAccess.getDConstructorCallAccess().getArgumentsAssignment_3_1_1_1(), "rule__DConstructorCall__ArgumentsAssignment_3_1_1_1");
			builder.put(grammarAccess.getDmxStaticReferenceAccess().getTargetAssignment_2(), "rule__DmxStaticReference__TargetAssignment_2");
			builder.put(grammarAccess.getDmxStaticReferenceAccess().getMemberAssignment_3_1(), "rule__DmxStaticReference__MemberAssignment_3_1");
			builder.put(grammarAccess.getDmxStaticReferenceAccess().getDisplayNameAssignment_4_1_0(), "rule__DmxStaticReference__DisplayNameAssignment_4_1_0");
			builder.put(grammarAccess.getDmxStaticReferenceAccess().getPluralAssignment_4_1_1(), "rule__DmxStaticReference__PluralAssignment_4_1_1");
			builder.put(grammarAccess.getDmxContextReferenceAccess().getTargetAssignment_1(), "rule__DmxContextReference__TargetAssignment_1");
			builder.put(grammarAccess.getDmxContextReferenceAccess().getBeforeAssignment_2_0(), "rule__DmxContextReference__BeforeAssignment_2_0");
			builder.put(grammarAccess.getDmxContextReferenceAccess().getAllAssignment_2_1_1(), "rule__DmxContextReference__AllAssignment_2_1_1");
			builder.put(grammarAccess.getDIfExpressionAccess().getIfAssignment_2(), "rule__DIfExpression__IfAssignment_2");
			builder.put(grammarAccess.getDIfExpressionAccess().getThenAssignment_4(), "rule__DIfExpression__ThenAssignment_4");
			builder.put(grammarAccess.getDIfExpressionAccess().getElseAssignment_5_1(), "rule__DIfExpression__ElseAssignment_5_1");
			builder.put(grammarAccess.getDForLoopExpressionAccess().getDeclaredParamAssignment_0_0_2(), "rule__DForLoopExpression__DeclaredParamAssignment_0_0_2");
			builder.put(grammarAccess.getDForLoopExpressionAccess().getForExpressionAssignment_1(), "rule__DForLoopExpression__ForExpressionAssignment_1");
			builder.put(grammarAccess.getDForLoopExpressionAccess().getEachExpressionAssignment_3(), "rule__DForLoopExpression__EachExpressionAssignment_3");
			builder.put(grammarAccess.getDMultiplicityAccess().getMinOccursAssignment_1(), "rule__DMultiplicity__MinOccursAssignment_1");
			builder.put(grammarAccess.getDMultiplicityAccess().getMaxOccursAssignment_3(), "rule__DMultiplicity__MaxOccursAssignment_3");
			builder.put(grammarAccess.getDBooleanLiteralAccess().getValueAssignment_1_0(), "rule__DBooleanLiteral__ValueAssignment_1_0");
			builder.put(grammarAccess.getDBooleanLiteralAccess().getValueAssignment_1_1(), "rule__DBooleanLiteral__ValueAssignment_1_1");
			builder.put(grammarAccess.getDNaturalLiteralAccess().getValueAssignment_1(), "rule__DNaturalLiteral__ValueAssignment_1");
			builder.put(grammarAccess.getDDecimalLiteralAccess().getValueAssignment_1(), "rule__DDecimalLiteral__ValueAssignment_1");
			builder.put(grammarAccess.getDStringLiteralAccess().getValueAssignment_1(), "rule__DStringLiteral__ValueAssignment_1");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private DmxGrammarAccess grammarAccess;

	@Override
	protected InternalDmxParser createParser() {
		InternalDmxParser result = new InternalDmxParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public DmxGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(DmxGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
