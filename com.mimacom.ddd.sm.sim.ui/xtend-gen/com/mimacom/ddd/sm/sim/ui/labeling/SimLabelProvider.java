/**
 * generated by Xtext 2.16.0
 */
package com.mimacom.ddd.sm.sim.ui.labeling;

import com.google.inject.Inject;
import com.mimacom.ddd.dm.base.DAggregate;
import com.mimacom.ddd.dm.base.DFeature;
import com.mimacom.ddd.dm.base.DLiteral;
import com.mimacom.ddd.dm.base.DNamedPredicate;
import com.mimacom.ddd.dm.base.DQueryParameter;
import com.mimacom.ddd.dm.base.DType;
import com.mimacom.ddd.dm.dim.DimUtil;
import com.mimacom.ddd.sm.sim.SAggregateDeduction;
import com.mimacom.ddd.sm.sim.SFeatureDeduction;
import com.mimacom.ddd.sm.sim.SLiteralDeduction;
import com.mimacom.ddd.sm.sim.SQueryParameterDeduction;
import com.mimacom.ddd.sm.sim.STypeDeduction;
import com.mimacom.ddd.sm.sim.SimUtil;
import org.eclipse.emf.edit.ui.provider.AdapterFactoryLabelProvider;
import org.eclipse.xtext.ui.label.DefaultEObjectLabelProvider;
import org.eclipse.xtext.xbase.lib.Extension;

/**
 * Provides labels for EObjects.
 * 
 * See https://www.eclipse.org/Xtext/documentation/304_ide_concepts.html#label-provider
 */
@SuppressWarnings("all")
public class SimLabelProvider extends DefaultEObjectLabelProvider {
  @Inject
  @Extension
  private DimUtil _dimUtil;
  
  @Inject
  @Extension
  private SimUtil _simUtil;
  
  @Inject
  public SimLabelProvider(final AdapterFactoryLabelProvider delegate) {
    super(delegate);
  }
  
  public String text(final DAggregate a) {
    if ((a instanceof SAggregateDeduction)) {
      String _label = this._simUtil.label(((SAggregateDeduction)a).getDeductionRule());
      return (">" + _label);
    }
    return this._dimUtil.label(a);
  }
  
  public String text(final DType t) {
    if ((t instanceof STypeDeduction)) {
      String _label = this._simUtil.label(((STypeDeduction)t).getDeductionRule());
      return (">" + _label);
    }
    return this._dimUtil.label(t);
  }
  
  public String text(final DFeature f) {
    if ((f instanceof SFeatureDeduction)) {
      String _label = this._simUtil.label(((SFeatureDeduction)f).getDeductionRule());
      return (">" + _label);
    }
    return this._dimUtil.label(f);
  }
  
  public String text(final DQueryParameter p) {
    if ((p instanceof SQueryParameterDeduction)) {
      String _label = this._simUtil.label(((SQueryParameterDeduction)p).getDeductionRule());
      return (">" + _label);
    }
    return this._dimUtil.label(p);
  }
  
  public String text(final DNamedPredicate c) {
    return this._dimUtil.label(c);
  }
  
  public String text(final DLiteral literal) {
    if ((literal instanceof SLiteralDeduction)) {
      String _label = this._simUtil.label(((SLiteralDeduction)literal).getDeductionRule());
      return (">" + _label);
    }
    return literal.getName();
  }
}
