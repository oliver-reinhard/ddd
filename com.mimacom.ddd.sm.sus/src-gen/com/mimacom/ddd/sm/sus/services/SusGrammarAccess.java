/*
 * generated by Xtext 2.21.0
 */
package com.mimacom.ddd.sm.sus.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import com.mimacom.ddd.dm.dmx.services.DmxGrammarAccess;
import com.mimacom.ddd.pub.pub.services.PubGrammarAccess;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class SusGrammarAccess extends AbstractGrammarElementFinder {
	
	public class DNamespaceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.sm.sus.Sus.DNamespace");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSystemKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameDQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cImportsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cImportsDImportParserRuleCall_2_0 = (RuleCall)cImportsAssignment_2.eContents().get(0);
		private final Assignment cModelAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cModelUserStoryParserRuleCall_3_0 = (RuleCall)cModelAssignment_3.eContents().get(0);
		
		//@Override
		//DNamespace:
		//	'system'
		//	name=DQualifiedName
		//	imports+=DImport*
		//	model=UserStory;
		@Override public ParserRule getRule() { return rule; }
		
		//'system' name=DQualifiedName imports+=DImport* model=UserStory
		public Group getGroup() { return cGroup; }
		
		//'system'
		public Keyword getSystemKeyword_0() { return cSystemKeyword_0; }
		
		//name=DQualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//DQualifiedName
		public RuleCall getNameDQualifiedNameParserRuleCall_1_0() { return cNameDQualifiedNameParserRuleCall_1_0; }
		
		//imports+=DImport*
		public Assignment getImportsAssignment_2() { return cImportsAssignment_2; }
		
		//DImport
		public RuleCall getImportsDImportParserRuleCall_2_0() { return cImportsDImportParserRuleCall_2_0; }
		
		//model=UserStory
		public Assignment getModelAssignment_3() { return cModelAssignment_3; }
		
		//UserStory
		public RuleCall getModelUserStoryParserRuleCall_3_0() { return cModelUserStoryParserRuleCall_3_0; }
	}
	public class UserStoryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.sm.sus.Sus.UserStory");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cUserKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cStoryKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameDQualifiedNameParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Alternatives cAlternatives_3_0 = (Alternatives)cGroup_3.eContents().get(0);
		private final Keyword cRealisesKeyword_3_0_0 = (Keyword)cAlternatives_3_0.eContents().get(0);
		private final Keyword cRealizesKeyword_3_0_1 = (Keyword)cAlternatives_3_0.eContents().get(1);
		private final Assignment cEventAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cEventDemDomainEventCrossReference_3_1_0 = (CrossReference)cEventAssignment_3_1.eContents().get(0);
		private final RuleCall cEventDemDomainEventDQualifiedNameParserRuleCall_3_1_0_1 = (RuleCall)cEventDemDomainEventCrossReference_3_1_0.eContents().get(1);
		private final Assignment cDescriptionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cDescriptionDRichTextParserRuleCall_4_0 = (RuleCall)cDescriptionAssignment_4.eContents().get(0);
		private final Keyword cGoalKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cGoalAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cGoalDRichTextParserRuleCall_6_0 = (RuleCall)cGoalAssignment_6.eContents().get(0);
		private final Assignment cSectionsAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cSectionsPubSectionParserRuleCall_7_0 = (RuleCall)cSectionsAssignment_7.eContents().get(0);
		
		//UserStory:
		//	'user' 'story'
		//	name=DQualifiedName (('realises' | 'realizes') event=[DemDomainEvent|DQualifiedName])?
		//	description=DRichText?
		//	'goal'
		//	goal=DRichText
		//	sections+=PubSection*;
		@Override public ParserRule getRule() { return rule; }
		
		//'user' 'story' name=DQualifiedName (('realises' | 'realizes') event=[DemDomainEvent|DQualifiedName])?
		//description=DRichText? 'goal' goal=DRichText sections+=PubSection*
		public Group getGroup() { return cGroup; }
		
		//'user'
		public Keyword getUserKeyword_0() { return cUserKeyword_0; }
		
		//'story'
		public Keyword getStoryKeyword_1() { return cStoryKeyword_1; }
		
		//name=DQualifiedName
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//DQualifiedName
		public RuleCall getNameDQualifiedNameParserRuleCall_2_0() { return cNameDQualifiedNameParserRuleCall_2_0; }
		
		//(('realises' | 'realizes') event=[DemDomainEvent|DQualifiedName])?
		public Group getGroup_3() { return cGroup_3; }
		
		//('realises' | 'realizes')
		public Alternatives getAlternatives_3_0() { return cAlternatives_3_0; }
		
		//'realises'
		public Keyword getRealisesKeyword_3_0_0() { return cRealisesKeyword_3_0_0; }
		
		//'realizes'
		public Keyword getRealizesKeyword_3_0_1() { return cRealizesKeyword_3_0_1; }
		
		//event=[DemDomainEvent|DQualifiedName]
		public Assignment getEventAssignment_3_1() { return cEventAssignment_3_1; }
		
		//[DemDomainEvent|DQualifiedName]
		public CrossReference getEventDemDomainEventCrossReference_3_1_0() { return cEventDemDomainEventCrossReference_3_1_0; }
		
		//DQualifiedName
		public RuleCall getEventDemDomainEventDQualifiedNameParserRuleCall_3_1_0_1() { return cEventDemDomainEventDQualifiedNameParserRuleCall_3_1_0_1; }
		
		//description=DRichText?
		public Assignment getDescriptionAssignment_4() { return cDescriptionAssignment_4; }
		
		//DRichText
		public RuleCall getDescriptionDRichTextParserRuleCall_4_0() { return cDescriptionDRichTextParserRuleCall_4_0; }
		
		//'goal'
		public Keyword getGoalKeyword_5() { return cGoalKeyword_5; }
		
		//goal=DRichText
		public Assignment getGoalAssignment_6() { return cGoalAssignment_6; }
		
		//DRichText
		public RuleCall getGoalDRichTextParserRuleCall_6_0() { return cGoalDRichTextParserRuleCall_6_0; }
		
		//sections+=PubSection*
		public Assignment getSectionsAssignment_7() { return cSectionsAssignment_7; }
		
		//PubSection
		public RuleCall getSectionsPubSectionParserRuleCall_7_0() { return cSectionsPubSectionParserRuleCall_7_0; }
	}
	
	
	private final DNamespaceElements pDNamespace;
	private final UserStoryElements pUserStory;
	
	private final Grammar grammar;
	
	private final PubGrammarAccess gaPub;
	
	private final DmxGrammarAccess gaDmx;

	@Inject
	public SusGrammarAccess(GrammarProvider grammarProvider,
			PubGrammarAccess gaPub,
			DmxGrammarAccess gaDmx) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaPub = gaPub;
		this.gaDmx = gaDmx;
		this.pDNamespace = new DNamespaceElements();
		this.pUserStory = new UserStoryElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("com.mimacom.ddd.sm.sus.Sus".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public PubGrammarAccess getPubGrammarAccess() {
		return gaPub;
	}
	
	public DmxGrammarAccess getDmxGrammarAccess() {
		return gaDmx;
	}

	
	//@Override
	//DNamespace:
	//	'system'
	//	name=DQualifiedName
	//	imports+=DImport*
	//	model=UserStory;
	public DNamespaceElements getDNamespaceAccess() {
		return pDNamespace;
	}
	
	public ParserRule getDNamespaceRule() {
		return getDNamespaceAccess().getRule();
	}
	
	//UserStory:
	//	'user' 'story'
	//	name=DQualifiedName (('realises' | 'realizes') event=[DemDomainEvent|DQualifiedName])?
	//	description=DRichText?
	//	'goal'
	//	goal=DRichText
	//	sections+=PubSection*;
	public UserStoryElements getUserStoryAccess() {
		return pUserStory;
	}
	
	public ParserRule getUserStoryRule() {
		return getUserStoryAccess().getRule();
	}
	
	//PubModel:
	//	{PubModel} imports+=DImport*
	//	document=PubDocument;
	public PubGrammarAccess.PubModelElements getPubModelAccess() {
		return gaPub.getPubModelAccess();
	}
	
	public ParserRule getPubModelRule() {
		return getPubModelAccess().getRule();
	}
	
	//PubDocument Document:
	//	PubPublication | PubComponent;
	public PubGrammarAccess.PubDocumentElements getPubDocumentAccess() {
		return gaPub.getPubDocumentAccess();
	}
	
	public ParserRule getPubDocumentRule() {
		return getPubDocumentAccess().getRule();
	}
	
	//PubPublication Publication:
	//	{Publication}
	//	'Publication'
	//	PubReferenceTargetName
	//	title=STRING
	//	'class:' publicationClass=[proto::PublicationClass] PubGenerate
	//	symbols+=PubSymbol* ('include:' includes+=[Component])*;
	public PubGrammarAccess.PubPublicationElements getPubPublicationAccess() {
		return gaPub.getPubPublicationAccess();
	}
	
	public ParserRule getPubPublicationRule() {
		return getPubPublicationAccess().getRule();
	}
	
	//PubComponent Component:
	//	{Component}
	//	'Component'
	//	PubReferenceTargetName
	//	title=STRING
	//	'class:' publicationClass=[proto::PublicationClass] PubGenerate
	//	symbols+=PubSymbol*
	//	segments+=PubDocumentSegment*;
	public PubGrammarAccess.PubComponentElements getPubComponentAccess() {
		return gaPub.getPubComponentAccess();
	}
	
	public ParserRule getPubComponentRule() {
		return getPubComponentAccess().getRule();
	}
	
	//fragment PubGenerate returns Document:
	//	'generate' (generateHtml?='html'? & generateLaTeX?='latex'?
	//	/* & generateMarkdown?='markdown'? & generateAsciiDoc?='asciidoc'? */) ('diagrams:' (preferRasterDiagrams?='raster' |
	//	'vector'))?;
	public PubGrammarAccess.PubGenerateElements getPubGenerateAccess() {
		return gaPub.getPubGenerateAccess();
	}
	
	public ParserRule getPubGenerateRule() {
		return getPubGenerateAccess().getRule();
	}
	
	//PubSymbol Symbol:
	//	'symbol:'
	//	name=ID '=' value=DRichText;
	public PubGrammarAccess.PubSymbolElements getPubSymbolAccess() {
		return gaPub.getPubSymbolAccess();
	}
	
	public ParserRule getPubSymbolRule() {
		return getPubSymbolAccess().getRule();
	}
	
	//fragment PubReferenceTargetName returns ReferenceTarget:
	//	'(' '#'? name=ID ')';
	public PubGrammarAccess.PubReferenceTargetNameElements getPubReferenceTargetNameAccess() {
		return gaPub.getPubReferenceTargetNameAccess();
	}
	
	public ParserRule getPubReferenceTargetNameRule() {
		return getPubReferenceTargetNameAccess().getRule();
	}
	
	////
	//// SEGMENTS
	////
	//PubDocumentSegment DocumentSegment:
	//	PubAbstract | PubPreface | PubPublicationBody | PubEpilogue | PubChangeHistory | PubTOC | PubAbbreviations |
	//	PubListOfTables | PubListOfFigures | PubBibliography | PubGlossary | PubIndex | PubSegmentInclude;
	public PubGrammarAccess.PubDocumentSegmentElements getPubDocumentSegmentAccess() {
		return gaPub.getPubDocumentSegmentAccess();
	}
	
	public ParserRule getPubDocumentSegmentRule() {
		return getPubDocumentSegmentAccess().getRule();
	}
	
	//PubAbstract Abstract:
	//	{Abstract}
	//	'Abstract'
	//	'{'
	//	contents+=PubContentBlock*
	//	'}';
	public PubGrammarAccess.PubAbstractElements getPubAbstractAccess() {
		return gaPub.getPubAbstractAccess();
	}
	
	public ParserRule getPubAbstractRule() {
		return getPubAbstractAccess().getRule();
	}
	
	//PubPreface Preface:
	//	{Preface}
	//	'Preface'
	//	'{'
	//	contents+=PubContentBlock*
	//	'}';
	public PubGrammarAccess.PubPrefaceElements getPubPrefaceAccess() {
		return gaPub.getPubPrefaceAccess();
	}
	
	public ParserRule getPubPrefaceRule() {
		return getPubPrefaceAccess().getRule();
	}
	
	//PubEpilogue Epilogue:
	//	{Epilogue}
	//	'Epilogue'
	//	'{'
	//	contents+=PubContentBlock*
	//	'}';
	public PubGrammarAccess.PubEpilogueElements getPubEpilogueAccess() {
		return gaPub.getPubEpilogueAccess();
	}
	
	public ParserRule getPubEpilogueRule() {
		return getPubEpilogueAccess().getRule();
	}
	
	//PubChangeHistory ChangeHistory:
	//	{ChangeHistory}
	//	'ChangeHistory'
	//	'{'
	//	entries+=PubChangeDescription*
	//	'}';
	public PubGrammarAccess.PubChangeHistoryElements getPubChangeHistoryAccess() {
		return gaPub.getPubChangeHistoryAccess();
	}
	
	public ParserRule getPubChangeHistoryRule() {
		return getPubChangeHistoryAccess().getRule();
	}
	
	//PubChangeDescription ChangeDescription:
	//	'Entry'
	//	'version:' version=STRING
	//	'date:' date=STRING
	//	'author:' author=STRING
	//	'description:' description=STRING
	//	| '-' version=STRING ':' date=STRING ',' author=STRING ',' description=STRING;
	public PubGrammarAccess.PubChangeDescriptionElements getPubChangeDescriptionAccess() {
		return gaPub.getPubChangeDescriptionAccess();
	}
	
	public ParserRule getPubChangeDescriptionRule() {
		return getPubChangeDescriptionAccess().getRule();
	}
	
	//PubTOC TOC:
	//	{TOC}
	//	'TableOfContents'
	//	'{' '}';
	public PubGrammarAccess.PubTOCElements getPubTOCAccess() {
		return gaPub.getPubTOCAccess();
	}
	
	public ParserRule getPubTOCRule() {
		return getPubTOCAccess().getRule();
	}
	
	//PubAbbreviations Abbreviations:
	//	{Abbreviations}
	//	'Abbreviations'
	//	'{'
	//	entries+=PubAbbreviation*
	//	'}';
	public PubGrammarAccess.PubAbbreviationsElements getPubAbbreviationsAccess() {
		return gaPub.getPubAbbreviationsAccess();
	}
	
	public ParserRule getPubAbbreviationsRule() {
		return getPubAbbreviationsAccess().getRule();
	}
	
	//PubAbbreviation Abbreviation:
	//	'Entry'
	//	'id:' name=ID
	//	'text:' longForm=STRING
	//	| '-' name=ID ':' longForm=STRING;
	public PubGrammarAccess.PubAbbreviationElements getPubAbbreviationAccess() {
		return gaPub.getPubAbbreviationAccess();
	}
	
	public ParserRule getPubAbbreviationRule() {
		return getPubAbbreviationAccess().getRule();
	}
	
	//PubListOfTables ListOfTables:
	//	{ListOfTables}
	//	'ListOfTables'
	//	'{' '}';
	public PubGrammarAccess.PubListOfTablesElements getPubListOfTablesAccess() {
		return gaPub.getPubListOfTablesAccess();
	}
	
	public ParserRule getPubListOfTablesRule() {
		return getPubListOfTablesAccess().getRule();
	}
	
	//PubListOfFigures ListOfFigures:
	//	{ListOfFigures}
	//	'ListOfFigures'
	//	'{' '}';
	public PubGrammarAccess.PubListOfFiguresElements getPubListOfFiguresAccess() {
		return gaPub.getPubListOfFiguresAccess();
	}
	
	public ParserRule getPubListOfFiguresRule() {
		return getPubListOfFiguresAccess().getRule();
	}
	
	//PubBibliography Bibliography:
	//	{Bibliography}
	//	'Bibliography'
	//	'{'
	//	entries+=PubBibliographyEntry*
	//	'}';
	public PubGrammarAccess.PubBibliographyElements getPubBibliographyAccess() {
		return gaPub.getPubBibliographyAccess();
	}
	
	public ParserRule getPubBibliographyRule() {
		return getPubBibliographyAccess().getRule();
	}
	
	//PubBibliographyEntry BibliographyEntry:
	//	'Entry'
	//	'id:' name=ID
	//	'title:' title=STRING
	//	'authors:' authors=STRING
	//	'publisher:' publisher=STRING
	//	'date:' date=STRING
	//	'comment:' comment=STRING
	//	| '-' name=ID ':' title=STRING ',' authors=STRING ',' publisher=STRING ',' date=STRING ',' comment=STRING;
	public PubGrammarAccess.PubBibliographyEntryElements getPubBibliographyEntryAccess() {
		return gaPub.getPubBibliographyEntryAccess();
	}
	
	public ParserRule getPubBibliographyEntryRule() {
		return getPubBibliographyEntryAccess().getRule();
	}
	
	//PubGlossary Glossary:
	//	{Glossary}
	//	'Glossary'
	//	'{'
	//	entries+=PubGlossaryEntry*
	//	'}';
	public PubGrammarAccess.PubGlossaryElements getPubGlossaryAccess() {
		return gaPub.getPubGlossaryAccess();
	}
	
	public ParserRule getPubGlossaryRule() {
		return getPubGlossaryAccess().getRule();
	}
	
	//PubGlossaryEntry GlossaryEntry:
	//	'Entry'
	//	'id:' name=ID
	//	'text' text=STRING
	//	'comment:' comment=STRING
	//	| '-' name=ID ':' text=STRING ',' comment=STRING;
	public PubGrammarAccess.PubGlossaryEntryElements getPubGlossaryEntryAccess() {
		return gaPub.getPubGlossaryEntryAccess();
	}
	
	public ParserRule getPubGlossaryEntryRule() {
		return getPubGlossaryEntryAccess().getRule();
	}
	
	//PubIndex Index:
	//	{Index}
	//	'Index'
	//	'{'
	//	entries+=PubIndexEntry*
	//	'}';
	public PubGrammarAccess.PubIndexElements getPubIndexAccess() {
		return gaPub.getPubIndexAccess();
	}
	
	public ParserRule getPubIndexRule() {
		return getPubIndexAccess().getRule();
	}
	
	//PubIndexEntry IndexEntry:
	//	'Entry'
	//	'text' text=STRING
	//	'references:' references+=[Division] (',' references+=[Division])* // VALIDATION -> WARNING if none
	//	| '-' text=STRING ':' references+=[Division] (',' references+=[Division])* // VALIDATION -> WARNING if none
	//;
	public PubGrammarAccess.PubIndexEntryElements getPubIndexEntryAccess() {
		return gaPub.getPubIndexEntryAccess();
	}
	
	public ParserRule getPubIndexEntryRule() {
		return getPubIndexEntryAccess().getRule();
	}
	
	//PubSegmentInclude SegmentInclude:
	//	{SegmentInclude}
	//	'Segment'
	//	'include:' include=[DocumentSegment];
	public PubGrammarAccess.PubSegmentIncludeElements getPubSegmentIncludeAccess() {
		return gaPub.getPubSegmentIncludeAccess();
	}
	
	public ParserRule getPubSegmentIncludeRule() {
		return getPubSegmentIncludeAccess().getRule();
	}
	
	//PubPublicationBody PublicationBody:
	//	{PublicationBody}
	//	'Body'
	//	'{'
	//	divisions+=(PubPart | PubAppendix | PubChapter | PubSection)*
	//	'}';
	public PubGrammarAccess.PubPublicationBodyElements getPubPublicationBodyAccess() {
		return gaPub.getPubPublicationBodyAccess();
	}
	
	public ParserRule getPubPublicationBodyRule() {
		return getPubPublicationBodyAccess().getRule();
	}
	
	////
	//// DIVISIONS
	////
	//fragment PubDivisionHeader returns Division:
	//	PubReferenceTargetName?
	//	title=DRichText;
	public PubGrammarAccess.PubDivisionHeaderElements getPubDivisionHeaderAccess() {
		return gaPub.getPubDivisionHeaderAccess();
	}
	
	public ParserRule getPubDivisionHeaderRule() {
		return getPubDivisionHeaderAccess().getRule();
	}
	
	//fragment PubDivisionIncludeHeader returns Division:
	//	PubReferenceTargetName?
	//	'include:';
	public PubGrammarAccess.PubDivisionIncludeHeaderElements getPubDivisionIncludeHeaderAccess() {
		return gaPub.getPubDivisionIncludeHeaderAccess();
	}
	
	public ParserRule getPubDivisionIncludeHeaderRule() {
		return getPubDivisionIncludeHeaderAccess().getRule();
	}
	
	//PubPart Part:
	//	{Part}
	//	'Part' (PubDivisionHeader
	//	contents+=PubContentBlock*
	//	-> divisions+=PubChapter*
	//	| PubDivisionIncludeHeader
	//	include=[Part|DQualifiedName] ('as' title=DRichText)?);
	public PubGrammarAccess.PubPartElements getPubPartAccess() {
		return gaPub.getPubPartAccess();
	}
	
	public ParserRule getPubPartRule() {
		return getPubPartAccess().getRule();
	}
	
	//PubAppendix Appendix:
	//	'Appendix' (PubDivisionHeader
	//	contents+=PubContentBlock*
	//	-> divisions+=PubChapter*
	//	| PubDivisionIncludeHeader
	//	include=[Appendix|DQualifiedName] ('as' title=DRichText)?);
	public PubGrammarAccess.PubAppendixElements getPubAppendixAccess() {
		return gaPub.getPubAppendixAccess();
	}
	
	public ParserRule getPubAppendixRule() {
		return getPubAppendixAccess().getRule();
	}
	
	//PubChapter Chapter:
	//	'Chapter' (PubDivisionHeader
	//	contents+=PubContentBlock*
	//	-> divisions+=PubSection*
	//	| PubDivisionIncludeHeader
	//	include=[Chapter|DQualifiedName] ('as' title=DRichText)?);
	public PubGrammarAccess.PubChapterElements getPubChapterAccess() {
		return gaPub.getPubChapterAccess();
	}
	
	public ParserRule getPubChapterRule() {
		return getPubChapterAccess().getRule();
	}
	
	//PubSection Section:
	//	'Section' (PubDivisionHeader
	//	contents+=PubContentBlock*
	//	divisions+=PubSubsection*
	//	| PubDivisionIncludeHeader
	//	include=[Section|DQualifiedName] ('as' title=DRichText)?);
	public PubGrammarAccess.PubSectionElements getPubSectionAccess() {
		return gaPub.getPubSectionAccess();
	}
	
	public ParserRule getPubSectionRule() {
		return getPubSectionAccess().getRule();
	}
	
	//PubSubsection Subsection:
	//	('Sub' | 'Subsection') (PubDivisionHeader
	//	contents+=PubContentBlock*
	//	divisions+=PubSubsubsection*
	//	| PubDivisionIncludeHeader
	//	include=[Subsection|DQualifiedName] ('as' title=DRichText)?);
	public PubGrammarAccess.PubSubsectionElements getPubSubsectionAccess() {
		return gaPub.getPubSubsectionAccess();
	}
	
	public ParserRule getPubSubsectionRule() {
		return getPubSubsectionAccess().getRule();
	}
	
	//PubSubsubsection Subsubsection:
	//	('Subsub' | 'Subsubsection') (PubDivisionHeader
	//	contents+=PubContentBlock*
	//	| PubDivisionIncludeHeader
	//	include=[Subsubsection|DQualifiedName] ('as' title=DRichText)?);
	public PubGrammarAccess.PubSubsubsectionElements getPubSubsubsectionAccess() {
		return gaPub.getPubSubsubsectionAccess();
	}
	
	public ParserRule getPubSubsubsectionRule() {
		return getPubSubsubsectionAccess().getRule();
	}
	
	////
	//// ACTUAL CONTENT
	////
	//PubContentBlock ContentBlock:
	//	PubAdmonition | PubList | PubTable | PubFigure | PubEquation | PubCodeListing | PubRichTextParagraph | PubFootnote;
	public PubGrammarAccess.PubContentBlockElements getPubContentBlockAccess() {
		return gaPub.getPubContentBlockAccess();
	}
	
	public ParserRule getPubContentBlockRule() {
		return getPubContentBlockAccess().getRule();
	}
	
	//PubAdmonition Admonition:
	//	'Admonition'
	//	PubReferenceTargetName?
	//	'kind:' kind=PubAdmonitionKind ('title:' title=DRichText)?
	//	'{'
	//	contents+=PubContentBlock*
	//	'}';
	public PubGrammarAccess.PubAdmonitionElements getPubAdmonitionAccess() {
		return gaPub.getPubAdmonitionAccess();
	}
	
	public ParserRule getPubAdmonitionRule() {
		return getPubAdmonitionAccess().getRule();
	}
	
	//enum PubAdmonitionKind returns AdmonitionKind:
	//	Note='note' | Tip='tip' | Caution='caution' | Important='important';
	public PubGrammarAccess.PubAdmonitionKindElements getPubAdmonitionKindAccess() {
		return gaPub.getPubAdmonitionKindAccess();
	}
	
	public EnumRule getPubAdmonitionKindRule() {
		return getPubAdmonitionKindAccess().getRule();
	}
	
	//PubList List:
	//	{List}
	//	'List' ('(' '#'? name=ID ')')? ('style:' style=PubListStyle)? ('numbering:' numberingStyle=PubSequenceNumberStyle)? // TODO VALIDATION: mandatory for 'sequence'
	//	'{'
	//	items+=PubListItem*
	//	'}';
	public PubGrammarAccess.PubListElements getPubListAccess() {
		return gaPub.getPubListAccess();
	}
	
	public ParserRule getPubListRule() {
		return getPubListAccess().getRule();
	}
	
	//enum PubListStyle returns ListStyle:
	//	Bullet='bullet' | Sequence='sequence' | Title='title';
	public PubGrammarAccess.PubListStyleElements getPubListStyleAccess() {
		return gaPub.getPubListStyleAccess();
	}
	
	public EnumRule getPubListStyleRule() {
		return getPubListStyleAccess().getRule();
	}
	
	//enum PubSequenceNumberStyle returns proto::ProtoSequenceNumberStyle:
	//	Arabic='arabic' | CapitalLetter='capitalLetter' | SmallLetter='smallLetter' | CapitalRoman='capitalRoman' |
	//	SmallRoman='smallRoman' | None='none';
	public PubGrammarAccess.PubSequenceNumberStyleElements getPubSequenceNumberStyleAccess() {
		return gaPub.getPubSequenceNumberStyleAccess();
	}
	
	public EnumRule getPubSequenceNumberStyleRule() {
		return getPubSequenceNumberStyleAccess().getRule();
	}
	
	//PubListItem ListItem:
	//	{ListItem} ('Item'
	//	PubReferenceTargetName? ('title:' title=DRichText)? ('{' contents+=PubContentBlock* '}'
	//	| -> contents+=PubContentBlock*) | '-' PubReferenceTargetName? contents+=PubParagraphTextOnly);
	public PubGrammarAccess.PubListItemElements getPubListItemAccess() {
		return gaPub.getPubListItemAccess();
	}
	
	public ParserRule getPubListItemRule() {
		return getPubListItemAccess().getRule();
	}
	
	//fragment PubTitledBlockHeader returns TitledBlock:
	//	PubReferenceTargetName?
	//	title=DRichText;
	public PubGrammarAccess.PubTitledBlockHeaderElements getPubTitledBlockHeaderAccess() {
		return gaPub.getPubTitledBlockHeaderAccess();
	}
	
	public ParserRule getPubTitledBlockHeaderRule() {
		return getPubTitledBlockHeaderAccess().getRule();
	}
	
	//PubTable TitledTable:
	//	'Table'
	//	PubTitledBlockHeader
	//	'{'
	//	table=AbstractTable
	//	'}';
	public PubGrammarAccess.PubTableElements getPubTableAccess() {
		return gaPub.getPubTableAccess();
	}
	
	public ParserRule getPubTableRule() {
		return getPubTableAccess().getRule();
	}
	
	//AbstractTable:
	//	Table | ProvidedTable;
	public PubGrammarAccess.AbstractTableElements getAbstractTableAccess() {
		return gaPub.getAbstractTableAccess();
	}
	
	public ParserRule getAbstractTableRule() {
		return getAbstractTableAccess().getRule();
	}
	
	//Table:
	//	'columns:' columns=NATURAL ('widthPercent:' widthPercent=NATURAL)? ('gridlines:' gridlines=GridLines)?
	//	rows+=PubTableRow*;
	public PubGrammarAccess.TableElements getTableAccess() {
		return gaPub.getTableAccess();
	}
	
	public ParserRule getTableRule() {
		return getTableAccess().getRule();
	}
	
	//enum GridLines:
	//	HORIZONTAL='horizontal' | VERTICAL='vertical' | BOTH='all' | NONE='none';
	public PubGrammarAccess.GridLinesElements getGridLinesAccess() {
		return gaPub.getGridLinesAccess();
	}
	
	public EnumRule getGridLinesRule() {
		return getGridLinesAccess().getRule();
	}
	
	//PubTableRow TableRow:
	//	{TableRow} (('Row' ('heading:' isHeading?='true' | 'false')?
	//	| isHeading?='Header' 'Row') ('{' cells+=PubTableCell* '}'
	//	| cells+=PubTableCell*) | (isHeading?='|||' | '||') cells+=PubTableSimpleCell*);
	public PubGrammarAccess.PubTableRowElements getPubTableRowAccess() {
		return gaPub.getPubTableRowAccess();
	}
	
	public ParserRule getPubTableRowRule() {
		return getPubTableRowAccess().getRule();
	}
	
	//PubTableCell TableCell:
	//	{TableCell}
	//	'Cell' ('width:' width=NATURAL)? ('height:' height=NATURAL)? ('{' contents+=PubContentBlock* '}'
	//	| -> contents+=PubContentBlock*);
	public PubGrammarAccess.PubTableCellElements getPubTableCellAccess() {
		return gaPub.getPubTableCellAccess();
	}
	
	public ParserRule getPubTableCellRule() {
		return getPubTableCellAccess().getRule();
	}
	
	//PubTableSimpleCell TableCell:
	//	{TableCell} contents+=PubParagraphTextOnly '|';
	public PubGrammarAccess.PubTableSimpleCellElements getPubTableSimpleCellAccess() {
		return gaPub.getPubTableSimpleCellAccess();
	}
	
	public ParserRule getPubTableSimpleCellRule() {
		return getPubTableSimpleCellAccess().getRule();
	}
	
	//ProvidedTable:
	//	('widthPercent:' widthPercent=NATURAL)? ('gridlines:' gridlines=GridLines)?
	//	'root:' diagramRoot=[IDiagramRoot|DQualifiedName]
	//	'type:' tableType=[ProvidedTableType|DQualifiedName];
	public PubGrammarAccess.ProvidedTableElements getProvidedTableAccess() {
		return gaPub.getProvidedTableAccess();
	}
	
	public ParserRule getProvidedTableRule() {
		return getProvidedTableAccess().getRule();
	}
	
	//PubFigure TitledFigure:
	//	'Figure'
	//	PubTitledBlockHeader
	//	'{'
	//	figure=AbstractFigure
	//	'}';
	public PubGrammarAccess.PubFigureElements getPubFigureAccess() {
		return gaPub.getPubFigureAccess();
	}
	
	public ParserRule getPubFigureRule() {
		return getPubFigureAccess().getRule();
	}
	
	//AbstractFigure:
	//	IncludedFigure | ProvidedFigure;
	public PubGrammarAccess.AbstractFigureElements getAbstractFigureAccess() {
		return gaPub.getAbstractFigureAccess();
	}
	
	public ParserRule getAbstractFigureRule() {
		return getAbstractFigureAccess().getRule();
	}
	
	//IncludedFigure:
	//	('widthPercent:' widthPercent=NATURAL)?
	//	'uri:' fileUri=STRING;
	public PubGrammarAccess.IncludedFigureElements getIncludedFigureAccess() {
		return gaPub.getIncludedFigureAccess();
	}
	
	public ParserRule getIncludedFigureRule() {
		return getIncludedFigureAccess().getRule();
	}
	
	//// TODO Validation
	//ProvidedFigure:
	//	('widthPercent:' widthPercent=NATURAL)?
	//	'root:' diagramRoot=[IDiagramRoot|DQualifiedName]
	//	'type:' diagramType=[ProvidedDiagramType|DQualifiedName];
	public PubGrammarAccess.ProvidedFigureElements getProvidedFigureAccess() {
		return gaPub.getProvidedFigureAccess();
	}
	
	public ParserRule getProvidedFigureRule() {
		return getProvidedFigureAccess().getRule();
	}
	
	//PubEquation Equation:
	//	'Equation'
	//	PubTitledBlockHeader
	//	'{'
	//	'uri:' fileUri=STRING // TODO Validation
	//	'}';
	public PubGrammarAccess.PubEquationElements getPubEquationAccess() {
		return gaPub.getPubEquationAccess();
	}
	
	public ParserRule getPubEquationRule() {
		return getPubEquationAccess().getRule();
	}
	
	//PubCodeListing TitledCodeListing:
	//	{TitledCodeListing}
	//	'CodeListing'
	//	PubReferenceTargetName? (title=DRichText | 'title:' 'false')
	//	'{' ('numbered:' (numbered?='true' | 'false'))? (codeLines+=STRING*
	//	| 'include:' include=[ecore::EObject|DQualifiedName])
	//	'}';
	public PubGrammarAccess.PubCodeListingElements getPubCodeListingAccess() {
		return gaPub.getPubCodeListingAccess();
	}
	
	public ParserRule getPubCodeListingRule() {
		return getPubCodeListingAccess().getRule();
	}
	
	//PubRichTextParagraph RichTextParagraph:
	//	('Paragraph' | 'P') style=PubParagraphStyle?
	//	text=DRichText;
	public PubGrammarAccess.PubRichTextParagraphElements getPubRichTextParagraphAccess() {
		return gaPub.getPubRichTextParagraphAccess();
	}
	
	public ParserRule getPubRichTextParagraphRule() {
		return getPubRichTextParagraphAccess().getRule();
	}
	
	//PubParagraphTextOnly RichTextParagraph:
	//	text=DRichText;
	public PubGrammarAccess.PubParagraphTextOnlyElements getPubParagraphTextOnlyAccess() {
		return gaPub.getPubParagraphTextOnlyAccess();
	}
	
	public ParserRule getPubParagraphTextOnlyRule() {
		return getPubParagraphTextOnlyAccess().getRule();
	}
	
	//PubFootnote Footnote:
	//	'Footnote'
	//	name=ID
	//	text=DRichText;
	public PubGrammarAccess.PubFootnoteElements getPubFootnoteAccess() {
		return gaPub.getPubFootnoteAccess();
	}
	
	public ParserRule getPubFootnoteRule() {
		return getPubFootnoteAccess().getRule();
	}
	
	//enum PubParagraphStyle returns ParagraphStyle:
	//	Plain='plain' | Quote='quote';
	public PubGrammarAccess.PubParagraphStyleElements getPubParagraphStyleAccess() {
		return gaPub.getPubParagraphStyleAccess();
	}
	
	public EnumRule getPubParagraphStyleRule() {
		return getPubParagraphStyleAccess().getRule();
	}
	
	//@Override
	//DmxPrimaryExpression DExpression:
	//	DmxLiteralExpression | DmxParenthesizedExpression | DmxListExpression | DmxFunctionCall | DmxIfExpression |
	//	DmxStaticReference | DmxContextReference | PubReference | DmxUrlLiteral;
	public PubGrammarAccess.DmxPrimaryExpressionElements getDmxPrimaryExpressionAccess() {
		return gaPub.getDmxPrimaryExpressionAccess();
	}
	
	public ParserRule getDmxPrimaryExpressionRule() {
		return getDmxPrimaryExpressionAccess().getRule();
	}
	
	//PubReference Reference:
	//	'#'
	//	scope=PubReferenceScope?
	//	target=[ReferenceTarget|DQualifiedName];
	public PubGrammarAccess.PubReferenceElements getPubReferenceAccess() {
		return gaPub.getPubReferenceAccess();
	}
	
	public ParserRule getPubReferenceRule() {
		return getPubReferenceAccess().getRule();
	}
	
	//enum PubReferenceScope returns ReferenceScope:
	//	DocumentSegment='seg' |
	//	Division='div' |
	//	Part='part' |
	//	Appendix='appendix' |
	//	Chapter='chapter' |
	//	Section='section' |
	//	Subsection='sub' |
	//	Subsubsection='subsub' |
	//	Footnote='footnote' |
	//	ListItem='item' |
	//	Table='table' |
	//	Figure='figure' |
	//	Equation='equation' |
	//	CodeListing='code' |
	//	Admonition='admonition' |
	//	Abbreviation='abbrev' |
	//	Glossary='glossary' |
	//	Bibliography='bilio';
	public PubGrammarAccess.PubReferenceScopeElements getPubReferenceScopeAccess() {
		return gaPub.getPubReferenceScopeAccess();
	}
	
	public EnumRule getPubReferenceScopeRule() {
		return getPubReferenceScopeAccess().getRule();
	}
	
	//DNote:
	//	'NOTE'
	//	name=ID
	//	'{'
	//	text=DRichText
	//	color=DNoteColor?
	//	'}';
	public DmxGrammarAccess.DNoteElements getDNoteAccess() {
		return gaDmx.getDNoteAccess();
	}
	
	public ParserRule getDNoteRule() {
		return getDNoteAccess().getRule();
	}
	
	//enum DNoteColor:
	//	WHITE='white' | RED='red' | ORANGE='orange' | YELLOW='yellow' | GREEN='green' | BLUE='blue' | PINK='pink' |
	//	GREY='grey';
	public DmxGrammarAccess.DNoteColorElements getDNoteColorAccess() {
		return gaDmx.getDNoteColorAccess();
	}
	
	public EnumRule getDNoteColorRule() {
		return getDNoteColorAccess().getRule();
	}
	
	//DmxModel:
	//	{DmxModel} types+=DmxArchetype*
	//	filters+=DmxFilter*
	//	// For unit-testing purposes:
	//	tests+=DmxTest*;
	public DmxGrammarAccess.DmxModelElements getDmxModelAccess() {
		return gaDmx.getDmxModelAccess();
	}
	
	public ParserRule getDmxModelRule() {
		return getDmxModelAccess().getRule();
	}
	
	//DImport:
	//	'import' importedNamespace=DQualifiedNameWithWildcard;
	public DmxGrammarAccess.DImportElements getDImportAccess() {
		return gaDmx.getDImportAccess();
	}
	
	public ParserRule getDImportRule() {
		return getDImportAccess().getRule();
	}
	
	///* 
	// * Testing
	// */ DmxTest:
	//	'test'
	//	name=ID ('context'
	//	context+=DmxTestContext (',' context+=DmxTestContext)*)?
	//	'{'
	//	expr=DExpression
	//	'}';
	public DmxGrammarAccess.DmxTestElements getDmxTestAccess() {
		return gaDmx.getDmxTestAccess();
	}
	
	public ParserRule getDmxTestRule() {
		return getDmxTestAccess().getRule();
	}
	
	//DmxTestContext:
	//	name=ID
	//	':'
	//	type=[DType] multiplicity=DMultiplicity? (':=' (value=DmxLiteralExpression | value=DmxLiteralListExpression))?;
	public DmxGrammarAccess.DmxTestContextElements getDmxTestContextAccess() {
		return gaDmx.getDmxTestContextAccess();
	}
	
	public ParserRule getDmxTestContextRule() {
		return getDmxTestContextAccess().getRule();
	}
	
	//enum DmxBaseType:
	//	VOID | BOOLEAN | NUMBER | TEXT | IDENTIFIER | TIMEPOINT | STATE /*transition*/ | STATE_EVENT | COMPLEX | NOTIFICATION
	//	/*sent* */ | SERVICE /*invoked* */;
	public DmxGrammarAccess.DmxBaseTypeElements getDmxBaseTypeAccess() {
		return gaDmx.getDmxBaseTypeAccess();
	}
	
	public EnumRule getDmxBaseTypeRule() {
		return getDmxBaseTypeAccess().getRule();
	}
	
	//DmxBaseTypeSet:
	//	name=ID
	//	'in'
	//	'(' members+=DmxBaseType (',' members+=DmxBaseType)+ ')';
	public DmxGrammarAccess.DmxBaseTypeSetElements getDmxBaseTypeSetAccess() {
		return gaDmx.getDmxBaseTypeSetAccess();
	}
	
	public ParserRule getDmxBaseTypeSetRule() {
		return getDmxBaseTypeSetAccess().getRule();
	}
	
	//DmxArchetype:
	//	'archetype'
	//	name=ID
	//	'is'
	//	baseType=DmxBaseType
	//	description=DRichText?;
	public DmxGrammarAccess.DmxArchetypeElements getDmxArchetypeAccess() {
		return gaDmx.getDmxArchetypeAccess();
	}
	
	public ParserRule getDmxArchetypeRule() {
		return getDmxArchetypeAccess().getRule();
	}
	
	//DmxFilter:
	//	'filter'
	//	name=ID
	//	'(' (parameters+=DmxFilterParameter (',' parameters+=DmxFilterParameter)*)? ')'
	//	':'
	//	typeDesc=DmxFilterTypeDescriptor ('with' withTypeSet=DmxBaseTypeSet)?;
	public DmxGrammarAccess.DmxFilterElements getDmxFilterAccess() {
		return gaDmx.getDmxFilterAccess();
	}
	
	public ParserRule getDmxFilterRule() {
		return getDmxFilterAccess().getRule();
	}
	
	//DmxFilterTypeDescriptor:
	//	(single=DmxBaseType
	//	| multiple=[DmxBaseTypeSet]) collection?='*'?;
	public DmxGrammarAccess.DmxFilterTypeDescriptorElements getDmxFilterTypeDescriptorAccess() {
		return gaDmx.getDmxFilterTypeDescriptorAccess();
	}
	
	public ParserRule getDmxFilterTypeDescriptorRule() {
		return getDmxFilterTypeDescriptorAccess().getRule();
	}
	
	//DmxFilterParameter:
	//	name=ID
	//	':'
	//	typeDesc=DmxFilterTypeDescriptor;
	public DmxGrammarAccess.DmxFilterParameterElements getDmxFilterParameterAccess() {
		return gaDmx.getDmxFilterParameterAccess();
	}
	
	public ParserRule getDmxFilterParameterRule() {
		return getDmxFilterParameterAccess().getRule();
	}
	
	///*
	// * Expressions
	// */ DExpression:
	//	DmxAssignment | DmxPredicateWithCorrelationVariable | DRichText;
	public DmxGrammarAccess.DExpressionElements getDExpressionAccess() {
		return gaDmx.getDExpressionAccess();
	}
	
	public ParserRule getDExpressionRule() {
		return getDExpressionAccess().getRule();
	}
	
	//DRichText:
	//	segments+=DmxTextOnly
	//	| segments+=DmxTextStart
	//	segments+=DExpression (segments+=DmxTextMiddle segments+=DExpression)*
	//	segments+=DmxTextEnd;
	public DmxGrammarAccess.DRichTextElements getDRichTextAccess() {
		return gaDmx.getDRichTextAccess();
	}
	
	public ParserRule getDRichTextRule() {
		return getDRichTextAccess().getRule();
	}
	
	//DmxTextOnly DTextSegment:
	//	value=PLAIN_TEXT_ONLY;
	public DmxGrammarAccess.DmxTextOnlyElements getDmxTextOnlyAccess() {
		return gaDmx.getDmxTextOnlyAccess();
	}
	
	public ParserRule getDmxTextOnlyRule() {
		return getDmxTextOnlyAccess().getRule();
	}
	
	//DmxTextStart DTextSegment:
	//	value=RICH_TEXT_START;
	public DmxGrammarAccess.DmxTextStartElements getDmxTextStartAccess() {
		return gaDmx.getDmxTextStartAccess();
	}
	
	public ParserRule getDmxTextStartRule() {
		return getDmxTextStartAccess().getRule();
	}
	
	//DmxTextMiddle DTextSegment:
	//	value=RICH_TEXT_MIDDLE;
	public DmxGrammarAccess.DmxTextMiddleElements getDmxTextMiddleAccess() {
		return gaDmx.getDmxTextMiddleAccess();
	}
	
	public ParserRule getDmxTextMiddleRule() {
		return getDmxTextMiddleAccess().getRule();
	}
	
	//DmxTextEnd DTextSegment:
	//	value=RICH_TEXT_END;
	public DmxGrammarAccess.DmxTextEndElements getDmxTextEndAccess() {
		return gaDmx.getDmxTextEndAccess();
	}
	
	public ParserRule getDmxTextEndRule() {
		return getDmxTextEndAccess().getRule();
	}
	
	//DmxNavigableMemberReference DExpression:
	//	super::DmxPrimaryExpression (=> ({DmxAssignment.precedingNavigationSegment=current} '.'
	//	assignToMember=[DNavigableMember] DmxOpSingleAssign) value=DmxOrExpression
	//	| => ({DmxMemberNavigation.precedingNavigationSegment=current} '.') member=[DNavigableMember] (=>
	//	explicitOperationCall?='(' // => boolean => has 0.n explicit arguments
	//	callArguments=DmxCallArguments
	//	')'
	//	| before?="@before")?)*;
	public DmxGrammarAccess.DmxNavigableMemberReferenceElements getDmxNavigableMemberReferenceAccess() {
		return gaDmx.getDmxNavigableMemberReferenceAccess();
	}
	
	public ParserRule getDmxNavigableMemberReferenceRule() {
		return getDmxNavigableMemberReferenceAccess().getRule();
	}
	
	//DmxCallArguments:
	//	{DmxCallArguments} (arguments+=DmxPredicateWithCorrelationVariable (','
	//	arguments+=DmxPredicateWithCorrelationVariable)*)?;
	public DmxGrammarAccess.DmxCallArgumentsElements getDmxCallArgumentsAccess() {
		return gaDmx.getDmxCallArgumentsAccess();
	}
	
	public ParserRule getDmxCallArgumentsRule() {
		return getDmxCallArgumentsAccess().getRule();
	}
	
	//DmxAssignment DExpression:
	//	{DmxAssignment} assignToMember=[DNavigableMember] DmxOpSingleAssign value=DmxOrExpression;
	public DmxGrammarAccess.DmxAssignmentElements getDmxAssignmentAccess() {
		return gaDmx.getDmxAssignmentAccess();
	}
	
	public ParserRule getDmxAssignmentRule() {
		return getDmxAssignmentAccess().getRule();
	}
	
	//DmxOpSingleAssign:
	//	':=';
	public DmxGrammarAccess.DmxOpSingleAssignElements getDmxOpSingleAssignAccess() {
		return gaDmx.getDmxOpSingleAssignAccess();
	}
	
	public ParserRule getDmxOpSingleAssignRule() {
		return getDmxOpSingleAssignAccess().getRule();
	}
	
	//DmxPredicateWithCorrelationVariable DExpression:
	//	{DmxPredicateWithCorrelationVariable} correlationVariable=DmxCorrelationVariable
	//	'|'
	//	predicate=DmxOrExpression
	//	| DmxOrExpression;
	public DmxGrammarAccess.DmxPredicateWithCorrelationVariableElements getDmxPredicateWithCorrelationVariableAccess() {
		return gaDmx.getDmxPredicateWithCorrelationVariableAccess();
	}
	
	public ParserRule getDmxPredicateWithCorrelationVariableRule() {
		return getDmxPredicateWithCorrelationVariableAccess().getRule();
	}
	
	//DmxCorrelationVariable:
	//	name=ID;
	public DmxGrammarAccess.DmxCorrelationVariableElements getDmxCorrelationVariableAccess() {
		return gaDmx.getDmxCorrelationVariableAccess();
	}
	
	public ParserRule getDmxCorrelationVariableRule() {
		return getDmxCorrelationVariableAccess().getRule();
	}
	
	////	(':' type=[DType])? => type is always NULL!
	//DmxOrExpression DExpression:
	//	DmxAndExpression (=> ({DmxBinaryOperation.leftOperand=current} operator=DmxOpOr) rightOperand=DmxAndExpression)*;
	public DmxGrammarAccess.DmxOrExpressionElements getDmxOrExpressionAccess() {
		return gaDmx.getDmxOrExpressionAccess();
	}
	
	public ParserRule getDmxOrExpressionRule() {
		return getDmxOrExpressionAccess().getRule();
	}
	
	//enum DmxOpOr returns DmxBinaryOperator:
	//	OR | OR='or' | XOR | XOR='xor';
	public DmxGrammarAccess.DmxOpOrElements getDmxOpOrAccess() {
		return gaDmx.getDmxOpOrAccess();
	}
	
	public EnumRule getDmxOpOrRule() {
		return getDmxOpOrAccess().getRule();
	}
	
	//DmxAndExpression DExpression:
	//	DmxEqualityExpression (=> ({DmxBinaryOperation.leftOperand=current} operator=DmxOpAnd)
	//	rightOperand=DmxEqualityExpression)*;
	public DmxGrammarAccess.DmxAndExpressionElements getDmxAndExpressionAccess() {
		return gaDmx.getDmxAndExpressionAccess();
	}
	
	public ParserRule getDmxAndExpressionRule() {
		return getDmxAndExpressionAccess().getRule();
	}
	
	//enum DmxOpAnd returns DmxBinaryOperator:
	//	AND | AND='and';
	public DmxGrammarAccess.DmxOpAndElements getDmxOpAndAccess() {
		return gaDmx.getDmxOpAndAccess();
	}
	
	public EnumRule getDmxOpAndRule() {
		return getDmxOpAndAccess().getRule();
	}
	
	//DmxEqualityExpression DExpression:
	//	DmxRelationalExpression (=> ({DmxBinaryOperation.leftOperand=current} operator=DmxOpEquality)
	//	rightOperand=DmxRelationalExpression)*;
	public DmxGrammarAccess.DmxEqualityExpressionElements getDmxEqualityExpressionAccess() {
		return gaDmx.getDmxEqualityExpressionAccess();
	}
	
	public ParserRule getDmxEqualityExpressionRule() {
		return getDmxEqualityExpressionAccess().getRule();
	}
	
	//enum DmxOpEquality returns DmxBinaryOperator:
	//	EQUAL='=' | NOT_EQUAL='!=' | NOT_EQUAL='<>';
	public DmxGrammarAccess.DmxOpEqualityElements getDmxOpEqualityAccess() {
		return gaDmx.getDmxOpEqualityAccess();
	}
	
	public EnumRule getDmxOpEqualityRule() {
		return getDmxOpEqualityAccess().getRule();
	}
	
	//DmxRelationalExpression DExpression:
	//	DmxOtherOperatorExpression (=> ({DmxInstanceOfExpression.expression=current} DmxOpInstanceOf) type=[DType] | =>
	//	({DmxBinaryOperation.leftOperand=current} operator=OpCompare) rightOperand=DmxOtherOperatorExpression)*;
	public DmxGrammarAccess.DmxRelationalExpressionElements getDmxRelationalExpressionAccess() {
		return gaDmx.getDmxRelationalExpressionAccess();
	}
	
	public ParserRule getDmxRelationalExpressionRule() {
		return getDmxRelationalExpressionAccess().getRule();
	}
	
	//DmxOpInstanceOf:
	//	'ISA' | 'isa';
	public DmxGrammarAccess.DmxOpInstanceOfElements getDmxOpInstanceOfAccess() {
		return gaDmx.getDmxOpInstanceOfAccess();
	}
	
	public ParserRule getDmxOpInstanceOfRule() {
		return getDmxOpInstanceOfAccess().getRule();
	}
	
	//enum OpCompare returns DmxBinaryOperator:
	//	LESS='<' | LESS_OR_EQUAL='<=' | LESS_OR_EQUAL='≤' | GREATER_OR_EQUAL='>=' | GREATER_OR_EQUAL='≥' | GREATER='>';
	public DmxGrammarAccess.OpCompareElements getOpCompareAccess() {
		return gaDmx.getOpCompareAccess();
	}
	
	public EnumRule getOpCompareRule() {
		return getOpCompareAccess().getRule();
	}
	
	//DmxOtherOperatorExpression DExpression:
	//	DmxAdditiveExpression (=> ({DmxBinaryOperation.leftOperand=current} operator=OpOther)
	//	rightOperand=DmxAdditiveExpression)*;
	public DmxGrammarAccess.DmxOtherOperatorExpressionElements getDmxOtherOperatorExpressionAccess() {
		return gaDmx.getDmxOtherOperatorExpressionAccess();
	}
	
	public ParserRule getDmxOtherOperatorExpressionRule() {
		return getDmxOtherOperatorExpressionAccess().getRule();
	}
	
	//enum OpOther returns DmxBinaryOperator:
	//	IN | IN='in' | UNTIL='..' | SINGLE_ARROW='->' | DOUBLE_ARROW='=>';
	public DmxGrammarAccess.OpOtherElements getOpOtherAccess() {
		return gaDmx.getOpOtherAccess();
	}
	
	public EnumRule getOpOtherRule() {
		return getOpOtherAccess().getRule();
	}
	
	//DmxAdditiveExpression DExpression:
	//	DmxMultiplicativeExpression (=> ({DmxBinaryOperation.leftOperand=current} operator=OpAdd)
	//	rightOperand=DmxMultiplicativeExpression)*;
	public DmxGrammarAccess.DmxAdditiveExpressionElements getDmxAdditiveExpressionAccess() {
		return gaDmx.getDmxAdditiveExpressionAccess();
	}
	
	public ParserRule getDmxAdditiveExpressionRule() {
		return getDmxAdditiveExpressionAccess().getRule();
	}
	
	//enum OpAdd returns DmxBinaryOperator:
	//	ADD='+' | SUBTRACT='-';
	public DmxGrammarAccess.OpAddElements getOpAddAccess() {
		return gaDmx.getOpAddAccess();
	}
	
	public EnumRule getOpAddRule() {
		return getOpAddAccess().getRule();
	}
	
	//DmxMultiplicativeExpression DExpression:
	//	DmxUnaryOperation (=> ({DmxBinaryOperation.leftOperand=current} operator=OpMulti) rightOperand=DmxUnaryOperation)*;
	public DmxGrammarAccess.DmxMultiplicativeExpressionElements getDmxMultiplicativeExpressionAccess() {
		return gaDmx.getDmxMultiplicativeExpressionAccess();
	}
	
	public ParserRule getDmxMultiplicativeExpressionRule() {
		return getDmxMultiplicativeExpressionAccess().getRule();
	}
	
	//enum OpMulti returns DmxBinaryOperator:
	//	MULTIPLY='*' | DIVIDE='/' | POWER='**' | MODULO='%';
	public DmxGrammarAccess.OpMultiElements getOpMultiAccess() {
		return gaDmx.getOpMultiAccess();
	}
	
	public EnumRule getOpMultiRule() {
		return getOpMultiAccess().getRule();
	}
	
	//DmxUnaryOperation DExpression:
	//	{DmxUnaryOperation} operator=OpUnary operand=DmxUnaryOperation
	//	| DmxCastExpression;
	public DmxGrammarAccess.DmxUnaryOperationElements getDmxUnaryOperationAccess() {
		return gaDmx.getDmxUnaryOperationAccess();
	}
	
	public ParserRule getDmxUnaryOperationRule() {
		return getDmxUnaryOperationAccess().getRule();
	}
	
	//enum OpUnary returns DmxUnaryOperator:
	//	PLUS='+' | MINUS='-' | NOT='!' | NOT | NOT='not';
	public DmxGrammarAccess.OpUnaryElements getOpUnaryAccess() {
		return gaDmx.getOpUnaryAccess();
	}
	
	public EnumRule getOpUnaryRule() {
		return getOpUnaryAccess().getRule();
	}
	
	//DmxCastExpression DExpression:
	//	DmxNavigableMemberReference (=> ({DmxCastExpression.target=current} DmxOpCast) type=[DType])?;
	public DmxGrammarAccess.DmxCastExpressionElements getDmxCastExpressionAccess() {
		return gaDmx.getDmxCastExpressionAccess();
	}
	
	public ParserRule getDmxCastExpressionRule() {
		return getDmxCastExpressionAccess().getRule();
	}
	
	//DmxOpCast:
	//	'AS' | 'as';
	public DmxGrammarAccess.DmxOpCastElements getDmxOpCastAccess() {
		return gaDmx.getDmxOpCastAccess();
	}
	
	public ParserRule getDmxOpCastRule() {
		return getDmxOpCastAccess().getRule();
	}
	
	//DmxLiteralExpression DExpression:
	//	DmxBooleanLiteral | DmxStringLiteral | DmxNaturalLiteral | DmxDecimalLiteral | DmxUndefinedLiteral | DmxEntity |
	//	DmxDetail;
	public DmxGrammarAccess.DmxLiteralExpressionElements getDmxLiteralExpressionAccess() {
		return gaDmx.getDmxLiteralExpressionAccess();
	}
	
	public ParserRule getDmxLiteralExpressionRule() {
		return getDmxLiteralExpressionAccess().getRule();
	}
	
	//DmxParenthesizedExpression DExpression:
	//	'(' DExpression ')';
	public DmxGrammarAccess.DmxParenthesizedExpressionElements getDmxParenthesizedExpressionAccess() {
		return gaDmx.getDmxParenthesizedExpressionAccess();
	}
	
	public ParserRule getDmxParenthesizedExpressionRule() {
		return getDmxParenthesizedExpressionAccess().getRule();
	}
	
	//DmxListExpression DExpression:
	//	{DmxListExpression}
	//	'{' (elements+=DExpression (',' elements+=DExpression)*)?
	//	'}';
	public DmxGrammarAccess.DmxListExpressionElements getDmxListExpressionAccess() {
		return gaDmx.getDmxListExpressionAccess();
	}
	
	public ParserRule getDmxListExpressionRule() {
		return getDmxListExpressionAccess().getRule();
	}
	
	//DmxLiteralListExpression DExpression:
	//	{DmxListExpression}
	//	'{' (elements+=DmxLiteralExpression (',' elements+=DmxLiteralExpression)*)?
	//	'}';
	public DmxGrammarAccess.DmxLiteralListExpressionElements getDmxLiteralListExpressionAccess() {
		return gaDmx.getDmxLiteralListExpressionAccess();
	}
	
	public ParserRule getDmxLiteralListExpressionRule() {
		return getDmxLiteralListExpressionAccess().getRule();
	}
	
	//DmxFunctionCall DExpression:
	//	{DmxFunctionCall} function=[DmxFilter]
	//	'('
	//	callArguments=DmxFunctionCallArguments
	//	')';
	public DmxGrammarAccess.DmxFunctionCallElements getDmxFunctionCallAccess() {
		return gaDmx.getDmxFunctionCallAccess();
	}
	
	public ParserRule getDmxFunctionCallRule() {
		return getDmxFunctionCallAccess().getRule();
	}
	
	//DmxFunctionCallArguments DmxCallArguments:
	//	{DmxCallArguments} (arguments+=DExpression (',' arguments+=DExpression)*)?;
	public DmxGrammarAccess.DmxFunctionCallArgumentsElements getDmxFunctionCallArgumentsAccess() {
		return gaDmx.getDmxFunctionCallArgumentsAccess();
	}
	
	public ParserRule getDmxFunctionCallArgumentsRule() {
		return getDmxFunctionCallArgumentsAccess().getRule();
	}
	
	//DmxEntity:
	//	'entity'
	//	DmxComplexObject;
	public DmxGrammarAccess.DmxEntityElements getDmxEntityAccess() {
		return gaDmx.getDmxEntityAccess();
	}
	
	public ParserRule getDmxEntityRule() {
		return getDmxEntityAccess().getRule();
	}
	
	//DmxDetail:
	//	'detail'
	//	DmxComplexObject;
	public DmxGrammarAccess.DmxDetailElements getDmxDetailAccess() {
		return gaDmx.getDmxDetailAccess();
	}
	
	public ParserRule getDmxDetailRule() {
		return getDmxDetailAccess().getRule();
	}
	
	//fragment DmxComplexObject:
	//	type=[DComplexType] DomFieldListStartSymbol
	//	fields+=DmxField*
	//	'}';
	public DmxGrammarAccess.DmxComplexObjectElements getDmxComplexObjectAccess() {
		return gaDmx.getDmxComplexObjectAccess();
	}
	
	public ParserRule getDmxComplexObjectRule() {
		return getDmxComplexObjectAccess().getRule();
	}
	
	//DmxField:
	//	feature=[DFeature] "=" value=DExpression;
	public DmxGrammarAccess.DmxFieldElements getDmxFieldAccess() {
		return gaDmx.getDmxFieldAccess();
	}
	
	public ParserRule getDmxFieldRule() {
		return getDmxFieldAccess().getRule();
	}
	
	//DmxStaticReference DExpression:
	//	{DmxStaticReference}
	//	'['
	//	target=[IStaticReferenceTarget|DQualifiedName] ('#' member=[DNavigableMember])? ("|" (displayName=ID | plural?="*"))?
	//	-> ']';
	public DmxGrammarAccess.DmxStaticReferenceElements getDmxStaticReferenceAccess() {
		return gaDmx.getDmxStaticReferenceAccess();
	}
	
	public ParserRule getDmxStaticReferenceRule() {
		return getDmxStaticReferenceAccess().getRule();
	}
	
	//// '->' gives precedence to this ']' over PLAIN_TEXT_MIDDLE ('=>' works too but generates more lookahead overhead)
	//DmxContextReference DExpression:
	//	{DmxContextReference} target=[DNamedElement] (before?="@before"
	//	| '.' all?='all')?;
	public DmxGrammarAccess.DmxContextReferenceElements getDmxContextReferenceAccess() {
		return gaDmx.getDmxContextReferenceAccess();
	}
	
	public ParserRule getDmxContextReferenceRule() {
		return getDmxContextReferenceAccess().getRule();
	}
	
	//DmxIfExpression DExpression:
	//	{DmxIfExpression}
	//	'if' if=DExpression
	//	'then' then=DExpression (=> 'else' else=DExpression)?
	//	'end';
	public DmxGrammarAccess.DmxIfExpressionElements getDmxIfExpressionAccess() {
		return gaDmx.getDmxIfExpressionAccess();
	}
	
	public ParserRule getDmxIfExpressionRule() {
		return getDmxIfExpressionAccess().getRule();
	}
	
	//DMultiplicity:
	//	shorthand=DMultiplicityShorthand | '(' minOccurs=NATURAL '..' maxOccurs=MULTIPLICITY ')';
	public DmxGrammarAccess.DMultiplicityElements getDMultiplicityAccess() {
		return gaDmx.getDMultiplicityAccess();
	}
	
	public ParserRule getDMultiplicityRule() {
		return getDMultiplicityAccess().getRule();
	}
	
	//enum DMultiplicityShorthand:
	//	ZERO_OR_ONE='?' | ONE_OR_MORE='+' | ZERO_OR_MORE='*';
	public DmxGrammarAccess.DMultiplicityShorthandElements getDMultiplicityShorthandAccess() {
		return gaDmx.getDMultiplicityShorthandAccess();
	}
	
	public EnumRule getDMultiplicityShorthandRule() {
		return getDMultiplicityShorthandAccess().getRule();
	}
	
	//MULTIPLICITY ecore::EInt:
	//	NATURAL | '*';
	public DmxGrammarAccess.MULTIPLICITYElements getMULTIPLICITYAccess() {
		return gaDmx.getMULTIPLICITYAccess();
	}
	
	public ParserRule getMULTIPLICITYRule() {
		return getMULTIPLICITYAccess().getRule();
	}
	
	//DmxBooleanLiteral DExpression:
	//	{DmxBooleanLiteral} (value?='TRUE' | value?='true' | 'FALSE' | 'false');
	public DmxGrammarAccess.DmxBooleanLiteralElements getDmxBooleanLiteralAccess() {
		return gaDmx.getDmxBooleanLiteralAccess();
	}
	
	public ParserRule getDmxBooleanLiteralRule() {
		return getDmxBooleanLiteralAccess().getRule();
	}
	
	//DmxNaturalLiteral DExpression:
	//	{DmxNaturalLiteral} value=NATURAL;
	public DmxGrammarAccess.DmxNaturalLiteralElements getDmxNaturalLiteralAccess() {
		return gaDmx.getDmxNaturalLiteralAccess();
	}
	
	public ParserRule getDmxNaturalLiteralRule() {
		return getDmxNaturalLiteralAccess().getRule();
	}
	
	//DmxDecimalLiteral DExpression:
	//	{DmxDecimalLiteral} value=DECIMAL;
	public DmxGrammarAccess.DmxDecimalLiteralElements getDmxDecimalLiteralAccess() {
		return gaDmx.getDmxDecimalLiteralAccess();
	}
	
	public ParserRule getDmxDecimalLiteralRule() {
		return getDmxDecimalLiteralAccess().getRule();
	}
	
	//DmxStringLiteral DExpression:
	//	{DmxStringLiteral} value=STRING;
	public DmxGrammarAccess.DmxStringLiteralElements getDmxStringLiteralAccess() {
		return gaDmx.getDmxStringLiteralAccess();
	}
	
	public ParserRule getDmxStringLiteralRule() {
		return getDmxStringLiteralAccess().getRule();
	}
	
	//DmxUndefinedLiteral DExpression:
	//	{DmxUndefinedLiteral} ('UNDEFINED' | 'undefined');
	public DmxGrammarAccess.DmxUndefinedLiteralElements getDmxUndefinedLiteralAccess() {
		return gaDmx.getDmxUndefinedLiteralAccess();
	}
	
	public ParserRule getDmxUndefinedLiteralRule() {
		return getDmxUndefinedLiteralAccess().getRule();
	}
	
	//DmxUrlLiteral DExpression:
	//	{DmxUrlLiteral}
	//	'URL:'
	//	value=STRING ('|' display=STRING)?;
	public DmxGrammarAccess.DmxUrlLiteralElements getDmxUrlLiteralAccess() {
		return gaDmx.getDmxUrlLiteralAccess();
	}
	
	public ParserRule getDmxUrlLiteralRule() {
		return getDmxUrlLiteralAccess().getRule();
	}
	
	//DECIMAL:
	//	NATURAL '.' NATURAL (('E' | 'e') ('+' | '-')? NATURAL)?;
	public DmxGrammarAccess.DECIMALElements getDECIMALAccess() {
		return gaDmx.getDECIMALAccess();
	}
	
	public ParserRule getDECIMALRule() {
		return getDECIMALAccess().getRule();
	}
	
	//DomFieldListStartSymbol:
	//	'{';
	public DmxGrammarAccess.DomFieldListStartSymbolElements getDomFieldListStartSymbolAccess() {
		return gaDmx.getDomFieldListStartSymbolAccess();
	}
	
	public ParserRule getDomFieldListStartSymbolRule() {
		return getDomFieldListStartSymbolAccess().getRule();
	}
	
	//DQualifiedNameWithWildcard:
	//	DQualifiedName '.*'?;
	public DmxGrammarAccess.DQualifiedNameWithWildcardElements getDQualifiedNameWithWildcardAccess() {
		return gaDmx.getDQualifiedNameWithWildcardAccess();
	}
	
	public ParserRule getDQualifiedNameWithWildcardRule() {
		return getDQualifiedNameWithWildcardAccess().getRule();
	}
	
	//DQualifiedName:
	//	ID ('.' ID)*;
	public DmxGrammarAccess.DQualifiedNameElements getDQualifiedNameAccess() {
		return gaDmx.getDQualifiedNameAccess();
	}
	
	public ParserRule getDQualifiedNameRule() {
		return getDQualifiedNameAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? (LETTER | '_') (LETTER | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaDmx.getIDRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"';
	public TerminalRule getSTRINGRule() {
		return gaDmx.getSTRINGRule();
	}
	
	//terminal NATURAL returns ecore::EInt:
	//	'0'..'9'+ | '∞';
	public TerminalRule getNATURALRule() {
		return gaDmx.getNATURALRule();
	}
	
	//terminal fragment LETTER:
	//	'a'..'z' | 'A'..'Z' | '\\u00c0'..'\\u00d6' | '\\u00d8'..'\\u00f6' | '\\u00f8'..'\\u00ff';
	public TerminalRule getLETTERRule() {
		return gaDmx.getLETTERRule();
	}
	
	//terminal fragment PLAIN_TEXT:
	//	!('»' | ']' | '[');
	public TerminalRule getPLAIN_TEXTRule() {
		return gaDmx.getPLAIN_TEXTRule();
	}
	
	//terminal PLAIN_TEXT_ONLY:
	//	'«' PLAIN_TEXT* '»';
	public TerminalRule getPLAIN_TEXT_ONLYRule() {
		return gaDmx.getPLAIN_TEXT_ONLYRule();
	}
	
	//terminal RICH_TEXT_START:
	//	'«' PLAIN_TEXT* '[';
	public TerminalRule getRICH_TEXT_STARTRule() {
		return gaDmx.getRICH_TEXT_STARTRule();
	}
	
	//terminal RICH_TEXT_MIDDLE:
	//	']' PLAIN_TEXT* '[';
	public TerminalRule getRICH_TEXT_MIDDLERule() {
		return gaDmx.getRICH_TEXT_MIDDLERule();
	}
	
	//terminal RICH_TEXT_END:
	//	']' PLAIN_TEXT* '»';
	public TerminalRule getRICH_TEXT_ENDRule() {
		return gaDmx.getRICH_TEXT_ENDRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaDmx.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaDmx.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaDmx.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaDmx.getANY_OTHERRule();
	}
}
