/**
 * generated by Xtext 2.16.0
 */
package com.mimacom.ddd.dm.dem.formatting2;

import com.google.common.base.Objects;
import com.google.inject.Inject;
import com.mimacom.ddd.dm.base.base.DContext;
import com.mimacom.ddd.dm.base.base.DExpression;
import com.mimacom.ddd.dm.base.base.DNamedElement;
import com.mimacom.ddd.dm.base.base.DNamedPredicate;
import com.mimacom.ddd.dm.base.base.DNamespace;
import com.mimacom.ddd.dm.base.base.DRichText;
import com.mimacom.ddd.dm.dem.DemCaseConjunction;
import com.mimacom.ddd.dm.dem.DemDomainEvent;
import com.mimacom.ddd.dm.dem.DemNotification;
import com.mimacom.ddd.dm.dem.DemTrigger;
import com.mimacom.ddd.dm.dem.services.DemGrammarAccess;
import com.mimacom.ddd.dm.dmx.DmxModel;
import com.mimacom.ddd.dm.dmx.formatting2.DmxFormatter;
import java.util.Arrays;
import java.util.List;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.formatting2.IHiddenRegionFormatter;
import org.eclipse.xtext.formatting2.regionaccess.ISemanticRegion;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.eclipse.xtext.xbase.lib.Procedures.Procedure1;

@SuppressWarnings("all")
public class DemFormatter extends DmxFormatter {
  @Inject
  @Extension
  private DemGrammarAccess _demGrammarAccess;
  
  protected void _format(final DemDomainEvent event, @Extension final IFormattableDocument document) {
    final ISemanticRegion open = this.textRegionExtensions.regionFor(event).keyword(this._demGrammarAccess.getDemDomainEventAccess().getLeftCurlyBracketKeyword_6());
    final ISemanticRegion close = this.textRegionExtensions.regionFor(event).keyword(this._demGrammarAccess.getDemDomainEventAccess().getRightCurlyBracketKeyword_13());
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.setNewLines(2);
    };
    document.append(open, _function);
    final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
      it.indent();
    };
    document.<ISemanticRegion, ISemanticRegion>interior(open, close, _function_1);
    final Procedure1<IHiddenRegionFormatter> _function_2 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.append(this.textRegionExtensions.regionFor(event).keyword(this._demGrammarAccess.getDemDomainEventAccess().getContextKeyword_7()), _function_2);
    EList<DContext> _context = event.getContext();
    for (final DContext context : _context) {
      {
        final Procedure1<IHiddenRegionFormatter> _function_3 = (IHiddenRegionFormatter it) -> {
          it.oneSpace();
        };
        document.surround(this.textRegionExtensions.regionFor(context).keyword(this._demGrammarAccess.getDContextAccess().getColonKeyword_2()), _function_3);
        final Procedure1<IHiddenRegionFormatter> _function_4 = (IHiddenRegionFormatter it) -> {
          it.indent();
        };
        document.<DContext>surround(context, _function_4);
        final Procedure1<IHiddenRegionFormatter> _function_5 = (IHiddenRegionFormatter it) -> {
          DContext _last = IterableExtensions.<DContext>last(event.getContext());
          boolean _equals = Objects.equal(context, _last);
          if (_equals) {
            it.setNewLines(2);
          } else {
            it.newLine();
          }
        };
        document.<DContext>append(context, _function_5);
      }
    }
    final Procedure1<IHiddenRegionFormatter> _function_3 = (IHiddenRegionFormatter it) -> {
      it.setNewLines(2);
    };
    document.prepend(this.textRegionExtensions.regionFor(event).keyword(this._demGrammarAccess.getDemDomainEventAccess().getTriggeredKeyword_9_0()), _function_3);
    final Procedure1<IHiddenRegionFormatter> _function_4 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.append(this.textRegionExtensions.regionFor(event).keyword(this._demGrammarAccess.getDemDomainEventAccess().getByKeyword_9_1()), _function_4);
    EList<DemTrigger> _triggers = event.getTriggers();
    for (final DemTrigger t : _triggers) {
      {
        final Procedure1<IHiddenRegionFormatter> _function_5 = (IHiddenRegionFormatter it) -> {
          it.oneSpace();
        };
        document.surround(this.textRegionExtensions.regionFor(t).assignment(this._demGrammarAccess.getDemDomainEventAccess().getTriggersAssignment_9_2()), _function_5);
        final Procedure1<IHiddenRegionFormatter> _function_6 = (IHiddenRegionFormatter it) -> {
          it.indent();
        };
        document.<DemTrigger>surround(t, _function_6);
        final Procedure1<IHiddenRegionFormatter> _function_7 = (IHiddenRegionFormatter it) -> {
          DemTrigger _last = IterableExtensions.<DemTrigger>last(event.getTriggers());
          boolean _equals = Objects.equal(t, _last);
          if (_equals) {
            it.setNewLines(2);
          } else {
            it.newLine();
          }
        };
        document.<DemTrigger>append(t, _function_7);
      }
    }
    final Procedure1<IHiddenRegionFormatter> _function_5 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.append(this.textRegionExtensions.regionFor(event).keyword(this._demGrammarAccess.getDemDomainEventAccess().getNotificationsKeyword_10_0()), _function_5);
    EList<DemNotification> _notifications = event.getNotifications();
    for (final DemNotification n : _notifications) {
      {
        final Procedure1<IHiddenRegionFormatter> _function_6 = (IHiddenRegionFormatter it) -> {
          it.oneSpace();
        };
        document.surround(this.textRegionExtensions.regionFor(n).keyword(this._demGrammarAccess.getDemNotificationAccess().getColonKeyword_2()), _function_6);
        final Procedure1<IHiddenRegionFormatter> _function_7 = (IHiddenRegionFormatter it) -> {
          it.indent();
        };
        document.<DemNotification>surround(n, _function_7);
        final Procedure1<IHiddenRegionFormatter> _function_8 = (IHiddenRegionFormatter it) -> {
          DemNotification _last = IterableExtensions.<DemNotification>last(event.getNotifications());
          boolean _equals = Objects.equal(n, _last);
          if (_equals) {
            it.setNewLines(2);
          } else {
            it.newLine();
          }
        };
        document.<DemNotification>append(n, _function_8);
      }
    }
    final Procedure1<IHiddenRegionFormatter> _function_6 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.append(this.textRegionExtensions.regionFor(event).keyword(this._demGrammarAccess.getDemDomainEventAccess().getPreconditionsKeyword_11_0()), _function_6);
    this.format(event.getPreconditionsCNF(), document);
    final Procedure1<IHiddenRegionFormatter> _function_7 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.append(this.textRegionExtensions.regionFor(event).keyword(this._demGrammarAccess.getDemDomainEventAccess().getPostconditionsKeyword_12_0()), _function_7);
    this.format(event.getPostconditionsDNF(), document);
  }
  
  protected void _format(final List<DNamedElement> elements, @Extension final IFormattableDocument document) {
    for (final DNamedElement e : elements) {
      {
        final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
          it.indent();
        };
        document.<DNamedElement>surround(e, _function);
        this.format(e, document);
        final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
          it.setNewLines(2);
        };
        document.<DNamedElement>append(e, _function_1);
      }
    }
  }
  
  protected void _format(final DNamedPredicate p, @Extension final IFormattableDocument document) {
    final ISemanticRegion colon = this.textRegionExtensions.regionFor(p).keyword(this._demGrammarAccess.getDNamedPredicateAccess().getColonKeyword_2());
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.noSpace();
    };
    document.prepend(colon, _function);
    final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.append(colon, _function_1);
    DRichText _description = p.getDescription();
    boolean _tripleNotEquals = (_description != null);
    if (_tripleNotEquals) {
      final Procedure1<IHiddenRegionFormatter> _function_2 = (IHiddenRegionFormatter it) -> {
        it.indent();
      };
      final Procedure1<IHiddenRegionFormatter> _function_3 = (IHiddenRegionFormatter it) -> {
        it.newLine();
      };
      document.<DRichText>append(document.<DRichText>surround(p.getDescription(), _function_2), _function_3);
    }
    final Procedure1<IHiddenRegionFormatter> _function_4 = (IHiddenRegionFormatter it) -> {
      it.indent();
    };
    document.<DExpression>surround(p.getPredicate(), _function_4);
  }
  
  protected void _format(final DemCaseConjunction c, @Extension final IFormattableDocument document) {
    DRichText _description = c.getDescription();
    boolean _tripleNotEquals = (_description != null);
    if (_tripleNotEquals) {
      final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
        it.indent();
      };
      final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
        it.newLine();
      };
      document.<DRichText>append(document.<DRichText>surround(c.getDescription(), _function), _function_1);
    }
    boolean _isOtherwise = c.isOtherwise();
    boolean _not = (!_isOtherwise);
    if (_not) {
      final ISemanticRegion when = this.textRegionExtensions.regionFor(c).keyword(this._demGrammarAccess.getDemCaseConjunctionAccess().getWhenKeyword_4_0_0());
      final Procedure1<IHiddenRegionFormatter> _function_2 = (IHiddenRegionFormatter it) -> {
        it.newLine();
      };
      document.prepend(when, _function_2);
    } else {
      final ISemanticRegion otherwise = this.textRegionExtensions.regionFor(c).keyword(this._demGrammarAccess.getDemCaseConjunctionAccess().getOtherwiseOtherwiseKeyword_4_1_0());
      final Procedure1<IHiddenRegionFormatter> _function_3 = (IHiddenRegionFormatter it) -> {
        it.newLine();
      };
      document.prepend(otherwise, _function_3);
    }
    final ISemanticRegion colon = this.textRegionExtensions.regionFor(c).keyword(this._demGrammarAccess.getDemCaseConjunctionAccess().getColonKeyword_5());
    final Procedure1<IHiddenRegionFormatter> _function_4 = (IHiddenRegionFormatter it) -> {
      it.noSpace();
    };
    document.prepend(colon, _function_4);
    final Procedure1<IHiddenRegionFormatter> _function_5 = (IHiddenRegionFormatter it) -> {
      it.setNewLines(2);
    };
    document.append(colon, _function_5);
    this.format(c.getPredicates(), document);
  }
  
  protected void _format(final DContext context, @Extension final IFormattableDocument document) {
  }
  
  public void format(final Object context, final IFormattableDocument document) {
    if (context instanceof DContext) {
      _format((DContext)context, document);
      return;
    } else if (context instanceof DRichText) {
      _format((DRichText)context, document);
      return;
    } else if (context instanceof DemDomainEvent) {
      _format((DemDomainEvent)context, document);
      return;
    } else if (context instanceof DmxModel) {
      _format((DmxModel)context, document);
      return;
    } else if (context instanceof XtextResource) {
      _format((XtextResource)context, document);
      return;
    } else if (context instanceof DExpression) {
      _format((DExpression)context, document);
      return;
    } else if (context instanceof DNamedPredicate) {
      _format((DNamedPredicate)context, document);
      return;
    } else if (context instanceof DNamespace) {
      _format((DNamespace)context, document);
      return;
    } else if (context instanceof DemCaseConjunction) {
      _format((DemCaseConjunction)context, document);
      return;
    } else if (context instanceof List) {
      _format((List<DNamedElement>)context, document);
      return;
    } else if (context instanceof EObject) {
      _format((EObject)context, document);
      return;
    } else if (context == null) {
      _format((Void)null, document);
      return;
    } else if (context != null) {
      _format(context, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(context, document).toString());
    }
  }
}
