/**
 * generated by Xtext 2.16.0
 */
package com.mimacom.ddd.dm.dem.validation;

import com.google.common.collect.Iterables;
import com.mimacom.ddd.dm.base.base.BasePackage;
import com.mimacom.ddd.dm.base.base.DNamedElement;
import com.mimacom.ddd.dm.dem.DemActor;
import com.mimacom.ddd.dm.dem.DemCaseConjunction;
import com.mimacom.ddd.dm.dem.DemDomainEvent;
import com.mimacom.ddd.dm.dem.DemNotification;
import com.mimacom.ddd.dm.dem.validation.AbstractDemValidator;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.validation.Check;
import org.eclipse.xtext.xbase.lib.Conversions;
import org.eclipse.xtext.xbase.lib.Functions.Function1;
import org.eclipse.xtext.xbase.lib.IterableExtensions;

/**
 * This class contains custom validation rules.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
@SuppressWarnings("all")
public class DemValidator extends AbstractDemValidator {
  private static final BasePackage BASE = BasePackage.eINSTANCE;
  
  @Check
  public void checkOtherwiseClause(final DemDomainEvent event) {
    final Iterable<DemCaseConjunction> caseConjunctions = Iterables.<DemCaseConjunction>filter(event.getPostconditionsDNF(), DemCaseConjunction.class);
    final Function1<DemCaseConjunction, Boolean> _function = (DemCaseConjunction it) -> {
      return Boolean.valueOf(it.isOtherwise());
    };
    final int countOtherwise = IterableExtensions.size(IterableExtensions.<DemCaseConjunction>filter(caseConjunctions, _function));
    if ((countOtherwise == 1)) {
      for (int i = 0; (i < IterableExtensions.size(caseConjunctions)); i++) {
        if (((((DemCaseConjunction[])Conversions.unwrapArray(caseConjunctions, DemCaseConjunction.class))[i]).isOtherwise() && (i != (IterableExtensions.size(caseConjunctions) - 1)))) {
          this.error("The \'otherwise\' clause must be last", ((EObject[])Conversions.unwrapArray(caseConjunctions, EObject.class))[i], DemValidator.BASE.getDNamedElement_Name());
        }
      }
    } else {
      if ((countOtherwise > 1)) {
        for (int i = 0; (i < IterableExtensions.size(caseConjunctions)); i++) {
          boolean _isOtherwise = (((DemCaseConjunction[])Conversions.unwrapArray(caseConjunctions, DemCaseConjunction.class))[i]).isOtherwise();
          if (_isOtherwise) {
            this.error("There can only be one \'otherwise\' clause ", ((EObject[])Conversions.unwrapArray(caseConjunctions, EObject.class))[i], DemValidator.BASE.getDNamedElement_Name());
          }
        }
      }
    }
  }
  
  @Check
  public void checkTypeNameStartsWithCapital(final DemActor a) {
    this.checkNameStartsWithCapital(a);
  }
  
  @Check
  public void checkTypeNameStartsWithCapital(final DemDomainEvent de) {
    this.checkNameStartsWithCapital(de);
  }
  
  @Check
  public void checkTypeNameStartsWithCapital(final DemNotification n) {
    this.checkNameStartsWithCapital(n);
  }
  
  public void checkNameStartsWithCapital(final DNamedElement ne) {
    this.checkNameStartsWithCapitalImpl(ne.getName(), ne);
  }
  
  protected void checkNameStartsWithCapitalImpl(final String name, final DNamedElement ne) {
    if ((((name != null) && (name.length() > 0)) && (!Character.isUpperCase(name.charAt(0))))) {
      this.warning("Name should start with a capital", ne, BasePackage.Literals.DNAMED_ELEMENT__NAME);
    }
  }
}
