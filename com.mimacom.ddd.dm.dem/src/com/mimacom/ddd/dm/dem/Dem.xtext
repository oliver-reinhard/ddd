// automatically generated by Xtext
grammar com.mimacom.ddd.dm.dem.Dem with  com.mimacom.ddd.dm.dmx.Dmx

import "http://www.mimacom.com/ddd/dm/dmx" 
import "http://www.mimacom.com/ddd/dm/base"
import "http://www.mimacom.com/ddd/dm/dem"

@Override 
DNamespace:
	'domain'
	name=DQualifiedName
	(imports+=DImport)*
	model=(DemDomainEvent | DemActorModel | DemEventsOverviewModel);

/*
 * DOMAIN EVENT
 */
DemDomainEvent returns DModel:
	'event'
	{DemDomainEvent}
	name=ID
	('alias' aliases+=ID)*
	(description=DRichText)?
	(notes+=DNote)*
	'{'
		'context' (context+=DContext)+
		('triggered' 'by' triggers+=[DemActor|ID]+)?
		('notifications' notifications+=DemNotification+)?
		('preconditions' preconditionsCNF+=DNamedPredicate+)?
		('postconditions'
			(	postconditionsDNF+=DemCaseConjunction+
			|	postconditionsDNF+=DNamedPredicate+
			)
		)? 
	'}';

DNamedPredicate:
	name=ID
	('alias' aliases+=ID)*
	':'
	(description=DRichText)?
	(notes+=DNote)*
	predicate=DmxOrExpression;

DemCaseConjunction:
	'case'
	name=ID
	('alias' aliases+=ID)*
	(description=DRichText)?
	(	'when'
		selector=DmxOrExpression
	|	otherwise?='otherwise'
	)
	':'
	predicates+=DNamedPredicate+
;
	
DemNotification:
	// type always null
	name=ID
	('alias' aliases+=ID)*
	':'
	message=DemMessage
	'to' notified=[DemActor|ID]
	(description=DRichText)?;

DemMessage:
	// implicit name: "message"
	type=[DType|ID]  (multiplicity=DMultiplicity)?;
	
DContext:
	name=ID
	('alias' aliases+=ID)*
	':'
	type=[DType|ID]  (multiplicity=DMultiplicity)?
	(description=DRichText)?
	(notes+=DNote)*;

/*
 * ACTOR MODEL
 */
DemActorModel:
	'actor' 'model'
	name=ID
	(description=DRichText)?
	(notes+=DNote)*
	'{'
	actors+=DemActor*
	'}';
	
DemActor:
	DemHumanActorRole | DemService;

DemHumanActorRole:
	'human' 'actor' 'as'
	name=ID
	('alias' aliases+=ID)*
	(description=DRichText)?
	(notes+=DNote)*;
	
DemService:
	'service' 'actor'
	name=ID
	('alias' aliases+=ID)*
	(description=DRichText)?
	(notes+=DNote)*;

/*
 * EVENTS OVERVIEW
 */
DemEventsOverviewModel:
	'event' 'overview'
	name=ID
	(description=DRichText)?
	(notes+=DNote)*
	'{'
	(	'include' all?='all'
	|	'include'
		(include+=[DemDomainEvent|DQualifiedName])+	
	|	'exclude'
		(exclude+=[DemDomainEvent|DQualifiedName])+	
	)
	'}';