// automatically generated by Xtext
grammar com.mimacom.ddd.dm.dem.Dem with  com.mimacom.ddd.dm.dmx.Dmx

import "http://www.mimacom.com/ddd/dm/dmx" 
import "http://www.mimacom.com/ddd/dm/base" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

DDomain:
	(imports+=DImport)*
	'domain'
	name=DQualifiedName
	('alias' aliases+=ID)*	
	(description=DRichText)?
	(events+=DDomainEvent | actors+=DActor)*;

/*
 * BEHAVIOUR
 */
DDomainEvent:
	'event'
	name=ID
	('alias' aliases+=ID)*
	(description=DRichText)?
	'{'
		'context' (context+=DContext)+
		('triggered' 'by' trigger=[DActor|ID])?
		('notifications' (notifications+=DNotification)+)?
		('preconditions' (preconditionsCNF+=DNamedPredicate)+)?
		('postconditions'
			(	(postconditionsDNF+=DCaseConjunction)+
			|	(postconditionsDNF+=DNamedPredicate)+
			)
		)? 
	'}';
	
DNamedPredicate:
	name=ID
	('alias' aliases+=ID)*
	':'
	predicate=DExpression
	(description=DRichText)?;

DCaseConjunction:
	'case'
	name=ID
	('alias' aliases+=ID)*
	'when'
	selector=DExpression
	':'
	(predicates+=DNamedPredicate)+
;
	
DNotification:
	// type always null
	name=ID
	('alias' aliases+=ID)*
	':'
	message=DMessage
	'to' notified=[DActor|ID]
	(description=DRichText)?;

DMessage:
	// implicit name: "message"
	type=[DType|ID]  (multiplicity=DMultiplicity)?;
	
DContext:
	name=ID
	('alias' aliases+=ID)*
	':'
	type=[DType|ID]  (multiplicity=DMultiplicity)?
	(description=DRichText)?;
	
DActor:
	DHumanActorRole | DService;

DHumanActorRole:
	'human' 'actor' 'as'
	name=ID
	('alias' aliases+=ID)*
	(description=DRichText)?;
	
DService:
	'service' 'actor'
	name=ID
	('alias' aliases+=ID)*
	(description=DRichText)?;
