/*
 * generated by Xtext 2.19.0
 */
package com.mimacom.ddd.dm.dem.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import com.mimacom.ddd.dm.dmx.services.DmxGrammarAccess;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class DemGrammarAccess extends AbstractGrammarElementFinder {
	
	public class DNamespaceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.dem.Dem.DNamespace");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDomainKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameDQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cImportsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cImportsDImportParserRuleCall_2_0 = (RuleCall)cImportsAssignment_2.eContents().get(0);
		private final Assignment cModelAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Alternatives cModelAlternatives_3_0 = (Alternatives)cModelAssignment_3.eContents().get(0);
		private final RuleCall cModelDemDomainEventParserRuleCall_3_0_0 = (RuleCall)cModelAlternatives_3_0.eContents().get(0);
		private final RuleCall cModelDemActorModelParserRuleCall_3_0_1 = (RuleCall)cModelAlternatives_3_0.eContents().get(1);
		private final RuleCall cModelDemEventsOverviewModelParserRuleCall_3_0_2 = (RuleCall)cModelAlternatives_3_0.eContents().get(2);
		
		//@Override
		//DNamespace:
		//	'domain'
		//	name=DQualifiedName
		//	imports+=DImport*
		//	model=(DemDomainEvent | DemActorModel | DemEventsOverviewModel);
		@Override public ParserRule getRule() { return rule; }
		
		//'domain' name=DQualifiedName imports+=DImport* model=(DemDomainEvent | DemActorModel | DemEventsOverviewModel)
		public Group getGroup() { return cGroup; }
		
		//'domain'
		public Keyword getDomainKeyword_0() { return cDomainKeyword_0; }
		
		//name=DQualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//DQualifiedName
		public RuleCall getNameDQualifiedNameParserRuleCall_1_0() { return cNameDQualifiedNameParserRuleCall_1_0; }
		
		//imports+=DImport*
		public Assignment getImportsAssignment_2() { return cImportsAssignment_2; }
		
		//DImport
		public RuleCall getImportsDImportParserRuleCall_2_0() { return cImportsDImportParserRuleCall_2_0; }
		
		//model=(DemDomainEvent | DemActorModel | DemEventsOverviewModel)
		public Assignment getModelAssignment_3() { return cModelAssignment_3; }
		
		//(DemDomainEvent | DemActorModel | DemEventsOverviewModel)
		public Alternatives getModelAlternatives_3_0() { return cModelAlternatives_3_0; }
		
		//DemDomainEvent
		public RuleCall getModelDemDomainEventParserRuleCall_3_0_0() { return cModelDemDomainEventParserRuleCall_3_0_0; }
		
		//DemActorModel
		public RuleCall getModelDemActorModelParserRuleCall_3_0_1() { return cModelDemActorModelParserRuleCall_3_0_1; }
		
		//DemEventsOverviewModel
		public RuleCall getModelDemEventsOverviewModelParserRuleCall_3_0_2() { return cModelDemEventsOverviewModelParserRuleCall_3_0_2; }
	}
	public class DemDomainEventElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.dem.Dem.DemDomainEvent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEventKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cDemDomainEventAction_1 = (Action)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cAliasKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cAliasAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cAliasIDTerminalRuleCall_3_1_0 = (RuleCall)cAliasAssignment_3_1.eContents().get(0);
		private final Assignment cDescriptionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cDescriptionDRichTextParserRuleCall_4_0 = (RuleCall)cDescriptionAssignment_4.eContents().get(0);
		private final Assignment cNotesAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cNotesDNoteParserRuleCall_5_0 = (RuleCall)cNotesAssignment_5.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cContextKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cContextAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cContextDContextParserRuleCall_8_0 = (RuleCall)cContextAssignment_8.eContents().get(0);
		private final Group cGroup_9 = (Group)cGroup.eContents().get(9);
		private final Keyword cTriggeredKeyword_9_0 = (Keyword)cGroup_9.eContents().get(0);
		private final Keyword cByKeyword_9_1 = (Keyword)cGroup_9.eContents().get(1);
		private final Assignment cTriggersAssignment_9_2 = (Assignment)cGroup_9.eContents().get(2);
		private final RuleCall cTriggersDemTriggerParserRuleCall_9_2_0 = (RuleCall)cTriggersAssignment_9_2.eContents().get(0);
		private final Group cGroup_10 = (Group)cGroup.eContents().get(10);
		private final Keyword cNotificationsKeyword_10_0 = (Keyword)cGroup_10.eContents().get(0);
		private final Assignment cNotificationsAssignment_10_1 = (Assignment)cGroup_10.eContents().get(1);
		private final RuleCall cNotificationsDemNotificationParserRuleCall_10_1_0 = (RuleCall)cNotificationsAssignment_10_1.eContents().get(0);
		private final Group cGroup_11 = (Group)cGroup.eContents().get(11);
		private final Keyword cPreconditionsKeyword_11_0 = (Keyword)cGroup_11.eContents().get(0);
		private final Assignment cPreconditionsCNFAssignment_11_1 = (Assignment)cGroup_11.eContents().get(1);
		private final RuleCall cPreconditionsCNFDNamedPredicateParserRuleCall_11_1_0 = (RuleCall)cPreconditionsCNFAssignment_11_1.eContents().get(0);
		private final Group cGroup_12 = (Group)cGroup.eContents().get(12);
		private final Keyword cPostconditionsKeyword_12_0 = (Keyword)cGroup_12.eContents().get(0);
		private final Alternatives cAlternatives_12_1 = (Alternatives)cGroup_12.eContents().get(1);
		private final Assignment cPostconditionsDNFAssignment_12_1_0 = (Assignment)cAlternatives_12_1.eContents().get(0);
		private final RuleCall cPostconditionsDNFDemCaseConjunctionParserRuleCall_12_1_0_0 = (RuleCall)cPostconditionsDNFAssignment_12_1_0.eContents().get(0);
		private final Assignment cPostconditionsDNFAssignment_12_1_1 = (Assignment)cAlternatives_12_1.eContents().get(1);
		private final RuleCall cPostconditionsDNFDNamedPredicateParserRuleCall_12_1_1_0 = (RuleCall)cPostconditionsDNFAssignment_12_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_13 = (Keyword)cGroup.eContents().get(13);
		
		///*
		// * DOMAIN EVENT
		// */ DemDomainEvent DModel:
		//	'event' {DemDomainEvent} name=ID ('alias' alias=ID)?
		//	description=DRichText?
		//	notes+=DNote*
		//	'{'
		//	'context' context+=DContext+ ('triggered' 'by' triggers+=DemTrigger+)? ('notifications'
		//	notifications+=DemNotification+)? ('preconditions' preconditionsCNF+=DNamedPredicate+)? ('postconditions'
		//	(postconditionsDNF+=DemCaseConjunction+
		//	| postconditionsDNF+=DNamedPredicate+))?
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'event' {DemDomainEvent} name=ID ('alias' alias=ID)? description=DRichText? notes+=DNote* '{' 'context'
		//context+=DContext+ ('triggered' 'by' triggers+=DemTrigger+)? ('notifications' notifications+=DemNotification+)?
		//('preconditions' preconditionsCNF+=DNamedPredicate+)? ('postconditions' (postconditionsDNF+=DemCaseConjunction+ |
		//postconditionsDNF+=DNamedPredicate+))? '}'
		public Group getGroup() { return cGroup; }
		
		//'event'
		public Keyword getEventKeyword_0() { return cEventKeyword_0; }
		
		//{DemDomainEvent}
		public Action getDemDomainEventAction_1() { return cDemDomainEventAction_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//('alias' alias=ID)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'alias'
		public Keyword getAliasKeyword_3_0() { return cAliasKeyword_3_0; }
		
		//alias=ID
		public Assignment getAliasAssignment_3_1() { return cAliasAssignment_3_1; }
		
		//ID
		public RuleCall getAliasIDTerminalRuleCall_3_1_0() { return cAliasIDTerminalRuleCall_3_1_0; }
		
		//description=DRichText?
		public Assignment getDescriptionAssignment_4() { return cDescriptionAssignment_4; }
		
		//DRichText
		public RuleCall getDescriptionDRichTextParserRuleCall_4_0() { return cDescriptionDRichTextParserRuleCall_4_0; }
		
		//notes+=DNote*
		public Assignment getNotesAssignment_5() { return cNotesAssignment_5; }
		
		//DNote
		public RuleCall getNotesDNoteParserRuleCall_5_0() { return cNotesDNoteParserRuleCall_5_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_6() { return cLeftCurlyBracketKeyword_6; }
		
		//'context'
		public Keyword getContextKeyword_7() { return cContextKeyword_7; }
		
		//context+=DContext+
		public Assignment getContextAssignment_8() { return cContextAssignment_8; }
		
		//DContext
		public RuleCall getContextDContextParserRuleCall_8_0() { return cContextDContextParserRuleCall_8_0; }
		
		//('triggered' 'by' triggers+=DemTrigger+)?
		public Group getGroup_9() { return cGroup_9; }
		
		//'triggered'
		public Keyword getTriggeredKeyword_9_0() { return cTriggeredKeyword_9_0; }
		
		//'by'
		public Keyword getByKeyword_9_1() { return cByKeyword_9_1; }
		
		//triggers+=DemTrigger+
		public Assignment getTriggersAssignment_9_2() { return cTriggersAssignment_9_2; }
		
		//DemTrigger
		public RuleCall getTriggersDemTriggerParserRuleCall_9_2_0() { return cTriggersDemTriggerParserRuleCall_9_2_0; }
		
		//('notifications' notifications+=DemNotification+)?
		public Group getGroup_10() { return cGroup_10; }
		
		//'notifications'
		public Keyword getNotificationsKeyword_10_0() { return cNotificationsKeyword_10_0; }
		
		//notifications+=DemNotification+
		public Assignment getNotificationsAssignment_10_1() { return cNotificationsAssignment_10_1; }
		
		//DemNotification
		public RuleCall getNotificationsDemNotificationParserRuleCall_10_1_0() { return cNotificationsDemNotificationParserRuleCall_10_1_0; }
		
		//('preconditions' preconditionsCNF+=DNamedPredicate+)?
		public Group getGroup_11() { return cGroup_11; }
		
		//'preconditions'
		public Keyword getPreconditionsKeyword_11_0() { return cPreconditionsKeyword_11_0; }
		
		//preconditionsCNF+=DNamedPredicate+
		public Assignment getPreconditionsCNFAssignment_11_1() { return cPreconditionsCNFAssignment_11_1; }
		
		//DNamedPredicate
		public RuleCall getPreconditionsCNFDNamedPredicateParserRuleCall_11_1_0() { return cPreconditionsCNFDNamedPredicateParserRuleCall_11_1_0; }
		
		//('postconditions' (postconditionsDNF+=DemCaseConjunction+ | postconditionsDNF+=DNamedPredicate+))?
		public Group getGroup_12() { return cGroup_12; }
		
		//'postconditions'
		public Keyword getPostconditionsKeyword_12_0() { return cPostconditionsKeyword_12_0; }
		
		//(postconditionsDNF+=DemCaseConjunction+ | postconditionsDNF+=DNamedPredicate+)
		public Alternatives getAlternatives_12_1() { return cAlternatives_12_1; }
		
		//postconditionsDNF+=DemCaseConjunction+
		public Assignment getPostconditionsDNFAssignment_12_1_0() { return cPostconditionsDNFAssignment_12_1_0; }
		
		//DemCaseConjunction
		public RuleCall getPostconditionsDNFDemCaseConjunctionParserRuleCall_12_1_0_0() { return cPostconditionsDNFDemCaseConjunctionParserRuleCall_12_1_0_0; }
		
		//postconditionsDNF+=DNamedPredicate+
		public Assignment getPostconditionsDNFAssignment_12_1_1() { return cPostconditionsDNFAssignment_12_1_1; }
		
		//DNamedPredicate
		public RuleCall getPostconditionsDNFDNamedPredicateParserRuleCall_12_1_1_0() { return cPostconditionsDNFDNamedPredicateParserRuleCall_12_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_13() { return cRightCurlyBracketKeyword_13; }
	}
	public class DemTriggerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.dem.Dem.DemTrigger");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cActorAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cActorDemActorCrossReference_0_0 = (CrossReference)cActorAssignment_0.eContents().get(0);
		private final RuleCall cActorDemActorIDTerminalRuleCall_0_0_1 = (RuleCall)cActorDemActorCrossReference_0_0.eContents().get(1);
		private final Assignment cNotesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNotesDNoteParserRuleCall_1_0 = (RuleCall)cNotesAssignment_1.eContents().get(0);
		
		//DemTrigger:
		//	actor=[DemActor] notes+=DNote*;
		@Override public ParserRule getRule() { return rule; }
		
		//actor=[DemActor] notes+=DNote*
		public Group getGroup() { return cGroup; }
		
		//actor=[DemActor]
		public Assignment getActorAssignment_0() { return cActorAssignment_0; }
		
		//[DemActor]
		public CrossReference getActorDemActorCrossReference_0_0() { return cActorDemActorCrossReference_0_0; }
		
		//ID
		public RuleCall getActorDemActorIDTerminalRuleCall_0_0_1() { return cActorDemActorIDTerminalRuleCall_0_0_1; }
		
		//notes+=DNote*
		public Assignment getNotesAssignment_1() { return cNotesAssignment_1; }
		
		//DNote
		public RuleCall getNotesDNoteParserRuleCall_1_0() { return cNotesDNoteParserRuleCall_1_0; }
	}
	public class DNamedPredicateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.dem.Dem.DNamedPredicate");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cAliasKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cAliasAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cAliasIDTerminalRuleCall_1_1_0 = (RuleCall)cAliasAssignment_1_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cDescriptionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDescriptionDRichTextParserRuleCall_3_0 = (RuleCall)cDescriptionAssignment_3.eContents().get(0);
		private final Assignment cNotesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cNotesDNoteParserRuleCall_4_0 = (RuleCall)cNotesAssignment_4.eContents().get(0);
		private final Assignment cPredicateAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cPredicateDmxOrExpressionParserRuleCall_5_0 = (RuleCall)cPredicateAssignment_5.eContents().get(0);
		
		//DNamedPredicate:
		//	name=ID ('alias' alias=ID)?
		//	':'
		//	description=DRichText?
		//	notes+=DNote*
		//	predicate=DmxOrExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID ('alias' alias=ID)? ':' description=DRichText? notes+=DNote* predicate=DmxOrExpression
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//('alias' alias=ID)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'alias'
		public Keyword getAliasKeyword_1_0() { return cAliasKeyword_1_0; }
		
		//alias=ID
		public Assignment getAliasAssignment_1_1() { return cAliasAssignment_1_1; }
		
		//ID
		public RuleCall getAliasIDTerminalRuleCall_1_1_0() { return cAliasIDTerminalRuleCall_1_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//description=DRichText?
		public Assignment getDescriptionAssignment_3() { return cDescriptionAssignment_3; }
		
		//DRichText
		public RuleCall getDescriptionDRichTextParserRuleCall_3_0() { return cDescriptionDRichTextParserRuleCall_3_0; }
		
		//notes+=DNote*
		public Assignment getNotesAssignment_4() { return cNotesAssignment_4; }
		
		//DNote
		public RuleCall getNotesDNoteParserRuleCall_4_0() { return cNotesDNoteParserRuleCall_4_0; }
		
		//predicate=DmxOrExpression
		public Assignment getPredicateAssignment_5() { return cPredicateAssignment_5; }
		
		//DmxOrExpression
		public RuleCall getPredicateDmxOrExpressionParserRuleCall_5_0() { return cPredicateDmxOrExpressionParserRuleCall_5_0; }
	}
	public class DemCaseConjunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.dem.Dem.DemCaseConjunction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCaseKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cAliasKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cAliasAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cAliasIDTerminalRuleCall_2_1_0 = (RuleCall)cAliasAssignment_2_1.eContents().get(0);
		private final Assignment cDescriptionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDescriptionDRichTextParserRuleCall_3_0 = (RuleCall)cDescriptionAssignment_3.eContents().get(0);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Group cGroup_4_0 = (Group)cAlternatives_4.eContents().get(0);
		private final Keyword cWhenKeyword_4_0_0 = (Keyword)cGroup_4_0.eContents().get(0);
		private final Assignment cSelectorAssignment_4_0_1 = (Assignment)cGroup_4_0.eContents().get(1);
		private final RuleCall cSelectorDmxOrExpressionParserRuleCall_4_0_1_0 = (RuleCall)cSelectorAssignment_4_0_1.eContents().get(0);
		private final Assignment cOtherwiseAssignment_4_1 = (Assignment)cAlternatives_4.eContents().get(1);
		private final Keyword cOtherwiseOtherwiseKeyword_4_1_0 = (Keyword)cOtherwiseAssignment_4_1.eContents().get(0);
		private final Keyword cColonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cPredicatesAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cPredicatesDNamedPredicateParserRuleCall_6_0 = (RuleCall)cPredicatesAssignment_6.eContents().get(0);
		
		//DemCaseConjunction:
		//	'case'
		//	name=ID ('alias' alias=ID)?
		//	description=DRichText? ('when'
		//	selector=DmxOrExpression
		//	| otherwise?='otherwise')
		//	':'
		//	predicates+=DNamedPredicate+;
		@Override public ParserRule getRule() { return rule; }
		
		//'case' name=ID ('alias' alias=ID)? description=DRichText? ('when' selector=DmxOrExpression | otherwise?='otherwise') ':'
		//predicates+=DNamedPredicate+
		public Group getGroup() { return cGroup; }
		
		//'case'
		public Keyword getCaseKeyword_0() { return cCaseKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//('alias' alias=ID)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'alias'
		public Keyword getAliasKeyword_2_0() { return cAliasKeyword_2_0; }
		
		//alias=ID
		public Assignment getAliasAssignment_2_1() { return cAliasAssignment_2_1; }
		
		//ID
		public RuleCall getAliasIDTerminalRuleCall_2_1_0() { return cAliasIDTerminalRuleCall_2_1_0; }
		
		//description=DRichText?
		public Assignment getDescriptionAssignment_3() { return cDescriptionAssignment_3; }
		
		//DRichText
		public RuleCall getDescriptionDRichTextParserRuleCall_3_0() { return cDescriptionDRichTextParserRuleCall_3_0; }
		
		//('when' selector=DmxOrExpression | otherwise?='otherwise')
		public Alternatives getAlternatives_4() { return cAlternatives_4; }
		
		//'when' selector=DmxOrExpression
		public Group getGroup_4_0() { return cGroup_4_0; }
		
		//'when'
		public Keyword getWhenKeyword_4_0_0() { return cWhenKeyword_4_0_0; }
		
		//selector=DmxOrExpression
		public Assignment getSelectorAssignment_4_0_1() { return cSelectorAssignment_4_0_1; }
		
		//DmxOrExpression
		public RuleCall getSelectorDmxOrExpressionParserRuleCall_4_0_1_0() { return cSelectorDmxOrExpressionParserRuleCall_4_0_1_0; }
		
		//otherwise?='otherwise'
		public Assignment getOtherwiseAssignment_4_1() { return cOtherwiseAssignment_4_1; }
		
		//'otherwise'
		public Keyword getOtherwiseOtherwiseKeyword_4_1_0() { return cOtherwiseOtherwiseKeyword_4_1_0; }
		
		//':'
		public Keyword getColonKeyword_5() { return cColonKeyword_5; }
		
		//predicates+=DNamedPredicate+
		public Assignment getPredicatesAssignment_6() { return cPredicatesAssignment_6; }
		
		//DNamedPredicate
		public RuleCall getPredicatesDNamedPredicateParserRuleCall_6_0() { return cPredicatesDNamedPredicateParserRuleCall_6_0; }
	}
	public class DemNotificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.dem.Dem.DemNotification");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cAliasKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cAliasAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cAliasIDTerminalRuleCall_1_1_0 = (RuleCall)cAliasAssignment_1_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cMessageAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cMessageDemMessageParserRuleCall_3_0 = (RuleCall)cMessageAssignment_3.eContents().get(0);
		private final Keyword cToKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cNotifiedAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cNotifiedDemActorCrossReference_5_0 = (CrossReference)cNotifiedAssignment_5.eContents().get(0);
		private final RuleCall cNotifiedDemActorIDTerminalRuleCall_5_0_1 = (RuleCall)cNotifiedDemActorCrossReference_5_0.eContents().get(1);
		private final Assignment cDescriptionAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cDescriptionDRichTextParserRuleCall_6_0 = (RuleCall)cDescriptionAssignment_6.eContents().get(0);
		private final Assignment cNotesAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cNotesDNoteParserRuleCall_7_0 = (RuleCall)cNotesAssignment_7.eContents().get(0);
		
		//DemNotification:
		//	name=ID ('alias' alias=ID)?
		//	':'
		//	message=DemMessage
		//	'to' notified=[DemActor] description=DRichText?
		//	notes+=DNote*;
		@Override public ParserRule getRule() { return rule; }
		
		//// type always null
		//name=ID ('alias' alias=ID)? ':' message=DemMessage 'to' notified=[DemActor] description=DRichText? notes+=DNote*
		public Group getGroup() { return cGroup; }
		
		//// type always null
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//('alias' alias=ID)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'alias'
		public Keyword getAliasKeyword_1_0() { return cAliasKeyword_1_0; }
		
		//alias=ID
		public Assignment getAliasAssignment_1_1() { return cAliasAssignment_1_1; }
		
		//ID
		public RuleCall getAliasIDTerminalRuleCall_1_1_0() { return cAliasIDTerminalRuleCall_1_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//message=DemMessage
		public Assignment getMessageAssignment_3() { return cMessageAssignment_3; }
		
		//DemMessage
		public RuleCall getMessageDemMessageParserRuleCall_3_0() { return cMessageDemMessageParserRuleCall_3_0; }
		
		//'to'
		public Keyword getToKeyword_4() { return cToKeyword_4; }
		
		//notified=[DemActor]
		public Assignment getNotifiedAssignment_5() { return cNotifiedAssignment_5; }
		
		//[DemActor]
		public CrossReference getNotifiedDemActorCrossReference_5_0() { return cNotifiedDemActorCrossReference_5_0; }
		
		//ID
		public RuleCall getNotifiedDemActorIDTerminalRuleCall_5_0_1() { return cNotifiedDemActorIDTerminalRuleCall_5_0_1; }
		
		//description=DRichText?
		public Assignment getDescriptionAssignment_6() { return cDescriptionAssignment_6; }
		
		//DRichText
		public RuleCall getDescriptionDRichTextParserRuleCall_6_0() { return cDescriptionDRichTextParserRuleCall_6_0; }
		
		//notes+=DNote*
		public Assignment getNotesAssignment_7() { return cNotesAssignment_7; }
		
		//DNote
		public RuleCall getNotesDNoteParserRuleCall_7_0() { return cNotesDNoteParserRuleCall_7_0; }
	}
	public class DemMessageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.dem.Dem.DemMessage");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cTypeDTypeCrossReference_0_0 = (CrossReference)cTypeAssignment_0.eContents().get(0);
		private final RuleCall cTypeDTypeIDTerminalRuleCall_0_0_1 = (RuleCall)cTypeDTypeCrossReference_0_0.eContents().get(1);
		private final Assignment cMultiplicityAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cMultiplicityDMultiplicityParserRuleCall_1_0 = (RuleCall)cMultiplicityAssignment_1.eContents().get(0);
		
		//DemMessage:
		//	type=[DType] multiplicity=DMultiplicity?;
		@Override public ParserRule getRule() { return rule; }
		
		//// implicit name: "message"
		//type=[DType] multiplicity=DMultiplicity?
		public Group getGroup() { return cGroup; }
		
		//// implicit name: "message"
		//type=[DType]
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//[DType]
		public CrossReference getTypeDTypeCrossReference_0_0() { return cTypeDTypeCrossReference_0_0; }
		
		//ID
		public RuleCall getTypeDTypeIDTerminalRuleCall_0_0_1() { return cTypeDTypeIDTerminalRuleCall_0_0_1; }
		
		//multiplicity=DMultiplicity?
		public Assignment getMultiplicityAssignment_1() { return cMultiplicityAssignment_1; }
		
		//DMultiplicity
		public RuleCall getMultiplicityDMultiplicityParserRuleCall_1_0() { return cMultiplicityDMultiplicityParserRuleCall_1_0; }
	}
	public class DContextElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.dem.Dem.DContext");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cAliasKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cAliasAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cAliasIDTerminalRuleCall_1_1_0 = (RuleCall)cAliasAssignment_1_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cTypeDTypeCrossReference_3_0 = (CrossReference)cTypeAssignment_3.eContents().get(0);
		private final RuleCall cTypeDTypeIDTerminalRuleCall_3_0_1 = (RuleCall)cTypeDTypeCrossReference_3_0.eContents().get(1);
		private final Assignment cMultiplicityAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cMultiplicityDMultiplicityParserRuleCall_4_0 = (RuleCall)cMultiplicityAssignment_4.eContents().get(0);
		private final Assignment cDescriptionAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cDescriptionDRichTextParserRuleCall_5_0 = (RuleCall)cDescriptionAssignment_5.eContents().get(0);
		private final Assignment cNotesAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cNotesDNoteParserRuleCall_6_0 = (RuleCall)cNotesAssignment_6.eContents().get(0);
		
		//DContext:
		//	name=ID ('alias' alias=ID)?
		//	':'
		//	type=[DType] multiplicity=DMultiplicity?
		//	description=DRichText?
		//	notes+=DNote*;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID ('alias' alias=ID)? ':' type=[DType] multiplicity=DMultiplicity? description=DRichText? notes+=DNote*
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//('alias' alias=ID)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'alias'
		public Keyword getAliasKeyword_1_0() { return cAliasKeyword_1_0; }
		
		//alias=ID
		public Assignment getAliasAssignment_1_1() { return cAliasAssignment_1_1; }
		
		//ID
		public RuleCall getAliasIDTerminalRuleCall_1_1_0() { return cAliasIDTerminalRuleCall_1_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//type=[DType]
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }
		
		//[DType]
		public CrossReference getTypeDTypeCrossReference_3_0() { return cTypeDTypeCrossReference_3_0; }
		
		//ID
		public RuleCall getTypeDTypeIDTerminalRuleCall_3_0_1() { return cTypeDTypeIDTerminalRuleCall_3_0_1; }
		
		//multiplicity=DMultiplicity?
		public Assignment getMultiplicityAssignment_4() { return cMultiplicityAssignment_4; }
		
		//DMultiplicity
		public RuleCall getMultiplicityDMultiplicityParserRuleCall_4_0() { return cMultiplicityDMultiplicityParserRuleCall_4_0; }
		
		//description=DRichText?
		public Assignment getDescriptionAssignment_5() { return cDescriptionAssignment_5; }
		
		//DRichText
		public RuleCall getDescriptionDRichTextParserRuleCall_5_0() { return cDescriptionDRichTextParserRuleCall_5_0; }
		
		//notes+=DNote*
		public Assignment getNotesAssignment_6() { return cNotesAssignment_6; }
		
		//DNote
		public RuleCall getNotesDNoteParserRuleCall_6_0() { return cNotesDNoteParserRuleCall_6_0; }
	}
	public class DemActorModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.dem.Dem.DemActorModel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cActorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cModelKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Assignment cDescriptionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDescriptionDRichTextParserRuleCall_3_0 = (RuleCall)cDescriptionAssignment_3.eContents().get(0);
		private final Assignment cNotesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cNotesDNoteParserRuleCall_4_0 = (RuleCall)cNotesAssignment_4.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cActorsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cActorsDemActorParserRuleCall_6_0 = (RuleCall)cActorsAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		///*
		// * ACTOR MODEL
		// */ DemActorModel:
		//	'actor' 'model'
		//	name=ID
		//	description=DRichText?
		//	notes+=DNote*
		//	'{'
		//	actors+=DemActor*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'actor' 'model' name=ID description=DRichText? notes+=DNote* '{' actors+=DemActor* '}'
		public Group getGroup() { return cGroup; }
		
		//'actor'
		public Keyword getActorKeyword_0() { return cActorKeyword_0; }
		
		//'model'
		public Keyword getModelKeyword_1() { return cModelKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//description=DRichText?
		public Assignment getDescriptionAssignment_3() { return cDescriptionAssignment_3; }
		
		//DRichText
		public RuleCall getDescriptionDRichTextParserRuleCall_3_0() { return cDescriptionDRichTextParserRuleCall_3_0; }
		
		//notes+=DNote*
		public Assignment getNotesAssignment_4() { return cNotesAssignment_4; }
		
		//DNote
		public RuleCall getNotesDNoteParserRuleCall_4_0() { return cNotesDNoteParserRuleCall_4_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }
		
		//actors+=DemActor*
		public Assignment getActorsAssignment_6() { return cActorsAssignment_6; }
		
		//DemActor
		public RuleCall getActorsDemActorParserRuleCall_6_0() { return cActorsDemActorParserRuleCall_6_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	public class DemActorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.dem.Dem.DemActor");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDemHumanActorRoleParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDemServiceParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//DemActor:
		//	DemHumanActorRole | DemService;
		@Override public ParserRule getRule() { return rule; }
		
		//DemHumanActorRole | DemService
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//DemHumanActorRole
		public RuleCall getDemHumanActorRoleParserRuleCall_0() { return cDemHumanActorRoleParserRuleCall_0; }
		
		//DemService
		public RuleCall getDemServiceParserRuleCall_1() { return cDemServiceParserRuleCall_1; }
	}
	public class DemHumanActorRoleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.dem.Dem.DemHumanActorRole");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHumanKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cActorKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cAsKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cAliasKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cAliasAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cAliasIDTerminalRuleCall_4_1_0 = (RuleCall)cAliasAssignment_4_1.eContents().get(0);
		private final Assignment cDescriptionAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cDescriptionDRichTextParserRuleCall_5_0 = (RuleCall)cDescriptionAssignment_5.eContents().get(0);
		private final Assignment cNotesAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cNotesDNoteParserRuleCall_6_0 = (RuleCall)cNotesAssignment_6.eContents().get(0);
		
		//DemHumanActorRole:
		//	'human' 'actor' 'as'
		//	name=ID ('alias' alias=ID)?
		//	description=DRichText?
		//	notes+=DNote*;
		@Override public ParserRule getRule() { return rule; }
		
		//'human' 'actor' 'as' name=ID ('alias' alias=ID)? description=DRichText? notes+=DNote*
		public Group getGroup() { return cGroup; }
		
		//'human'
		public Keyword getHumanKeyword_0() { return cHumanKeyword_0; }
		
		//'actor'
		public Keyword getActorKeyword_1() { return cActorKeyword_1; }
		
		//'as'
		public Keyword getAsKeyword_2() { return cAsKeyword_2; }
		
		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }
		
		//('alias' alias=ID)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'alias'
		public Keyword getAliasKeyword_4_0() { return cAliasKeyword_4_0; }
		
		//alias=ID
		public Assignment getAliasAssignment_4_1() { return cAliasAssignment_4_1; }
		
		//ID
		public RuleCall getAliasIDTerminalRuleCall_4_1_0() { return cAliasIDTerminalRuleCall_4_1_0; }
		
		//description=DRichText?
		public Assignment getDescriptionAssignment_5() { return cDescriptionAssignment_5; }
		
		//DRichText
		public RuleCall getDescriptionDRichTextParserRuleCall_5_0() { return cDescriptionDRichTextParserRuleCall_5_0; }
		
		//notes+=DNote*
		public Assignment getNotesAssignment_6() { return cNotesAssignment_6; }
		
		//DNote
		public RuleCall getNotesDNoteParserRuleCall_6_0() { return cNotesDNoteParserRuleCall_6_0; }
	}
	public class DemServiceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.dem.Dem.DemService");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cServiceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cActorKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cAliasKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cAliasAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cAliasIDTerminalRuleCall_3_1_0 = (RuleCall)cAliasAssignment_3_1.eContents().get(0);
		private final Assignment cDescriptionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cDescriptionDRichTextParserRuleCall_4_0 = (RuleCall)cDescriptionAssignment_4.eContents().get(0);
		private final Assignment cNotesAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cNotesDNoteParserRuleCall_5_0 = (RuleCall)cNotesAssignment_5.eContents().get(0);
		
		//DemService:
		//	'service' 'actor'
		//	name=ID ('alias' alias=ID)?
		//	description=DRichText?
		//	notes+=DNote*;
		@Override public ParserRule getRule() { return rule; }
		
		//'service' 'actor' name=ID ('alias' alias=ID)? description=DRichText? notes+=DNote*
		public Group getGroup() { return cGroup; }
		
		//'service'
		public Keyword getServiceKeyword_0() { return cServiceKeyword_0; }
		
		//'actor'
		public Keyword getActorKeyword_1() { return cActorKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//('alias' alias=ID)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'alias'
		public Keyword getAliasKeyword_3_0() { return cAliasKeyword_3_0; }
		
		//alias=ID
		public Assignment getAliasAssignment_3_1() { return cAliasAssignment_3_1; }
		
		//ID
		public RuleCall getAliasIDTerminalRuleCall_3_1_0() { return cAliasIDTerminalRuleCall_3_1_0; }
		
		//description=DRichText?
		public Assignment getDescriptionAssignment_4() { return cDescriptionAssignment_4; }
		
		//DRichText
		public RuleCall getDescriptionDRichTextParserRuleCall_4_0() { return cDescriptionDRichTextParserRuleCall_4_0; }
		
		//notes+=DNote*
		public Assignment getNotesAssignment_5() { return cNotesAssignment_5; }
		
		//DNote
		public RuleCall getNotesDNoteParserRuleCall_5_0() { return cNotesDNoteParserRuleCall_5_0; }
	}
	public class DemEventsOverviewModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.dem.Dem.DemEventsOverviewModel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEventKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cOverviewKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Assignment cDescriptionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDescriptionDRichTextParserRuleCall_3_0 = (RuleCall)cDescriptionAssignment_3.eContents().get(0);
		private final Assignment cNotesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cNotesDNoteParserRuleCall_4_0 = (RuleCall)cNotesAssignment_4.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Alternatives cAlternatives_6 = (Alternatives)cGroup.eContents().get(6);
		private final Group cGroup_6_0 = (Group)cAlternatives_6.eContents().get(0);
		private final Keyword cIncludeKeyword_6_0_0 = (Keyword)cGroup_6_0.eContents().get(0);
		private final Assignment cAllAssignment_6_0_1 = (Assignment)cGroup_6_0.eContents().get(1);
		private final Keyword cAllAllKeyword_6_0_1_0 = (Keyword)cAllAssignment_6_0_1.eContents().get(0);
		private final Group cGroup_6_1 = (Group)cAlternatives_6.eContents().get(1);
		private final Keyword cIncludeKeyword_6_1_0 = (Keyword)cGroup_6_1.eContents().get(0);
		private final Assignment cIncludeAssignment_6_1_1 = (Assignment)cGroup_6_1.eContents().get(1);
		private final CrossReference cIncludeDemDomainEventCrossReference_6_1_1_0 = (CrossReference)cIncludeAssignment_6_1_1.eContents().get(0);
		private final RuleCall cIncludeDemDomainEventDQualifiedNameParserRuleCall_6_1_1_0_1 = (RuleCall)cIncludeDemDomainEventCrossReference_6_1_1_0.eContents().get(1);
		private final Group cGroup_6_2 = (Group)cAlternatives_6.eContents().get(2);
		private final Keyword cExcludeKeyword_6_2_0 = (Keyword)cGroup_6_2.eContents().get(0);
		private final Assignment cExcludeAssignment_6_2_1 = (Assignment)cGroup_6_2.eContents().get(1);
		private final CrossReference cExcludeDemDomainEventCrossReference_6_2_1_0 = (CrossReference)cExcludeAssignment_6_2_1.eContents().get(0);
		private final RuleCall cExcludeDemDomainEventDQualifiedNameParserRuleCall_6_2_1_0_1 = (RuleCall)cExcludeDemDomainEventCrossReference_6_2_1_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		///*
		// * EVENTS OVERVIEW
		// */ DemEventsOverviewModel:
		//	'event' 'overview'
		//	name=ID
		//	description=DRichText?
		//	notes+=DNote*
		//	'{' ('include' all?='all'
		//	| 'include'
		//	include+=[DemDomainEvent|DQualifiedName]+
		//	| 'exclude'
		//	exclude+=[DemDomainEvent|DQualifiedName]+)
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'event' 'overview' name=ID description=DRichText? notes+=DNote* '{' ('include' all?='all' | 'include'
		//include+=[DemDomainEvent|DQualifiedName]+ | 'exclude' exclude+=[DemDomainEvent|DQualifiedName]+) '}'
		public Group getGroup() { return cGroup; }
		
		//'event'
		public Keyword getEventKeyword_0() { return cEventKeyword_0; }
		
		//'overview'
		public Keyword getOverviewKeyword_1() { return cOverviewKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//description=DRichText?
		public Assignment getDescriptionAssignment_3() { return cDescriptionAssignment_3; }
		
		//DRichText
		public RuleCall getDescriptionDRichTextParserRuleCall_3_0() { return cDescriptionDRichTextParserRuleCall_3_0; }
		
		//notes+=DNote*
		public Assignment getNotesAssignment_4() { return cNotesAssignment_4; }
		
		//DNote
		public RuleCall getNotesDNoteParserRuleCall_4_0() { return cNotesDNoteParserRuleCall_4_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }
		
		//('include' all?='all' | 'include' include+=[DemDomainEvent|DQualifiedName]+ | 'exclude'
		//exclude+=[DemDomainEvent|DQualifiedName]+)
		public Alternatives getAlternatives_6() { return cAlternatives_6; }
		
		//'include' all?='all'
		public Group getGroup_6_0() { return cGroup_6_0; }
		
		//'include'
		public Keyword getIncludeKeyword_6_0_0() { return cIncludeKeyword_6_0_0; }
		
		//all?='all'
		public Assignment getAllAssignment_6_0_1() { return cAllAssignment_6_0_1; }
		
		//'all'
		public Keyword getAllAllKeyword_6_0_1_0() { return cAllAllKeyword_6_0_1_0; }
		
		//'include' include+=[DemDomainEvent|DQualifiedName]+
		public Group getGroup_6_1() { return cGroup_6_1; }
		
		//'include'
		public Keyword getIncludeKeyword_6_1_0() { return cIncludeKeyword_6_1_0; }
		
		//include+=[DemDomainEvent|DQualifiedName]+
		public Assignment getIncludeAssignment_6_1_1() { return cIncludeAssignment_6_1_1; }
		
		//[DemDomainEvent|DQualifiedName]
		public CrossReference getIncludeDemDomainEventCrossReference_6_1_1_0() { return cIncludeDemDomainEventCrossReference_6_1_1_0; }
		
		//DQualifiedName
		public RuleCall getIncludeDemDomainEventDQualifiedNameParserRuleCall_6_1_1_0_1() { return cIncludeDemDomainEventDQualifiedNameParserRuleCall_6_1_1_0_1; }
		
		//'exclude' exclude+=[DemDomainEvent|DQualifiedName]+
		public Group getGroup_6_2() { return cGroup_6_2; }
		
		//'exclude'
		public Keyword getExcludeKeyword_6_2_0() { return cExcludeKeyword_6_2_0; }
		
		//exclude+=[DemDomainEvent|DQualifiedName]+
		public Assignment getExcludeAssignment_6_2_1() { return cExcludeAssignment_6_2_1; }
		
		//[DemDomainEvent|DQualifiedName]
		public CrossReference getExcludeDemDomainEventCrossReference_6_2_1_0() { return cExcludeDemDomainEventCrossReference_6_2_1_0; }
		
		//DQualifiedName
		public RuleCall getExcludeDemDomainEventDQualifiedNameParserRuleCall_6_2_1_0_1() { return cExcludeDemDomainEventDQualifiedNameParserRuleCall_6_2_1_0_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	
	
	private final DNamespaceElements pDNamespace;
	private final DemDomainEventElements pDemDomainEvent;
	private final DemTriggerElements pDemTrigger;
	private final DNamedPredicateElements pDNamedPredicate;
	private final DemCaseConjunctionElements pDemCaseConjunction;
	private final DemNotificationElements pDemNotification;
	private final DemMessageElements pDemMessage;
	private final DContextElements pDContext;
	private final DemActorModelElements pDemActorModel;
	private final DemActorElements pDemActor;
	private final DemHumanActorRoleElements pDemHumanActorRole;
	private final DemServiceElements pDemService;
	private final DemEventsOverviewModelElements pDemEventsOverviewModel;
	
	private final Grammar grammar;
	
	private final DmxGrammarAccess gaDmx;

	@Inject
	public DemGrammarAccess(GrammarProvider grammarProvider,
			DmxGrammarAccess gaDmx) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaDmx = gaDmx;
		this.pDNamespace = new DNamespaceElements();
		this.pDemDomainEvent = new DemDomainEventElements();
		this.pDemTrigger = new DemTriggerElements();
		this.pDNamedPredicate = new DNamedPredicateElements();
		this.pDemCaseConjunction = new DemCaseConjunctionElements();
		this.pDemNotification = new DemNotificationElements();
		this.pDemMessage = new DemMessageElements();
		this.pDContext = new DContextElements();
		this.pDemActorModel = new DemActorModelElements();
		this.pDemActor = new DemActorElements();
		this.pDemHumanActorRole = new DemHumanActorRoleElements();
		this.pDemService = new DemServiceElements();
		this.pDemEventsOverviewModel = new DemEventsOverviewModelElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("com.mimacom.ddd.dm.dem.Dem".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public DmxGrammarAccess getDmxGrammarAccess() {
		return gaDmx;
	}

	
	//@Override
	//DNamespace:
	//	'domain'
	//	name=DQualifiedName
	//	imports+=DImport*
	//	model=(DemDomainEvent | DemActorModel | DemEventsOverviewModel);
	public DNamespaceElements getDNamespaceAccess() {
		return pDNamespace;
	}
	
	public ParserRule getDNamespaceRule() {
		return getDNamespaceAccess().getRule();
	}
	
	///*
	// * DOMAIN EVENT
	// */ DemDomainEvent DModel:
	//	'event' {DemDomainEvent} name=ID ('alias' alias=ID)?
	//	description=DRichText?
	//	notes+=DNote*
	//	'{'
	//	'context' context+=DContext+ ('triggered' 'by' triggers+=DemTrigger+)? ('notifications'
	//	notifications+=DemNotification+)? ('preconditions' preconditionsCNF+=DNamedPredicate+)? ('postconditions'
	//	(postconditionsDNF+=DemCaseConjunction+
	//	| postconditionsDNF+=DNamedPredicate+))?
	//	'}';
	public DemDomainEventElements getDemDomainEventAccess() {
		return pDemDomainEvent;
	}
	
	public ParserRule getDemDomainEventRule() {
		return getDemDomainEventAccess().getRule();
	}
	
	//DemTrigger:
	//	actor=[DemActor] notes+=DNote*;
	public DemTriggerElements getDemTriggerAccess() {
		return pDemTrigger;
	}
	
	public ParserRule getDemTriggerRule() {
		return getDemTriggerAccess().getRule();
	}
	
	//DNamedPredicate:
	//	name=ID ('alias' alias=ID)?
	//	':'
	//	description=DRichText?
	//	notes+=DNote*
	//	predicate=DmxOrExpression;
	public DNamedPredicateElements getDNamedPredicateAccess() {
		return pDNamedPredicate;
	}
	
	public ParserRule getDNamedPredicateRule() {
		return getDNamedPredicateAccess().getRule();
	}
	
	//DemCaseConjunction:
	//	'case'
	//	name=ID ('alias' alias=ID)?
	//	description=DRichText? ('when'
	//	selector=DmxOrExpression
	//	| otherwise?='otherwise')
	//	':'
	//	predicates+=DNamedPredicate+;
	public DemCaseConjunctionElements getDemCaseConjunctionAccess() {
		return pDemCaseConjunction;
	}
	
	public ParserRule getDemCaseConjunctionRule() {
		return getDemCaseConjunctionAccess().getRule();
	}
	
	//DemNotification:
	//	name=ID ('alias' alias=ID)?
	//	':'
	//	message=DemMessage
	//	'to' notified=[DemActor] description=DRichText?
	//	notes+=DNote*;
	public DemNotificationElements getDemNotificationAccess() {
		return pDemNotification;
	}
	
	public ParserRule getDemNotificationRule() {
		return getDemNotificationAccess().getRule();
	}
	
	//DemMessage:
	//	type=[DType] multiplicity=DMultiplicity?;
	public DemMessageElements getDemMessageAccess() {
		return pDemMessage;
	}
	
	public ParserRule getDemMessageRule() {
		return getDemMessageAccess().getRule();
	}
	
	//DContext:
	//	name=ID ('alias' alias=ID)?
	//	':'
	//	type=[DType] multiplicity=DMultiplicity?
	//	description=DRichText?
	//	notes+=DNote*;
	public DContextElements getDContextAccess() {
		return pDContext;
	}
	
	public ParserRule getDContextRule() {
		return getDContextAccess().getRule();
	}
	
	///*
	// * ACTOR MODEL
	// */ DemActorModel:
	//	'actor' 'model'
	//	name=ID
	//	description=DRichText?
	//	notes+=DNote*
	//	'{'
	//	actors+=DemActor*
	//	'}';
	public DemActorModelElements getDemActorModelAccess() {
		return pDemActorModel;
	}
	
	public ParserRule getDemActorModelRule() {
		return getDemActorModelAccess().getRule();
	}
	
	//DemActor:
	//	DemHumanActorRole | DemService;
	public DemActorElements getDemActorAccess() {
		return pDemActor;
	}
	
	public ParserRule getDemActorRule() {
		return getDemActorAccess().getRule();
	}
	
	//DemHumanActorRole:
	//	'human' 'actor' 'as'
	//	name=ID ('alias' alias=ID)?
	//	description=DRichText?
	//	notes+=DNote*;
	public DemHumanActorRoleElements getDemHumanActorRoleAccess() {
		return pDemHumanActorRole;
	}
	
	public ParserRule getDemHumanActorRoleRule() {
		return getDemHumanActorRoleAccess().getRule();
	}
	
	//DemService:
	//	'service' 'actor'
	//	name=ID ('alias' alias=ID)?
	//	description=DRichText?
	//	notes+=DNote*;
	public DemServiceElements getDemServiceAccess() {
		return pDemService;
	}
	
	public ParserRule getDemServiceRule() {
		return getDemServiceAccess().getRule();
	}
	
	///*
	// * EVENTS OVERVIEW
	// */ DemEventsOverviewModel:
	//	'event' 'overview'
	//	name=ID
	//	description=DRichText?
	//	notes+=DNote*
	//	'{' ('include' all?='all'
	//	| 'include'
	//	include+=[DemDomainEvent|DQualifiedName]+
	//	| 'exclude'
	//	exclude+=[DemDomainEvent|DQualifiedName]+)
	//	'}';
	public DemEventsOverviewModelElements getDemEventsOverviewModelAccess() {
		return pDemEventsOverviewModel;
	}
	
	public ParserRule getDemEventsOverviewModelRule() {
		return getDemEventsOverviewModelAccess().getRule();
	}
	
	//DNote:
	//	'NOTE'
	//	name=ID
	//	'{'
	//	text=DRichText
	//	color=DNoteColor?
	//	'}';
	public DmxGrammarAccess.DNoteElements getDNoteAccess() {
		return gaDmx.getDNoteAccess();
	}
	
	public ParserRule getDNoteRule() {
		return getDNoteAccess().getRule();
	}
	
	//enum DNoteColor:
	//	WHITE='white' | RED='red' | ORANGE='orange' | YELLOW='yellow' | GREEN='green' | BLUE='blue' | PINK='pink' |
	//	GREY='grey';
	public DmxGrammarAccess.DNoteColorElements getDNoteColorAccess() {
		return gaDmx.getDNoteColorAccess();
	}
	
	public EnumRule getDNoteColorRule() {
		return getDNoteColorAccess().getRule();
	}
	
	//DmxModel:
	//	{DmxModel} types+=DmxArchetype*
	//	filters+=DmxFilter*
	//	// For unit-testing purposes:
	//	tests+=DmxTest*;
	public DmxGrammarAccess.DmxModelElements getDmxModelAccess() {
		return gaDmx.getDmxModelAccess();
	}
	
	public ParserRule getDmxModelRule() {
		return getDmxModelAccess().getRule();
	}
	
	//DImport:
	//	'import' importedNamespace=DQualifiedNameWithWildcard;
	public DmxGrammarAccess.DImportElements getDImportAccess() {
		return gaDmx.getDImportAccess();
	}
	
	public ParserRule getDImportRule() {
		return getDImportAccess().getRule();
	}
	
	///* 
	// * Testing
	// */ DmxTest:
	//	'test'
	//	name=ID ('context'
	//	context+=DmxTestContext (',' context+=DmxTestContext)*)?
	//	'{'
	//	expr=DExpression
	//	'}';
	public DmxGrammarAccess.DmxTestElements getDmxTestAccess() {
		return gaDmx.getDmxTestAccess();
	}
	
	public ParserRule getDmxTestRule() {
		return getDmxTestAccess().getRule();
	}
	
	//DmxTestContext:
	//	name=ID
	//	':'
	//	type=[DType] multiplicity=DMultiplicity? (':=' (value=DmxLiteralExpression | value=DmxLiteralListExpression))?;
	public DmxGrammarAccess.DmxTestContextElements getDmxTestContextAccess() {
		return gaDmx.getDmxTestContextAccess();
	}
	
	public ParserRule getDmxTestContextRule() {
		return getDmxTestContextAccess().getRule();
	}
	
	//enum DmxBaseType:
	//	VOID | BOOLEAN | NUMBER | TEXT | IDENTIFIER | TIMEPOINT | STATE /*transition*/ | STATE_EVENT | COMPLEX | NOTIFICATION
	//	/*sent* */ | SERVICE /*invoked* */;
	public DmxGrammarAccess.DmxBaseTypeElements getDmxBaseTypeAccess() {
		return gaDmx.getDmxBaseTypeAccess();
	}
	
	public EnumRule getDmxBaseTypeRule() {
		return getDmxBaseTypeAccess().getRule();
	}
	
	//DmxBaseTypeSet:
	//	name=ID
	//	'in'
	//	'(' members+=DmxBaseType (',' members+=DmxBaseType)+ ')';
	public DmxGrammarAccess.DmxBaseTypeSetElements getDmxBaseTypeSetAccess() {
		return gaDmx.getDmxBaseTypeSetAccess();
	}
	
	public ParserRule getDmxBaseTypeSetRule() {
		return getDmxBaseTypeSetAccess().getRule();
	}
	
	//DmxArchetype:
	//	'archetype'
	//	name=ID
	//	'is'
	//	baseType=DmxBaseType
	//	description=DRichText?;
	public DmxGrammarAccess.DmxArchetypeElements getDmxArchetypeAccess() {
		return gaDmx.getDmxArchetypeAccess();
	}
	
	public ParserRule getDmxArchetypeRule() {
		return getDmxArchetypeAccess().getRule();
	}
	
	//DmxFilter:
	//	'filter'
	//	name=ID
	//	'(' (parameters+=DmxFilterParameter (',' parameters+=DmxFilterParameter)*)? ')'
	//	':'
	//	typeDesc=DmxFilterTypeDescriptor ('with' withTypeSet=DmxBaseTypeSet)?;
	public DmxGrammarAccess.DmxFilterElements getDmxFilterAccess() {
		return gaDmx.getDmxFilterAccess();
	}
	
	public ParserRule getDmxFilterRule() {
		return getDmxFilterAccess().getRule();
	}
	
	//DmxFilterTypeDescriptor:
	//	(single=DmxBaseType
	//	| multiple=[DmxBaseTypeSet]) collection?='*'?;
	public DmxGrammarAccess.DmxFilterTypeDescriptorElements getDmxFilterTypeDescriptorAccess() {
		return gaDmx.getDmxFilterTypeDescriptorAccess();
	}
	
	public ParserRule getDmxFilterTypeDescriptorRule() {
		return getDmxFilterTypeDescriptorAccess().getRule();
	}
	
	//DmxFilterParameter:
	//	name=ID
	//	':'
	//	typeDesc=DmxFilterTypeDescriptor;
	public DmxGrammarAccess.DmxFilterParameterElements getDmxFilterParameterAccess() {
		return gaDmx.getDmxFilterParameterAccess();
	}
	
	public ParserRule getDmxFilterParameterRule() {
		return getDmxFilterParameterAccess().getRule();
	}
	
	///*
	// * Expressions
	// */ DExpression:
	//	DmxAssignment | DmxPredicateWithCorrelationVariable | DRichText;
	public DmxGrammarAccess.DExpressionElements getDExpressionAccess() {
		return gaDmx.getDExpressionAccess();
	}
	
	public ParserRule getDExpressionRule() {
		return getDExpressionAccess().getRule();
	}
	
	//DRichText:
	//	segments+=DmxTextOnly
	//	| segments+=DmxTextStart
	//	segments+=DExpression (segments+=DmxTextMiddle segments+=DExpression)*
	//	segments+=DmxTextEnd;
	public DmxGrammarAccess.DRichTextElements getDRichTextAccess() {
		return gaDmx.getDRichTextAccess();
	}
	
	public ParserRule getDRichTextRule() {
		return getDRichTextAccess().getRule();
	}
	
	//DmxTextOnly DTextSegment:
	//	value=PLAIN_TEXT_ONLY;
	public DmxGrammarAccess.DmxTextOnlyElements getDmxTextOnlyAccess() {
		return gaDmx.getDmxTextOnlyAccess();
	}
	
	public ParserRule getDmxTextOnlyRule() {
		return getDmxTextOnlyAccess().getRule();
	}
	
	//DmxTextStart DTextSegment:
	//	value=RICH_TEXT_START;
	public DmxGrammarAccess.DmxTextStartElements getDmxTextStartAccess() {
		return gaDmx.getDmxTextStartAccess();
	}
	
	public ParserRule getDmxTextStartRule() {
		return getDmxTextStartAccess().getRule();
	}
	
	//DmxTextMiddle DTextSegment:
	//	value=RICH_TEXT_MIDDLE;
	public DmxGrammarAccess.DmxTextMiddleElements getDmxTextMiddleAccess() {
		return gaDmx.getDmxTextMiddleAccess();
	}
	
	public ParserRule getDmxTextMiddleRule() {
		return getDmxTextMiddleAccess().getRule();
	}
	
	//DmxTextEnd DTextSegment:
	//	value=RICH_TEXT_END;
	public DmxGrammarAccess.DmxTextEndElements getDmxTextEndAccess() {
		return gaDmx.getDmxTextEndAccess();
	}
	
	public ParserRule getDmxTextEndRule() {
		return getDmxTextEndAccess().getRule();
	}
	
	//DmxNavigableMemberReference DExpression:
	//	DmxPrimaryExpression (=> ({DmxAssignment.precedingNavigationSegment=current} '.'
	//	assignToMember=[DNavigableMember] DmxOpSingleAssign) value=DmxOrExpression
	//	| => ({DmxMemberNavigation.precedingNavigationSegment=current} '.') member=[DNavigableMember] (=>
	//	explicitOperationCall?='(' // => boolean => has 0.n explicit arguments
	//	callArguments=DmxCallArguments
	//	')'
	//	| before?="@before")?)*;
	public DmxGrammarAccess.DmxNavigableMemberReferenceElements getDmxNavigableMemberReferenceAccess() {
		return gaDmx.getDmxNavigableMemberReferenceAccess();
	}
	
	public ParserRule getDmxNavigableMemberReferenceRule() {
		return getDmxNavigableMemberReferenceAccess().getRule();
	}
	
	//DmxCallArguments:
	//	{DmxCallArguments} (arguments+=DmxPredicateWithCorrelationVariable (','
	//	arguments+=DmxPredicateWithCorrelationVariable)*)?;
	public DmxGrammarAccess.DmxCallArgumentsElements getDmxCallArgumentsAccess() {
		return gaDmx.getDmxCallArgumentsAccess();
	}
	
	public ParserRule getDmxCallArgumentsRule() {
		return getDmxCallArgumentsAccess().getRule();
	}
	
	//DmxAssignment DExpression:
	//	{DmxAssignment} assignToMember=[DNavigableMember] DmxOpSingleAssign value=DmxOrExpression;
	public DmxGrammarAccess.DmxAssignmentElements getDmxAssignmentAccess() {
		return gaDmx.getDmxAssignmentAccess();
	}
	
	public ParserRule getDmxAssignmentRule() {
		return getDmxAssignmentAccess().getRule();
	}
	
	//DmxOpSingleAssign:
	//	':=';
	public DmxGrammarAccess.DmxOpSingleAssignElements getDmxOpSingleAssignAccess() {
		return gaDmx.getDmxOpSingleAssignAccess();
	}
	
	public ParserRule getDmxOpSingleAssignRule() {
		return getDmxOpSingleAssignAccess().getRule();
	}
	
	//DmxPredicateWithCorrelationVariable DExpression:
	//	{DmxPredicateWithCorrelationVariable} correlationVariable=DmxCorrelationVariable
	//	'|'
	//	predicate=DmxOrExpression
	//	| DmxOrExpression;
	public DmxGrammarAccess.DmxPredicateWithCorrelationVariableElements getDmxPredicateWithCorrelationVariableAccess() {
		return gaDmx.getDmxPredicateWithCorrelationVariableAccess();
	}
	
	public ParserRule getDmxPredicateWithCorrelationVariableRule() {
		return getDmxPredicateWithCorrelationVariableAccess().getRule();
	}
	
	//DmxCorrelationVariable:
	//	name=ID;
	public DmxGrammarAccess.DmxCorrelationVariableElements getDmxCorrelationVariableAccess() {
		return gaDmx.getDmxCorrelationVariableAccess();
	}
	
	public ParserRule getDmxCorrelationVariableRule() {
		return getDmxCorrelationVariableAccess().getRule();
	}
	
	////	(':' type=[DType])? => type is always NULL!
	//DmxOrExpression DExpression:
	//	DmxAndExpression (=> ({DmxBinaryOperation.leftOperand=current} operator=DmxOpOr) rightOperand=DmxAndExpression)*;
	public DmxGrammarAccess.DmxOrExpressionElements getDmxOrExpressionAccess() {
		return gaDmx.getDmxOrExpressionAccess();
	}
	
	public ParserRule getDmxOrExpressionRule() {
		return getDmxOrExpressionAccess().getRule();
	}
	
	//enum DmxOpOr returns DmxBinaryOperator:
	//	OR | OR='or' | XOR | XOR='xor';
	public DmxGrammarAccess.DmxOpOrElements getDmxOpOrAccess() {
		return gaDmx.getDmxOpOrAccess();
	}
	
	public EnumRule getDmxOpOrRule() {
		return getDmxOpOrAccess().getRule();
	}
	
	//DmxAndExpression DExpression:
	//	DmxEqualityExpression (=> ({DmxBinaryOperation.leftOperand=current} operator=DmxOpAnd)
	//	rightOperand=DmxEqualityExpression)*;
	public DmxGrammarAccess.DmxAndExpressionElements getDmxAndExpressionAccess() {
		return gaDmx.getDmxAndExpressionAccess();
	}
	
	public ParserRule getDmxAndExpressionRule() {
		return getDmxAndExpressionAccess().getRule();
	}
	
	//enum DmxOpAnd returns DmxBinaryOperator:
	//	AND | AND='and';
	public DmxGrammarAccess.DmxOpAndElements getDmxOpAndAccess() {
		return gaDmx.getDmxOpAndAccess();
	}
	
	public EnumRule getDmxOpAndRule() {
		return getDmxOpAndAccess().getRule();
	}
	
	//DmxEqualityExpression DExpression:
	//	DmxRelationalExpression (=> ({DmxBinaryOperation.leftOperand=current} operator=DmxOpEquality)
	//	rightOperand=DmxRelationalExpression)*;
	public DmxGrammarAccess.DmxEqualityExpressionElements getDmxEqualityExpressionAccess() {
		return gaDmx.getDmxEqualityExpressionAccess();
	}
	
	public ParserRule getDmxEqualityExpressionRule() {
		return getDmxEqualityExpressionAccess().getRule();
	}
	
	//enum DmxOpEquality returns DmxBinaryOperator:
	//	EQUAL='=' | NOT_EQUAL='!=' | NOT_EQUAL='<>';
	public DmxGrammarAccess.DmxOpEqualityElements getDmxOpEqualityAccess() {
		return gaDmx.getDmxOpEqualityAccess();
	}
	
	public EnumRule getDmxOpEqualityRule() {
		return getDmxOpEqualityAccess().getRule();
	}
	
	//DmxRelationalExpression DExpression:
	//	DmxOtherOperatorExpression (=> ({DmxInstanceOfExpression.expression=current} DmxOpInstanceOf) type=[DType] | =>
	//	({DmxBinaryOperation.leftOperand=current} operator=OpCompare) rightOperand=DmxOtherOperatorExpression)*;
	public DmxGrammarAccess.DmxRelationalExpressionElements getDmxRelationalExpressionAccess() {
		return gaDmx.getDmxRelationalExpressionAccess();
	}
	
	public ParserRule getDmxRelationalExpressionRule() {
		return getDmxRelationalExpressionAccess().getRule();
	}
	
	//DmxOpInstanceOf:
	//	'ISA' | 'isa';
	public DmxGrammarAccess.DmxOpInstanceOfElements getDmxOpInstanceOfAccess() {
		return gaDmx.getDmxOpInstanceOfAccess();
	}
	
	public ParserRule getDmxOpInstanceOfRule() {
		return getDmxOpInstanceOfAccess().getRule();
	}
	
	//enum OpCompare returns DmxBinaryOperator:
	//	LESS='<' | LESS_OR_EQUAL='<=' | LESS_OR_EQUAL='≤' | GREATER_OR_EQUAL='>=' | GREATER_OR_EQUAL='≥' | GREATER='>';
	public DmxGrammarAccess.OpCompareElements getOpCompareAccess() {
		return gaDmx.getOpCompareAccess();
	}
	
	public EnumRule getOpCompareRule() {
		return getOpCompareAccess().getRule();
	}
	
	//DmxOtherOperatorExpression DExpression:
	//	DmxAdditiveExpression (=> ({DmxBinaryOperation.leftOperand=current} operator=OpOther)
	//	rightOperand=DmxAdditiveExpression)*;
	public DmxGrammarAccess.DmxOtherOperatorExpressionElements getDmxOtherOperatorExpressionAccess() {
		return gaDmx.getDmxOtherOperatorExpressionAccess();
	}
	
	public ParserRule getDmxOtherOperatorExpressionRule() {
		return getDmxOtherOperatorExpressionAccess().getRule();
	}
	
	//enum OpOther returns DmxBinaryOperator:
	//	IN | IN='in' | UNTIL='..' | SINGLE_ARROW='->' | DOUBLE_ARROW='=>';
	public DmxGrammarAccess.OpOtherElements getOpOtherAccess() {
		return gaDmx.getOpOtherAccess();
	}
	
	public EnumRule getOpOtherRule() {
		return getOpOtherAccess().getRule();
	}
	
	//DmxAdditiveExpression DExpression:
	//	DmxMultiplicativeExpression (=> ({DmxBinaryOperation.leftOperand=current} operator=OpAdd)
	//	rightOperand=DmxMultiplicativeExpression)*;
	public DmxGrammarAccess.DmxAdditiveExpressionElements getDmxAdditiveExpressionAccess() {
		return gaDmx.getDmxAdditiveExpressionAccess();
	}
	
	public ParserRule getDmxAdditiveExpressionRule() {
		return getDmxAdditiveExpressionAccess().getRule();
	}
	
	//enum OpAdd returns DmxBinaryOperator:
	//	ADD='+' | SUBTRACT='-';
	public DmxGrammarAccess.OpAddElements getOpAddAccess() {
		return gaDmx.getOpAddAccess();
	}
	
	public EnumRule getOpAddRule() {
		return getOpAddAccess().getRule();
	}
	
	//DmxMultiplicativeExpression DExpression:
	//	DmxUnaryOperation (=> ({DmxBinaryOperation.leftOperand=current} operator=OpMulti) rightOperand=DmxUnaryOperation)*;
	public DmxGrammarAccess.DmxMultiplicativeExpressionElements getDmxMultiplicativeExpressionAccess() {
		return gaDmx.getDmxMultiplicativeExpressionAccess();
	}
	
	public ParserRule getDmxMultiplicativeExpressionRule() {
		return getDmxMultiplicativeExpressionAccess().getRule();
	}
	
	//enum OpMulti returns DmxBinaryOperator:
	//	MULTIPLY='*' | DIVIDE='/' | POWER='**' | MODULO='%';
	public DmxGrammarAccess.OpMultiElements getOpMultiAccess() {
		return gaDmx.getOpMultiAccess();
	}
	
	public EnumRule getOpMultiRule() {
		return getOpMultiAccess().getRule();
	}
	
	//DmxUnaryOperation DExpression:
	//	{DmxUnaryOperation} operator=OpUnary operand=DmxUnaryOperation
	//	| DmxCastExpression;
	public DmxGrammarAccess.DmxUnaryOperationElements getDmxUnaryOperationAccess() {
		return gaDmx.getDmxUnaryOperationAccess();
	}
	
	public ParserRule getDmxUnaryOperationRule() {
		return getDmxUnaryOperationAccess().getRule();
	}
	
	//enum OpUnary returns DmxUnaryOperator:
	//	PLUS='+' | MINUS='-' | NOT='!' | NOT | NOT='not';
	public DmxGrammarAccess.OpUnaryElements getOpUnaryAccess() {
		return gaDmx.getOpUnaryAccess();
	}
	
	public EnumRule getOpUnaryRule() {
		return getOpUnaryAccess().getRule();
	}
	
	//DmxCastExpression DExpression:
	//	DmxNavigableMemberReference (=> ({DmxCastExpression.target=current} DmxOpCast) type=[DType])?;
	public DmxGrammarAccess.DmxCastExpressionElements getDmxCastExpressionAccess() {
		return gaDmx.getDmxCastExpressionAccess();
	}
	
	public ParserRule getDmxCastExpressionRule() {
		return getDmxCastExpressionAccess().getRule();
	}
	
	//DmxOpCast:
	//	'AS' | 'as';
	public DmxGrammarAccess.DmxOpCastElements getDmxOpCastAccess() {
		return gaDmx.getDmxOpCastAccess();
	}
	
	public ParserRule getDmxOpCastRule() {
		return getDmxOpCastAccess().getRule();
	}
	
	//DmxPrimaryExpression DExpression:
	//	DmxLiteralExpression | DmxParenthesizedExpression | DmxListExpression | DmxFunctionCall | DmxStaticReference |
	//	DmxContextReference | DmxIfExpression;
	public DmxGrammarAccess.DmxPrimaryExpressionElements getDmxPrimaryExpressionAccess() {
		return gaDmx.getDmxPrimaryExpressionAccess();
	}
	
	public ParserRule getDmxPrimaryExpressionRule() {
		return getDmxPrimaryExpressionAccess().getRule();
	}
	
	//DmxLiteralExpression DExpression:
	//	DmxBooleanLiteral | DmxStringLiteral | DmxNaturalLiteral | DmxDecimalLiteral | DmxUndefinedLiteral | DmxEntity |
	//	DmxDetail;
	public DmxGrammarAccess.DmxLiteralExpressionElements getDmxLiteralExpressionAccess() {
		return gaDmx.getDmxLiteralExpressionAccess();
	}
	
	public ParserRule getDmxLiteralExpressionRule() {
		return getDmxLiteralExpressionAccess().getRule();
	}
	
	//DmxParenthesizedExpression DExpression:
	//	'(' DExpression ')';
	public DmxGrammarAccess.DmxParenthesizedExpressionElements getDmxParenthesizedExpressionAccess() {
		return gaDmx.getDmxParenthesizedExpressionAccess();
	}
	
	public ParserRule getDmxParenthesizedExpressionRule() {
		return getDmxParenthesizedExpressionAccess().getRule();
	}
	
	//DmxListExpression DExpression:
	//	{DmxListExpression}
	//	'{' (elements+=DExpression (',' elements+=DExpression)*)?
	//	'}';
	public DmxGrammarAccess.DmxListExpressionElements getDmxListExpressionAccess() {
		return gaDmx.getDmxListExpressionAccess();
	}
	
	public ParserRule getDmxListExpressionRule() {
		return getDmxListExpressionAccess().getRule();
	}
	
	//DmxLiteralListExpression DExpression:
	//	{DmxListExpression}
	//	'{' (elements+=DmxLiteralExpression (',' elements+=DmxLiteralExpression)*)?
	//	'}';
	public DmxGrammarAccess.DmxLiteralListExpressionElements getDmxLiteralListExpressionAccess() {
		return gaDmx.getDmxLiteralListExpressionAccess();
	}
	
	public ParserRule getDmxLiteralListExpressionRule() {
		return getDmxLiteralListExpressionAccess().getRule();
	}
	
	//DmxFunctionCall DExpression:
	//	{DmxFunctionCall} function=[DmxFilter]
	//	'('
	//	callArguments=DmxFunctionCallArguments
	//	')';
	public DmxGrammarAccess.DmxFunctionCallElements getDmxFunctionCallAccess() {
		return gaDmx.getDmxFunctionCallAccess();
	}
	
	public ParserRule getDmxFunctionCallRule() {
		return getDmxFunctionCallAccess().getRule();
	}
	
	//DmxFunctionCallArguments DmxCallArguments:
	//	{DmxCallArguments} (arguments+=DExpression (',' arguments+=DExpression)*)?;
	public DmxGrammarAccess.DmxFunctionCallArgumentsElements getDmxFunctionCallArgumentsAccess() {
		return gaDmx.getDmxFunctionCallArgumentsAccess();
	}
	
	public ParserRule getDmxFunctionCallArgumentsRule() {
		return getDmxFunctionCallArgumentsAccess().getRule();
	}
	
	//DmxEntity:
	//	'entity'
	//	DmxComplexObject;
	public DmxGrammarAccess.DmxEntityElements getDmxEntityAccess() {
		return gaDmx.getDmxEntityAccess();
	}
	
	public ParserRule getDmxEntityRule() {
		return getDmxEntityAccess().getRule();
	}
	
	//DmxDetail:
	//	'detail'
	//	DmxComplexObject;
	public DmxGrammarAccess.DmxDetailElements getDmxDetailAccess() {
		return gaDmx.getDmxDetailAccess();
	}
	
	public ParserRule getDmxDetailRule() {
		return getDmxDetailAccess().getRule();
	}
	
	//fragment DmxComplexObject:
	//	type=[DComplexType] DmxFieldListStartSymbol
	//	fields+=DmxField*
	//	'}';
	public DmxGrammarAccess.DmxComplexObjectElements getDmxComplexObjectAccess() {
		return gaDmx.getDmxComplexObjectAccess();
	}
	
	public ParserRule getDmxComplexObjectRule() {
		return getDmxComplexObjectAccess().getRule();
	}
	
	//DmxField:
	//	feature=[DFeature] "=" value=DExpression
	//	description=DRichText?
	//	notes+=DNote*;
	public DmxGrammarAccess.DmxFieldElements getDmxFieldAccess() {
		return gaDmx.getDmxFieldAccess();
	}
	
	public ParserRule getDmxFieldRule() {
		return getDmxFieldAccess().getRule();
	}
	
	//DmxStaticReference DExpression:
	//	{DmxStaticReference}
	//	'['
	//	target=[IStaticReferenceTarget|DQualifiedName] ('#' member=[DNavigableMember])? ("|" (displayName=ID | plural?="*"))?
	//	-> ']';
	public DmxGrammarAccess.DmxStaticReferenceElements getDmxStaticReferenceAccess() {
		return gaDmx.getDmxStaticReferenceAccess();
	}
	
	public ParserRule getDmxStaticReferenceRule() {
		return getDmxStaticReferenceAccess().getRule();
	}
	
	//// '->' gives precedence to this ']' over PLAIN_TEXT_MIDDLE ('=>' works too but generates more lookahead overhead)
	//DmxContextReference DExpression:
	//	{DmxContextReference} target=[DNamedElement] (before?="@before"
	//	| '.' all?='all')?;
	public DmxGrammarAccess.DmxContextReferenceElements getDmxContextReferenceAccess() {
		return gaDmx.getDmxContextReferenceAccess();
	}
	
	public ParserRule getDmxContextReferenceRule() {
		return getDmxContextReferenceAccess().getRule();
	}
	
	//DmxIfExpression DExpression:
	//	{DmxIfExpression}
	//	'if' if=DExpression
	//	'then' then=DExpression (=> 'else' else=DExpression)?
	//	'end';
	public DmxGrammarAccess.DmxIfExpressionElements getDmxIfExpressionAccess() {
		return gaDmx.getDmxIfExpressionAccess();
	}
	
	public ParserRule getDmxIfExpressionRule() {
		return getDmxIfExpressionAccess().getRule();
	}
	
	//DMultiplicity:
	//	shorthand=DMultiplicityShorthand | '(' minOccurs=NATURAL '..' maxOccurs=MULTIPLICITY ')';
	public DmxGrammarAccess.DMultiplicityElements getDMultiplicityAccess() {
		return gaDmx.getDMultiplicityAccess();
	}
	
	public ParserRule getDMultiplicityRule() {
		return getDMultiplicityAccess().getRule();
	}
	
	//enum DMultiplicityShorthand:
	//	ZERO_OR_ONE='?' | ONE_OR_MORE='+' | ZERO_OR_MORE='*';
	public DmxGrammarAccess.DMultiplicityShorthandElements getDMultiplicityShorthandAccess() {
		return gaDmx.getDMultiplicityShorthandAccess();
	}
	
	public EnumRule getDMultiplicityShorthandRule() {
		return getDMultiplicityShorthandAccess().getRule();
	}
	
	//MULTIPLICITY ecore::EInt:
	//	NATURAL | '*';
	public DmxGrammarAccess.MULTIPLICITYElements getMULTIPLICITYAccess() {
		return gaDmx.getMULTIPLICITYAccess();
	}
	
	public ParserRule getMULTIPLICITYRule() {
		return getMULTIPLICITYAccess().getRule();
	}
	
	//DmxBooleanLiteral DExpression:
	//	{DmxBooleanLiteral} (value?='TRUE' | value?='true' | 'FALSE' | 'false');
	public DmxGrammarAccess.DmxBooleanLiteralElements getDmxBooleanLiteralAccess() {
		return gaDmx.getDmxBooleanLiteralAccess();
	}
	
	public ParserRule getDmxBooleanLiteralRule() {
		return getDmxBooleanLiteralAccess().getRule();
	}
	
	//DmxNaturalLiteral DExpression:
	//	{DmxNaturalLiteral} value=NATURAL;
	public DmxGrammarAccess.DmxNaturalLiteralElements getDmxNaturalLiteralAccess() {
		return gaDmx.getDmxNaturalLiteralAccess();
	}
	
	public ParserRule getDmxNaturalLiteralRule() {
		return getDmxNaturalLiteralAccess().getRule();
	}
	
	//DmxDecimalLiteral DExpression:
	//	{DmxDecimalLiteral} value=DECIMAL;
	public DmxGrammarAccess.DmxDecimalLiteralElements getDmxDecimalLiteralAccess() {
		return gaDmx.getDmxDecimalLiteralAccess();
	}
	
	public ParserRule getDmxDecimalLiteralRule() {
		return getDmxDecimalLiteralAccess().getRule();
	}
	
	//DmxStringLiteral DExpression:
	//	{DmxStringLiteral} value=STRING;
	public DmxGrammarAccess.DmxStringLiteralElements getDmxStringLiteralAccess() {
		return gaDmx.getDmxStringLiteralAccess();
	}
	
	public ParserRule getDmxStringLiteralRule() {
		return getDmxStringLiteralAccess().getRule();
	}
	
	//DmxUndefinedLiteral DExpression:
	//	{DmxUndefinedLiteral} ('UNDEFINED' | 'undefined');
	public DmxGrammarAccess.DmxUndefinedLiteralElements getDmxUndefinedLiteralAccess() {
		return gaDmx.getDmxUndefinedLiteralAccess();
	}
	
	public ParserRule getDmxUndefinedLiteralRule() {
		return getDmxUndefinedLiteralAccess().getRule();
	}
	
	//DmxUrlLiteral DExpression:
	//	{DmxUrlLiteral}
	//	'URL:'
	//	value=STRING ('|' display=STRING)?;
	public DmxGrammarAccess.DmxUrlLiteralElements getDmxUrlLiteralAccess() {
		return gaDmx.getDmxUrlLiteralAccess();
	}
	
	public ParserRule getDmxUrlLiteralRule() {
		return getDmxUrlLiteralAccess().getRule();
	}
	
	//DECIMAL:
	//	NATURAL '.' NATURAL (('E' | 'e') ('+' | '-')? NATURAL)?;
	public DmxGrammarAccess.DECIMALElements getDECIMALAccess() {
		return gaDmx.getDECIMALAccess();
	}
	
	public ParserRule getDECIMALRule() {
		return getDECIMALAccess().getRule();
	}
	
	//DmxFieldListStartSymbol:
	//	'{';
	public DmxGrammarAccess.DmxFieldListStartSymbolElements getDmxFieldListStartSymbolAccess() {
		return gaDmx.getDmxFieldListStartSymbolAccess();
	}
	
	public ParserRule getDmxFieldListStartSymbolRule() {
		return getDmxFieldListStartSymbolAccess().getRule();
	}
	
	//DQualifiedNameWithWildcard:
	//	DQualifiedName '.*'?;
	public DmxGrammarAccess.DQualifiedNameWithWildcardElements getDQualifiedNameWithWildcardAccess() {
		return gaDmx.getDQualifiedNameWithWildcardAccess();
	}
	
	public ParserRule getDQualifiedNameWithWildcardRule() {
		return getDQualifiedNameWithWildcardAccess().getRule();
	}
	
	//DQualifiedName:
	//	ID ('.' ID)*;
	public DmxGrammarAccess.DQualifiedNameElements getDQualifiedNameAccess() {
		return gaDmx.getDQualifiedNameAccess();
	}
	
	public ParserRule getDQualifiedNameRule() {
		return getDQualifiedNameAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? (LETTER | '_') (LETTER | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaDmx.getIDRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"';
	public TerminalRule getSTRINGRule() {
		return gaDmx.getSTRINGRule();
	}
	
	//terminal NATURAL returns ecore::EInt:
	//	'0'..'9'+ | '∞';
	public TerminalRule getNATURALRule() {
		return gaDmx.getNATURALRule();
	}
	
	//terminal fragment LETTER:
	//	'a'..'z' | 'A'..'Z' | '\\u00c0'..'\\u00d6' | '\\u00d8'..'\\u00f6' | '\\u00f8'..'\\u00ff';
	public TerminalRule getLETTERRule() {
		return gaDmx.getLETTERRule();
	}
	
	//terminal fragment PLAIN_TEXT:
	//	!('»' | ']' | '[');
	public TerminalRule getPLAIN_TEXTRule() {
		return gaDmx.getPLAIN_TEXTRule();
	}
	
	//terminal PLAIN_TEXT_ONLY:
	//	'«' PLAIN_TEXT* '»';
	public TerminalRule getPLAIN_TEXT_ONLYRule() {
		return gaDmx.getPLAIN_TEXT_ONLYRule();
	}
	
	//terminal RICH_TEXT_START:
	//	'«' PLAIN_TEXT* '[';
	public TerminalRule getRICH_TEXT_STARTRule() {
		return gaDmx.getRICH_TEXT_STARTRule();
	}
	
	//terminal RICH_TEXT_MIDDLE:
	//	']' PLAIN_TEXT* '[';
	public TerminalRule getRICH_TEXT_MIDDLERule() {
		return gaDmx.getRICH_TEXT_MIDDLERule();
	}
	
	//terminal RICH_TEXT_END:
	//	']' PLAIN_TEXT* '»';
	public TerminalRule getRICH_TEXT_ENDRule() {
		return gaDmx.getRICH_TEXT_ENDRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaDmx.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaDmx.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaDmx.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaDmx.getANY_OTHERRule();
	}
}
