/*
 * generated by Xtext 2.17.1
 */
package com.mimacom.ddd.dm.dem.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import com.mimacom.ddd.dm.dmx.services.DmxGrammarAccess;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class DemGrammarAccess extends AbstractGrammarElementFinder {
	
	public class DDomainElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.dem.Dem.DDomain");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cImportsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cImportsDImportParserRuleCall_0_0 = (RuleCall)cImportsAssignment_0.eContents().get(0);
		private final Keyword cDomainKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameDQualifiedNameParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cAliasKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cAliasesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cAliasesIDTerminalRuleCall_3_1_0 = (RuleCall)cAliasesAssignment_3_1.eContents().get(0);
		private final Assignment cDescriptionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cDescriptionDRichTextParserRuleCall_4_0 = (RuleCall)cDescriptionAssignment_4.eContents().get(0);
		private final Alternatives cAlternatives_5 = (Alternatives)cGroup.eContents().get(5);
		private final Assignment cEventsAssignment_5_0 = (Assignment)cAlternatives_5.eContents().get(0);
		private final RuleCall cEventsDDomainEventParserRuleCall_5_0_0 = (RuleCall)cEventsAssignment_5_0.eContents().get(0);
		private final Assignment cActorsAssignment_5_1 = (Assignment)cAlternatives_5.eContents().get(1);
		private final RuleCall cActorsDActorParserRuleCall_5_1_0 = (RuleCall)cActorsAssignment_5_1.eContents().get(0);
		
		//DDomain:
		//	imports+=DImport*
		//	'domain'
		//	name=DQualifiedName ('alias' aliases+=ID)*
		//	description=DRichText? (events+=DDomainEvent | actors+=DActor)*;
		@Override public ParserRule getRule() { return rule; }
		
		//imports+=DImport* 'domain' name=DQualifiedName ('alias' aliases+=ID)* description=DRichText? (events+=DDomainEvent |
		//actors+=DActor)*
		public Group getGroup() { return cGroup; }
		
		//imports+=DImport*
		public Assignment getImportsAssignment_0() { return cImportsAssignment_0; }
		
		//DImport
		public RuleCall getImportsDImportParserRuleCall_0_0() { return cImportsDImportParserRuleCall_0_0; }
		
		//'domain'
		public Keyword getDomainKeyword_1() { return cDomainKeyword_1; }
		
		//name=DQualifiedName
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//DQualifiedName
		public RuleCall getNameDQualifiedNameParserRuleCall_2_0() { return cNameDQualifiedNameParserRuleCall_2_0; }
		
		//('alias' aliases+=ID)*
		public Group getGroup_3() { return cGroup_3; }
		
		//'alias'
		public Keyword getAliasKeyword_3_0() { return cAliasKeyword_3_0; }
		
		//aliases+=ID
		public Assignment getAliasesAssignment_3_1() { return cAliasesAssignment_3_1; }
		
		//ID
		public RuleCall getAliasesIDTerminalRuleCall_3_1_0() { return cAliasesIDTerminalRuleCall_3_1_0; }
		
		//description=DRichText?
		public Assignment getDescriptionAssignment_4() { return cDescriptionAssignment_4; }
		
		//DRichText
		public RuleCall getDescriptionDRichTextParserRuleCall_4_0() { return cDescriptionDRichTextParserRuleCall_4_0; }
		
		//(events+=DDomainEvent | actors+=DActor)*
		public Alternatives getAlternatives_5() { return cAlternatives_5; }
		
		//events+=DDomainEvent
		public Assignment getEventsAssignment_5_0() { return cEventsAssignment_5_0; }
		
		//DDomainEvent
		public RuleCall getEventsDDomainEventParserRuleCall_5_0_0() { return cEventsDDomainEventParserRuleCall_5_0_0; }
		
		//actors+=DActor
		public Assignment getActorsAssignment_5_1() { return cActorsAssignment_5_1; }
		
		//DActor
		public RuleCall getActorsDActorParserRuleCall_5_1_0() { return cActorsDActorParserRuleCall_5_1_0; }
	}
	public class DDomainEventElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.dem.Dem.DDomainEvent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEventKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cAliasKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cAliasesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cAliasesIDTerminalRuleCall_2_1_0 = (RuleCall)cAliasesAssignment_2_1.eContents().get(0);
		private final Assignment cDescriptionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDescriptionDRichTextParserRuleCall_3_0 = (RuleCall)cDescriptionAssignment_3.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cContextKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cContextAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cContextDContextParserRuleCall_6_0 = (RuleCall)cContextAssignment_6.eContents().get(0);
		private final Keyword cTriggeredKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cByKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cTriggerAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final CrossReference cTriggerDActorCrossReference_9_0 = (CrossReference)cTriggerAssignment_9.eContents().get(0);
		private final RuleCall cTriggerDActorIDTerminalRuleCall_9_0_1 = (RuleCall)cTriggerDActorCrossReference_9_0.eContents().get(1);
		private final Group cGroup_10 = (Group)cGroup.eContents().get(10);
		private final Keyword cNotificationsKeyword_10_0 = (Keyword)cGroup_10.eContents().get(0);
		private final Assignment cNotificationsAssignment_10_1 = (Assignment)cGroup_10.eContents().get(1);
		private final RuleCall cNotificationsDNotificationParserRuleCall_10_1_0 = (RuleCall)cNotificationsAssignment_10_1.eContents().get(0);
		private final Group cGroup_11 = (Group)cGroup.eContents().get(11);
		private final Keyword cBeforeKeyword_11_0 = (Keyword)cGroup_11.eContents().get(0);
		private final Keyword cConditionsKeyword_11_1 = (Keyword)cGroup_11.eContents().get(1);
		private final Assignment cBeforeAssignment_11_2 = (Assignment)cGroup_11.eContents().get(2);
		private final RuleCall cBeforeDConditionParserRuleCall_11_2_0 = (RuleCall)cBeforeAssignment_11_2.eContents().get(0);
		private final Group cGroup_12 = (Group)cGroup.eContents().get(12);
		private final Keyword cAfterKeyword_12_0 = (Keyword)cGroup_12.eContents().get(0);
		private final Keyword cConditionsKeyword_12_1 = (Keyword)cGroup_12.eContents().get(1);
		private final Assignment cAfterAssignment_12_2 = (Assignment)cGroup_12.eContents().get(2);
		private final RuleCall cAfterDConditionParserRuleCall_12_2_0 = (RuleCall)cAfterAssignment_12_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_13 = (Keyword)cGroup.eContents().get(13);
		
		///*
		// * BEHAVIOUR
		// */ DDomainEvent:
		//	'event'
		//	name=ID ('alias' aliases+=ID)*
		//	description=DRichText?
		//	'{'
		//	'context' context+=DContext+
		//	'triggered' 'by' trigger=[DActor] ('notifications' notifications+=DNotification+)? ('before' 'conditions'
		//	before+=DCondition+)? ('after' 'conditions' after+=DCondition+)?
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'event' name=ID ('alias' aliases+=ID)* description=DRichText? '{' 'context' context+=DContext+ 'triggered' 'by'
		//trigger=[DActor] ('notifications' notifications+=DNotification+)? ('before' 'conditions' before+=DCondition+)? ('after'
		//'conditions' after+=DCondition+)? '}'
		public Group getGroup() { return cGroup; }
		
		//'event'
		public Keyword getEventKeyword_0() { return cEventKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//('alias' aliases+=ID)*
		public Group getGroup_2() { return cGroup_2; }
		
		//'alias'
		public Keyword getAliasKeyword_2_0() { return cAliasKeyword_2_0; }
		
		//aliases+=ID
		public Assignment getAliasesAssignment_2_1() { return cAliasesAssignment_2_1; }
		
		//ID
		public RuleCall getAliasesIDTerminalRuleCall_2_1_0() { return cAliasesIDTerminalRuleCall_2_1_0; }
		
		//description=DRichText?
		public Assignment getDescriptionAssignment_3() { return cDescriptionAssignment_3; }
		
		//DRichText
		public RuleCall getDescriptionDRichTextParserRuleCall_3_0() { return cDescriptionDRichTextParserRuleCall_3_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//'context'
		public Keyword getContextKeyword_5() { return cContextKeyword_5; }
		
		//context+=DContext+
		public Assignment getContextAssignment_6() { return cContextAssignment_6; }
		
		//DContext
		public RuleCall getContextDContextParserRuleCall_6_0() { return cContextDContextParserRuleCall_6_0; }
		
		//'triggered'
		public Keyword getTriggeredKeyword_7() { return cTriggeredKeyword_7; }
		
		//'by'
		public Keyword getByKeyword_8() { return cByKeyword_8; }
		
		//trigger=[DActor]
		public Assignment getTriggerAssignment_9() { return cTriggerAssignment_9; }
		
		//[DActor]
		public CrossReference getTriggerDActorCrossReference_9_0() { return cTriggerDActorCrossReference_9_0; }
		
		//ID
		public RuleCall getTriggerDActorIDTerminalRuleCall_9_0_1() { return cTriggerDActorIDTerminalRuleCall_9_0_1; }
		
		//('notifications' notifications+=DNotification+)?
		public Group getGroup_10() { return cGroup_10; }
		
		//'notifications'
		public Keyword getNotificationsKeyword_10_0() { return cNotificationsKeyword_10_0; }
		
		//notifications+=DNotification+
		public Assignment getNotificationsAssignment_10_1() { return cNotificationsAssignment_10_1; }
		
		//DNotification
		public RuleCall getNotificationsDNotificationParserRuleCall_10_1_0() { return cNotificationsDNotificationParserRuleCall_10_1_0; }
		
		//('before' 'conditions' before+=DCondition+)?
		public Group getGroup_11() { return cGroup_11; }
		
		//'before'
		public Keyword getBeforeKeyword_11_0() { return cBeforeKeyword_11_0; }
		
		//'conditions'
		public Keyword getConditionsKeyword_11_1() { return cConditionsKeyword_11_1; }
		
		//before+=DCondition+
		public Assignment getBeforeAssignment_11_2() { return cBeforeAssignment_11_2; }
		
		//DCondition
		public RuleCall getBeforeDConditionParserRuleCall_11_2_0() { return cBeforeDConditionParserRuleCall_11_2_0; }
		
		//('after' 'conditions' after+=DCondition+)?
		public Group getGroup_12() { return cGroup_12; }
		
		//'after'
		public Keyword getAfterKeyword_12_0() { return cAfterKeyword_12_0; }
		
		//'conditions'
		public Keyword getConditionsKeyword_12_1() { return cConditionsKeyword_12_1; }
		
		//after+=DCondition+
		public Assignment getAfterAssignment_12_2() { return cAfterAssignment_12_2; }
		
		//DCondition
		public RuleCall getAfterDConditionParserRuleCall_12_2_0() { return cAfterDConditionParserRuleCall_12_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_13() { return cRightCurlyBracketKeyword_13; }
	}
	public class DConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.dem.Dem.DCondition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cAliasKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cAliasesAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cAliasesIDTerminalRuleCall_1_1_0 = (RuleCall)cAliasesAssignment_1_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cConditionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cConditionDExpressionParserRuleCall_3_0 = (RuleCall)cConditionAssignment_3.eContents().get(0);
		private final Assignment cDescriptionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cDescriptionDRichTextParserRuleCall_4_0 = (RuleCall)cDescriptionAssignment_4.eContents().get(0);
		
		//DCondition:
		//	name=ID ('alias' aliases+=ID)*
		//	':'
		//	condition=DExpression
		//	description=DRichText?;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID ('alias' aliases+=ID)* ':' condition=DExpression description=DRichText?
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//('alias' aliases+=ID)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'alias'
		public Keyword getAliasKeyword_1_0() { return cAliasKeyword_1_0; }
		
		//aliases+=ID
		public Assignment getAliasesAssignment_1_1() { return cAliasesAssignment_1_1; }
		
		//ID
		public RuleCall getAliasesIDTerminalRuleCall_1_1_0() { return cAliasesIDTerminalRuleCall_1_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//condition=DExpression
		public Assignment getConditionAssignment_3() { return cConditionAssignment_3; }
		
		//DExpression
		public RuleCall getConditionDExpressionParserRuleCall_3_0() { return cConditionDExpressionParserRuleCall_3_0; }
		
		//description=DRichText?
		public Assignment getDescriptionAssignment_4() { return cDescriptionAssignment_4; }
		
		//DRichText
		public RuleCall getDescriptionDRichTextParserRuleCall_4_0() { return cDescriptionDRichTextParserRuleCall_4_0; }
	}
	public class DNotificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.dem.Dem.DNotification");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cAliasKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cAliasesAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cAliasesIDTerminalRuleCall_1_1_0 = (RuleCall)cAliasesAssignment_1_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cMessageAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cMessageDMessageParserRuleCall_3_0 = (RuleCall)cMessageAssignment_3.eContents().get(0);
		private final Keyword cToKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cNotifiedAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cNotifiedDActorCrossReference_5_0 = (CrossReference)cNotifiedAssignment_5.eContents().get(0);
		private final RuleCall cNotifiedDActorIDTerminalRuleCall_5_0_1 = (RuleCall)cNotifiedDActorCrossReference_5_0.eContents().get(1);
		private final Assignment cDescriptionAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cDescriptionDRichTextParserRuleCall_6_0 = (RuleCall)cDescriptionAssignment_6.eContents().get(0);
		
		//DNotification:
		//	name=ID ('alias' aliases+=ID)*
		//	':'
		//	message=DMessage
		//	'to' notified=[DActor] description=DRichText?;
		@Override public ParserRule getRule() { return rule; }
		
		//// type always null
		//name=ID ('alias' aliases+=ID)* ':' message=DMessage 'to' notified=[DActor] description=DRichText?
		public Group getGroup() { return cGroup; }
		
		//// type always null
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//('alias' aliases+=ID)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'alias'
		public Keyword getAliasKeyword_1_0() { return cAliasKeyword_1_0; }
		
		//aliases+=ID
		public Assignment getAliasesAssignment_1_1() { return cAliasesAssignment_1_1; }
		
		//ID
		public RuleCall getAliasesIDTerminalRuleCall_1_1_0() { return cAliasesIDTerminalRuleCall_1_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//message=DMessage
		public Assignment getMessageAssignment_3() { return cMessageAssignment_3; }
		
		//DMessage
		public RuleCall getMessageDMessageParserRuleCall_3_0() { return cMessageDMessageParserRuleCall_3_0; }
		
		//'to'
		public Keyword getToKeyword_4() { return cToKeyword_4; }
		
		//notified=[DActor]
		public Assignment getNotifiedAssignment_5() { return cNotifiedAssignment_5; }
		
		//[DActor]
		public CrossReference getNotifiedDActorCrossReference_5_0() { return cNotifiedDActorCrossReference_5_0; }
		
		//ID
		public RuleCall getNotifiedDActorIDTerminalRuleCall_5_0_1() { return cNotifiedDActorIDTerminalRuleCall_5_0_1; }
		
		//description=DRichText?
		public Assignment getDescriptionAssignment_6() { return cDescriptionAssignment_6; }
		
		//DRichText
		public RuleCall getDescriptionDRichTextParserRuleCall_6_0() { return cDescriptionDRichTextParserRuleCall_6_0; }
	}
	public class DMessageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.dem.Dem.DMessage");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cTypeDTypeCrossReference_0_0 = (CrossReference)cTypeAssignment_0.eContents().get(0);
		private final RuleCall cTypeDTypeIDTerminalRuleCall_0_0_1 = (RuleCall)cTypeDTypeCrossReference_0_0.eContents().get(1);
		private final Assignment cMultiplicityAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cMultiplicityDMultiplicityParserRuleCall_1_0 = (RuleCall)cMultiplicityAssignment_1.eContents().get(0);
		
		//DMessage:
		//	type=[DType] multiplicity=DMultiplicity?;
		@Override public ParserRule getRule() { return rule; }
		
		//// implicit name: "message"
		//type=[DType] multiplicity=DMultiplicity?
		public Group getGroup() { return cGroup; }
		
		//// implicit name: "message"
		//type=[DType]
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//[DType]
		public CrossReference getTypeDTypeCrossReference_0_0() { return cTypeDTypeCrossReference_0_0; }
		
		//ID
		public RuleCall getTypeDTypeIDTerminalRuleCall_0_0_1() { return cTypeDTypeIDTerminalRuleCall_0_0_1; }
		
		//multiplicity=DMultiplicity?
		public Assignment getMultiplicityAssignment_1() { return cMultiplicityAssignment_1; }
		
		//DMultiplicity
		public RuleCall getMultiplicityDMultiplicityParserRuleCall_1_0() { return cMultiplicityDMultiplicityParserRuleCall_1_0; }
	}
	public class DContextElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.dem.Dem.DContext");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cAliasKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cAliasesAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cAliasesIDTerminalRuleCall_1_1_0 = (RuleCall)cAliasesAssignment_1_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cTypeDTypeCrossReference_3_0 = (CrossReference)cTypeAssignment_3.eContents().get(0);
		private final RuleCall cTypeDTypeIDTerminalRuleCall_3_0_1 = (RuleCall)cTypeDTypeCrossReference_3_0.eContents().get(1);
		private final Assignment cMultiplicityAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cMultiplicityDMultiplicityParserRuleCall_4_0 = (RuleCall)cMultiplicityAssignment_4.eContents().get(0);
		private final Assignment cDescriptionAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cDescriptionDRichTextParserRuleCall_5_0 = (RuleCall)cDescriptionAssignment_5.eContents().get(0);
		
		//DContext:
		//	name=ID ('alias' aliases+=ID)*
		//	':'
		//	type=[DType] multiplicity=DMultiplicity?
		//	description=DRichText?;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID ('alias' aliases+=ID)* ':' type=[DType] multiplicity=DMultiplicity? description=DRichText?
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//('alias' aliases+=ID)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'alias'
		public Keyword getAliasKeyword_1_0() { return cAliasKeyword_1_0; }
		
		//aliases+=ID
		public Assignment getAliasesAssignment_1_1() { return cAliasesAssignment_1_1; }
		
		//ID
		public RuleCall getAliasesIDTerminalRuleCall_1_1_0() { return cAliasesIDTerminalRuleCall_1_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//type=[DType]
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }
		
		//[DType]
		public CrossReference getTypeDTypeCrossReference_3_0() { return cTypeDTypeCrossReference_3_0; }
		
		//ID
		public RuleCall getTypeDTypeIDTerminalRuleCall_3_0_1() { return cTypeDTypeIDTerminalRuleCall_3_0_1; }
		
		//multiplicity=DMultiplicity?
		public Assignment getMultiplicityAssignment_4() { return cMultiplicityAssignment_4; }
		
		//DMultiplicity
		public RuleCall getMultiplicityDMultiplicityParserRuleCall_4_0() { return cMultiplicityDMultiplicityParserRuleCall_4_0; }
		
		//description=DRichText?
		public Assignment getDescriptionAssignment_5() { return cDescriptionAssignment_5; }
		
		//DRichText
		public RuleCall getDescriptionDRichTextParserRuleCall_5_0() { return cDescriptionDRichTextParserRuleCall_5_0; }
	}
	public class DActorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.dem.Dem.DActor");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDHumanParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDTimeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//DActor:
		//	DHuman | DTime;
		@Override public ParserRule getRule() { return rule; }
		
		//DHuman | DTime
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//DHuman
		public RuleCall getDHumanParserRuleCall_0() { return cDHumanParserRuleCall_0; }
		
		//DTime
		public RuleCall getDTimeParserRuleCall_1() { return cDTimeParserRuleCall_1; }
	}
	public class DHumanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.dem.Dem.DHuman");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHumanKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cActorKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cAliasKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cAliasesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cAliasesIDTerminalRuleCall_3_1_0 = (RuleCall)cAliasesAssignment_3_1.eContents().get(0);
		private final Assignment cDescriptionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cDescriptionDRichTextParserRuleCall_4_0 = (RuleCall)cDescriptionAssignment_4.eContents().get(0);
		
		//DHuman:
		//	'human' 'actor'
		//	name=ID ('alias' aliases+=ID)*
		//	description=DRichText?;
		@Override public ParserRule getRule() { return rule; }
		
		//'human' 'actor' name=ID ('alias' aliases+=ID)* description=DRichText?
		public Group getGroup() { return cGroup; }
		
		//'human'
		public Keyword getHumanKeyword_0() { return cHumanKeyword_0; }
		
		//'actor'
		public Keyword getActorKeyword_1() { return cActorKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//('alias' aliases+=ID)*
		public Group getGroup_3() { return cGroup_3; }
		
		//'alias'
		public Keyword getAliasKeyword_3_0() { return cAliasKeyword_3_0; }
		
		//aliases+=ID
		public Assignment getAliasesAssignment_3_1() { return cAliasesAssignment_3_1; }
		
		//ID
		public RuleCall getAliasesIDTerminalRuleCall_3_1_0() { return cAliasesIDTerminalRuleCall_3_1_0; }
		
		//description=DRichText?
		public Assignment getDescriptionAssignment_4() { return cDescriptionAssignment_4; }
		
		//DRichText
		public RuleCall getDescriptionDRichTextParserRuleCall_4_0() { return cDescriptionDRichTextParserRuleCall_4_0; }
	}
	public class DTimeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.dem.Dem.DTime");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTimeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cActorKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cAliasKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cAliasesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cAliasesIDTerminalRuleCall_3_1_0 = (RuleCall)cAliasesAssignment_3_1.eContents().get(0);
		private final Assignment cDescriptionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cDescriptionDRichTextParserRuleCall_4_0 = (RuleCall)cDescriptionAssignment_4.eContents().get(0);
		
		//DTime:
		//	'time' 'actor'
		//	name=ID ('alias' aliases+=ID)*
		//	description=DRichText?;
		@Override public ParserRule getRule() { return rule; }
		
		//'time' 'actor' name=ID ('alias' aliases+=ID)* description=DRichText?
		public Group getGroup() { return cGroup; }
		
		//'time'
		public Keyword getTimeKeyword_0() { return cTimeKeyword_0; }
		
		//'actor'
		public Keyword getActorKeyword_1() { return cActorKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//('alias' aliases+=ID)*
		public Group getGroup_3() { return cGroup_3; }
		
		//'alias'
		public Keyword getAliasKeyword_3_0() { return cAliasKeyword_3_0; }
		
		//aliases+=ID
		public Assignment getAliasesAssignment_3_1() { return cAliasesAssignment_3_1; }
		
		//ID
		public RuleCall getAliasesIDTerminalRuleCall_3_1_0() { return cAliasesIDTerminalRuleCall_3_1_0; }
		
		//description=DRichText?
		public Assignment getDescriptionAssignment_4() { return cDescriptionAssignment_4; }
		
		//DRichText
		public RuleCall getDescriptionDRichTextParserRuleCall_4_0() { return cDescriptionDRichTextParserRuleCall_4_0; }
	}
	
	
	private final DDomainElements pDDomain;
	private final DDomainEventElements pDDomainEvent;
	private final DConditionElements pDCondition;
	private final DNotificationElements pDNotification;
	private final DMessageElements pDMessage;
	private final DContextElements pDContext;
	private final DActorElements pDActor;
	private final DHumanElements pDHuman;
	private final DTimeElements pDTime;
	
	private final Grammar grammar;
	
	private final DmxGrammarAccess gaDmx;

	@Inject
	public DemGrammarAccess(GrammarProvider grammarProvider,
			DmxGrammarAccess gaDmx) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaDmx = gaDmx;
		this.pDDomain = new DDomainElements();
		this.pDDomainEvent = new DDomainEventElements();
		this.pDCondition = new DConditionElements();
		this.pDNotification = new DNotificationElements();
		this.pDMessage = new DMessageElements();
		this.pDContext = new DContextElements();
		this.pDActor = new DActorElements();
		this.pDHuman = new DHumanElements();
		this.pDTime = new DTimeElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("com.mimacom.ddd.dm.dem.Dem".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public DmxGrammarAccess getDmxGrammarAccess() {
		return gaDmx;
	}

	
	//DDomain:
	//	imports+=DImport*
	//	'domain'
	//	name=DQualifiedName ('alias' aliases+=ID)*
	//	description=DRichText? (events+=DDomainEvent | actors+=DActor)*;
	public DDomainElements getDDomainAccess() {
		return pDDomain;
	}
	
	public ParserRule getDDomainRule() {
		return getDDomainAccess().getRule();
	}
	
	///*
	// * BEHAVIOUR
	// */ DDomainEvent:
	//	'event'
	//	name=ID ('alias' aliases+=ID)*
	//	description=DRichText?
	//	'{'
	//	'context' context+=DContext+
	//	'triggered' 'by' trigger=[DActor] ('notifications' notifications+=DNotification+)? ('before' 'conditions'
	//	before+=DCondition+)? ('after' 'conditions' after+=DCondition+)?
	//	'}';
	public DDomainEventElements getDDomainEventAccess() {
		return pDDomainEvent;
	}
	
	public ParserRule getDDomainEventRule() {
		return getDDomainEventAccess().getRule();
	}
	
	//DCondition:
	//	name=ID ('alias' aliases+=ID)*
	//	':'
	//	condition=DExpression
	//	description=DRichText?;
	public DConditionElements getDConditionAccess() {
		return pDCondition;
	}
	
	public ParserRule getDConditionRule() {
		return getDConditionAccess().getRule();
	}
	
	//DNotification:
	//	name=ID ('alias' aliases+=ID)*
	//	':'
	//	message=DMessage
	//	'to' notified=[DActor] description=DRichText?;
	public DNotificationElements getDNotificationAccess() {
		return pDNotification;
	}
	
	public ParserRule getDNotificationRule() {
		return getDNotificationAccess().getRule();
	}
	
	//DMessage:
	//	type=[DType] multiplicity=DMultiplicity?;
	public DMessageElements getDMessageAccess() {
		return pDMessage;
	}
	
	public ParserRule getDMessageRule() {
		return getDMessageAccess().getRule();
	}
	
	//DContext:
	//	name=ID ('alias' aliases+=ID)*
	//	':'
	//	type=[DType] multiplicity=DMultiplicity?
	//	description=DRichText?;
	public DContextElements getDContextAccess() {
		return pDContext;
	}
	
	public ParserRule getDContextRule() {
		return getDContextAccess().getRule();
	}
	
	//DActor:
	//	DHuman | DTime;
	public DActorElements getDActorAccess() {
		return pDActor;
	}
	
	public ParserRule getDActorRule() {
		return getDActorAccess().getRule();
	}
	
	//DHuman:
	//	'human' 'actor'
	//	name=ID ('alias' aliases+=ID)*
	//	description=DRichText?;
	public DHumanElements getDHumanAccess() {
		return pDHuman;
	}
	
	public ParserRule getDHumanRule() {
		return getDHumanAccess().getRule();
	}
	
	//DTime:
	//	'time' 'actor'
	//	name=ID ('alias' aliases+=ID)*
	//	description=DRichText?;
	public DTimeElements getDTimeAccess() {
		return pDTime;
	}
	
	public ParserRule getDTimeRule() {
		return getDTimeAccess().getRule();
	}
	
	//DmxNamespace:
	//	imports+=DImport*
	//	'namespace'
	//	name=DQualifiedName
	//	types+=DmxArchetype*
	//	filters+=DmxFilter*
	//	// For unit-testing purposes:
	//	tests+=DmxTest*;
	public DmxGrammarAccess.DmxNamespaceElements getDmxNamespaceAccess() {
		return gaDmx.getDmxNamespaceAccess();
	}
	
	public ParserRule getDmxNamespaceRule() {
		return getDmxNamespaceAccess().getRule();
	}
	
	//DImport:
	//	'import' importedNamespace=DQualifiedNameWithWildcard;
	public DmxGrammarAccess.DImportElements getDImportAccess() {
		return gaDmx.getDImportAccess();
	}
	
	public ParserRule getDImportRule() {
		return getDImportAccess().getRule();
	}
	
	///* 
	// * Testing
	// */ DmxTest:
	//	'test'
	//	name=ID ('context'
	//	context+=DmxTestContext (',' context+=DmxTestContext)*)?
	//	'{'
	//	expr=DExpression
	//	'}';
	public DmxGrammarAccess.DmxTestElements getDmxTestAccess() {
		return gaDmx.getDmxTestAccess();
	}
	
	public ParserRule getDmxTestRule() {
		return getDmxTestAccess().getRule();
	}
	
	//DmxTestContext DContext:
	//	name=ID
	//	':'
	//	type=[DType] multiplicity=DMultiplicity?;
	public DmxGrammarAccess.DmxTestContextElements getDmxTestContextAccess() {
		return gaDmx.getDmxTestContextAccess();
	}
	
	public ParserRule getDmxTestContextRule() {
		return getDmxTestContextAccess().getRule();
	}
	
	//enum DmxBaseType:
	//	VOID | BOOLEAN | NUMBER | TEXT | IDENTIFIER | TIMEPOINT | COMPLEX | NOTIFICATION /*sent* */ | SERVICE /*invoked* */;
	public DmxGrammarAccess.DmxBaseTypeElements getDmxBaseTypeAccess() {
		return gaDmx.getDmxBaseTypeAccess();
	}
	
	public EnumRule getDmxBaseTypeRule() {
		return getDmxBaseTypeAccess().getRule();
	}
	
	//DmxArchetype:
	//	'archetype'
	//	name=ID
	//	'is'
	//	baseType=DmxBaseType
	//	description=DRichText?;
	public DmxGrammarAccess.DmxArchetypeElements getDmxArchetypeAccess() {
		return gaDmx.getDmxArchetypeAccess();
	}
	
	public ParserRule getDmxArchetypeRule() {
		return getDmxArchetypeAccess().getRule();
	}
	
	//DmxFilter:
	//	DmxFunction | DmxIterator;
	public DmxGrammarAccess.DmxFilterElements getDmxFilterAccess() {
		return gaDmx.getDmxFilterAccess();
	}
	
	public ParserRule getDmxFilterRule() {
		return getDmxFilterAccess().getRule();
	}
	
	//DmxFunction:
	//	'function' name=ID
	//	'(' (parameters+=DmxFunctionParameter (',' parameters+=DmxFunctionParameter)*)? ')'
	//	':'
	//	baseType=DmxBaseType
	//	baseTypeCollection?='*'?;
	public DmxGrammarAccess.DmxFunctionElements getDmxFunctionAccess() {
		return gaDmx.getDmxFunctionAccess();
	}
	
	public ParserRule getDmxFunctionRule() {
		return getDmxFunctionAccess().getRule();
	}
	
	//DmxFunctionParameter:
	//	name=ID
	//	':'
	//	baseType=DmxBaseType
	//	baseTypeCollection?='*'?;
	public DmxGrammarAccess.DmxFunctionParameterElements getDmxFunctionParameterAccess() {
		return gaDmx.getDmxFunctionParameterAccess();
	}
	
	public ParserRule getDmxFunctionParameterRule() {
		return getDmxFunctionParameterAccess().getRule();
	}
	
	//DmxIterator:
	//	'iterator' name=ID
	//	':'
	//	baseType=DmxBaseType
	//	baseTypeCollection?='*'?;
	public DmxGrammarAccess.DmxIteratorElements getDmxIteratorAccess() {
		return gaDmx.getDmxIteratorAccess();
	}
	
	public ParserRule getDmxIteratorRule() {
		return getDmxIteratorAccess().getRule();
	}
	
	///*
	// * Expressions
	// */ DExpression:
	//	DmxAssignment | DmxPredicate | DRichText;
	public DmxGrammarAccess.DExpressionElements getDExpressionAccess() {
		return gaDmx.getDExpressionAccess();
	}
	
	public ParserRule getDExpressionRule() {
		return getDExpressionAccess().getRule();
	}
	
	//DRichText:
	//	segments+=DmxTextOnly
	//	| segments+=DmxTextStart
	//	segments+=DExpression (segments+=DmxTextMiddle segments+=DExpression)*
	//	segments+=DmxTextEnd;
	public DmxGrammarAccess.DRichTextElements getDRichTextAccess() {
		return gaDmx.getDRichTextAccess();
	}
	
	public ParserRule getDRichTextRule() {
		return getDRichTextAccess().getRule();
	}
	
	//DmxTextOnly DTextSegment:
	//	value=PLAIN_TEXT_ONLY;
	public DmxGrammarAccess.DmxTextOnlyElements getDmxTextOnlyAccess() {
		return gaDmx.getDmxTextOnlyAccess();
	}
	
	public ParserRule getDmxTextOnlyRule() {
		return getDmxTextOnlyAccess().getRule();
	}
	
	//DmxTextStart DTextSegment:
	//	value=PLAIN_TEXT_START;
	public DmxGrammarAccess.DmxTextStartElements getDmxTextStartAccess() {
		return gaDmx.getDmxTextStartAccess();
	}
	
	public ParserRule getDmxTextStartRule() {
		return getDmxTextStartAccess().getRule();
	}
	
	//DmxTextMiddle DTextSegment:
	//	value=PLAIN_TEXT_MIDDLE;
	public DmxGrammarAccess.DmxTextMiddleElements getDmxTextMiddleAccess() {
		return gaDmx.getDmxTextMiddleAccess();
	}
	
	public ParserRule getDmxTextMiddleRule() {
		return getDmxTextMiddleAccess().getRule();
	}
	
	//DmxTextEnd DTextSegment:
	//	value=PLAIN_TEXT_END;
	public DmxGrammarAccess.DmxTextEndElements getDmxTextEndAccess() {
		return gaDmx.getDmxTextEndAccess();
	}
	
	public ParserRule getDmxTextEndRule() {
		return getDmxTextEndAccess().getRule();
	}
	
	//DmxNavigableMemberReference DExpression:
	//	DmxPrimaryExpression (=> ({DmxAssignment.precedingNavigationSegment=current} '.' assignToMember=[DNavigableMember]
	//	DmxOpSingleAssign) value=DmxOrExpression
	//	| => ({DmxMemberNavigation.precedingNavigationSegment=current} '.') member=[DNavigableMember] (=>
	//	explicitOperationCall?='(' (memberCallArguments+=DmxPredicate (',' memberCallArguments+=DmxPredicate)*)?
	//	')'
	//	| before?="@before")?)*;
	public DmxGrammarAccess.DmxNavigableMemberReferenceElements getDmxNavigableMemberReferenceAccess() {
		return gaDmx.getDmxNavigableMemberReferenceAccess();
	}
	
	public ParserRule getDmxNavigableMemberReferenceRule() {
		return getDmxNavigableMemberReferenceAccess().getRule();
	}
	
	//DmxAssignment DExpression:
	//	{DmxAssignment} assignToMember=[DNavigableMember] DmxOpSingleAssign value=DmxOrExpression;
	public DmxGrammarAccess.DmxAssignmentElements getDmxAssignmentAccess() {
		return gaDmx.getDmxAssignmentAccess();
	}
	
	public ParserRule getDmxAssignmentRule() {
		return getDmxAssignmentAccess().getRule();
	}
	
	//DmxOpSingleAssign:
	//	':=';
	public DmxGrammarAccess.DmxOpSingleAssignElements getDmxOpSingleAssignAccess() {
		return gaDmx.getDmxOpSingleAssignAccess();
	}
	
	public ParserRule getDmxOpSingleAssignRule() {
		return getDmxOpSingleAssignAccess().getRule();
	}
	
	//DmxPredicate DExpression:
	//	{DmxPredicateWithCorrelationVariable} correlationVariable=DmxCorrelationVariable
	//	'|'
	//	value=DmxOrExpression
	//	| DmxOrExpression;
	public DmxGrammarAccess.DmxPredicateElements getDmxPredicateAccess() {
		return gaDmx.getDmxPredicateAccess();
	}
	
	public ParserRule getDmxPredicateRule() {
		return getDmxPredicateAccess().getRule();
	}
	
	//DmxCorrelationVariable DContext:
	//	name=ID;
	public DmxGrammarAccess.DmxCorrelationVariableElements getDmxCorrelationVariableAccess() {
		return gaDmx.getDmxCorrelationVariableAccess();
	}
	
	public ParserRule getDmxCorrelationVariableRule() {
		return getDmxCorrelationVariableAccess().getRule();
	}
	
	////	(':' type=[DType])?;
	//DmxOrExpression DExpression:
	//	DmxAndExpression (=> ({DmxBinaryOperation.leftOperand=current} operator=DmxOpOr) rightOperand=DmxAndExpression)*;
	public DmxGrammarAccess.DmxOrExpressionElements getDmxOrExpressionAccess() {
		return gaDmx.getDmxOrExpressionAccess();
	}
	
	public ParserRule getDmxOrExpressionRule() {
		return getDmxOrExpressionAccess().getRule();
	}
	
	//enum DmxOpOr returns DmxBinaryOperator:
	//	OR | OR='or' | XOR | XOR='xor';
	public DmxGrammarAccess.DmxOpOrElements getDmxOpOrAccess() {
		return gaDmx.getDmxOpOrAccess();
	}
	
	public EnumRule getDmxOpOrRule() {
		return getDmxOpOrAccess().getRule();
	}
	
	//DmxAndExpression DExpression:
	//	DmxEqualityExpression (=> ({DmxBinaryOperation.leftOperand=current} operator=DmxOpAnd)
	//	rightOperand=DmxEqualityExpression)*;
	public DmxGrammarAccess.DmxAndExpressionElements getDmxAndExpressionAccess() {
		return gaDmx.getDmxAndExpressionAccess();
	}
	
	public ParserRule getDmxAndExpressionRule() {
		return getDmxAndExpressionAccess().getRule();
	}
	
	//enum DmxOpAnd returns DmxBinaryOperator:
	//	AND | AND='and';
	public DmxGrammarAccess.DmxOpAndElements getDmxOpAndAccess() {
		return gaDmx.getDmxOpAndAccess();
	}
	
	public EnumRule getDmxOpAndRule() {
		return getDmxOpAndAccess().getRule();
	}
	
	//DmxEqualityExpression DExpression:
	//	DmxRelationalExpression (=> ({DmxBinaryOperation.leftOperand=current} operator=DmxOpEquality)
	//	rightOperand=DmxRelationalExpression)*;
	public DmxGrammarAccess.DmxEqualityExpressionElements getDmxEqualityExpressionAccess() {
		return gaDmx.getDmxEqualityExpressionAccess();
	}
	
	public ParserRule getDmxEqualityExpressionRule() {
		return getDmxEqualityExpressionAccess().getRule();
	}
	
	//enum DmxOpEquality returns DmxBinaryOperator:
	//	EQUAL='=' | NOT_EQUAL='!=' | NOT_EQUAL='<>';
	public DmxGrammarAccess.DmxOpEqualityElements getDmxOpEqualityAccess() {
		return gaDmx.getDmxOpEqualityAccess();
	}
	
	public EnumRule getDmxOpEqualityRule() {
		return getDmxOpEqualityAccess().getRule();
	}
	
	//DmxRelationalExpression DExpression:
	//	DmxOtherOperatorExpression (=> ({DmxInstanceOfExpression.expression=current} DmxOpInstanceOf) type=[DType] | =>
	//	({DmxBinaryOperation.leftOperand=current} operator=OpCompare) rightOperand=DmxOtherOperatorExpression)*;
	public DmxGrammarAccess.DmxRelationalExpressionElements getDmxRelationalExpressionAccess() {
		return gaDmx.getDmxRelationalExpressionAccess();
	}
	
	public ParserRule getDmxRelationalExpressionRule() {
		return getDmxRelationalExpressionAccess().getRule();
	}
	
	//DmxOpInstanceOf:
	//	'ISA' | 'isa';
	public DmxGrammarAccess.DmxOpInstanceOfElements getDmxOpInstanceOfAccess() {
		return gaDmx.getDmxOpInstanceOfAccess();
	}
	
	public ParserRule getDmxOpInstanceOfRule() {
		return getDmxOpInstanceOfAccess().getRule();
	}
	
	//enum OpCompare returns DmxBinaryOperator:
	//	LESS='<' | LESS_OR_EQUAL='<=' | LESS_OR_EQUAL='≤' | GREATER_OR_EQUAL='>=' | GREATER_OR_EQUAL='≥' | GREATER='>';
	public DmxGrammarAccess.OpCompareElements getOpCompareAccess() {
		return gaDmx.getOpCompareAccess();
	}
	
	public EnumRule getOpCompareRule() {
		return getOpCompareAccess().getRule();
	}
	
	//DmxOtherOperatorExpression DExpression:
	//	DmxAdditiveExpression (=> ({DmxBinaryOperation.leftOperand=current} operator=OpOther)
	//	rightOperand=DmxAdditiveExpression)*;
	public DmxGrammarAccess.DmxOtherOperatorExpressionElements getDmxOtherOperatorExpressionAccess() {
		return gaDmx.getDmxOtherOperatorExpressionAccess();
	}
	
	public ParserRule getDmxOtherOperatorExpressionRule() {
		return getDmxOtherOperatorExpressionAccess().getRule();
	}
	
	//enum OpOther returns DmxBinaryOperator:
	//	UNTIL='..' | SINGLE_ARROW='->' | DOUBLE_ARROW='=>';
	public DmxGrammarAccess.OpOtherElements getOpOtherAccess() {
		return gaDmx.getOpOtherAccess();
	}
	
	public EnumRule getOpOtherRule() {
		return getOpOtherAccess().getRule();
	}
	
	//DmxAdditiveExpression DExpression:
	//	DmxMultiplicativeExpression (=> ({DmxBinaryOperation.leftOperand=current} operator=OpAdd)
	//	rightOperand=DmxMultiplicativeExpression)*;
	public DmxGrammarAccess.DmxAdditiveExpressionElements getDmxAdditiveExpressionAccess() {
		return gaDmx.getDmxAdditiveExpressionAccess();
	}
	
	public ParserRule getDmxAdditiveExpressionRule() {
		return getDmxAdditiveExpressionAccess().getRule();
	}
	
	//enum OpAdd returns DmxBinaryOperator:
	//	ADD='+' | SUBTRACT='-';
	public DmxGrammarAccess.OpAddElements getOpAddAccess() {
		return gaDmx.getOpAddAccess();
	}
	
	public EnumRule getOpAddRule() {
		return getOpAddAccess().getRule();
	}
	
	//DmxMultiplicativeExpression DExpression:
	//	DmxUnaryOperation (=> ({DmxBinaryOperation.leftOperand=current} operator=OpMulti) rightOperand=DmxUnaryOperation)*;
	public DmxGrammarAccess.DmxMultiplicativeExpressionElements getDmxMultiplicativeExpressionAccess() {
		return gaDmx.getDmxMultiplicativeExpressionAccess();
	}
	
	public ParserRule getDmxMultiplicativeExpressionRule() {
		return getDmxMultiplicativeExpressionAccess().getRule();
	}
	
	//enum OpMulti returns DmxBinaryOperator:
	//	MULTIPLY='*' | DIVIDE='/' | POWER='**' | MODULO='%';
	public DmxGrammarAccess.OpMultiElements getOpMultiAccess() {
		return gaDmx.getOpMultiAccess();
	}
	
	public EnumRule getOpMultiRule() {
		return getOpMultiAccess().getRule();
	}
	
	//DmxUnaryOperation DExpression:
	//	{DmxUnaryOperation} operator=OpUnary operand=DmxUnaryOperation
	//	| DmxCastExpression;
	public DmxGrammarAccess.DmxUnaryOperationElements getDmxUnaryOperationAccess() {
		return gaDmx.getDmxUnaryOperationAccess();
	}
	
	public ParserRule getDmxUnaryOperationRule() {
		return getDmxUnaryOperationAccess().getRule();
	}
	
	//enum OpUnary returns DmxUnaryOperator:
	//	PLUS='+' | MINUS='-' | NOT='!' | NOT | NOT='not';
	public DmxGrammarAccess.OpUnaryElements getOpUnaryAccess() {
		return gaDmx.getOpUnaryAccess();
	}
	
	public EnumRule getOpUnaryRule() {
		return getOpUnaryAccess().getRule();
	}
	
	//DmxCastExpression DExpression:
	//	DmxNavigableMemberReference (=> ({DmxCastExpression.target=current} DmxOpCast) type=[DType])?;
	public DmxGrammarAccess.DmxCastExpressionElements getDmxCastExpressionAccess() {
		return gaDmx.getDmxCastExpressionAccess();
	}
	
	public ParserRule getDmxCastExpressionRule() {
		return getDmxCastExpressionAccess().getRule();
	}
	
	//DmxOpCast:
	//	'AS' | 'as';
	public DmxGrammarAccess.DmxOpCastElements getDmxOpCastAccess() {
		return gaDmx.getDmxOpCastAccess();
	}
	
	public ParserRule getDmxOpCastRule() {
		return getDmxOpCastAccess().getRule();
	}
	
	//DmxPrimaryExpression DExpression:
	//	DmxLiteralExpression | DmxSelfExpression | DmxReturnExpression | DmxRaiseExpression | DmxParenthesizedExpression |
	//	DmxFunctionCall | DmxConstructorCall | DmxStaticReference | DmxContextReference | DmxIfExpression |
	//	DmxForLoopExpression;
	public DmxGrammarAccess.DmxPrimaryExpressionElements getDmxPrimaryExpressionAccess() {
		return gaDmx.getDmxPrimaryExpressionAccess();
	}
	
	public ParserRule getDmxPrimaryExpressionRule() {
		return getDmxPrimaryExpressionAccess().getRule();
	}
	
	//DmxLiteralExpression DExpression:
	//	DmxBooleanLiteral | DmxStringLiteral | DmxNaturalLiteral | DmxDecimalLiteral | DmxUndefinedLiteral;
	public DmxGrammarAccess.DmxLiteralExpressionElements getDmxLiteralExpressionAccess() {
		return gaDmx.getDmxLiteralExpressionAccess();
	}
	
	public ParserRule getDmxLiteralExpressionRule() {
		return getDmxLiteralExpressionAccess().getRule();
	}
	
	//DmxSelfExpression DExpression:
	//	{DmxSelfExpression} ('SELF' | 'self');
	public DmxGrammarAccess.DmxSelfExpressionElements getDmxSelfExpressionAccess() {
		return gaDmx.getDmxSelfExpressionAccess();
	}
	
	public ParserRule getDmxSelfExpressionRule() {
		return getDmxSelfExpressionAccess().getRule();
	}
	
	//DmxReturnExpression DExpression:
	//	{DmxReturnExpression} ('RETURN' | 'return') -> expression=DExpression?;
	public DmxGrammarAccess.DmxReturnExpressionElements getDmxReturnExpressionAccess() {
		return gaDmx.getDmxReturnExpressionAccess();
	}
	
	public ParserRule getDmxReturnExpressionRule() {
		return getDmxReturnExpressionAccess().getRule();
	}
	
	//DmxRaiseExpression DExpression:
	//	{DmxRaiseExpression} ('RAISE' | 'raise') expression=DExpression;
	public DmxGrammarAccess.DmxRaiseExpressionElements getDmxRaiseExpressionAccess() {
		return gaDmx.getDmxRaiseExpressionAccess();
	}
	
	public ParserRule getDmxRaiseExpressionRule() {
		return getDmxRaiseExpressionAccess().getRule();
	}
	
	//DmxParenthesizedExpression DExpression:
	//	'(' DExpression ')';
	public DmxGrammarAccess.DmxParenthesizedExpressionElements getDmxParenthesizedExpressionAccess() {
		return gaDmx.getDmxParenthesizedExpressionAccess();
	}
	
	public ParserRule getDmxParenthesizedExpressionRule() {
		return getDmxParenthesizedExpressionAccess().getRule();
	}
	
	//DmxFunctionCall DExpression:
	//	{DmxFunctionCall} function=[DmxFunction]
	//	'(' (functionCallArguments+=DExpression (',' functionCallArguments+=DExpression)*)?
	//	')';
	public DmxGrammarAccess.DmxFunctionCallElements getDmxFunctionCallAccess() {
		return gaDmx.getDmxFunctionCallAccess();
	}
	
	public ParserRule getDmxFunctionCallRule() {
		return getDmxFunctionCallAccess().getRule();
	}
	
	//DmxConstructorCall DExpression:
	//	{DmxConstructorCall} DmxOpConstructor constructor=[DComplexType] (=> explicitConstructorCall?='('
	//	(arguments+=DExpression (',' arguments+=DExpression)*)?
	//	')')?;
	public DmxGrammarAccess.DmxConstructorCallElements getDmxConstructorCallAccess() {
		return gaDmx.getDmxConstructorCallAccess();
	}
	
	public ParserRule getDmxConstructorCallRule() {
		return getDmxConstructorCallAccess().getRule();
	}
	
	//DmxOpConstructor:
	//	'NEW' | 'new';
	public DmxGrammarAccess.DmxOpConstructorElements getDmxOpConstructorAccess() {
		return gaDmx.getDmxOpConstructorAccess();
	}
	
	public ParserRule getDmxOpConstructorRule() {
		return getDmxOpConstructorAccess().getRule();
	}
	
	//DmxStaticReference DExpression:
	//	{DmxStaticReference}
	//	'['
	//	target=[IStaticReferenceTarget|DQualifiedName] ('#' member=[DNavigableMember])? ("|" (displayName=ID | plural?="*"))?
	//	-> ']';
	public DmxGrammarAccess.DmxStaticReferenceElements getDmxStaticReferenceAccess() {
		return gaDmx.getDmxStaticReferenceAccess();
	}
	
	public ParserRule getDmxStaticReferenceRule() {
		return getDmxStaticReferenceAccess().getRule();
	}
	
	//// '->' gives precedence to this ']' over PLAIN_TEXT_MIDDLE ('=>' works too but generates more lookahead overhead)
	//DmxContextReference DExpression:
	//	{DmxContextReference} target=[DNamedElement] (before?="@before"
	//	| '.' all?='all')?;
	public DmxGrammarAccess.DmxContextReferenceElements getDmxContextReferenceAccess() {
		return gaDmx.getDmxContextReferenceAccess();
	}
	
	public ParserRule getDmxContextReferenceRule() {
		return getDmxContextReferenceAccess().getRule();
	}
	
	//DmxIfExpression DExpression:
	//	{DmxIfExpression}
	//	'if' if=DExpression
	//	'then' then=DExpression (=> 'else' else=DExpression)?
	//	'end';
	public DmxGrammarAccess.DmxIfExpressionElements getDmxIfExpressionAccess() {
		return gaDmx.getDmxIfExpressionAccess();
	}
	
	public ParserRule getDmxIfExpressionRule() {
		return getDmxIfExpressionAccess().getRule();
	}
	
	//DmxForLoopExpression DExpression:
	//	=> ({DmxForLoopExpression}
	//	'for' declaredParam=ID ':') forExpression=DExpression 'do'
	//	eachExpression=DExpression
	//	'end';
	public DmxGrammarAccess.DmxForLoopExpressionElements getDmxForLoopExpressionAccess() {
		return gaDmx.getDmxForLoopExpressionAccess();
	}
	
	public ParserRule getDmxForLoopExpressionRule() {
		return getDmxForLoopExpressionAccess().getRule();
	}
	
	//DMultiplicity:
	//	'(' minOccurs=NATURAL '..' maxOccurs=MULTIPLICITY ')';
	public DmxGrammarAccess.DMultiplicityElements getDMultiplicityAccess() {
		return gaDmx.getDMultiplicityAccess();
	}
	
	public ParserRule getDMultiplicityRule() {
		return getDMultiplicityAccess().getRule();
	}
	
	//MULTIPLICITY ecore::EInt:
	//	NATURAL | '*';
	public DmxGrammarAccess.MULTIPLICITYElements getMULTIPLICITYAccess() {
		return gaDmx.getMULTIPLICITYAccess();
	}
	
	public ParserRule getMULTIPLICITYRule() {
		return getMULTIPLICITYAccess().getRule();
	}
	
	//DmxBooleanLiteral DExpression:
	//	{DmxBooleanLiteral} (value?='TRUE' | value?='true' | 'FALSE' | 'false');
	public DmxGrammarAccess.DmxBooleanLiteralElements getDmxBooleanLiteralAccess() {
		return gaDmx.getDmxBooleanLiteralAccess();
	}
	
	public ParserRule getDmxBooleanLiteralRule() {
		return getDmxBooleanLiteralAccess().getRule();
	}
	
	//DmxNaturalLiteral DExpression:
	//	{DmxNaturalLiteral} value=NATURAL;
	public DmxGrammarAccess.DmxNaturalLiteralElements getDmxNaturalLiteralAccess() {
		return gaDmx.getDmxNaturalLiteralAccess();
	}
	
	public ParserRule getDmxNaturalLiteralRule() {
		return getDmxNaturalLiteralAccess().getRule();
	}
	
	//DmxDecimalLiteral DExpression:
	//	{DmxDecimalLiteral} value=DECIMAL;
	public DmxGrammarAccess.DmxDecimalLiteralElements getDmxDecimalLiteralAccess() {
		return gaDmx.getDmxDecimalLiteralAccess();
	}
	
	public ParserRule getDmxDecimalLiteralRule() {
		return getDmxDecimalLiteralAccess().getRule();
	}
	
	//DmxStringLiteral DExpression:
	//	{DmxStringLiteral} value=STRING;
	public DmxGrammarAccess.DmxStringLiteralElements getDmxStringLiteralAccess() {
		return gaDmx.getDmxStringLiteralAccess();
	}
	
	public ParserRule getDmxStringLiteralRule() {
		return getDmxStringLiteralAccess().getRule();
	}
	
	//DmxUndefinedLiteral DExpression:
	//	{DmxUndefinedLiteral} ('UNDEFINED' | 'undefined');
	public DmxGrammarAccess.DmxUndefinedLiteralElements getDmxUndefinedLiteralAccess() {
		return gaDmx.getDmxUndefinedLiteralAccess();
	}
	
	public ParserRule getDmxUndefinedLiteralRule() {
		return getDmxUndefinedLiteralAccess().getRule();
	}
	
	//DECIMAL:
	//	NATURAL '.' NATURAL (('E' | 'e') ('+' | '-')? NATURAL)?;
	public DmxGrammarAccess.DECIMALElements getDECIMALAccess() {
		return gaDmx.getDECIMALAccess();
	}
	
	public ParserRule getDECIMALRule() {
		return getDECIMALAccess().getRule();
	}
	
	//DQualifiedNameWithWildcard:
	//	DQualifiedName '.*'?;
	public DmxGrammarAccess.DQualifiedNameWithWildcardElements getDQualifiedNameWithWildcardAccess() {
		return gaDmx.getDQualifiedNameWithWildcardAccess();
	}
	
	public ParserRule getDQualifiedNameWithWildcardRule() {
		return getDQualifiedNameWithWildcardAccess().getRule();
	}
	
	//DQualifiedName:
	//	ID ('.' ID)*;
	public DmxGrammarAccess.DQualifiedNameElements getDQualifiedNameAccess() {
		return gaDmx.getDQualifiedNameAccess();
	}
	
	public ParserRule getDQualifiedNameRule() {
		return getDQualifiedNameAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? (LETTER | '_') (LETTER | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaDmx.getIDRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"';
	public TerminalRule getSTRINGRule() {
		return gaDmx.getSTRINGRule();
	}
	
	//terminal NATURAL returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getNATURALRule() {
		return gaDmx.getNATURALRule();
	}
	
	//terminal fragment LETTER:
	//	'a'..'z' | 'A'..'Z' | '\\u00c0'..'\\u00d6' | '\\u00d8'..'\\u00f6' | '\\u00f8'..'\\u00ff';
	public TerminalRule getLETTERRule() {
		return gaDmx.getLETTERRule();
	}
	
	//terminal fragment PLAIN_TEXT:
	//	!('»' | ']' | '[');
	public TerminalRule getPLAIN_TEXTRule() {
		return gaDmx.getPLAIN_TEXTRule();
	}
	
	//terminal PLAIN_TEXT_ONLY:
	//	'«' PLAIN_TEXT* '»';
	public TerminalRule getPLAIN_TEXT_ONLYRule() {
		return gaDmx.getPLAIN_TEXT_ONLYRule();
	}
	
	//terminal PLAIN_TEXT_START:
	//	'«' PLAIN_TEXT* '[';
	public TerminalRule getPLAIN_TEXT_STARTRule() {
		return gaDmx.getPLAIN_TEXT_STARTRule();
	}
	
	//terminal PLAIN_TEXT_MIDDLE:
	//	']' PLAIN_TEXT* '[';
	public TerminalRule getPLAIN_TEXT_MIDDLERule() {
		return gaDmx.getPLAIN_TEXT_MIDDLERule();
	}
	
	//terminal PLAIN_TEXT_END:
	//	']' PLAIN_TEXT* '»';
	public TerminalRule getPLAIN_TEXT_ENDRule() {
		return gaDmx.getPLAIN_TEXT_ENDRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaDmx.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaDmx.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaDmx.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaDmx.getANY_OTHERRule();
	}
}
