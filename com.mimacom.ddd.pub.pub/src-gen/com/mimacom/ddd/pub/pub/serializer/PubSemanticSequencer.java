/*
 * generated by Xtext 2.19.0
 */
package com.mimacom.ddd.pub.pub.serializer;

import com.google.inject.Inject;
import com.mimacom.ddd.dm.base.BasePackage;
import com.mimacom.ddd.dm.base.DImport;
import com.mimacom.ddd.dm.base.DMultiplicity;
import com.mimacom.ddd.dm.base.DNamespace;
import com.mimacom.ddd.dm.base.DRichText;
import com.mimacom.ddd.dm.base.DTextSegment;
import com.mimacom.ddd.dm.dmx.DmxArchetype;
import com.mimacom.ddd.dm.dmx.DmxAssignment;
import com.mimacom.ddd.dm.dmx.DmxBaseTypeSet;
import com.mimacom.ddd.dm.dmx.DmxBinaryOperation;
import com.mimacom.ddd.dm.dmx.DmxBooleanLiteral;
import com.mimacom.ddd.dm.dmx.DmxCallArguments;
import com.mimacom.ddd.dm.dmx.DmxCastExpression;
import com.mimacom.ddd.dm.dmx.DmxContextReference;
import com.mimacom.ddd.dm.dmx.DmxCorrelationVariable;
import com.mimacom.ddd.dm.dmx.DmxDecimalLiteral;
import com.mimacom.ddd.dm.dmx.DmxDetail;
import com.mimacom.ddd.dm.dmx.DmxEntity;
import com.mimacom.ddd.dm.dmx.DmxField;
import com.mimacom.ddd.dm.dmx.DmxFilter;
import com.mimacom.ddd.dm.dmx.DmxFilterParameter;
import com.mimacom.ddd.dm.dmx.DmxFilterTypeDescriptor;
import com.mimacom.ddd.dm.dmx.DmxFunctionCall;
import com.mimacom.ddd.dm.dmx.DmxIfExpression;
import com.mimacom.ddd.dm.dmx.DmxInstanceOfExpression;
import com.mimacom.ddd.dm.dmx.DmxListExpression;
import com.mimacom.ddd.dm.dmx.DmxMemberNavigation;
import com.mimacom.ddd.dm.dmx.DmxModel;
import com.mimacom.ddd.dm.dmx.DmxNaturalLiteral;
import com.mimacom.ddd.dm.dmx.DmxPackage;
import com.mimacom.ddd.dm.dmx.DmxPredicateWithCorrelationVariable;
import com.mimacom.ddd.dm.dmx.DmxStaticReference;
import com.mimacom.ddd.dm.dmx.DmxStringLiteral;
import com.mimacom.ddd.dm.dmx.DmxTest;
import com.mimacom.ddd.dm.dmx.DmxTestContext;
import com.mimacom.ddd.dm.dmx.DmxUnaryOperation;
import com.mimacom.ddd.dm.dmx.DmxUndefinedLiteral;
import com.mimacom.ddd.dm.dmx.serializer.DmxSemanticSequencer;
import com.mimacom.ddd.pub.pub.Abbreviation;
import com.mimacom.ddd.pub.pub.Abbreviations;
import com.mimacom.ddd.pub.pub.Abstract;
import com.mimacom.ddd.pub.pub.Admonition;
import com.mimacom.ddd.pub.pub.Appendix;
import com.mimacom.ddd.pub.pub.Bibliography;
import com.mimacom.ddd.pub.pub.BibliographyEntry;
import com.mimacom.ddd.pub.pub.ChangeDescription;
import com.mimacom.ddd.pub.pub.ChangeHistory;
import com.mimacom.ddd.pub.pub.Chapter;
import com.mimacom.ddd.pub.pub.CodeListing;
import com.mimacom.ddd.pub.pub.Component;
import com.mimacom.ddd.pub.pub.Epilogue;
import com.mimacom.ddd.pub.pub.Equation;
import com.mimacom.ddd.pub.pub.Figure;
import com.mimacom.ddd.pub.pub.Glossary;
import com.mimacom.ddd.pub.pub.GlossaryEntry;
import com.mimacom.ddd.pub.pub.Index;
import com.mimacom.ddd.pub.pub.IndexEntry;
import com.mimacom.ddd.pub.pub.List;
import com.mimacom.ddd.pub.pub.ListItem;
import com.mimacom.ddd.pub.pub.ListOfFigures;
import com.mimacom.ddd.pub.pub.ListOfTables;
import com.mimacom.ddd.pub.pub.Paragraph;
import com.mimacom.ddd.pub.pub.Part;
import com.mimacom.ddd.pub.pub.Preface;
import com.mimacom.ddd.pub.pub.PubModel;
import com.mimacom.ddd.pub.pub.PubPackage;
import com.mimacom.ddd.pub.pub.Publication;
import com.mimacom.ddd.pub.pub.PublicationBody;
import com.mimacom.ddd.pub.pub.Reference;
import com.mimacom.ddd.pub.pub.Section;
import com.mimacom.ddd.pub.pub.SegmentInclude;
import com.mimacom.ddd.pub.pub.Subsection;
import com.mimacom.ddd.pub.pub.Subsubsection;
import com.mimacom.ddd.pub.pub.TOC;
import com.mimacom.ddd.pub.pub.Table;
import com.mimacom.ddd.pub.pub.TableCell;
import com.mimacom.ddd.pub.pub.TableRow;
import com.mimacom.ddd.pub.pub.services.PubGrammarAccess;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class PubSemanticSequencer extends DmxSemanticSequencer {

	@Inject
	private PubGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == BasePackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case BasePackage.DIMPORT:
				sequence_DImport(context, (DImport) semanticObject); 
				return; 
			case BasePackage.DMULTIPLICITY:
				sequence_DMultiplicity(context, (DMultiplicity) semanticObject); 
				return; 
			case BasePackage.DNAMESPACE:
				sequence_DNamespace(context, (DNamespace) semanticObject); 
				return; 
			case BasePackage.DRICH_TEXT:
				sequence_DRichText(context, (DRichText) semanticObject); 
				return; 
			case BasePackage.DTEXT_SEGMENT:
				if (rule == grammarAccess.getDmxTextEndRule()) {
					sequence_DmxTextEnd(context, (DTextSegment) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getDmxTextMiddleRule()) {
					sequence_DmxTextMiddle(context, (DTextSegment) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getDmxTextOnlyRule()) {
					sequence_DmxTextOnly(context, (DTextSegment) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getDmxTextStartRule()) {
					sequence_DmxTextStart(context, (DTextSegment) semanticObject); 
					return; 
				}
				else break;
			}
		else if (epackage == DmxPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case DmxPackage.DMX_ARCHETYPE:
				sequence_DmxArchetype(context, (DmxArchetype) semanticObject); 
				return; 
			case DmxPackage.DMX_ASSIGNMENT:
				if (rule == grammarAccess.getDmxAssignmentRule()) {
					sequence_DmxAssignment(context, (DmxAssignment) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getDmxPrimaryExpressionRule()
						|| rule == grammarAccess.getDExpressionRule()
						|| rule == grammarAccess.getDmxNavigableMemberReferenceRule()
						|| action == grammarAccess.getDmxNavigableMemberReferenceAccess().getDmxAssignmentPrecedingNavigationSegmentAction_1_0_0_0_0()
						|| action == grammarAccess.getDmxNavigableMemberReferenceAccess().getDmxMemberNavigationPrecedingNavigationSegmentAction_1_1_0_0_0()
						|| rule == grammarAccess.getDmxPredicateWithCorrelationVariableRule()
						|| rule == grammarAccess.getDmxOrExpressionRule()
						|| action == grammarAccess.getDmxOrExpressionAccess().getDmxBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getDmxAndExpressionRule()
						|| action == grammarAccess.getDmxAndExpressionAccess().getDmxBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getDmxEqualityExpressionRule()
						|| action == grammarAccess.getDmxEqualityExpressionAccess().getDmxBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getDmxRelationalExpressionRule()
						|| action == grammarAccess.getDmxRelationalExpressionAccess().getDmxInstanceOfExpressionExpressionAction_1_0_0_0_0()
						|| action == grammarAccess.getDmxRelationalExpressionAccess().getDmxBinaryOperationLeftOperandAction_1_1_0_0_0()
						|| rule == grammarAccess.getDmxOtherOperatorExpressionRule()
						|| action == grammarAccess.getDmxOtherOperatorExpressionAccess().getDmxBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getDmxAdditiveExpressionRule()
						|| action == grammarAccess.getDmxAdditiveExpressionAccess().getDmxBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getDmxMultiplicativeExpressionRule()
						|| action == grammarAccess.getDmxMultiplicativeExpressionAccess().getDmxBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getDmxUnaryOperationRule()
						|| rule == grammarAccess.getDmxCastExpressionRule()
						|| action == grammarAccess.getDmxCastExpressionAccess().getDmxCastExpressionTargetAction_1_0_0_0()
						|| rule == grammarAccess.getDmxParenthesizedExpressionRule()) {
					sequence_DmxAssignment_DmxNavigableMemberReference(context, (DmxAssignment) semanticObject); 
					return; 
				}
				else break;
			case DmxPackage.DMX_BASE_TYPE_SET:
				sequence_DmxBaseTypeSet(context, (DmxBaseTypeSet) semanticObject); 
				return; 
			case DmxPackage.DMX_BINARY_OPERATION:
				sequence_DmxAdditiveExpression_DmxAndExpression_DmxEqualityExpression_DmxMultiplicativeExpression_DmxOrExpression_DmxOtherOperatorExpression_DmxRelationalExpression(context, (DmxBinaryOperation) semanticObject); 
				return; 
			case DmxPackage.DMX_BOOLEAN_LITERAL:
				sequence_DmxBooleanLiteral(context, (DmxBooleanLiteral) semanticObject); 
				return; 
			case DmxPackage.DMX_CALL_ARGUMENTS:
				if (rule == grammarAccess.getDmxCallArgumentsRule()) {
					sequence_DmxCallArguments(context, (DmxCallArguments) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getDmxFunctionCallArgumentsRule()) {
					sequence_DmxFunctionCallArguments(context, (DmxCallArguments) semanticObject); 
					return; 
				}
				else break;
			case DmxPackage.DMX_CAST_EXPRESSION:
				sequence_DmxCastExpression(context, (DmxCastExpression) semanticObject); 
				return; 
			case DmxPackage.DMX_CONTEXT_REFERENCE:
				sequence_DmxContextReference(context, (DmxContextReference) semanticObject); 
				return; 
			case DmxPackage.DMX_CORRELATION_VARIABLE:
				sequence_DmxCorrelationVariable(context, (DmxCorrelationVariable) semanticObject); 
				return; 
			case DmxPackage.DMX_DECIMAL_LITERAL:
				sequence_DmxDecimalLiteral(context, (DmxDecimalLiteral) semanticObject); 
				return; 
			case DmxPackage.DMX_DETAIL:
				sequence_DmxComplexObject(context, (DmxDetail) semanticObject); 
				return; 
			case DmxPackage.DMX_ENTITY:
				sequence_DmxComplexObject(context, (DmxEntity) semanticObject); 
				return; 
			case DmxPackage.DMX_FIELD:
				sequence_DmxField(context, (DmxField) semanticObject); 
				return; 
			case DmxPackage.DMX_FILTER:
				sequence_DmxFilter(context, (DmxFilter) semanticObject); 
				return; 
			case DmxPackage.DMX_FILTER_PARAMETER:
				sequence_DmxFilterParameter(context, (DmxFilterParameter) semanticObject); 
				return; 
			case DmxPackage.DMX_FILTER_TYPE_DESCRIPTOR:
				sequence_DmxFilterTypeDescriptor(context, (DmxFilterTypeDescriptor) semanticObject); 
				return; 
			case DmxPackage.DMX_FUNCTION_CALL:
				sequence_DmxFunctionCall(context, (DmxFunctionCall) semanticObject); 
				return; 
			case DmxPackage.DMX_IF_EXPRESSION:
				sequence_DmxIfExpression(context, (DmxIfExpression) semanticObject); 
				return; 
			case DmxPackage.DMX_INSTANCE_OF_EXPRESSION:
				sequence_DmxRelationalExpression(context, (DmxInstanceOfExpression) semanticObject); 
				return; 
			case DmxPackage.DMX_LIST_EXPRESSION:
				if (rule == grammarAccess.getDmxPrimaryExpressionRule()
						|| rule == grammarAccess.getDExpressionRule()
						|| rule == grammarAccess.getDmxNavigableMemberReferenceRule()
						|| action == grammarAccess.getDmxNavigableMemberReferenceAccess().getDmxAssignmentPrecedingNavigationSegmentAction_1_0_0_0_0()
						|| action == grammarAccess.getDmxNavigableMemberReferenceAccess().getDmxMemberNavigationPrecedingNavigationSegmentAction_1_1_0_0_0()
						|| rule == grammarAccess.getDmxPredicateWithCorrelationVariableRule()
						|| rule == grammarAccess.getDmxOrExpressionRule()
						|| action == grammarAccess.getDmxOrExpressionAccess().getDmxBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getDmxAndExpressionRule()
						|| action == grammarAccess.getDmxAndExpressionAccess().getDmxBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getDmxEqualityExpressionRule()
						|| action == grammarAccess.getDmxEqualityExpressionAccess().getDmxBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getDmxRelationalExpressionRule()
						|| action == grammarAccess.getDmxRelationalExpressionAccess().getDmxInstanceOfExpressionExpressionAction_1_0_0_0_0()
						|| action == grammarAccess.getDmxRelationalExpressionAccess().getDmxBinaryOperationLeftOperandAction_1_1_0_0_0()
						|| rule == grammarAccess.getDmxOtherOperatorExpressionRule()
						|| action == grammarAccess.getDmxOtherOperatorExpressionAccess().getDmxBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getDmxAdditiveExpressionRule()
						|| action == grammarAccess.getDmxAdditiveExpressionAccess().getDmxBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getDmxMultiplicativeExpressionRule()
						|| action == grammarAccess.getDmxMultiplicativeExpressionAccess().getDmxBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getDmxUnaryOperationRule()
						|| rule == grammarAccess.getDmxCastExpressionRule()
						|| action == grammarAccess.getDmxCastExpressionAccess().getDmxCastExpressionTargetAction_1_0_0_0()
						|| rule == grammarAccess.getDmxParenthesizedExpressionRule()
						|| rule == grammarAccess.getDmxListExpressionRule()) {
					sequence_DmxListExpression(context, (DmxListExpression) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getDmxLiteralListExpressionRule()) {
					sequence_DmxLiteralListExpression(context, (DmxListExpression) semanticObject); 
					return; 
				}
				else break;
			case DmxPackage.DMX_MEMBER_NAVIGATION:
				sequence_DmxNavigableMemberReference(context, (DmxMemberNavigation) semanticObject); 
				return; 
			case DmxPackage.DMX_MODEL:
				sequence_DmxModel(context, (DmxModel) semanticObject); 
				return; 
			case DmxPackage.DMX_NATURAL_LITERAL:
				sequence_DmxNaturalLiteral(context, (DmxNaturalLiteral) semanticObject); 
				return; 
			case DmxPackage.DMX_PREDICATE_WITH_CORRELATION_VARIABLE:
				sequence_DmxPredicateWithCorrelationVariable(context, (DmxPredicateWithCorrelationVariable) semanticObject); 
				return; 
			case DmxPackage.DMX_STATIC_REFERENCE:
				sequence_DmxStaticReference(context, (DmxStaticReference) semanticObject); 
				return; 
			case DmxPackage.DMX_STRING_LITERAL:
				sequence_DmxStringLiteral(context, (DmxStringLiteral) semanticObject); 
				return; 
			case DmxPackage.DMX_TEST:
				sequence_DmxTest(context, (DmxTest) semanticObject); 
				return; 
			case DmxPackage.DMX_TEST_CONTEXT:
				sequence_DmxTestContext(context, (DmxTestContext) semanticObject); 
				return; 
			case DmxPackage.DMX_UNARY_OPERATION:
				sequence_DmxUnaryOperation(context, (DmxUnaryOperation) semanticObject); 
				return; 
			case DmxPackage.DMX_UNDEFINED_LITERAL:
				sequence_DmxUndefinedLiteral(context, (DmxUndefinedLiteral) semanticObject); 
				return; 
			}
		else if (epackage == PubPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case PubPackage.ABBREVIATION:
				sequence_PubAbbreviation(context, (Abbreviation) semanticObject); 
				return; 
			case PubPackage.ABBREVIATIONS:
				sequence_PubAbbreviations(context, (Abbreviations) semanticObject); 
				return; 
			case PubPackage.ABSTRACT:
				sequence_PubAbstract(context, (Abstract) semanticObject); 
				return; 
			case PubPackage.ADMONITION:
				sequence_PubAdmonition_PubReferenceTargetName(context, (Admonition) semanticObject); 
				return; 
			case PubPackage.APPENDIX:
				sequence_PubAppendix_PubDivisionHeader_PubReferenceTargetName(context, (Appendix) semanticObject); 
				return; 
			case PubPackage.BIBLIOGRAPHY:
				sequence_PubBibliography(context, (Bibliography) semanticObject); 
				return; 
			case PubPackage.BIBLIOGRAPHY_ENTRY:
				sequence_PubBibliographyEntry(context, (BibliographyEntry) semanticObject); 
				return; 
			case PubPackage.CHANGE_DESCRIPTION:
				sequence_PubChangeDescription(context, (ChangeDescription) semanticObject); 
				return; 
			case PubPackage.CHANGE_HISTORY:
				sequence_PubChangeHistory(context, (ChangeHistory) semanticObject); 
				return; 
			case PubPackage.CHAPTER:
				sequence_PubChapter_PubDivisionHeader_PubReferenceTargetName(context, (Chapter) semanticObject); 
				return; 
			case PubPackage.CODE_LISTING:
				sequence_PubCodeListing_PubReferenceTargetName_PubTitledBlockHeader(context, (CodeListing) semanticObject); 
				return; 
			case PubPackage.COMPONENT:
				sequence_PubComponent_PubReferenceTargetName(context, (Component) semanticObject); 
				return; 
			case PubPackage.EPILOGUE:
				sequence_PubEpilogue(context, (Epilogue) semanticObject); 
				return; 
			case PubPackage.EQUATION:
				sequence_PubEquation_PubReferenceTargetName_PubTitledBlockHeader(context, (Equation) semanticObject); 
				return; 
			case PubPackage.FIGURE:
				sequence_PubFigure_PubReferenceTargetName_PubTitledBlockHeader(context, (Figure) semanticObject); 
				return; 
			case PubPackage.GLOSSARY:
				sequence_PubGlossary(context, (Glossary) semanticObject); 
				return; 
			case PubPackage.GLOSSARY_ENTRY:
				sequence_PubGlossaryEntry(context, (GlossaryEntry) semanticObject); 
				return; 
			case PubPackage.INDEX:
				sequence_PubIndex(context, (Index) semanticObject); 
				return; 
			case PubPackage.INDEX_ENTRY:
				sequence_PubIndexEntry(context, (IndexEntry) semanticObject); 
				return; 
			case PubPackage.LIST:
				sequence_PubList(context, (List) semanticObject); 
				return; 
			case PubPackage.LIST_ITEM:
				sequence_PubListItem_PubReferenceTargetName(context, (ListItem) semanticObject); 
				return; 
			case PubPackage.LIST_OF_FIGURES:
				sequence_PubListOfFigures(context, (ListOfFigures) semanticObject); 
				return; 
			case PubPackage.LIST_OF_TABLES:
				sequence_PubListOfTables(context, (ListOfTables) semanticObject); 
				return; 
			case PubPackage.PARAGRAPH:
				if (rule == grammarAccess.getPubParagraphTextOnlyRule()) {
					sequence_PubParagraphTextOnly(context, (Paragraph) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getPubContentBlockRule()
						|| rule == grammarAccess.getPubParagraphRule()) {
					sequence_PubParagraph(context, (Paragraph) semanticObject); 
					return; 
				}
				else break;
			case PubPackage.PART:
				sequence_PubDivisionHeader_PubPart_PubReferenceTargetName(context, (Part) semanticObject); 
				return; 
			case PubPackage.PREFACE:
				sequence_PubPreface(context, (Preface) semanticObject); 
				return; 
			case PubPackage.PUB_MODEL:
				sequence_PubModel(context, (PubModel) semanticObject); 
				return; 
			case PubPackage.PUBLICATION:
				sequence_PubPublication_PubReferenceTargetName(context, (Publication) semanticObject); 
				return; 
			case PubPackage.PUBLICATION_BODY:
				sequence_PubPublicationBody(context, (PublicationBody) semanticObject); 
				return; 
			case PubPackage.REFERENCE:
				sequence_PubReference(context, (Reference) semanticObject); 
				return; 
			case PubPackage.SECTION:
				sequence_PubDivisionHeader_PubReferenceTargetName_PubSection(context, (Section) semanticObject); 
				return; 
			case PubPackage.SEGMENT_INCLUDE:
				sequence_PubSegmentInclude(context, (SegmentInclude) semanticObject); 
				return; 
			case PubPackage.SUBSECTION:
				sequence_PubDivisionHeader_PubReferenceTargetName_PubSubsection(context, (Subsection) semanticObject); 
				return; 
			case PubPackage.SUBSUBSECTION:
				sequence_PubDivisionHeader_PubReferenceTargetName_PubSubsubsection(context, (Subsubsection) semanticObject); 
				return; 
			case PubPackage.TOC:
				sequence_PubTOC(context, (TOC) semanticObject); 
				return; 
			case PubPackage.TABLE:
				sequence_PubReferenceTargetName_PubTable_PubTitledBlockHeader(context, (Table) semanticObject); 
				return; 
			case PubPackage.TABLE_CELL:
				if (rule == grammarAccess.getPubTableCellRule()) {
					sequence_PubTableCell(context, (TableCell) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getPubTableSimpleCellRule()) {
					sequence_PubTableSimpleCell(context, (TableCell) semanticObject); 
					return; 
				}
				else break;
			case PubPackage.TABLE_ROW:
				sequence_PubTableRow(context, (TableRow) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     PubAbbreviation returns Abbreviation
	 *
	 * Constraint:
	 *     ((name=ID longForm=STRING) | (name=ID longForm=STRING))
	 */
	protected void sequence_PubAbbreviation(ISerializationContext context, Abbreviation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     PubDocumentSegment returns Abbreviations
	 *     PubAbbreviations returns Abbreviations
	 *
	 * Constraint:
	 *     entries+=PubAbbreviation*
	 */
	protected void sequence_PubAbbreviations(ISerializationContext context, Abbreviations semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     PubDocumentSegment returns Abstract
	 *     PubAbstract returns Abstract
	 *
	 * Constraint:
	 *     contents+=PubContentBlock*
	 */
	protected void sequence_PubAbstract(ISerializationContext context, Abstract semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     PubContentBlock returns Admonition
	 *     PubAdmonition returns Admonition
	 *
	 * Constraint:
	 *     (name=ID? kind=PubAdmonitionKind title=DRichText? contents+=PubContentBlock*)
	 */
	protected void sequence_PubAdmonition_PubReferenceTargetName(ISerializationContext context, Admonition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     PubAppendix returns Appendix
	 *
	 * Constraint:
	 *     (name=ID? ((title=DRichText contents+=PubContentBlock* divisions+=PubChapter*) | (include=[Appendix|DQualifiedName] title=DRichText?)))
	 */
	protected void sequence_PubAppendix_PubDivisionHeader_PubReferenceTargetName(ISerializationContext context, Appendix semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     PubBibliographyEntry returns BibliographyEntry
	 *
	 * Constraint:
	 *     (
	 *         (
	 *             name=ID 
	 *             title=STRING 
	 *             authors=STRING 
	 *             publisher=STRING 
	 *             date=STRING 
	 *             comment=STRING
	 *         ) | 
	 *         (
	 *             name=ID 
	 *             title=STRING 
	 *             authors=STRING 
	 *             publisher=STRING 
	 *             date=STRING 
	 *             comment=STRING
	 *         )
	 *     )
	 */
	protected void sequence_PubBibliographyEntry(ISerializationContext context, BibliographyEntry semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     PubDocumentSegment returns Bibliography
	 *     PubBibliography returns Bibliography
	 *
	 * Constraint:
	 *     entries+=PubBibliographyEntry*
	 */
	protected void sequence_PubBibliography(ISerializationContext context, Bibliography semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     PubChangeDescription returns ChangeDescription
	 *
	 * Constraint:
	 *     ((version=STRING date=STRING author=STRING description=STRING) | (version=STRING date=STRING author=STRING description=STRING))
	 */
	protected void sequence_PubChangeDescription(ISerializationContext context, ChangeDescription semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     PubDocumentSegment returns ChangeHistory
	 *     PubChangeHistory returns ChangeHistory
	 *
	 * Constraint:
	 *     entries+=PubChangeDescription*
	 */
	protected void sequence_PubChangeHistory(ISerializationContext context, ChangeHistory semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     PubChapter returns Chapter
	 *
	 * Constraint:
	 *     (name=ID? ((title=DRichText contents+=PubContentBlock* divisions+=PubSection*) | (include=[Chapter|DQualifiedName] title=DRichText?)))
	 */
	protected void sequence_PubChapter_PubDivisionHeader_PubReferenceTargetName(ISerializationContext context, Chapter semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     PubContentBlock returns CodeListing
	 *     PubCodeListing returns CodeListing
	 *
	 * Constraint:
	 *     (name=ID? title=DRichText ((format=PubCodeLanguage? codeLines+=STRING*) | include=[EObject|DQualifiedName])?)
	 */
	protected void sequence_PubCodeListing_PubReferenceTargetName_PubTitledBlockHeader(ISerializationContext context, CodeListing semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     PubDocument returns Component
	 *     PubComponent returns Component
	 *
	 * Constraint:
	 *     (name=ID title=STRING publicationClass=[PublicationClass|ID] segments+=PubDocumentSegment*)
	 */
	protected void sequence_PubComponent_PubReferenceTargetName(ISerializationContext context, Component semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     PubPart returns Part
	 *
	 * Constraint:
	 *     (name=ID? ((title=DRichText contents+=PubContentBlock* divisions+=PubChapter*) | (include=[Part|DQualifiedName] title=DRichText?)))
	 */
	protected void sequence_PubDivisionHeader_PubPart_PubReferenceTargetName(ISerializationContext context, Part semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     PubSection returns Section
	 *
	 * Constraint:
	 *     (name=ID? ((title=DRichText contents+=PubContentBlock* divisions+=PubSubsection*) | (include=[Section|DQualifiedName] title=DRichText?)))
	 */
	protected void sequence_PubDivisionHeader_PubReferenceTargetName_PubSection(ISerializationContext context, Section semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     PubSubsection returns Subsection
	 *
	 * Constraint:
	 *     (name=ID? ((title=DRichText contents+=PubContentBlock* divisions+=PubSubsubsection*) | (include=[Subsection|DQualifiedName] title=DRichText?)))
	 */
	protected void sequence_PubDivisionHeader_PubReferenceTargetName_PubSubsection(ISerializationContext context, Subsection semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     PubSubsubsection returns Subsubsection
	 *
	 * Constraint:
	 *     (name=ID? ((title=DRichText contents+=PubContentBlock*) | (include=[Subsubsection|DQualifiedName] title=DRichText?)))
	 */
	protected void sequence_PubDivisionHeader_PubReferenceTargetName_PubSubsubsection(ISerializationContext context, Subsubsection semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     PubDocumentSegment returns Epilogue
	 *     PubEpilogue returns Epilogue
	 *
	 * Constraint:
	 *     contents+=PubContentBlock*
	 */
	protected void sequence_PubEpilogue(ISerializationContext context, Epilogue semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     PubContentBlock returns Equation
	 *     PubEquation returns Equation
	 *
	 * Constraint:
	 *     (name=ID? title=DRichText fileUri=STRING)
	 */
	protected void sequence_PubEquation_PubReferenceTargetName_PubTitledBlockHeader(ISerializationContext context, Equation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     PubContentBlock returns Figure
	 *     PubFigure returns Figure
	 *
	 * Constraint:
	 *     (name=ID? title=DRichText ((diagramRoot=[IDiagramRoot|DQualifiedName] renderer=[FigureRenderer|DQualifiedName]) | fileUri=STRING))
	 */
	protected void sequence_PubFigure_PubReferenceTargetName_PubTitledBlockHeader(ISerializationContext context, Figure semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     PubGlossaryEntry returns GlossaryEntry
	 *
	 * Constraint:
	 *     ((name=ID text=STRING comment=STRING) | (name=ID text=STRING comment=STRING))
	 */
	protected void sequence_PubGlossaryEntry(ISerializationContext context, GlossaryEntry semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     PubDocumentSegment returns Glossary
	 *     PubGlossary returns Glossary
	 *
	 * Constraint:
	 *     entries+=PubGlossaryEntry*
	 */
	protected void sequence_PubGlossary(ISerializationContext context, Glossary semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     PubIndexEntry returns IndexEntry
	 *
	 * Constraint:
	 *     ((text=STRING references+=[Division|ID] references+=[Division|ID]*) | (text=STRING references+=[Division|ID] references+=[Division|ID]*))
	 */
	protected void sequence_PubIndexEntry(ISerializationContext context, IndexEntry semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     PubDocumentSegment returns Index
	 *     PubIndex returns Index
	 *
	 * Constraint:
	 *     entries+=PubIndexEntry*
	 */
	protected void sequence_PubIndex(ISerializationContext context, Index semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     PubListItem returns ListItem
	 *
	 * Constraint:
	 *     (name=ID? ((title=DRichText? (contents+=PubContentBlock+ | contents+=PubContentBlock+)?) | contents+=PubParagraphTextOnly)?)
	 */
	protected void sequence_PubListItem_PubReferenceTargetName(ISerializationContext context, ListItem semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     PubDocumentSegment returns ListOfFigures
	 *     PubListOfFigures returns ListOfFigures
	 *
	 * Constraint:
	 *     {ListOfFigures}
	 */
	protected void sequence_PubListOfFigures(ISerializationContext context, ListOfFigures semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     PubDocumentSegment returns ListOfTables
	 *     PubListOfTables returns ListOfTables
	 *
	 * Constraint:
	 *     {ListOfTables}
	 */
	protected void sequence_PubListOfTables(ISerializationContext context, ListOfTables semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     PubContentBlock returns List
	 *     PubList returns List
	 *
	 * Constraint:
	 *     (name=ID? style=PubListStyle? numberingStyle=PubSequenceNumberStyle? items+=PubListItem*)
	 */
	protected void sequence_PubList(ISerializationContext context, List semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     PubModel returns PubModel
	 *
	 * Constraint:
	 *     (imports+=DImport* document=PubDocument)
	 */
	protected void sequence_PubModel(ISerializationContext context, PubModel semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     PubParagraphTextOnly returns Paragraph
	 *
	 * Constraint:
	 *     text=DRichText
	 */
	protected void sequence_PubParagraphTextOnly(ISerializationContext context, Paragraph semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, PubPackage.Literals.PARAGRAPH__TEXT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PubPackage.Literals.PARAGRAPH__TEXT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPubParagraphTextOnlyAccess().getTextDRichTextParserRuleCall_0(), semanticObject.getText());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     PubContentBlock returns Paragraph
	 *     PubParagraph returns Paragraph
	 *
	 * Constraint:
	 *     (style=PubParagraphStyle? text=DRichText)
	 */
	protected void sequence_PubParagraph(ISerializationContext context, Paragraph semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     PubDocumentSegment returns Preface
	 *     PubPreface returns Preface
	 *
	 * Constraint:
	 *     contents+=PubContentBlock*
	 */
	protected void sequence_PubPreface(ISerializationContext context, Preface semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     PubDocumentSegment returns PublicationBody
	 *     PubPublicationBody returns PublicationBody
	 *
	 * Constraint:
	 *     (divisions+=PubPart | divisions+=PubAppendix | divisions+=PubChapter)*
	 */
	protected void sequence_PubPublicationBody(ISerializationContext context, PublicationBody semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     PubDocument returns Publication
	 *     PubPublication returns Publication
	 *
	 * Constraint:
	 *     (name=ID title=STRING publicationClass=[PublicationClass|ID] includes+=[Component|ID]*)
	 */
	protected void sequence_PubPublication_PubReferenceTargetName(ISerializationContext context, Publication semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     PubContentBlock returns Table
	 *     PubTable returns Table
	 *
	 * Constraint:
	 *     (name=ID? title=DRichText columns=NATURAL widthPercent=NATURAL? rows+=PubTableRow*)
	 */
	protected void sequence_PubReferenceTargetName_PubTable_PubTitledBlockHeader(ISerializationContext context, Table semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DmxPrimaryExpression returns Reference
	 *     PubReference returns Reference
	 *     DExpression returns Reference
	 *     DmxNavigableMemberReference returns Reference
	 *     DmxNavigableMemberReference.DmxAssignment_1_0_0_0_0 returns Reference
	 *     DmxNavigableMemberReference.DmxMemberNavigation_1_1_0_0_0 returns Reference
	 *     DmxPredicateWithCorrelationVariable returns Reference
	 *     DmxOrExpression returns Reference
	 *     DmxOrExpression.DmxBinaryOperation_1_0_0_0 returns Reference
	 *     DmxAndExpression returns Reference
	 *     DmxAndExpression.DmxBinaryOperation_1_0_0_0 returns Reference
	 *     DmxEqualityExpression returns Reference
	 *     DmxEqualityExpression.DmxBinaryOperation_1_0_0_0 returns Reference
	 *     DmxRelationalExpression returns Reference
	 *     DmxRelationalExpression.DmxInstanceOfExpression_1_0_0_0_0 returns Reference
	 *     DmxRelationalExpression.DmxBinaryOperation_1_1_0_0_0 returns Reference
	 *     DmxOtherOperatorExpression returns Reference
	 *     DmxOtherOperatorExpression.DmxBinaryOperation_1_0_0_0 returns Reference
	 *     DmxAdditiveExpression returns Reference
	 *     DmxAdditiveExpression.DmxBinaryOperation_1_0_0_0 returns Reference
	 *     DmxMultiplicativeExpression returns Reference
	 *     DmxMultiplicativeExpression.DmxBinaryOperation_1_0_0_0 returns Reference
	 *     DmxUnaryOperation returns Reference
	 *     DmxCastExpression returns Reference
	 *     DmxCastExpression.DmxCastExpression_1_0_0_0 returns Reference
	 *     DmxParenthesizedExpression returns Reference
	 *
	 * Constraint:
	 *     (scope=PubReferenceScope? target=[ReferenceTarget|DQualifiedName])
	 */
	protected void sequence_PubReference(ISerializationContext context, Reference semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     PubDocumentSegment returns SegmentInclude
	 *     PubSegmentInclude returns SegmentInclude
	 *
	 * Constraint:
	 *     include=[DocumentSegment|ID]
	 */
	protected void sequence_PubSegmentInclude(ISerializationContext context, SegmentInclude semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, PubPackage.Literals.SEGMENT_INCLUDE__INCLUDE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PubPackage.Literals.SEGMENT_INCLUDE__INCLUDE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPubSegmentIncludeAccess().getIncludeDocumentSegmentIDTerminalRuleCall_3_0_1(), semanticObject.eGet(PubPackage.Literals.SEGMENT_INCLUDE__INCLUDE, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     PubDocumentSegment returns TOC
	 *     PubTOC returns TOC
	 *
	 * Constraint:
	 *     {TOC}
	 */
	protected void sequence_PubTOC(ISerializationContext context, TOC semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     PubTableCell returns TableCell
	 *
	 * Constraint:
	 *     (width=NATURAL? height=NATURAL? (contents+=PubContentBlock+ | contents+=PubContentBlock+)?)
	 */
	protected void sequence_PubTableCell(ISerializationContext context, TableCell semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     PubTableRow returns TableRow
	 *
	 * Constraint:
	 *     (
	 *         ((isHeading?='true' | isHeading?='Header')? height=NATURAL? (cells+=PubTableCell+ | cells+=PubTableCell+)?) | 
	 *         (isHeading?='|||'? cells+=PubTableSimpleCell*)
	 *     )
	 */
	protected void sequence_PubTableRow(ISerializationContext context, TableRow semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     PubTableSimpleCell returns TableCell
	 *
	 * Constraint:
	 *     contents+=PubParagraphTextOnly
	 */
	protected void sequence_PubTableSimpleCell(ISerializationContext context, TableCell semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
