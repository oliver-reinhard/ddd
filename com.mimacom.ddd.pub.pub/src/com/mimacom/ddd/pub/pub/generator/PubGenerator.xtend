/*
 * generated by Xtext 2.19.0
 */
package com.mimacom.ddd.pub.pub.generator

import com.google.inject.Inject
import com.mimacom.ddd.pub.pub.PubModel
import org.apache.log4j.Logger
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class PubGenerator extends AbstractGenerator {

	@Inject PubHtmlRenderer htmlRenderer
	@Inject PubLaTeXRenderer laTeXRenderer
	@Inject PubGeneratorDelegate delegate

	static val Logger LOGGER = Logger.getLogger(PubGenerator);

	override synchronized void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		val model = resource.contents.get(0) as PubModel
		val doc = model.document
		if (doc !== null) {
			delegate.init(resource, fsa, context)
			val msg = " for document \"" + doc.title + "\""
			
			if (doc.generateHtml) {
				LOGGER.debug("Generating HTML" + msg)
				delegate.generate(htmlRenderer)
			}
			
			if (doc.generateLaTeX) {
				LOGGER.debug("Generating LaTeX" + msg)
				delegate.generate(laTeXRenderer)
			}
		}
	}
}
