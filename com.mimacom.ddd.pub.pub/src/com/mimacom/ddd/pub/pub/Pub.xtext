// automatically generated by Xtext
grammar com.mimacom.ddd.pub.pub.Pub with com.mimacom.ddd.dm.dmx.Dmx

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://www.mimacom.com/ddd/dm/base"
import "http://www.mimacom.com/ddd/dm/dmx"
import "http://www.mimacom.com/ddd/pub/pub"
import "http://www.mimacom.com/ddd/pub/proto" as proto

PubModel returns PubModel:
	{PubModel}
	(imports+=DImport)*
	document=PubDocument;

PubDocument returns Document:
	PubPublication | PubComponent;

PubPublication returns Publication:
	{Publication} 
	'Publication'
	PubReferenceTargetName
	title=STRING
	'class:' publicationClass=[proto::PublicationClass|ID]
	PubGenerate
	symbols+=PubSymbol*
	('include:' includes+=[Component|ID])*;

PubComponent returns Component:
	{Component}
	'Component'
	PubReferenceTargetName
	title=STRING
	'class:' publicationClass=[proto::PublicationClass|ID]
	PubGenerate
	symbols+=PubSymbol*
	segments+=PubDocumentSegment*;

fragment PubGenerate returns Document:
	'generate'
	 (generateHtml?='html'? & generateLaTeX?='latex'? /* & generateMarkdown?='markdown'? & generateAsciiDoc?='asciidoc'? */)
	 ('diagrams:' (preferRasterDiagrams?='raster' | 'vector'))?;
	
PubSymbol returns Symbol:
	'symbol:'
	name=ID '=' value=DRichText;

fragment PubReferenceTargetName returns ReferenceTarget: 
	'(' ('#')? name=ID ')';

//
// SEGMENTS
//

PubDocumentSegment returns DocumentSegment:
	PubAbstract | PubPreface | PubPublicationBody | PubEpilogue | PubChangeHistory | PubTOC | PubAbbreviations |
	PubListOfTables | PubListOfFigures |
	PubBibliography | PubGlossary | PubIndex | PubSegmentInclude;

PubAbstract returns Abstract:
	{Abstract}
	'Abstract'
	'{'
	contents+=PubContentBlock*
	'}';

PubPreface returns Preface:
	{Preface}
	'Preface'
	'{'
	contents+=PubContentBlock*
	'}';

PubEpilogue returns Epilogue:
	{Epilogue}
	'Epilogue'
	'{'
	contents+=PubContentBlock*
	'}';

PubChangeHistory returns ChangeHistory:
	{ChangeHistory}
	'ChangeHistory'
	'{'
	entries+=PubChangeDescription*
	'}';

PubChangeDescription returns ChangeDescription:
	(	'Entry'
		'version:' version=STRING
		'date:' date=STRING
		'author:' author=STRING
		'description:' description=STRING
	|	'-' version=STRING ':' date=STRING ',' author=STRING ',' description=STRING
	);

PubTOC returns TOC:
	{TOC}
	'TableOfContents'
	'{' '}';

PubAbbreviations returns Abbreviations:
	{Abbreviations}
	'Abbreviations'
	'{'
	entries+=PubAbbreviation*
	'}';

PubAbbreviation returns Abbreviation:
	(	'Entry'
		'id:' name=ID
		'text:' longForm=STRING
	|	'-' name=ID ':' longForm=STRING
	);

PubListOfTables returns ListOfTables:
	{ListOfTables}
	'ListOfTables'
	'{' '}';

PubListOfFigures returns ListOfFigures:
	{ListOfFigures}
	'ListOfFigures'
	'{' '}';

PubBibliography returns Bibliography:
	{Bibliography}
	'Bibliography'
	'{'
	entries+=PubBibliographyEntry*
	'}';

PubBibliographyEntry returns BibliographyEntry:
	(	'Entry'
		'id:' name=ID
		'title:' title=STRING
		'authors:' authors=STRING
		'publisher:' publisher=STRING
		'date:' date=STRING
		'comment:' comment=STRING
	|	'-' name=ID ':' title=STRING ',' authors=STRING ',' publisher=STRING ',' date=STRING ',' comment=STRING
	);

PubGlossary returns Glossary:
	{Glossary}
	'Glossary'
	'{'
	entries+=PubGlossaryEntry*
	'}';

PubGlossaryEntry returns GlossaryEntry:
	(	'Entry'
		'id:' name=ID
		'text' text=STRING
		'comment:' comment=STRING
	|	'-' name=ID ':' text=STRING ',' comment=STRING
	);

PubIndex returns Index:
	{Index}
	'Index'
	'{'
	entries+=PubIndexEntry*
	'}';

PubIndexEntry returns IndexEntry:
	(	'Entry'
		'text' text=STRING
		'references:' references+=[Division] (',' references+=[Division|ID])* // VALIDATION -> WARNING if none
	|	'-' text=STRING ':' references+=[Division] (',' references+=[Division|ID])* // VALIDATION -> WARNING if none
	);
	
PubSegmentInclude returns SegmentInclude:
	{SegmentInclude}
	'Segment' 
	'include:' include=[DocumentSegment|ID];

PubPublicationBody returns PublicationBody:
	{PublicationBody}
	'Body'
	'{'
	divisions+=(PubPart | PubAppendix | PubChapter | PubSection)*
	'}';
	
//
// DIVISIONS
//

fragment PubDivisionHeader returns Division:
	PubReferenceTargetName?
	title=DRichText;
	
fragment PubDivisionIncludeHeader returns Division:
	PubReferenceTargetName?
	'include:';

PubPart returns Part:
	{Part}
	'Part'
	(	PubDivisionHeader
		contents+=PubContentBlock*
		(-> divisions+=PubChapter)*
	|	PubDivisionIncludeHeader
		include=[Part|DQualifiedName]
		('as' title=DRichText)?
	);

PubAppendix returns Appendix:
	'Appendix'
	(	PubDivisionHeader
		contents+=PubContentBlock*
		(-> divisions+=PubChapter)*
	|	PubDivisionIncludeHeader
		include=[Appendix|DQualifiedName]
		('as' title=DRichText)?
	);

PubChapter returns Chapter:
	'Chapter'
	(	PubDivisionHeader
		contents+=PubContentBlock*
		(-> divisions+=PubSection)*
	|	PubDivisionIncludeHeader
		include=[Chapter|DQualifiedName]
		('as' title=DRichText)?
	);

PubSection returns Section:
	'Section'
	(	PubDivisionHeader
		contents+=PubContentBlock*
		divisions+=PubSubsection*
	|	PubDivisionIncludeHeader
		include=[Section|DQualifiedName]
		('as' title=DRichText)?
	);

PubSubsection returns Subsection:
	('Sub' | 'Subsection')
	(	PubDivisionHeader
		contents+=PubContentBlock*
		divisions+=PubSubsubsection*
	|	PubDivisionIncludeHeader
		include=[Subsection|DQualifiedName]
		('as' title=DRichText)?
	);

PubSubsubsection returns Subsubsection:
	('Subsub' | 'Subsubsection')
	(	PubDivisionHeader
		contents+=PubContentBlock*
	|	PubDivisionIncludeHeader
		include=[Subsubsection|DQualifiedName]
		('as' title=DRichText)?
	);

//
// ACTUAL CONTENT
//

PubContentBlock returns ContentBlock:
	PubAdmonition | PubList | PubTable | PubFigure | PubEquation | PubCodeListing | PubRichTextParagraph | PubFootnote;

PubAdmonition returns Admonition:
	'Admonition'
	PubReferenceTargetName?
	'kind:' kind=PubAdmonitionKind
	('title:' title=DRichText)?
	'{'
	contents+=PubContentBlock*
	'}';

enum PubAdmonitionKind returns AdmonitionKind:
	Note='note' | Tip='tip' | Caution='caution' | Important='important';

PubList returns List:
	{List}
	'List'
	('(' ('#')? name=ID ')')?
	('style:' style=PubListStyle)?
	('numbering:' numberingStyle=PubSequenceNumberStyle)? // TODO VALIDATION: mandatory for 'sequence'
	'{'	
	items+=PubListItem*
	'}';

enum PubListStyle returns ListStyle:
	Bullet='bullet' | Sequence='sequence' | Title='title';

enum PubSequenceNumberStyle returns proto::ProtoSequenceNumberStyle: 
Arabic='arabic' | CapitalLetter='capitalLetter' | SmallLetter='smallLetter' | CapitalRoman='capitalRoman' | SmallRoman='smallRoman' | None='none';

PubListItem returns ListItem:
	{ListItem}
	(	'Item'
		PubReferenceTargetName?
		('title:' title=DRichText)?
		(	'{'	contents+=PubContentBlock* '}'
		|	( -> contents+=PubContentBlock)*
		)
	|	'-' PubReferenceTargetName? contents+=PubParagraphTextOnly
	)
	;

fragment PubTitledBlockHeader returns TitledBlock:
	PubReferenceTargetName?
	title=DRichText;

PubTable returns TitledTable:
	'Table'
	PubTitledBlockHeader
	'{'
	table=AbstractTable
	'}';
	
AbstractTable:
	Table | ProvidedTable;
	
Table:
	'columns:' columns=NATURAL
	('widthPercent:' widthPercent=NATURAL)?
	('gridlines:' gridlines=GridLines)?
	rows+=PubTableRow*;
	
enum GridLines:
	HORIZONTAL='horizontal' | VERTICAL='vertical' | BOTH='all' | NONE='none'; 

PubTableRow returns TableRow:
	{TableRow}
	(	(	'Row'
			('heading:' isHeading?='true' | 'false')?
		|	isHeading?='Header' 'Row'
		)
		(	'{' cells+=PubTableCell*		'}'
		|	cells+=PubTableCell*
		)
	|	(	isHeading?='|||' | 	'||')
		cells+=PubTableSimpleCell*
	);

PubTableCell returns TableCell:
	{TableCell}
	'Cell'
	('width:' width=NATURAL)?
	('height:' height=NATURAL)?
	(	'{'	contents+=PubContentBlock* '}'
	|	(	->contents+=PubContentBlock)*
	);

PubTableSimpleCell returns TableCell:
	{TableCell}
	contents+=PubParagraphTextOnly '|';

ProvidedTable:
	('widthPercent:' widthPercent=NATURAL)?
	('gridlines:' gridlines=GridLines)?
	'root:' diagramRoot=[IDiagramRoot|DQualifiedName]
	'type:' tableType=[ProvidedTableType|DQualifiedName];

PubFigure returns TitledFigure:
	'Figure'
	PubTitledBlockHeader
	'{'
	figure=AbstractFigure
	'}';

AbstractFigure:
	IncludedFigure | ProvidedFigure; 
	
IncludedFigure:
	('widthPercent:' widthPercent=NATURAL)?
	'uri:' fileUri=STRING; // TODO Validation

ProvidedFigure:
	('widthPercent:' widthPercent=NATURAL)?
	'root:' diagramRoot=[IDiagramRoot|DQualifiedName]
	'type:' diagramType=[ProvidedDiagramType|DQualifiedName];

PubEquation returns Equation:
	'Equation'
	PubTitledBlockHeader
	'{'
	'uri:' fileUri=STRING // TODO Validation
	'}'; 

PubCodeListing returns TitledCodeListing:
	{TitledCodeListing} 
	'CodeListing'
	PubReferenceTargetName?
	(title=DRichText | 'title:' 'false')
	'{'
	('numbered:' ( numbered?='true' | 'false'))?
	(	codeLines+=STRING*
	|	'include:' include=[ecore::EObject|DQualifiedName]  // TODO: DQualifiedName is likely the cause of the ANTLR warning: Decision can match input such as "'.' RULE_ID" using multiple alternatives
	)
	'}';
	
PubRichTextParagraph returns RichTextParagraph:
	('Paragraph' | 'P') 
	(style=PubParagraphStyle)?
	text=DRichText;
	
PubParagraphTextOnly returns RichTextParagraph:
	text=DRichText;
	
PubFootnote returns Footnote:
	'Footnote'
	name=ID
	text=DRichText;
	
enum PubParagraphStyle returns ParagraphStyle: 
	Plain='plain' | Quote='quote';

@Override
DmxPrimaryExpression returns DExpression:
	DmxLiteralExpression |
	DmxParenthesizedExpression |
	DmxListExpression |
	DmxFunctionCall |
	DmxIfExpression |
	DmxStaticReference |
	DmxContextReference |
	PubReference |
	DmxUrlLiteral;

PubReference returns Reference:
	'#'
	(scope=PubReferenceScope)? 
	target=[ReferenceTarget|DQualifiedName]; 

enum PubReferenceScope returns ReferenceScope:
	DocumentSegment='seg'|
	Division='div' |  
	Part='part' | 
	Appendix='appendix' |
	Chapter='chapter' | 
	Section='section' | 
	Subsection='sub' | 
	Subsubsection='subsub' |
	Footnote='footnote' |
	ListItem='item' | 
	Table='table' | 
	Figure='figure' | 
	Equation='equation' | 
	CodeListing='code' | 
	Admonition='admonition'| 
	Abbreviation='abbrev'| 
	Glossary='glossary' |
	Bibliography='bilio';

