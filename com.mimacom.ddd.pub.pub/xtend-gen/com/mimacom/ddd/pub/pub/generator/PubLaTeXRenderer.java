/**
 * generated by Xtext 2.19.0
 */
package com.mimacom.ddd.pub.pub.generator;

import com.google.inject.Inject;
import com.mimacom.ddd.dm.base.DExpression;
import com.mimacom.ddd.dm.base.DNamedElement;
import com.mimacom.ddd.dm.base.DRichText;
import com.mimacom.ddd.dm.base.richText.AbstractRichTextRenderer;
import com.mimacom.ddd.dm.base.richText.AbstractRichTextToLaTeXRenderer;
import com.mimacom.ddd.dm.dmx.DmxContextReference;
import com.mimacom.ddd.dm.dmx.DmxStaticReference;
import com.mimacom.ddd.dm.dmx.RichTextUtil;
import com.mimacom.ddd.dm.styledText.parser.ErrorMessageAcceptor;
import com.mimacom.ddd.pub.proto.ProtoSequenceNumberStyle;
import com.mimacom.ddd.pub.proto.ProtoSymbolReference;
import com.mimacom.ddd.pub.proto.PublicationClass;
import com.mimacom.ddd.pub.pub.AbstractFigure;
import com.mimacom.ddd.pub.pub.Admonition;
import com.mimacom.ddd.pub.pub.ContentBlock;
import com.mimacom.ddd.pub.pub.Division;
import com.mimacom.ddd.pub.pub.Document;
import com.mimacom.ddd.pub.pub.DocumentSegment;
import com.mimacom.ddd.pub.pub.Equation;
import com.mimacom.ddd.pub.pub.Index;
import com.mimacom.ddd.pub.pub.List;
import com.mimacom.ddd.pub.pub.ListItem;
import com.mimacom.ddd.pub.pub.PubUtil;
import com.mimacom.ddd.pub.pub.PublicationBody;
import com.mimacom.ddd.pub.pub.Reference;
import com.mimacom.ddd.pub.pub.ReferenceTarget;
import com.mimacom.ddd.pub.pub.RichTextParagraph;
import com.mimacom.ddd.pub.pub.RichTextReferencingParagraph;
import com.mimacom.ddd.pub.pub.SegmentWithTable;
import com.mimacom.ddd.pub.pub.SegmentWithText;
import com.mimacom.ddd.pub.pub.Symbol;
import com.mimacom.ddd.pub.pub.Table;
import com.mimacom.ddd.pub.pub.TableCell;
import com.mimacom.ddd.pub.pub.TitledBlock;
import com.mimacom.ddd.pub.pub.TitledCodeListing;
import com.mimacom.ddd.pub.pub.TitledFigure;
import com.mimacom.ddd.pub.pub.UnformattedParagraph;
import com.mimacom.ddd.pub.pub.generator.AbstractPubRenderer;
import com.mimacom.ddd.pub.pub.generator.NestedContentBlockGenerator;
import com.mimacom.ddd.pub.pub.generator.NestedElementsRenderer;
import com.mimacom.ddd.pub.pub.generator.PubGeneratorUtil;
import com.mimacom.ddd.pub.pub.generator.PubLaTeXTableGenerator;
import com.mimacom.ddd.pub.pub.generator.PubNumberingUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.EcoreUtil2;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.xbase.lib.Conversions;
import org.eclipse.xtext.xbase.lib.Extension;

@SuppressWarnings("all")
public class PubLaTeXRenderer extends AbstractPubRenderer {
  @Inject
  @Extension
  private RichTextUtil _richTextUtil;
  
  @Inject
  @Extension
  private PubUtil _pubUtil;
  
  @Inject
  @Extension
  private PubNumberingUtil _pubNumberingUtil;
  
  @Inject
  @Extension
  private PubGeneratorUtil _pubGeneratorUtil;
  
  public static final String DOCUMENT_SUFFIX = "tex";
  
  public static final String CSS_FILENAME = "pubstyles.css";
  
  @Override
  public String fileSuffix(final Document doc) {
    return PubLaTeXRenderer.DOCUMENT_SUFFIX;
  }
  
  @Override
  public void prepare(final Document doc, final IFileSystemAccess2 fsa) {
  }
  
  @Override
  public void finish(final Document doc, final IFileSystemAccess2 fsa) {
  }
  
  @Override
  public CharSequence renderDocument(final Document doc, final NestedElementsRenderer p) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("% Produced by ");
    String _name = this.getClass().getName();
    _builder.append(_name);
    _builder.newLineIfNotEmpty();
    _builder.append("\\documentclass{");
    String _lowerCase = doc.getPublicationClass().getName().toLowerCase();
    _builder.append(_lowerCase);
    _builder.append("}");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("\\usepackage{ulem} % strikethrough");
    _builder.newLine();
    _builder.append("\\usepackage{etoolbox} % quotes");
    _builder.newLine();
    _builder.append("\\usepackage{enumitem} % list numbering");
    _builder.newLine();
    _builder.append("\\usepackage{multirow} % tables with column span and or rowspan");
    _builder.newLine();
    _builder.newLine();
    CharSequence _renderPreamble = this.renderPreamble(doc);
    _builder.append(_renderPreamble);
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("\\begin{document}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("\\maketitle");
    _builder.newLine();
    _builder.append("\t");
    CharSequence _render = p.render();
    _builder.append(_render, "\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\\end{document}");
    _builder.newLine();
    return _builder;
  }
  
  protected CharSequence renderPreamble(final Document doc) {
    PublicationClass _publicationClass = doc.getPublicationClass();
    DRichText _preamble = null;
    if (_publicationClass!=null) {
      _preamble=_publicationClass.getPreamble();
    }
    final DRichText preamble = _preamble;
    if ((preamble != null)) {
      final AbstractRichTextToLaTeXRenderer renderer = new AbstractRichTextToLaTeXRenderer() {
        @Override
        protected String getSourceText(final DExpression expr) {
          return PubLaTeXRenderer.this._richTextUtil.getSourceTextFromXtextResource(expr);
        }
        
        @Override
        protected CharSequence renderStyleExpression(final DExpression expr, final String parsedText) {
          if ((expr instanceof ProtoSymbolReference)) {
            final Symbol docSymbol = doc.getSymbol(((ProtoSymbolReference)expr).getTarget().getName());
            if ((docSymbol != null)) {
              return PubLaTeXRenderer.this.renderRichText(docSymbol.getValue());
            }
            String _name = ((ProtoSymbolReference)expr).getTarget().getName();
            String _plus = ("No value for symbol \'" + _name);
            String _plus_1 = (_plus + "\'");
            throw new NullPointerException(_plus_1);
          }
          return super.renderStyleExpression(expr, parsedText);
        }
      };
      return renderer.render(preamble);
    }
    return "";
  }
  
  @Override
  public CharSequence renderSegment(final SegmentWithText seg, final NestedElementsRenderer blocks) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<div>");
    _builder.newLine();
    CharSequence _renderTitle = this.renderTitle(seg);
    _builder.append(_renderTitle);
    _builder.newLineIfNotEmpty();
    CharSequence _render = blocks.render();
    _builder.append(_render);
    _builder.newLineIfNotEmpty();
    _builder.append("</div>");
    _builder.newLine();
    return _builder;
  }
  
  @Override
  public CharSequence renderSegment(final PublicationBody seg, final NestedElementsRenderer divisions) {
    StringConcatenation _builder = new StringConcatenation();
    CharSequence _render = divisions.render();
    _builder.append(_render);
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  @Override
  public CharSequence renderSegment(final SegmentWithTable seg, final Table t, final NestedContentBlockGenerator g) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<div>");
    _builder.newLine();
    CharSequence _renderTitle = this.renderTitle(seg);
    _builder.append(_renderTitle);
    _builder.newLineIfNotEmpty();
    CharSequence _renderTable = this.renderTable(t, g);
    _builder.append(_renderTable);
    _builder.newLineIfNotEmpty();
    _builder.append("</div>");
    _builder.newLine();
    return _builder;
  }
  
  @Override
  public CharSequence renderSegment(final Index seg) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<div>");
    _builder.newLine();
    CharSequence _renderTitle = this.renderTitle(seg);
    _builder.append(_renderTitle);
    _builder.newLineIfNotEmpty();
    _builder.append("-- index");
    _builder.newLine();
    _builder.append("</div>");
    _builder.newLine();
    return _builder;
  }
  
  @Override
  public CharSequence renderTitle(final DocumentSegment seg) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<h2>");
    CharSequence _renderAnchor = this.renderAnchor(seg);
    _builder.append(_renderAnchor);
    String _nonEmptyTitle = this._pubGeneratorUtil.nonEmptyTitle(seg);
    _builder.append(_nonEmptyTitle);
    _builder.append("</h2>");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  @Override
  public CharSequence renderTitle(final Division div) {
    StringConcatenation _builder = new StringConcatenation();
    CharSequence _divisionName = this.divisionName(div);
    _builder.append(_divisionName);
    _builder.append("{");
    CharSequence _renderRichText = this.renderRichText(div.getTitle());
    _builder.append(_renderRichText);
    _builder.append("}Â % ");
    int _level = div.getLevel();
    int _plus = (_level + 2);
    _builder.append(_plus);
    _builder.append(">");
    CharSequence _renderAnchor = this.renderAnchor(div);
    _builder.append(_renderAnchor);
    String _tieredNumber = this._pubNumberingUtil.tieredNumber(div);
    _builder.append(_tieredNumber);
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  protected CharSequence divisionName(final Division div) {
    return div.eClass().getName().toLowerCase();
  }
  
  @Override
  public CharSequence renderAnchor(final ReferenceTarget target) {
    final String id = target.getId();
    if (((id != null) && (!target.getId().isEmpty()))) {
      return (("<a id=\"" + id) + "\"></a>");
    }
    return "";
  }
  
  @Override
  public CharSequence renderReferenceTo(final ReferenceTarget target, final String linkText) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<a href=\"#");
    String _id = target.getId();
    _builder.append(_id);
    _builder.append("\">");
    _builder.append(linkText);
    _builder.append("</a>");
    return _builder;
  }
  
  @Override
  public CharSequence renderAdmonition(final Admonition a) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("-- admonition");
    _builder.newLine();
    return _builder;
  }
  
  @Override
  public CharSequence renderBulletList(final List list, final NestedElementsRenderer p) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("\\begin{itemize} % ");
    CharSequence _renderAnchor = this.renderAnchor(list);
    _builder.append(_renderAnchor);
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    CharSequence _render = p.render();
    _builder.append(_render, "\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\\end{itemize} ");
    _builder.newLine();
    return _builder;
  }
  
  @Override
  public CharSequence renderNumberedList(final List list, final NestedElementsRenderer p) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("\\begin{enumerate}[label=\\");
    String _latexNumberingAttribute = this.latexNumberingAttribute(list.getNumberingStyle());
    _builder.append(_latexNumberingAttribute);
    _builder.append("\"*]  % ");
    CharSequence _renderAnchor = this.renderAnchor(list);
    _builder.append(_renderAnchor);
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    CharSequence _render = p.render();
    _builder.append(_render, "\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\\end{enumerate}");
    _builder.newLine();
    return _builder;
  }
  
  protected String latexNumberingAttribute(final ProtoSequenceNumberStyle style) {
    String _switchResult = null;
    if (style != null) {
      switch (style) {
        case ARABIC:
          _switchResult = "arabic";
          break;
        case CAPITAL_ROMAN:
          _switchResult = "Roman";
          break;
        case SMALL_ROMAN:
          _switchResult = "roman";
          break;
        case CAPITAL_LETTER:
          _switchResult = "Alph";
          break;
        case SMALL_LETTER:
          _switchResult = "alph";
          break;
        case NONE:
          _switchResult = "arabic";
          break;
        default:
          break;
      }
    }
    return _switchResult;
  }
  
  @Override
  public CharSequence renderTitledList(final List list, final NestedElementsRenderer p) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("\\begin{description}\t% ");
    CharSequence _renderAnchor = this.renderAnchor(list);
    _builder.append(_renderAnchor);
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    CharSequence _render = p.render();
    _builder.append(_render, "\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\\end{description}");
    _builder.newLine();
    return _builder;
  }
  
  @Override
  public CharSequence renderListItem(final ListItem item, final NestedElementsRenderer p) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("\\item ");
    CharSequence _render = p.render();
    _builder.append(_render);
    _builder.append(" % ");
    CharSequence _renderAnchor = this.renderAnchor(item);
    _builder.append(_renderAnchor);
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  @Override
  public CharSequence renderTitledListItem(final ListItem item, final NestedElementsRenderer p) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("\\item[");
    CharSequence _renderRichText = this.renderRichText(item.getTitle());
    _builder.append(_renderRichText);
    _builder.append("] ");
    CharSequence _render = p.render();
    _builder.append(_render);
    _builder.append(" % ");
    CharSequence _renderAnchor = this.renderAnchor(item);
    _builder.append(_renderAnchor);
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  @Override
  public CharSequence renderTitledBlock(final TitledBlock b, final NestedElementsRenderer p) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<div>");
    CharSequence _render = p.render();
    _builder.append(_render);
    _builder.append("</div>");
    return _builder;
  }
  
  @Override
  public CharSequence renderTitledBlockTitle(final TitledBlock b) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<h5>");
    CharSequence _renderAnchor = this.renderAnchor(b);
    _builder.append(_renderAnchor);
    String _labelAndNumber = this._pubNumberingUtil.labelAndNumber(b);
    _builder.append(_labelAndNumber);
    _builder.append(" ");
    CharSequence _renderRichText = this.renderRichText(b.getTitle());
    _builder.append(_renderRichText);
    _builder.append("</h5>");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  @Override
  public CharSequence renderTable(final Table t, final NestedContentBlockGenerator g) {
    CharSequence _xblockexpression = null;
    {
      final PubLaTeXTableGenerator gen = new PubLaTeXTableGenerator(t, g);
      _xblockexpression = gen.render();
    }
    return _xblockexpression;
  }
  
  @Override
  public CharSequence renderFigure(final AbstractFigure f, final String fileUri) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<img src=\"");
    _builder.append(fileUri);
    _builder.append("\" alt=\"");
    EObject _eContainer = f.eContainer();
    CharSequence _renderRichText = this.renderRichText(((TitledFigure) _eContainer).getTitle());
    _builder.append(_renderRichText);
    _builder.append("\">");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  @Override
  public CharSequence renderEquation(final Equation e) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("-- equation (TODO)");
    _builder.newLine();
    return _builder;
  }
  
  @Override
  public CharSequence renderCodeListing(final TitledCodeListing cl, final java.util.List<String> codeLines) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("\\\\begin{verbatim}");
    _builder.newLine();
    {
      for(final String line : codeLines) {
        _builder.append(line);
      }
    }
    _builder.newLineIfNotEmpty();
    _builder.append("\\\\end{verbatim}");
    _builder.newLine();
    return _builder;
  }
  
  @Override
  public CharSequence renderPlainParagraph(final RichTextParagraph para) {
    return this.renderRichText(para.getText());
  }
  
  protected boolean isOnlyContentBlockOfTableCell(final ContentBlock para) {
    return ((para.eContainer() instanceof TableCell) && (((Object[])Conversions.unwrapArray(((TableCell) para.eContainer()).getContents(), Object.class)).length == 1));
  }
  
  @Override
  public CharSequence renderQuotedParagraph(final RichTextParagraph para) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("\\quote{");
    CharSequence _renderRichText = this.renderRichText(para.getText());
    _builder.append(_renderRichText);
    _builder.append("}");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  @Override
  public CharSequence renderUnformattedParagraph(final UnformattedParagraph para) {
    return para.getText();
  }
  
  @Override
  public CharSequence renderRichTextReferencingParagraph(final RichTextReferencingParagraph para) {
    return this.renderRichText(para.getText());
  }
  
  @Override
  public AbstractRichTextRenderer createRichTextRenderer(final ErrorMessageAcceptor acceptor) {
    return new AbstractRichTextToLaTeXRenderer() {
      @Override
      protected String getSourceText(final DExpression expr) {
        return PubLaTeXRenderer.this._richTextUtil.getSourceTextFromXtextResource(expr);
      }
      
      @Override
      protected CharSequence renderStyleExpression(final DExpression expr, final String parsedText) {
        CharSequence _switchResult = null;
        boolean _matched = false;
        if (expr instanceof DmxContextReference) {
          _matched=true;
          CharSequence _xifexpression = null;
          DNamedElement _target = ((DmxContextReference)expr).getTarget();
          if ((_target instanceof Symbol)) {
            DNamedElement _target_1 = ((DmxContextReference)expr).getTarget();
            _xifexpression = PubLaTeXRenderer.this.renderRichText(((Symbol) _target_1).getValue());
          } else {
            _xifexpression = super.renderStyleExpression(expr, ((DmxContextReference)expr).getTarget().getName());
          }
          _switchResult = _xifexpression;
        }
        if (!_matched) {
          if (expr instanceof DmxStaticReference) {
            _matched=true;
            _switchResult = super.renderStyleExpression(expr, PubLaTeXRenderer.this.staticReferenceLinkText(((DmxStaticReference)expr)));
          }
        }
        if (!_matched) {
          if (expr instanceof Reference) {
            _matched=true;
            String _htmlReferenceLinkTargetId = PubLaTeXRenderer.this.htmlReferenceLinkTargetId(((Reference)expr));
            String _plus = ("<a href=\"" + _htmlReferenceLinkTargetId);
            String _plus_1 = (_plus + "\">");
            String _referenceDisplayText = PubLaTeXRenderer.this._pubGeneratorUtil.referenceDisplayText(((Reference)expr).getTarget());
            String _plus_2 = (_plus_1 + _referenceDisplayText);
            _switchResult = (_plus_2 + 
              "</a>");
          }
        }
        if (!_matched) {
          _switchResult = super.renderStyleExpression(expr, parsedText);
        }
        return _switchResult;
      }
    };
  }
  
  protected String staticReferenceLinkText(final DmxStaticReference ref) {
    boolean _isEmpty = this._pubUtil.guard(ref.getDisplayName(), "").isEmpty();
    boolean _not = (!_isEmpty);
    if (_not) {
      boolean _isPlural = ref.isPlural();
      if (_isPlural) {
        String _displayName = ref.getDisplayName();
        return (_displayName + "s");
      }
      return ref.getDisplayName();
    }
    String _name = ref.getTarget().getName();
    String _plus = (_name + ".");
    String _name_1 = ref.getMember().getName();
    return (_plus + _name_1);
  }
  
  protected String htmlReferenceLinkTargetId(final Reference ref) {
    String _id = ref.getTarget().getId();
    String result = ("#" + _id);
    final Document refContainer = EcoreUtil2.<Document>getContainerOfType(ref, Document.class);
    final Document targetContainer = EcoreUtil2.<Document>getContainerOfType(ref.getTarget(), Document.class);
    if (((refContainer != null) && (targetContainer != refContainer))) {
      String _fileName = this.fileName(targetContainer);
      return (_fileName + result);
    }
    return result;
  }
}
