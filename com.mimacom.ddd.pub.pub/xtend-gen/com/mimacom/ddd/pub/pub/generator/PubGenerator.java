/**
 * generated by Xtext 2.19.0
 */
package com.mimacom.ddd.pub.pub.generator;

import com.google.common.base.Objects;
<<<<<<< HEAD
import com.google.common.collect.Lists;
import com.google.inject.Inject;
import com.mimacom.ddd.dm.base.DRichText;
import com.mimacom.ddd.pub.pub.Admonition;
import com.mimacom.ddd.pub.pub.ChangeHistory;
import com.mimacom.ddd.pub.pub.CodeListing;
import com.mimacom.ddd.pub.pub.Component;
import com.mimacom.ddd.pub.pub.ContentBlock;
import com.mimacom.ddd.pub.pub.Division;
import com.mimacom.ddd.pub.pub.Document;
import com.mimacom.ddd.pub.pub.DocumentSegment;
import com.mimacom.ddd.pub.pub.Equation;
import com.mimacom.ddd.pub.pub.Figure;
import com.mimacom.ddd.pub.pub.Index;
import com.mimacom.ddd.pub.pub.ListItem;
import com.mimacom.ddd.pub.pub.ListOfFigures;
import com.mimacom.ddd.pub.pub.ListOfTables;
import com.mimacom.ddd.pub.pub.ListStyle;
import com.mimacom.ddd.pub.pub.Paragraph;
import com.mimacom.ddd.pub.pub.ParagraphStyle;
import com.mimacom.ddd.pub.pub.PubModel;
import com.mimacom.ddd.pub.pub.Publication;
import com.mimacom.ddd.pub.pub.PublicationBody;
import com.mimacom.ddd.pub.pub.SegmentWithText;
import com.mimacom.ddd.pub.pub.TOC;
import com.mimacom.ddd.pub.pub.Table;
import com.mimacom.ddd.pub.pub.TitledBlock;
import com.mimacom.ddd.pub.pub.UnformattedParagraph;
import com.mimacom.ddd.pub.pub.generator.NestedContentBlockGenerator;
import com.mimacom.ddd.pub.pub.generator.NestedElementsRenderer;
import com.mimacom.ddd.pub.pub.generator.PubGeneratorUtil;
import com.mimacom.ddd.pub.pub.generator.PubHtmlRenderer;
import com.mimacom.ddd.pub.pub.generator.PubNumberingUtil;
import java.util.Arrays;
import java.util.List;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.serializer.ISerializer;
import org.eclipse.xtext.xbase.lib.Exceptions;
import org.eclipse.xtext.xbase.lib.Extension;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class PubGenerator extends AbstractGenerator {
  @Inject
  @Extension
  private PubHtmlRenderer _pubHtmlRenderer;
  
  @Inject
  @Extension
  private PubNumberingUtil _pubNumberingUtil;
  
  @Inject
  @Extension
  private PubGeneratorUtil _pubGeneratorUtil;
  
  @Inject
  private ISerializer serializer;
  
  private List<Division> allDivisionsInSequenceOfOccurrenceCache;
  
  private List<Table> allTablesInSequenceOfOccurrenceCache;
  
  private List<Figure> allFiguresInSequenceOfOccurrenceCache;
  
  private final NestedContentBlockGenerator nestedContentBlockGenerator = new NestedContentBlockGenerator() {
    @Override
    public CharSequence generate(final ContentBlock b) {
      return PubGenerator.this.genBlock(b);
    }
  };
  
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    EObject _get = resource.getContents().get(0);
    final PubModel model = ((PubModel) _get);
    Document _document = model.getDocument();
    boolean _tripleNotEquals = (_document != null);
    if (_tripleNotEquals) {
      this._pubHtmlRenderer.prepare(model.getDocument(), fsa);
      final CharSequence text = this.genDocument(model.getDocument(), fsa);
      fsa.generateFile(this._pubHtmlRenderer.fileName(model.getDocument()), text);
      this._pubHtmlRenderer.finish(model.getDocument(), fsa);
    }
  }
  
  protected CharSequence _genDocument(final Publication pub, final IFileSystemAccess2 fsa) {
    return null;
  }
  
  protected CharSequence _genDocument(final Component comp, final IFileSystemAccess2 fsa) {
    CharSequence _xblockexpression = null;
    {
      this.initialiseNumberingCaches(comp);
      StringConcatenation _builder = new StringConcatenation();
      {
        EList<DocumentSegment> _segments = comp.getSegments();
        for(final DocumentSegment seg : _segments) {
          CharSequence _genSegment = this.genSegment(seg);
          _builder.append(_genSegment);
          _builder.newLineIfNotEmpty();
          _builder.append("\t\t");
        }
      }
      final String segmentIterator = _builder.toString();
      final NestedElementsRenderer _function = () -> {
        return segmentIterator;
      };
      _xblockexpression = this._pubHtmlRenderer.renderDocument(comp, _function);
    }
    return _xblockexpression;
  }
  
  public void initialiseNumberingCaches(final Component compo) {
    this.allDivisionsInSequenceOfOccurrenceCache = this._pubNumberingUtil.gatherAllDivisionsAndSetSequenceNumbers(compo);
    this.allTablesInSequenceOfOccurrenceCache = this._pubNumberingUtil.gatherAllTablesInSequenceAndSetSequenceNumbers(compo);
    this.allFiguresInSequenceOfOccurrenceCache = this._pubNumberingUtil.gatherAllFiguresInSequenceAndSetSequenceNumbers(compo);
  }
  
  protected CharSequence _genSegment(final SegmentWithText seg) {
    CharSequence _xblockexpression = null;
    {
      StringConcatenation _builder = new StringConcatenation();
      {
        EList<ContentBlock> _contents = seg.getContents();
        for(final ContentBlock block : _contents) {
          CharSequence _genBlock = this.genBlock(block);
          _builder.append(_genBlock);
          _builder.newLineIfNotEmpty();
        }
      }
      final String blockIterator = _builder.toString();
      final NestedElementsRenderer _function = () -> {
        return blockIterator;
      };
      _xblockexpression = this._pubHtmlRenderer.renderSegment(seg, _function);
    }
    return _xblockexpression;
  }
  
  protected CharSequence _genSegment(final PublicationBody seg) {
    CharSequence _xblockexpression = null;
    {
      StringConcatenation _builder = new StringConcatenation();
      {
        EList<Division> _divisions = seg.getDivisions();
        for(final Division div : _divisions) {
          _builder.newLine();
          _builder.append("\t");
          CharSequence _genDivision = this.genDivision(div);
          _builder.append(_genDivision, "\t");
          _builder.newLineIfNotEmpty();
        }
      }
      final String divisionIterator = _builder.toString();
      final NestedElementsRenderer _function = () -> {
        return divisionIterator;
      };
      _xblockexpression = this._pubHtmlRenderer.renderSegment(seg, _function);
    }
    return _xblockexpression;
  }
  
  protected CharSequence _genSegment(final TOC seg) {
    CharSequence _xblockexpression = null;
    {
      final Table t = this._pubGeneratorUtil.toTable(seg, this.allDivisionsInSequenceOfOccurrenceCache);
      _xblockexpression = this._pubHtmlRenderer.renderSegment(seg, t, this.nestedContentBlockGenerator);
    }
    return _xblockexpression;
  }
  
  protected CharSequence _genSegment(final ListOfTables seg) {
    CharSequence _xblockexpression = null;
    {
      final Table t = this._pubGeneratorUtil.toTable(seg, this.allTablesInSequenceOfOccurrenceCache);
      _xblockexpression = this._pubHtmlRenderer.renderSegment(seg, t, this.nestedContentBlockGenerator);
    }
    return _xblockexpression;
  }
  
  protected CharSequence _genSegment(final ListOfFigures seg) {
    CharSequence _xblockexpression = null;
    {
      final Table t = this._pubGeneratorUtil.toTable(seg, this.allFiguresInSequenceOfOccurrenceCache);
      _xblockexpression = this._pubHtmlRenderer.renderSegment(seg, t, this.nestedContentBlockGenerator);
    }
    return _xblockexpression;
  }
  
  protected CharSequence _genSegment(final ChangeHistory seg) {
    CharSequence _xblockexpression = null;
    {
      final Table t = this._pubGeneratorUtil.toTable(seg);
      _xblockexpression = this._pubHtmlRenderer.renderSegment(seg, t, this.nestedContentBlockGenerator);
    }
    return _xblockexpression;
  }
  
  protected CharSequence _genSegment(final Index seg) {
    return this._pubHtmlRenderer.renderSegment(seg);
  }
  
  protected CharSequence _genSegment(final DocumentSegment seg) {
    String _name = seg.getClass().getName();
    String _plus = ("Unsupported segment type: " + _name);
    throw new IllegalArgumentException(_plus);
  }
  
  public CharSequence genDivision(final Division div) {
    CharSequence _xblockexpression = null;
    {
      Division divTitle = div;
      Division divContents = div;
      Division _include = div.getInclude();
      boolean _tripleNotEquals = (_include != null);
      if (_tripleNotEquals) {
        divContents = div.getInclude();
        DRichText _title = div.getTitle();
        boolean _tripleEquals = (_title == null);
        if (_tripleEquals) {
          divTitle = div.getInclude();
        }
      }
      StringConcatenation _builder = new StringConcatenation();
      CharSequence _renderTitle = this._pubHtmlRenderer.renderTitle(divTitle);
      _builder.append(_renderTitle);
      _builder.newLineIfNotEmpty();
      {
        EList<ContentBlock> _contents = divContents.getContents();
        for(final ContentBlock block : _contents) {
          CharSequence _genBlock = this.genBlock(block);
          _builder.append(_genBlock);
          _builder.newLineIfNotEmpty();
        }
      }
      {
        EList<Division> _divisions = divContents.getDivisions();
        for(final Division subdiv : _divisions) {
          _builder.newLine();
          _builder.append("\t");
          CharSequence _genDivision = this.genDivision(subdiv);
          _builder.append(_genDivision, "\t");
          _builder.newLineIfNotEmpty();
        }
      }
      _xblockexpression = _builder;
    }
    return _xblockexpression;
  }
  
  protected CharSequence _genBlock(final Admonition a) {
    return this._pubHtmlRenderer.renderAdmonition(a);
  }
  
  protected CharSequence _genBlock(final com.mimacom.ddd.pub.pub.List list) {
    CharSequence _xblockexpression = null;
    {
      StringConcatenation _builder = new StringConcatenation();
      {
        EList<ListItem> _items = list.getItems();
        for(final ListItem item : _items) {
          CharSequence _genListItem = this.genListItem(item);
          _builder.append(_genListItem);
          _builder.newLineIfNotEmpty();
        }
      }
      final String itemIterator = _builder.toString();
      CharSequence _switchResult = null;
      ListStyle _style = list.getStyle();
      if (_style != null) {
        switch (_style) {
          case BULLET:
            final NestedElementsRenderer _function = () -> {
              return itemIterator;
            };
            _switchResult = this._pubHtmlRenderer.renderBulletList(list, _function);
            break;
          case SEQUENCE:
            final NestedElementsRenderer _function_1 = () -> {
              return itemIterator;
            };
            _switchResult = this._pubHtmlRenderer.renderNumberedList(list, _function_1);
            break;
          case TITLE:
            final NestedElementsRenderer _function_2 = () -> {
              return itemIterator;
            };
            _switchResult = this._pubHtmlRenderer.renderTitledList(list, _function_2);
            break;
          default:
            break;
        }
      }
      _xblockexpression = _switchResult;
    }
    return _xblockexpression;
  }
  
  public CharSequence genListItem(final ListItem item) {
    CharSequence _xblockexpression = null;
    {
      StringConcatenation _builder = new StringConcatenation();
      {
        EList<ContentBlock> _contents = item.getContents();
        for(final ContentBlock block : _contents) {
          CharSequence _genBlock = this.genBlock(block);
          _builder.append(_genBlock);
          _builder.newLineIfNotEmpty();
          _builder.append("\t\t");
        }
      }
      final String blockIterator = _builder.toString();
      CharSequence _switchResult = null;
      ListStyle _style = item.getList().getStyle();
      if (_style != null) {
        switch (_style) {
          case BULLET:
          case SEQUENCE:
            final NestedElementsRenderer _function = () -> {
              return blockIterator;
            };
            _switchResult = this._pubHtmlRenderer.renderListItem(item, _function);
            break;
          case TITLE:
            final NestedElementsRenderer _function_1 = () -> {
              return blockIterator;
            };
            _switchResult = this._pubHtmlRenderer.renderTitledListItem(item, _function_1);
            break;
          default:
            break;
        }
      }
      _xblockexpression = _switchResult;
    }
    return _xblockexpression;
  }
  
  protected CharSequence _genBlock(final TitledBlock b) {
    CharSequence _xblockexpression = null;
    {
      StringConcatenation _builder = new StringConcatenation();
      CharSequence _genTitledBlock = this.genTitledBlock(b);
      _builder.append(_genTitledBlock);
      _builder.newLineIfNotEmpty();
      CharSequence _renderTitledBlockTitle = this._pubHtmlRenderer.renderTitledBlockTitle(b);
      _builder.append(_renderTitledBlockTitle);
      _builder.newLineIfNotEmpty();
      final String blockBodyDispatcher = _builder.toString();
      final NestedElementsRenderer _function = () -> {
        return blockBodyDispatcher;
      };
      _xblockexpression = this._pubHtmlRenderer.renderTitledBlock(b, _function);
    }
    return _xblockexpression;
  }
  
  protected CharSequence _genTitledBlock(final Table t) {
    return this._pubHtmlRenderer.renderTable(t, this.nestedContentBlockGenerator);
  }
  
  protected CharSequence _genTitledBlock(final Figure f) {
    return this._pubHtmlRenderer.renderFigure(f);
  }
  
  protected CharSequence _genTitledBlock(final Equation e) {
    return this._pubHtmlRenderer.renderEquation(e);
  }
  
  protected CharSequence _genTitledBlock(final CodeListing cl) {
    CharSequence _xifexpression = null;
    EObject _include = cl.getInclude();
    boolean _tripleNotEquals = (_include != null);
    if (_tripleNotEquals) {
      CharSequence _xtrycatchfinallyexpression = null;
      try {
        CharSequence _xblockexpression = null;
        {
          String formattedCode = this.serializer.serialize(cl.getInclude());
          _xblockexpression = this._pubHtmlRenderer.renderCodeListing(cl, Lists.<String>newArrayList(formattedCode));
        }
        _xtrycatchfinallyexpression = _xblockexpression;
      } catch (final Throwable _t) {
        if (_t instanceof RuntimeException) {
          _xtrycatchfinallyexpression = null;
        } else {
          throw Exceptions.sneakyThrow(_t);
        }
      }
      _xifexpression = _xtrycatchfinallyexpression;
    } else {
      _xifexpression = this._pubHtmlRenderer.renderCodeListing(cl, cl.getCodeLines());
    }
    return _xifexpression;
=======
<<<<<<< HEAD
import com.google.common.collect.Lists;
import com.google.inject.Inject;
import com.mimacom.ddd.dm.base.DRichText;
import com.mimacom.ddd.pub.pub.Admonition;
import com.mimacom.ddd.pub.pub.ChangeHistory;
import com.mimacom.ddd.pub.pub.CodeListing;
import com.mimacom.ddd.pub.pub.Component;
import com.mimacom.ddd.pub.pub.ContentBlock;
import com.mimacom.ddd.pub.pub.Division;
import com.mimacom.ddd.pub.pub.Document;
import com.mimacom.ddd.pub.pub.DocumentSegment;
import com.mimacom.ddd.pub.pub.Equation;
import com.mimacom.ddd.pub.pub.Figure;
import com.mimacom.ddd.pub.pub.Index;
import com.mimacom.ddd.pub.pub.ListItem;
import com.mimacom.ddd.pub.pub.ListOfFigures;
import com.mimacom.ddd.pub.pub.ListOfTables;
import com.mimacom.ddd.pub.pub.ListStyle;
import com.mimacom.ddd.pub.pub.Paragraph;
import com.mimacom.ddd.pub.pub.ParagraphStyle;
import com.mimacom.ddd.pub.pub.PubModel;
import com.mimacom.ddd.pub.pub.Publication;
import com.mimacom.ddd.pub.pub.PublicationBody;
import com.mimacom.ddd.pub.pub.SegmentWithText;
import com.mimacom.ddd.pub.pub.TOC;
import com.mimacom.ddd.pub.pub.Table;
import com.mimacom.ddd.pub.pub.TitledBlock;
import com.mimacom.ddd.pub.pub.UnformattedParagraph;
import com.mimacom.ddd.pub.pub.generator.NestedContentBlockGenerator;
import com.mimacom.ddd.pub.pub.generator.NestedElementsRenderer;
import com.mimacom.ddd.pub.pub.generator.PubGeneratorUtil;
import com.mimacom.ddd.pub.pub.generator.PubHtmlRenderer;
import com.mimacom.ddd.pub.pub.generator.PubNumberingUtil;
import java.util.Arrays;
import java.util.List;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.serializer.ISerializer;
import org.eclipse.xtext.xbase.lib.Exceptions;
import org.eclipse.xtext.xbase.lib.Extension;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class PubGenerator extends AbstractGenerator {
  @Inject
  @Extension
  private PubHtmlRenderer _pubHtmlRenderer;
  
  @Inject
  @Extension
  private PubNumberingUtil _pubNumberingUtil;
  
  @Inject
  @Extension
  private PubGeneratorUtil _pubGeneratorUtil;
  
  @Inject
  private ISerializer serializer;
  
  private List<Division> allDivisionsInSequenceOfOccurrenceCache;
  
  private List<Table> allTablesInSequenceOfOccurrenceCache;
  
  private List<Figure> allFiguresInSequenceOfOccurrenceCache;
  
  private final NestedContentBlockGenerator nestedContentBlockGenerator = new NestedContentBlockGenerator() {
    @Override
    public CharSequence generate(final ContentBlock b) {
      return PubGenerator.this.genBlock(b);
    }
  };
  
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    EObject _get = resource.getContents().get(0);
    final PubModel model = ((PubModel) _get);
    Document _document = model.getDocument();
    boolean _tripleNotEquals = (_document != null);
    if (_tripleNotEquals) {
      this._pubHtmlRenderer.prepare(model.getDocument(), fsa);
      final CharSequence text = this.genDocument(model.getDocument(), fsa);
      fsa.generateFile(this._pubHtmlRenderer.fileName(model.getDocument()), text);
      this._pubHtmlRenderer.finish(model.getDocument(), fsa);
    }
  }
  
  protected CharSequence _genDocument(final Publication pub, final IFileSystemAccess2 fsa) {
    return null;
  }
  
  protected CharSequence _genDocument(final Component comp, final IFileSystemAccess2 fsa) {
    CharSequence _xblockexpression = null;
    {
      this.initialiseNumberingCaches(comp);
      StringConcatenation _builder = new StringConcatenation();
      {
        EList<DocumentSegment> _segments = comp.getSegments();
        for(final DocumentSegment seg : _segments) {
          CharSequence _genSegment = this.genSegment(seg);
          _builder.append(_genSegment);
          _builder.newLineIfNotEmpty();
          _builder.append("\t\t");
        }
      }
      final String segmentIterator = _builder.toString();
      final NestedElementsRenderer _function = () -> {
        return segmentIterator;
      };
      _xblockexpression = this._pubHtmlRenderer.renderDocument(comp, _function);
    }
    return _xblockexpression;
  }
  
  public void initialiseNumberingCaches(final Component compo) {
    this.allDivisionsInSequenceOfOccurrenceCache = this._pubNumberingUtil.gatherAllDivisionsAndSetSequenceNumbers(compo);
    this.allTablesInSequenceOfOccurrenceCache = this._pubNumberingUtil.gatherAllTablesInSequenceAndSetSequenceNumbers(compo);
    this.allFiguresInSequenceOfOccurrenceCache = this._pubNumberingUtil.gatherAllFiguresInSequenceAndSetSequenceNumbers(compo);
  }
  
  protected CharSequence _genSegment(final SegmentWithText seg) {
    CharSequence _xblockexpression = null;
    {
      StringConcatenation _builder = new StringConcatenation();
      {
        EList<ContentBlock> _contents = seg.getContents();
        for(final ContentBlock block : _contents) {
          CharSequence _genBlock = this.genBlock(block);
          _builder.append(_genBlock);
          _builder.newLineIfNotEmpty();
        }
      }
      final String blockIterator = _builder.toString();
      final NestedElementsRenderer _function = () -> {
        return blockIterator;
      };
      _xblockexpression = this._pubHtmlRenderer.renderSegment(seg, _function);
    }
    return _xblockexpression;
  }
  
  protected CharSequence _genSegment(final PublicationBody seg) {
    CharSequence _xblockexpression = null;
    {
      StringConcatenation _builder = new StringConcatenation();
      {
        EList<Division> _divisions = seg.getDivisions();
        for(final Division div : _divisions) {
          _builder.newLine();
          _builder.append("\t");
          CharSequence _genDivision = this.genDivision(div);
          _builder.append(_genDivision, "\t");
          _builder.newLineIfNotEmpty();
        }
      }
      final String divisionIterator = _builder.toString();
      final NestedElementsRenderer _function = () -> {
        return divisionIterator;
      };
      _xblockexpression = this._pubHtmlRenderer.renderSegment(seg, _function);
    }
    return _xblockexpression;
  }
  
  protected CharSequence _genSegment(final TOC seg) {
    CharSequence _xblockexpression = null;
    {
      final Table t = this._pubGeneratorUtil.toTable(seg, this.allDivisionsInSequenceOfOccurrenceCache);
      _xblockexpression = this._pubHtmlRenderer.renderSegment(seg, t, this.nestedContentBlockGenerator);
    }
    return _xblockexpression;
  }
  
  protected CharSequence _genSegment(final ListOfTables seg) {
    CharSequence _xblockexpression = null;
    {
      final Table t = this._pubGeneratorUtil.toTable(seg, this.allTablesInSequenceOfOccurrenceCache);
      _xblockexpression = this._pubHtmlRenderer.renderSegment(seg, t, this.nestedContentBlockGenerator);
    }
    return _xblockexpression;
  }
  
  protected CharSequence _genSegment(final ListOfFigures seg) {
    CharSequence _xblockexpression = null;
    {
      final Table t = this._pubGeneratorUtil.toTable(seg, this.allFiguresInSequenceOfOccurrenceCache);
      _xblockexpression = this._pubHtmlRenderer.renderSegment(seg, t, this.nestedContentBlockGenerator);
    }
    return _xblockexpression;
  }
  
  protected CharSequence _genSegment(final ChangeHistory seg) {
    CharSequence _xblockexpression = null;
    {
      final Table t = this._pubGeneratorUtil.toTable(seg);
      _xblockexpression = this._pubHtmlRenderer.renderSegment(seg, t, this.nestedContentBlockGenerator);
    }
    return _xblockexpression;
  }
  
  protected CharSequence _genSegment(final Index seg) {
    return this._pubHtmlRenderer.renderSegment(seg);
  }
  
  protected CharSequence _genSegment(final DocumentSegment seg) {
    String _name = seg.getClass().getName();
    String _plus = ("Unsupported segment type: " + _name);
    throw new IllegalArgumentException(_plus);
  }
  
  public CharSequence genDivision(final Division div) {
    CharSequence _xblockexpression = null;
    {
      Division divTitle = div;
      Division divContents = div;
      Division _include = div.getInclude();
      boolean _tripleNotEquals = (_include != null);
      if (_tripleNotEquals) {
        divContents = div.getInclude();
        DRichText _title = div.getTitle();
        boolean _tripleEquals = (_title == null);
        if (_tripleEquals) {
          divTitle = div.getInclude();
        }
      }
      StringConcatenation _builder = new StringConcatenation();
      CharSequence _renderTitle = this._pubHtmlRenderer.renderTitle(divTitle);
      _builder.append(_renderTitle);
      _builder.newLineIfNotEmpty();
      {
        EList<ContentBlock> _contents = divContents.getContents();
        for(final ContentBlock block : _contents) {
          CharSequence _genBlock = this.genBlock(block);
          _builder.append(_genBlock);
          _builder.newLineIfNotEmpty();
        }
      }
      {
        EList<Division> _divisions = divContents.getDivisions();
        for(final Division subdiv : _divisions) {
          _builder.newLine();
          _builder.append("\t");
          CharSequence _genDivision = this.genDivision(subdiv);
          _builder.append(_genDivision, "\t");
          _builder.newLineIfNotEmpty();
        }
      }
      _xblockexpression = _builder;
    }
    return _xblockexpression;
  }
  
  protected CharSequence _genBlock(final Admonition a) {
    return this._pubHtmlRenderer.renderAdmonition(a);
  }
  
  protected CharSequence _genBlock(final com.mimacom.ddd.pub.pub.List list) {
    CharSequence _xblockexpression = null;
    {
      StringConcatenation _builder = new StringConcatenation();
      {
        EList<ListItem> _items = list.getItems();
        for(final ListItem item : _items) {
          CharSequence _genListItem = this.genListItem(item);
          _builder.append(_genListItem);
          _builder.newLineIfNotEmpty();
        }
      }
      final String itemIterator = _builder.toString();
      CharSequence _switchResult = null;
      ListStyle _style = list.getStyle();
      if (_style != null) {
        switch (_style) {
          case BULLET:
            final NestedElementsRenderer _function = () -> {
              return itemIterator;
            };
            _switchResult = this._pubHtmlRenderer.renderBulletList(list, _function);
            break;
          case SEQUENCE:
            final NestedElementsRenderer _function_1 = () -> {
              return itemIterator;
            };
            _switchResult = this._pubHtmlRenderer.renderNumberedList(list, _function_1);
            break;
          case TITLE:
            final NestedElementsRenderer _function_2 = () -> {
              return itemIterator;
            };
            _switchResult = this._pubHtmlRenderer.renderTitledList(list, _function_2);
            break;
          default:
            break;
        }
      }
      _xblockexpression = _switchResult;
    }
    return _xblockexpression;
  }
  
  public CharSequence genListItem(final ListItem item) {
    CharSequence _xblockexpression = null;
    {
      StringConcatenation _builder = new StringConcatenation();
      {
        EList<ContentBlock> _contents = item.getContents();
        for(final ContentBlock block : _contents) {
          CharSequence _genBlock = this.genBlock(block);
          _builder.append(_genBlock);
          _builder.newLineIfNotEmpty();
          _builder.append("\t\t");
        }
      }
      final String blockIterator = _builder.toString();
      CharSequence _switchResult = null;
      ListStyle _style = item.getList().getStyle();
      if (_style != null) {
        switch (_style) {
          case BULLET:
          case SEQUENCE:
            final NestedElementsRenderer _function = () -> {
              return blockIterator;
            };
            _switchResult = this._pubHtmlRenderer.renderListItem(item, _function);
            break;
          case TITLE:
            final NestedElementsRenderer _function_1 = () -> {
              return blockIterator;
            };
            _switchResult = this._pubHtmlRenderer.renderTitledListItem(item, _function_1);
            break;
          default:
            break;
        }
      }
      _xblockexpression = _switchResult;
    }
    return _xblockexpression;
  }
  
  protected CharSequence _genBlock(final TitledBlock b) {
    CharSequence _xblockexpression = null;
    {
      StringConcatenation _builder = new StringConcatenation();
      CharSequence _genTitledBlock = this.genTitledBlock(b);
      _builder.append(_genTitledBlock);
      _builder.newLineIfNotEmpty();
      CharSequence _renderTitledBlockTitle = this._pubHtmlRenderer.renderTitledBlockTitle(b);
      _builder.append(_renderTitledBlockTitle);
      _builder.newLineIfNotEmpty();
      final String blockBodyDispatcher = _builder.toString();
      final NestedElementsRenderer _function = () -> {
        return blockBodyDispatcher;
      };
      _xblockexpression = this._pubHtmlRenderer.renderTitledBlock(b, _function);
    }
    return _xblockexpression;
  }
  
  protected CharSequence _genTitledBlock(final Table t) {
    return this._pubHtmlRenderer.renderTable(t, this.nestedContentBlockGenerator);
  }
  
  protected CharSequence _genTitledBlock(final Figure f) {
    return this._pubHtmlRenderer.renderFigure(f);
  }
  
  protected CharSequence _genTitledBlock(final Equation e) {
    return this._pubHtmlRenderer.renderEquation(e);
  }
  
  protected CharSequence _genTitledBlock(final CodeListing cl) {
    CharSequence _xifexpression = null;
    EObject _include = cl.getInclude();
    boolean _tripleNotEquals = (_include != null);
    if (_tripleNotEquals) {
      CharSequence _xtrycatchfinallyexpression = null;
      try {
        CharSequence _xblockexpression = null;
        {
          String formattedCode = this.serializer.serialize(cl.getInclude());
          _xblockexpression = this._pubHtmlRenderer.renderCodeListing(cl, Lists.<String>newArrayList(formattedCode));
        }
        _xtrycatchfinallyexpression = _xblockexpression;
      } catch (final Throwable _t) {
        if (_t instanceof RuntimeException) {
          _xtrycatchfinallyexpression = null;
        } else {
          throw Exceptions.sneakyThrow(_t);
        }
      }
      _xifexpression = _xtrycatchfinallyexpression;
    } else {
      _xifexpression = this._pubHtmlRenderer.renderCodeListing(cl, cl.getCodeLines());
    }
    return _xifexpression;
=======
import com.google.inject.Inject;
import com.mimacom.ddd.dm.base.DRichText;
import com.mimacom.ddd.pub.pub.Admonition;
import com.mimacom.ddd.pub.pub.ChangeHistory;
import com.mimacom.ddd.pub.pub.CodeListing;
import com.mimacom.ddd.pub.pub.Component;
import com.mimacom.ddd.pub.pub.ContentBlock;
import com.mimacom.ddd.pub.pub.Division;
import com.mimacom.ddd.pub.pub.Document;
import com.mimacom.ddd.pub.pub.DocumentSegment;
import com.mimacom.ddd.pub.pub.Equation;
import com.mimacom.ddd.pub.pub.Figure;
import com.mimacom.ddd.pub.pub.Index;
import com.mimacom.ddd.pub.pub.ListItem;
import com.mimacom.ddd.pub.pub.ListOfFigures;
import com.mimacom.ddd.pub.pub.ListOfTables;
import com.mimacom.ddd.pub.pub.ListStyle;
import com.mimacom.ddd.pub.pub.Paragraph;
import com.mimacom.ddd.pub.pub.ParagraphStyle;
import com.mimacom.ddd.pub.pub.PubModel;
import com.mimacom.ddd.pub.pub.PubUtil;
import com.mimacom.ddd.pub.pub.Publication;
import com.mimacom.ddd.pub.pub.PublicationBody;
import com.mimacom.ddd.pub.pub.SegmentWithText;
import com.mimacom.ddd.pub.pub.TOC;
import com.mimacom.ddd.pub.pub.Table;
import com.mimacom.ddd.pub.pub.TitledBlock;
import com.mimacom.ddd.pub.pub.UnformattedParagraph;
import com.mimacom.ddd.pub.pub.generator.NestedContentBlockGenerator;
import com.mimacom.ddd.pub.pub.generator.NestedElementsRenderer;
import com.mimacom.ddd.pub.pub.generator.PubGeneratorUtil;
import com.mimacom.ddd.pub.pub.generator.PubHtmlRenderer;
import java.util.Arrays;
import java.util.List;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.Extension;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class PubGenerator extends AbstractGenerator {
  @Inject
  @Extension
  private PubHtmlRenderer _pubHtmlRenderer;
  
  @Inject
  @Extension
  private PubUtil _pubUtil;
  
  @Inject
  @Extension
  private PubGeneratorUtil _pubGeneratorUtil;
  
  private List<Division> allDivisionsInSequenceOfOccurrenceCache;
  
  private List<Table> allTablesInSequenceOfOccurrenceCache;
  
  private List<Figure> allFiguresInSequenceOfOccurrenceCache;
  
  private final NestedContentBlockGenerator nestedContentBlockGenerator = new NestedContentBlockGenerator() {
    @Override
    public CharSequence generate(final ContentBlock b) {
      return PubGenerator.this.genBlock(b);
    }
  };
  
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    EObject _get = resource.getContents().get(0);
    final PubModel model = ((PubModel) _get);
    Document _document = model.getDocument();
    boolean _tripleNotEquals = (_document != null);
    if (_tripleNotEquals) {
      this._pubHtmlRenderer.prepare(model.getDocument(), fsa);
      final CharSequence text = this.genDocument(model.getDocument(), fsa);
      fsa.generateFile(this._pubHtmlRenderer.fileName(model.getDocument()), text);
      this._pubHtmlRenderer.finish(model.getDocument(), fsa);
    }
  }
  
  protected CharSequence _genDocument(final Publication pub, final IFileSystemAccess2 fsa) {
    return null;
  }
  
  protected CharSequence _genDocument(final Component comp, final IFileSystemAccess2 fsa) {
    CharSequence _xblockexpression = null;
    {
      this.initialiseTablesCache(comp);
      StringConcatenation _builder = new StringConcatenation();
      {
        EList<DocumentSegment> _segments = comp.getSegments();
        for(final DocumentSegment seg : _segments) {
          CharSequence _genSegment = this.genSegment(seg);
          _builder.append(_genSegment);
          _builder.newLineIfNotEmpty();
          _builder.append("\t\t");
        }
      }
      final String segmentIterator = _builder.toString();
      final NestedElementsRenderer _function = () -> {
        return segmentIterator;
      };
      _xblockexpression = this._pubHtmlRenderer.renderDocument(comp, _function);
    }
    return _xblockexpression;
  }
  
  public void initialiseTablesCache(final Component compo) {
    this.allDivisionsInSequenceOfOccurrenceCache = this._pubUtil.gatherAllDivisionsInSequence(compo);
    this.allTablesInSequenceOfOccurrenceCache = this._pubUtil.gatherAllTablesInSequenceAndSetSequenceNumbers(compo);
    this.allFiguresInSequenceOfOccurrenceCache = this._pubUtil.gatherAllFiguresInSequenceAndSetSequenceNumbers(compo);
  }
  
  protected CharSequence _genSegment(final SegmentWithText seg) {
    CharSequence _xblockexpression = null;
    {
      StringConcatenation _builder = new StringConcatenation();
      {
        EList<ContentBlock> _contents = seg.getContents();
        for(final ContentBlock block : _contents) {
          CharSequence _genBlock = this.genBlock(block);
          _builder.append(_genBlock);
          _builder.newLineIfNotEmpty();
        }
      }
      final String blockIterator = _builder.toString();
      final NestedElementsRenderer _function = () -> {
        return blockIterator;
      };
      _xblockexpression = this._pubHtmlRenderer.renderSegment(seg, _function);
    }
    return _xblockexpression;
  }
  
  protected CharSequence _genSegment(final PublicationBody seg) {
    CharSequence _xblockexpression = null;
    {
      StringConcatenation _builder = new StringConcatenation();
      {
        EList<Division> _divisions = seg.getDivisions();
        for(final Division div : _divisions) {
          _builder.newLine();
          _builder.append("\t");
          CharSequence _genDivision = this.genDivision(div);
          _builder.append(_genDivision, "\t");
          _builder.newLineIfNotEmpty();
        }
      }
      final String divisionIterator = _builder.toString();
      final NestedElementsRenderer _function = () -> {
        return divisionIterator;
      };
      _xblockexpression = this._pubHtmlRenderer.renderSegment(seg, _function);
    }
    return _xblockexpression;
  }
  
  protected CharSequence _genSegment(final TOC seg) {
    CharSequence _xblockexpression = null;
    {
      final Table t = this._pubGeneratorUtil.toTable(seg, this.allDivisionsInSequenceOfOccurrenceCache);
      _xblockexpression = this._pubHtmlRenderer.renderSegment(seg, t, this.nestedContentBlockGenerator);
    }
    return _xblockexpression;
  }
  
  protected CharSequence _genSegment(final ListOfTables seg) {
    CharSequence _xblockexpression = null;
    {
      final Table t = this._pubGeneratorUtil.toTable(seg, this.allTablesInSequenceOfOccurrenceCache);
      _xblockexpression = this._pubHtmlRenderer.renderSegment(seg, t, this.nestedContentBlockGenerator);
    }
    return _xblockexpression;
  }
  
  protected CharSequence _genSegment(final ListOfFigures seg) {
    CharSequence _xblockexpression = null;
    {
      final Table t = this._pubGeneratorUtil.toTable(seg, this.allFiguresInSequenceOfOccurrenceCache);
      _xblockexpression = this._pubHtmlRenderer.renderSegment(seg, t, this.nestedContentBlockGenerator);
    }
    return _xblockexpression;
  }
  
  protected CharSequence _genSegment(final ChangeHistory seg) {
    CharSequence _xblockexpression = null;
    {
      final Table t = this._pubGeneratorUtil.toTable(seg);
      _xblockexpression = this._pubHtmlRenderer.renderSegment(seg, t, this.nestedContentBlockGenerator);
    }
    return _xblockexpression;
  }
  
  protected CharSequence _genSegment(final Index seg) {
    return this._pubHtmlRenderer.renderSegment(seg);
  }
  
  protected CharSequence _genSegment(final DocumentSegment seg) {
    String _name = seg.getClass().getName();
    String _plus = ("Unsupported segment type: " + _name);
    throw new IllegalArgumentException(_plus);
  }
  
  public CharSequence genDivision(final Division div) {
    CharSequence _xblockexpression = null;
    {
      Division divTitle = div;
      Division divContents = div;
      Division _include = div.getInclude();
      boolean _tripleNotEquals = (_include != null);
      if (_tripleNotEquals) {
        divContents = div.getInclude();
        DRichText _title = div.getTitle();
        boolean _tripleEquals = (_title == null);
        if (_tripleEquals) {
          divTitle = div.getInclude();
        }
      }
      StringConcatenation _builder = new StringConcatenation();
      CharSequence _renderTitle = this._pubHtmlRenderer.renderTitle(divTitle);
      _builder.append(_renderTitle);
      _builder.newLineIfNotEmpty();
      {
        EList<ContentBlock> _contents = divContents.getContents();
        for(final ContentBlock block : _contents) {
          CharSequence _genBlock = this.genBlock(block);
          _builder.append(_genBlock);
          _builder.newLineIfNotEmpty();
        }
      }
      {
        EList<Division> _subdivisions = divContents.getSubdivisions();
        for(final Division subdiv : _subdivisions) {
          _builder.newLine();
          _builder.append("\t");
          CharSequence _genDivision = this.genDivision(subdiv);
          _builder.append(_genDivision, "\t");
          _builder.newLineIfNotEmpty();
        }
      }
      _xblockexpression = _builder;
    }
    return _xblockexpression;
  }
  
  protected CharSequence _genBlock(final Admonition a) {
    return this._pubHtmlRenderer.renderAdmonition(a);
  }
  
  protected CharSequence _genBlock(final com.mimacom.ddd.pub.pub.List list) {
    CharSequence _xblockexpression = null;
    {
      StringConcatenation _builder = new StringConcatenation();
      {
        EList<ListItem> _items = list.getItems();
        for(final ListItem item : _items) {
          CharSequence _genListItem = this.genListItem(item);
          _builder.append(_genListItem);
          _builder.newLineIfNotEmpty();
        }
      }
      final String itemIterator = _builder.toString();
      CharSequence _switchResult = null;
      ListStyle _style = list.getStyle();
      if (_style != null) {
        switch (_style) {
          case BULLET:
            final NestedElementsRenderer _function = () -> {
              return itemIterator;
            };
            _switchResult = this._pubHtmlRenderer.renderBulletList(list, _function);
            break;
          case SEQUENCE:
            final NestedElementsRenderer _function_1 = () -> {
              return itemIterator;
            };
            _switchResult = this._pubHtmlRenderer.renderNumberedList(list, _function_1);
            break;
          case TITLE:
            final NestedElementsRenderer _function_2 = () -> {
              return itemIterator;
            };
            _switchResult = this._pubHtmlRenderer.renderTitledList(list, _function_2);
            break;
          default:
            break;
        }
      }
      _xblockexpression = _switchResult;
    }
    return _xblockexpression;
  }
  
  public CharSequence genListItem(final ListItem item) {
    CharSequence _xblockexpression = null;
    {
      StringConcatenation _builder = new StringConcatenation();
      {
        EList<ContentBlock> _contents = item.getContents();
        for(final ContentBlock block : _contents) {
          CharSequence _genBlock = this.genBlock(block);
          _builder.append(_genBlock);
          _builder.newLineIfNotEmpty();
          _builder.append("\t\t");
        }
      }
      final String blockIterator = _builder.toString();
      CharSequence _switchResult = null;
      ListStyle _style = item.getList().getStyle();
      if (_style != null) {
        switch (_style) {
          case BULLET:
          case SEQUENCE:
            final NestedElementsRenderer _function = () -> {
              return blockIterator;
            };
            _switchResult = this._pubHtmlRenderer.renderListItem(item, _function);
            break;
          case TITLE:
            final NestedElementsRenderer _function_1 = () -> {
              return blockIterator;
            };
            _switchResult = this._pubHtmlRenderer.renderTitledListItem(item, _function_1);
            break;
          default:
            break;
        }
      }
      _xblockexpression = _switchResult;
    }
    return _xblockexpression;
  }
  
  protected CharSequence _genBlock(final TitledBlock b) {
    CharSequence _xblockexpression = null;
    {
      StringConcatenation _builder = new StringConcatenation();
      CharSequence _genTitledBlock = this.genTitledBlock(b);
      _builder.append(_genTitledBlock);
      _builder.newLineIfNotEmpty();
      CharSequence _renderTitledBlockTitle = this._pubHtmlRenderer.renderTitledBlockTitle(b);
      _builder.append(_renderTitledBlockTitle);
      _builder.newLineIfNotEmpty();
      final String blockBodyDispatcher = _builder.toString();
      final NestedElementsRenderer _function = () -> {
        return blockBodyDispatcher;
      };
      _xblockexpression = this._pubHtmlRenderer.renderTitledBlock(b, _function);
    }
    return _xblockexpression;
  }
  
  protected CharSequence _genTitledBlock(final Table t) {
    return this._pubHtmlRenderer.renderTable(t, this.nestedContentBlockGenerator);
  }
  
  protected CharSequence _genTitledBlock(final Figure f) {
    return this._pubHtmlRenderer.renderFigure(f);
  }
  
  protected CharSequence _genTitledBlock(final Equation e) {
    return this._pubHtmlRenderer.renderEquation(e);
  }
  
  protected CharSequence _genTitledBlock(final CodeListing cl) {
    return this._pubHtmlRenderer.renderCodeListing(cl);
>>>>>>> refs/remotes/origin/master
>>>>>>> refs/heads/master
  }
  
  protected CharSequence _genBlock(final Paragraph para) {
    ParagraphStyle _style = para.getStyle();
    boolean _equals = Objects.equal(_style, ParagraphStyle.QUOTE);
    if (_equals) {
      return this._pubHtmlRenderer.renderQuotedParagraph(para);
    } else {
      return this._pubHtmlRenderer.renderPlainParagraph(para);
    }
  }
  
  protected CharSequence _genBlock(final UnformattedParagraph para) {
    return this._pubHtmlRenderer.renderUnformattedParagraph(para);
  }
  
  protected CharSequence _genBlock(final ContentBlock block) {
    String _name = block.getClass().getName();
    String _plus = ("Unsupported content-block type: " + _name);
    throw new IllegalArgumentException(_plus);
  }
  
  public CharSequence genDocument(final Document comp, final IFileSystemAccess2 fsa) {
    if (comp instanceof Component) {
      return _genDocument((Component)comp, fsa);
    } else if (comp instanceof Publication) {
      return _genDocument((Publication)comp, fsa);
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(comp, fsa).toString());
    }
  }
  
  public CharSequence genSegment(final DocumentSegment seg) {
    if (seg instanceof ChangeHistory) {
      return _genSegment((ChangeHistory)seg);
    } else if (seg instanceof ListOfFigures) {
      return _genSegment((ListOfFigures)seg);
    } else if (seg instanceof ListOfTables) {
      return _genSegment((ListOfTables)seg);
    } else if (seg instanceof TOC) {
      return _genSegment((TOC)seg);
    } else if (seg instanceof Index) {
      return _genSegment((Index)seg);
    } else if (seg instanceof PublicationBody) {
      return _genSegment((PublicationBody)seg);
    } else if (seg instanceof SegmentWithText) {
      return _genSegment((SegmentWithText)seg);
    } else if (seg != null) {
      return _genSegment(seg);
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(seg).toString());
    }
  }
  
  public CharSequence genBlock(final ContentBlock a) {
    if (a instanceof Admonition) {
      return _genBlock((Admonition)a);
    } else if (a instanceof com.mimacom.ddd.pub.pub.List) {
      return _genBlock((com.mimacom.ddd.pub.pub.List)a);
    } else if (a instanceof Paragraph) {
      return _genBlock((Paragraph)a);
    } else if (a instanceof TitledBlock) {
      return _genBlock((TitledBlock)a);
    } else if (a instanceof UnformattedParagraph) {
      return _genBlock((UnformattedParagraph)a);
    } else if (a != null) {
      return _genBlock(a);
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(a).toString());
    }
  }
  
  public CharSequence genTitledBlock(final TitledBlock cl) {
    if (cl instanceof CodeListing) {
      return _genTitledBlock((CodeListing)cl);
    } else if (cl instanceof Equation) {
      return _genTitledBlock((Equation)cl);
    } else if (cl instanceof Figure) {
      return _genTitledBlock((Figure)cl);
    } else if (cl instanceof Table) {
      return _genTitledBlock((Table)cl);
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(cl).toString());
    }
  }
}
