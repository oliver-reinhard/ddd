/**
 * generated by Xtext 2.19.0
 */
package com.mimacom.ddd.pub.pub.generator;

import com.google.inject.Inject;
import com.mimacom.ddd.pub.pub.Document;
import com.mimacom.ddd.pub.pub.PubModel;
import com.mimacom.ddd.pub.pub.generator.PubGeneratorDelegate;
import com.mimacom.ddd.pub.pub.generator.PubHtmlRenderer;
import com.mimacom.ddd.pub.pub.generator.PubLaTeXRenderer;
import org.apache.log4j.Logger;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class PubGenerator extends AbstractGenerator {
  @Inject
  private PubHtmlRenderer htmlRenderer;
  
  @Inject
  private PubLaTeXRenderer laTeXRenderer;
  
  @Inject
  private PubGeneratorDelegate delegate;
  
  private static final Logger LOGGER = Logger.getLogger(PubGenerator.class);
  
  @Override
  public synchronized void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    EObject _get = resource.getContents().get(0);
    final PubModel model = ((PubModel) _get);
    final Document doc = model.getDocument();
    if ((doc != null)) {
      this.delegate.init(resource, fsa, context);
      String _title = doc.getTitle();
      String _plus = (" for document \"" + _title);
      final String msg = (_plus + "\"");
      boolean _isGenerateHtml = doc.isGenerateHtml();
      if (_isGenerateHtml) {
        PubGenerator.LOGGER.debug(("Generating HTML" + msg));
        this.delegate.generate(this.htmlRenderer);
      }
      boolean _isGenerateLaTeX = doc.isGenerateLaTeX();
      if (_isGenerateLaTeX) {
        PubGenerator.LOGGER.debug(("Generating LaTeX" + msg));
        this.delegate.generate(this.laTeXRenderer);
      }
    }
  }
}
