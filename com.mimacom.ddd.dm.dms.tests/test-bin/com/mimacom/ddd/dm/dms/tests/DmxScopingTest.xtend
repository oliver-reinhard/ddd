/*
 * generated by Xtext 2.16.0
 */
package com.mimacom.ddd.dm.dms.tests

import com.google.inject.Inject
import com.mimacom.ddd.dm.base.DDetailType
import com.mimacom.ddd.dm.base.DExpression
import com.mimacom.ddd.dm.base.DModel
import com.mimacom.ddd.dm.dmx.DAssignment
import com.mimacom.ddd.dm.dmx.DBinaryOperation
import com.mimacom.ddd.dm.dmx.DContextReference
import com.mimacom.ddd.dm.dmx.DTypedMemberReference
import com.mimacom.ddd.dm.dmx.DmxPackage
import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.EReference
import org.eclipse.xtext.scoping.IScopeProvider
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.extensions.InjectionExtension
import org.eclipse.xtext.testing.util.ParseHelper
import org.junit.jupiter.api.Assertions
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.^extension.ExtendWith

import static extension org.junit.Assert.*
import com.mimacom.ddd.dm.dmx.DSelfExpression
import com.mimacom.ddd.dm.base.DQuery

@ExtendWith(InjectionExtension)
@InjectWith(DmsInjectorProvider)
class DmxScopingTest {
	@Inject extension ParseHelper<DModel> parseHelper
	@Inject extension IScopeProvider
	
	val epackage = DmxPackage.eINSTANCE
	
	@Test
	def void testContextReferenceExpressionScope() {
		val XX = "«"
		val YY = "»"
		val model = parseHelper.parse('''
			global { 
				primitive GP {}
				detail GD {
					x : GP
					y: GP
				}
			}
			domain D {
				detail A 
					«XX»
						c1 : [a > 0]
						c2 : [b.x > 0]
					«YY»
					{ 
					a : GP
					b : GD
					q1 (m : GP, n : GD) : GD returns m > 0
					q2 (r : GD) : GD returns r.x > 0
					constraint c1 : a > 0
					constraint c2 : b.x > 0
				}
			}
		''')
		assertNotNull(model)
		val errors = model.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''ContextReference parsing errors: «errors.join("; ")»''')
		
		val detailA = model.domain.types.head as DDetailType
		val expectedScope1 = "a, b, q1, q2, A, GP, GD, D"
		val expectedScope2 = "x, y"
		
		{ // RIchText Expressions
			val c1 = detailA.description.elements.get(1) as DExpression
			c1.checkExpression1(expectedScope1)
			val c2 = detailA.description.elements.get(3) as DExpression
			c2.checkExpression2(expectedScope2, expectedScope1)
		}
		
		{ // Query Expressions
			val expectedScope3 = "m, n, " + expectedScope1
			val q1 = (detailA.features.get(2) as DQuery).returns
			q1.checkExpression1(expectedScope3)
			val expectedScope4 = "r, " + expectedScope1
			val q2 = (detailA.features.get(3) as DQuery).returns
			q2.checkExpression2(expectedScope2, expectedScope4)
		}
		
		{ // Constraint Expressions
			val c1 = detailA.constraints.head.condition
			c1.checkExpression1(expectedScope1)
			val c2 =detailA.constraints.get(1).condition
			c2.checkExpression2(expectedScope2, expectedScope1)
		}
	}
	
	protected def checkExpression1(DExpression e, String expectedScopeStr) {
		assertTrue(e instanceof DBinaryOperation);
		val left = (e as DBinaryOperation).leftOperand
		assertTrue(left instanceof DContextReference)
		val ref = left as DContextReference
		ref => [assertScope(epackage.DContextReference_ContextElement, expectedScopeStr)]
	}
	
	protected def checkExpression2(DExpression e, String expectedScopeStr1, String expectedScopeStr2) {
		assertTrue(e instanceof DBinaryOperation);
		val left = (e as DBinaryOperation).leftOperand
		assertTrue(left instanceof DTypedMemberReference)
		val member = left as DTypedMemberReference
		member => [assertScope(epackage.DTypedMemberReference_Member,expectedScopeStr1)]
		assertTrue(member.memberContainer instanceof DContextReference)
		val ref = member.memberContainer as DContextReference
		ref => [assertScope(epackage.DContextReference_ContextElement, expectedScopeStr2)]
	}
	
	@Test
	def void testSelfExpressionScope() {
		val XX = "«"
		val YY = "»"
		val model = parseHelper.parse('''
			global { 
				primitive GP {}
				detail GD {
					x : GP
					y: GP
				}
			}
			domain D {
				
				detail A 
					«XX»
						c3 : [self.a > 0]
						c4 : [self.b.x > 0]
					«YY»
					{ 
					a : GP
					b : GD
					q1 (m : GP, n : GD) : GD returns self.m > 0
					q2 (r : GD) : GD returns self.r.x > 0
					constraint c3 : self.a > 0
					constraint c4 : self.b.x > 0
				}
			}
		''')
		assertNotNull(model)
		val errors = model.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''"SELF" parsing errors: «errors.join("; ")»''')
		
		val detailA = model.domain.types.head as DDetailType
		val expectedScope1 = "a, b, q1, q2"
		val expectedScope2 = "x, y"
		
		{ // RIchText Expressions
			val c3 = detailA.description.elements.get(1) as DExpression
			c3.checkExpression3(expectedScope1)
			val c4 = detailA.description.elements.get(3) as DExpression
			c4.checkExpression4(expectedScope2, expectedScope1)
		}
		
		{ // Query Expressions
			val expectedScope3 = "m, n, " + expectedScope1
			val q1 = (detailA.features.get(2) as DQuery).returns
			q1.checkExpression3(expectedScope3)
			val expectedScope4 = "r, " + expectedScope1
			val q2 = (detailA.features.get(3) as DQuery).returns
			q2.checkExpression4(expectedScope2, expectedScope4)
		}
		
		{ // Constraint Expressions
			val c3 = detailA.constraints.head.condition
			c3.checkExpression3(expectedScope1)
			val c4 =detailA.constraints.get(1).condition
			c4.checkExpression4(expectedScope2, expectedScope1)
		}
	}
	
	protected def checkExpression3(DExpression e, String expectedScopeStr) {
		assertTrue(e instanceof DBinaryOperation);
		val left = (e as DBinaryOperation).leftOperand
		assertTrue(left instanceof DTypedMemberReference)
		val member = left as DTypedMemberReference
		member => [assertScope(epackage.DTypedMemberReference_Member, expectedScopeStr)]
		assertTrue(member.memberContainer instanceof DSelfExpression)
	}
	
	protected def  checkExpression4(DExpression e, String expectedScopeStr1, String expectedScopeStr2) {
		assertTrue(e instanceof DBinaryOperation);
		val left = (e as DBinaryOperation).leftOperand
		assertTrue(left instanceof DTypedMemberReference)
		val member1 = left as DTypedMemberReference
		member1 => [assertScope(epackage.DTypedMemberReference_Member, expectedScopeStr1)]
		assertTrue(member1.memberContainer instanceof DTypedMemberReference)
		val member2 = member1.memberContainer as DTypedMemberReference
		member2 => [assertScope(epackage.DTypedMemberReference_Member, expectedScopeStr2)]
		assertTrue(member2.memberContainer instanceof DSelfExpression)
	}
	
	def private assertScope(EObject context, EReference reference, CharSequence expected) {
		val actualScope = context.getScope(reference)
		val actual = actualScope.allElements.map[name].join(", ")
		expected.toString.assertEquals(actual)
	}
}
