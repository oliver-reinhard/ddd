/**
 * generated by Xtext 2.16.0
 */
package com.mimacom.ddd.dm.dms.tests;

import com.google.inject.Inject;
import com.mimacom.ddd.dm.base.BasePackage;
import com.mimacom.ddd.dm.base.DAttribute;
import com.mimacom.ddd.dm.base.DDetailType;
import com.mimacom.ddd.dm.base.DDomain;
import com.mimacom.ddd.dm.base.DFeature;
import com.mimacom.ddd.dm.base.DType;
import com.mimacom.ddd.dm.dms.tests.DmsInjectorProvider;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.naming.QualifiedName;
import org.eclipse.xtext.resource.IEObjectDescription;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.scoping.IScopeProvider;
import org.eclipse.xtext.testing.InjectWith;
import org.eclipse.xtext.testing.extensions.InjectionExtension;
import org.eclipse.xtext.testing.util.ParseHelper;
import org.eclipse.xtext.xbase.lib.Exceptions;
import org.eclipse.xtext.xbase.lib.Extension;
import org.eclipse.xtext.xbase.lib.Functions.Function1;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.eclipse.xtext.xbase.lib.ObjectExtensions;
import org.eclipse.xtext.xbase.lib.Procedures.Procedure1;
import org.junit.Assert;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;

@ExtendWith(InjectionExtension.class)
@InjectWith(DmsInjectorProvider.class)
@SuppressWarnings("all")
public class DmsScopingTest {
  @Inject
  @Extension
  private ParseHelper<DDomain> parseHelper;
  
  @Inject
  @Extension
  private IScopeProvider _iScopeProvider;
  
  private final BasePackage epackage = BasePackage.eINSTANCE;
  
  @Test
  public void testAttributeScope() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("domain D");
      _builder.newLine();
      _builder.newLine();
      _builder.append("primitive GP {}");
      _builder.newLine();
      _builder.append("detail A {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("x : GP");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("y : GP");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("aggregate {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("root R { }");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      final DDomain domain = this.parseHelper.parse(_builder);
      Assert.assertNotNull(domain);
      final EList<Resource.Diagnostic> errors = domain.eResource().getErrors();
      boolean _isEmpty = errors.isEmpty();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("Attribute type parsing errors: ");
      String _join = IterableExtensions.join(errors, "; ");
      _builder_1.append(_join);
      Assertions.assertTrue(_isEmpty, _builder_1.toString());
      DType _get = domain.getTypes().get(1);
      final DDetailType detailA = ((DDetailType) _get);
      DFeature _head = IterableExtensions.<DFeature>head(detailA.getFeatures());
      final DAttribute attrX = ((DAttribute) _head);
      final DType ref = attrX.getType();
      final Procedure1<DType> _function = (DType it) -> {
        this.assertScope(it, this.epackage.getDTypedMember_Type(), "GP, A, D.GP, D.A");
      };
      ObjectExtensions.<DType>operator_doubleArrow(ref, _function);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  private void assertScope(final EObject context, final EReference reference, final CharSequence expected) {
    final IScope actualScope = this._iScopeProvider.getScope(context, reference);
    final Function1<IEObjectDescription, QualifiedName> _function = (IEObjectDescription it) -> {
      return it.getName();
    };
    final String actual = IterableExtensions.join(IterableExtensions.<IEObjectDescription, QualifiedName>map(actualScope.getAllElements(), _function), ", ");
    Assert.assertEquals(expected.toString(), actual);
  }
}
