/**
 * generated by Xtext 2.17.1
 */
package com.mimacom.ddd.sm.asm.impl;

import com.mimacom.ddd.sm.asm.*;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EDataType;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class AsmFactoryImpl extends EFactoryImpl implements AsmFactory
{
	/**
	 * Creates the default factory implementation.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static AsmFactory init()
	{
		try
		{
			AsmFactory theAsmFactory = (AsmFactory)EPackage.Registry.INSTANCE.getEFactory(AsmPackage.eNS_URI);
			if (theAsmFactory != null)
			{
				return theAsmFactory;
			}
		}
		catch (Exception exception)
		{
			EcorePlugin.INSTANCE.log(exception);
		}
		return new AsmFactoryImpl();
	}

	/**
	 * Creates an instance of the factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public AsmFactoryImpl()
	{
		super();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public EObject create(EClass eClass)
	{
		switch (eClass.getClassifierID())
		{
			case AsmPackage.ASM_APPLICATION: return createAsmApplication();
			case AsmPackage.ASM_SERVICE_INTERFACE: return createAsmServiceInterface();
			case AsmPackage.ASM_EXCEPTION: return createAsmException();
			case AsmPackage.ASM_WATCHDOG: return createAsmWatchdog();
			case AsmPackage.ASM_HUMAN: return createAsmHuman();
			case AsmPackage.ASM_SERVICE_OPERATION: return createAsmServiceOperation();
			case AsmPackage.ASM_SERVICE_PARAMETER: return createAsmServiceParameter();
			default:
				throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
		}
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object createFromString(EDataType eDataType, String initialValue)
	{
		switch (eDataType.getClassifierID())
		{
			case AsmPackage.ASM_SERVICE_KIND:
				return createAsmServiceKindFromString(eDataType, initialValue);
			case AsmPackage.ASM_PARAMETER_DIRECTION:
				return createAsmParameterDirectionFromString(eDataType, initialValue);
			default:
				throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
		}
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public String convertToString(EDataType eDataType, Object instanceValue)
	{
		switch (eDataType.getClassifierID())
		{
			case AsmPackage.ASM_SERVICE_KIND:
				return convertAsmServiceKindToString(eDataType, instanceValue);
			case AsmPackage.ASM_PARAMETER_DIRECTION:
				return convertAsmParameterDirectionToString(eDataType, instanceValue);
			default:
				throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
		}
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public AsmApplication createAsmApplication()
	{
		AsmApplicationImpl asmApplication = new AsmApplicationImpl();
		return asmApplication;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public AsmServiceInterface createAsmServiceInterface()
	{
		AsmServiceInterfaceImplCustom asmServiceInterface = new AsmServiceInterfaceImplCustom();
		return asmServiceInterface;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public AsmException createAsmException()
	{
		AsmExceptionImpl asmException = new AsmExceptionImpl();
		return asmException;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public AsmWatchdog createAsmWatchdog()
	{
		AsmWatchdogImpl asmWatchdog = new AsmWatchdogImpl();
		return asmWatchdog;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public AsmHuman createAsmHuman()
	{
		AsmHumanImpl asmHuman = new AsmHumanImpl();
		return asmHuman;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public AsmServiceOperation createAsmServiceOperation()
	{
		AsmServiceOperationImplCustom asmServiceOperation = new AsmServiceOperationImplCustom();
		return asmServiceOperation;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public AsmServiceParameter createAsmServiceParameter()
	{
		AsmServiceParameterImpl asmServiceParameter = new AsmServiceParameterImpl();
		return asmServiceParameter;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public AsmServiceKind createAsmServiceKindFromString(EDataType eDataType, String initialValue)
	{
		AsmServiceKind result = AsmServiceKind.get(initialValue);
		if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
		return result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public String convertAsmServiceKindToString(EDataType eDataType, Object instanceValue)
	{
		return instanceValue == null ? null : instanceValue.toString();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public AsmParameterDirection createAsmParameterDirectionFromString(EDataType eDataType, String initialValue)
	{
		AsmParameterDirection result = AsmParameterDirection.get(initialValue);
		if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
		return result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public String convertAsmParameterDirectionToString(EDataType eDataType, Object instanceValue)
	{
		return instanceValue == null ? null : instanceValue.toString();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public AsmPackage getAsmPackage()
	{
		return (AsmPackage)getEPackage();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @deprecated
	 * @generated
	 */
	@Deprecated
	public static AsmPackage getPackage()
	{
		return AsmPackage.eINSTANCE;
	}

} //AsmFactoryImpl
