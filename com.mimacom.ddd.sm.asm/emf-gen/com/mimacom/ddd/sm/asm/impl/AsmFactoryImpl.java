/**
 * generated by Xtext 2.17.1
 */
package com.mimacom.ddd.sm.asm.impl;

import com.mimacom.ddd.sm.asm.*;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EDataType;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class AsmFactoryImpl extends EFactoryImpl implements AsmFactory
{
	/**
	 * Creates the default factory implementation.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public static AsmFactory init()
	{
		try
		{
			AsmFactory theAsmFactory = (AsmFactory)EPackage.Registry.INSTANCE.getEFactory(AsmPackage.eNS_URI);
			if (theAsmFactory != null)
			{
				return theAsmFactory;
			}
		}
		catch (Exception exception)
		{
			EcorePlugin.INSTANCE.log(exception);
		}
		return new AsmFactoryImpl();
	}

	/**
	 * Creates an instance of the factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public AsmFactoryImpl()
	{
		super();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public EObject create(EClass eClass)
	{
		switch (eClass.getClassifierID())
		{
			case AsmPackage.SAPPLICATION: return createSApplication();
			case AsmPackage.SSERVICE_INTERFACE: return createSServiceInterface();
			case AsmPackage.SEXCEPTION: return createSException();
			case AsmPackage.SWATCHDOG: return createSWatchdog();
			case AsmPackage.SHUMAN: return createSHuman();
			case AsmPackage.SSERVICE_OPERATION: return createSServiceOperation();
			case AsmPackage.SSERVICE_PARAMETER: return createSServiceParameter();
			default:
				throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
		}
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object createFromString(EDataType eDataType, String initialValue)
	{
		switch (eDataType.getClassifierID())
		{
			case AsmPackage.SSERVICE_KIND:
				return createSServiceKindFromString(eDataType, initialValue);
			case AsmPackage.SDIRECTION:
				return createSDirectionFromString(eDataType, initialValue);
			default:
				throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
		}
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public String convertToString(EDataType eDataType, Object instanceValue)
	{
		switch (eDataType.getClassifierID())
		{
			case AsmPackage.SSERVICE_KIND:
				return convertSServiceKindToString(eDataType, instanceValue);
			case AsmPackage.SDIRECTION:
				return convertSDirectionToString(eDataType, instanceValue);
			default:
				throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
		}
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public SApplication createSApplication()
	{
		SApplicationImpl sApplication = new SApplicationImpl();
		return sApplication;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public SServiceInterface createSServiceInterface()
	{
		SServiceInterfaceImplCustom sServiceInterface = new SServiceInterfaceImplCustom();
		return sServiceInterface;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public SException createSException()
	{
		SExceptionImpl sException = new SExceptionImpl();
		return sException;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public SWatchdog createSWatchdog()
	{
		SWatchdogImpl sWatchdog = new SWatchdogImpl();
		return sWatchdog;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public SHuman createSHuman()
	{
		SHumanImpl sHuman = new SHumanImpl();
		return sHuman;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public SServiceOperation createSServiceOperation()
	{
		SServiceOperationImplCustom sServiceOperation = new SServiceOperationImplCustom();
		return sServiceOperation;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public SServiceParameter createSServiceParameter()
	{
		SServiceParameterImpl sServiceParameter = new SServiceParameterImpl();
		return sServiceParameter;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public SServiceKind createSServiceKindFromString(EDataType eDataType, String initialValue)
	{
		SServiceKind result = SServiceKind.get(initialValue);
		if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
		return result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public String convertSServiceKindToString(EDataType eDataType, Object instanceValue)
	{
		return instanceValue == null ? null : instanceValue.toString();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public SDirection createSDirectionFromString(EDataType eDataType, String initialValue)
	{
		SDirection result = SDirection.get(initialValue);
		if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
		return result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public String convertSDirectionToString(EDataType eDataType, Object instanceValue)
	{
		return instanceValue == null ? null : instanceValue.toString();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public AsmPackage getAsmPackage()
	{
		return (AsmPackage)getEPackage();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @deprecated
	 * @generated
	 */
	@Deprecated
	public static AsmPackage getPackage()
	{
		return AsmPackage.eINSTANCE;
	}

} //AsmFactoryImpl
