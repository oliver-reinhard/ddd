/**
 * generated by Xtext 2.17.1
 */
package com.mimacom.ddd.sm.asm.impl;

import com.mimacom.ddd.dm.base.base.BasePackage;

import com.mimacom.ddd.sm.asm.ApplicationServiceModel;
import com.mimacom.ddd.sm.asm.AsmActor;
import com.mimacom.ddd.sm.asm.AsmApplication;
import com.mimacom.ddd.sm.asm.AsmException;
import com.mimacom.ddd.sm.asm.AsmFactory;
import com.mimacom.ddd.sm.asm.AsmHuman;
import com.mimacom.ddd.sm.asm.AsmPackage;
import com.mimacom.ddd.sm.asm.AsmParameterDirection;
import com.mimacom.ddd.sm.asm.AsmServiceInterface;
import com.mimacom.ddd.sm.asm.AsmServiceKind;
import com.mimacom.ddd.sm.asm.AsmServiceOperation;
import com.mimacom.ddd.sm.asm.AsmServiceParameter;
import com.mimacom.ddd.sm.asm.AsmWatchdog;

import com.mimacom.ddd.sm.sim.SimPackage;

import org.eclipse.emf.ecore.EAttribute;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EEnum;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.emf.ecore.EReference;

import org.eclipse.emf.ecore.impl.EPackageImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Package</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class AsmPackageImpl extends EPackageImpl implements AsmPackage
{
	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private EClass applicationServiceModelEClass = null;

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private EClass asmApplicationEClass = null;

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private EClass asmServiceInterfaceEClass = null;

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private EClass asmExceptionEClass = null;

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private EClass asmActorEClass = null;

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private EClass asmWatchdogEClass = null;

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private EClass asmHumanEClass = null;

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private EClass asmServiceOperationEClass = null;

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private EClass asmServiceParameterEClass = null;

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private EEnum asmServiceKindEEnum = null;

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private EEnum asmParameterDirectionEEnum = null;

	/**
	 * Creates an instance of the model <b>Package</b>, registered with
	 * {@link org.eclipse.emf.ecore.EPackage.Registry EPackage.Registry} by the package
	 * package URI value.
	 * <p>Note: the correct way to create the package is via the static
	 * factory method {@link #init init()}, which also performs
	 * initialization of the package, or returns the registered package,
	 * if one already exists.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see org.eclipse.emf.ecore.EPackage.Registry
	 * @see com.mimacom.ddd.sm.asm.AsmPackage#eNS_URI
	 * @see #init()
	 * @generated
	 */
	private AsmPackageImpl()
	{
		super(eNS_URI, AsmFactory.eINSTANCE);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private static boolean isInited = false;

	/**
	 * Creates, registers, and initializes the <b>Package</b> for this model, and for any others upon which it depends.
	 * 
	 * <p>This method is used to initialize {@link AsmPackage#eINSTANCE} when that field is accessed.
	 * Clients should not invoke it directly. Instead, they should simply access that field to obtain the package.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #eNS_URI
	 * @see #createPackageContents()
	 * @see #initializePackageContents()
	 * @generated
	 */
	public static AsmPackage init()
	{
		if (isInited) return (AsmPackage)EPackage.Registry.INSTANCE.getEPackage(AsmPackage.eNS_URI);

		// Obtain or create and register package
		AsmPackageImpl theAsmPackage = (AsmPackageImpl)(EPackage.Registry.INSTANCE.get(eNS_URI) instanceof AsmPackageImpl ? EPackage.Registry.INSTANCE.get(eNS_URI) : new AsmPackageImpl());

		isInited = true;

		// Initialize simple dependencies
		SimPackage.eINSTANCE.eClass();

		// Create package meta-data objects
		theAsmPackage.createPackageContents();

		// Initialize created meta-data
		theAsmPackage.initializePackageContents();

		// Mark meta-data to indicate it can't be changed
		theAsmPackage.freeze();

  
		// Update the registry and return the package
		EPackage.Registry.INSTANCE.put(AsmPackage.eNS_URI, theAsmPackage);
		return theAsmPackage;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EClass getApplicationServiceModel()
	{
		return applicationServiceModelEClass;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EClass getAsmApplication()
	{
		return asmApplicationEClass;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EReference getAsmApplication_Model()
	{
		return (EReference)asmApplicationEClass.getEStructuralFeatures().get(0);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EReference getAsmApplication_Services()
	{
		return (EReference)asmApplicationEClass.getEStructuralFeatures().get(1);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EReference getAsmApplication_Actors()
	{
		return (EReference)asmApplicationEClass.getEStructuralFeatures().get(2);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EClass getAsmServiceInterface()
	{
		return asmServiceInterfaceEClass;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EReference getAsmServiceInterface_Interface()
	{
		return (EReference)asmServiceInterfaceEClass.getEStructuralFeatures().get(0);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EReference getAsmServiceInterface_Core()
	{
		return (EReference)asmServiceInterfaceEClass.getEStructuralFeatures().get(1);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EReference getAsmServiceInterface_Exceptions()
	{
		return (EReference)asmServiceInterfaceEClass.getEStructuralFeatures().get(2);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EReference getAsmServiceInterface_Operations()
	{
		return (EReference)asmServiceInterfaceEClass.getEStructuralFeatures().get(3);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EClass getAsmException()
	{
		return asmExceptionEClass;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EClass getAsmActor()
	{
		return asmActorEClass;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EAttribute getAsmActor_Name()
	{
		return (EAttribute)asmActorEClass.getEStructuralFeatures().get(0);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EClass getAsmWatchdog()
	{
		return asmWatchdogEClass;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EClass getAsmHuman()
	{
		return asmHumanEClass;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EClass getAsmServiceOperation()
	{
		return asmServiceOperationEClass;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EAttribute getAsmServiceOperation_Name()
	{
		return (EAttribute)asmServiceOperationEClass.getEStructuralFeatures().get(0);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EReference getAsmServiceOperation_Parameters()
	{
		return (EReference)asmServiceOperationEClass.getEStructuralFeatures().get(1);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EReference getAsmServiceOperation_Raises()
	{
		return (EReference)asmServiceOperationEClass.getEStructuralFeatures().get(2);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EReference getAsmServiceOperation_Guards()
	{
		return (EReference)asmServiceOperationEClass.getEStructuralFeatures().get(3);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EReference getAsmServiceOperation_Effects()
	{
		return (EReference)asmServiceOperationEClass.getEStructuralFeatures().get(4);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EClass getAsmServiceParameter()
	{
		return asmServiceParameterEClass;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EAttribute getAsmServiceParameter_Direction()
	{
		return (EAttribute)asmServiceParameterEClass.getEStructuralFeatures().get(0);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EEnum getAsmServiceKind()
	{
		return asmServiceKindEEnum;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EEnum getAsmParameterDirection()
	{
		return asmParameterDirectionEEnum;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public AsmFactory getAsmFactory()
	{
		return (AsmFactory)getEFactoryInstance();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private boolean isCreated = false;

	/**
	 * Creates the meta-model objects for the package.  This method is
	 * guarded to have no affect on any invocation but its first.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void createPackageContents()
	{
		if (isCreated) return;
		isCreated = true;

		// Create classes and their features
		applicationServiceModelEClass = createEClass(APPLICATION_SERVICE_MODEL);

		asmApplicationEClass = createEClass(ASM_APPLICATION);
		createEReference(asmApplicationEClass, ASM_APPLICATION__MODEL);
		createEReference(asmApplicationEClass, ASM_APPLICATION__SERVICES);
		createEReference(asmApplicationEClass, ASM_APPLICATION__ACTORS);

		asmServiceInterfaceEClass = createEClass(ASM_SERVICE_INTERFACE);
		createEReference(asmServiceInterfaceEClass, ASM_SERVICE_INTERFACE__INTERFACE);
		createEReference(asmServiceInterfaceEClass, ASM_SERVICE_INTERFACE__CORE);
		createEReference(asmServiceInterfaceEClass, ASM_SERVICE_INTERFACE__EXCEPTIONS);
		createEReference(asmServiceInterfaceEClass, ASM_SERVICE_INTERFACE__OPERATIONS);

		asmExceptionEClass = createEClass(ASM_EXCEPTION);

		asmActorEClass = createEClass(ASM_ACTOR);
		createEAttribute(asmActorEClass, ASM_ACTOR__NAME);

		asmWatchdogEClass = createEClass(ASM_WATCHDOG);

		asmHumanEClass = createEClass(ASM_HUMAN);

		asmServiceOperationEClass = createEClass(ASM_SERVICE_OPERATION);
		createEAttribute(asmServiceOperationEClass, ASM_SERVICE_OPERATION__NAME);
		createEReference(asmServiceOperationEClass, ASM_SERVICE_OPERATION__PARAMETERS);
		createEReference(asmServiceOperationEClass, ASM_SERVICE_OPERATION__RAISES);
		createEReference(asmServiceOperationEClass, ASM_SERVICE_OPERATION__GUARDS);
		createEReference(asmServiceOperationEClass, ASM_SERVICE_OPERATION__EFFECTS);

		asmServiceParameterEClass = createEClass(ASM_SERVICE_PARAMETER);
		createEAttribute(asmServiceParameterEClass, ASM_SERVICE_PARAMETER__DIRECTION);

		// Create enums
		asmServiceKindEEnum = createEEnum(ASM_SERVICE_KIND);
		asmParameterDirectionEEnum = createEEnum(ASM_PARAMETER_DIRECTION);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	private boolean isInitialized = false;

	/**
	 * Complete the initialization of the package and its meta-model.  This
	 * method is guarded to have no affect on any invocation but its first.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void initializePackageContents()
	{
		if (isInitialized) return;
		isInitialized = true;

		// Initialize package
		setName(eNAME);
		setNsPrefix(eNS_PREFIX);
		setNsURI(eNS_URI);

		// Obtain other dependent packages
		BasePackage theBasePackage = (BasePackage)EPackage.Registry.INSTANCE.getEPackage(BasePackage.eNS_URI);
		SimPackage theSimPackage = (SimPackage)EPackage.Registry.INSTANCE.getEPackage(SimPackage.eNS_URI);

		// Create type parameters

		// Set bounds for type parameters

		// Add supertypes to classes
		applicationServiceModelEClass.getESuperTypes().add(theBasePackage.getDModel());
		applicationServiceModelEClass.getESuperTypes().add(theBasePackage.getIDiagramRoot());
		applicationServiceModelEClass.getESuperTypes().add(theBasePackage.getIStaticReferenceTarget());
		asmApplicationEClass.getESuperTypes().add(this.getApplicationServiceModel());
		asmServiceInterfaceEClass.getESuperTypes().add(this.getApplicationServiceModel());
		asmExceptionEClass.getESuperTypes().add(theBasePackage.getDNamedElement());
		asmWatchdogEClass.getESuperTypes().add(this.getAsmActor());
		asmHumanEClass.getESuperTypes().add(this.getAsmActor());
		asmServiceOperationEClass.getESuperTypes().add(theBasePackage.getINavigableMemberContainer());
		asmServiceParameterEClass.getESuperTypes().add(theBasePackage.getDNavigableMember());

		// Initialize classes, features, and operations; add parameters
		initEClass(applicationServiceModelEClass, ApplicationServiceModel.class, "ApplicationServiceModel", IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

		initEClass(asmApplicationEClass, AsmApplication.class, "AsmApplication", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
		initEReference(getAsmApplication_Model(), theSimPackage.getSystemInformationModel(), null, "model", null, 0, 1, AsmApplication.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
		initEReference(getAsmApplication_Services(), this.getAsmServiceInterface(), null, "services", null, 0, -1, AsmApplication.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
		initEReference(getAsmApplication_Actors(), this.getAsmActor(), null, "actors", null, 0, -1, AsmApplication.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

		initEClass(asmServiceInterfaceEClass, AsmServiceInterface.class, "AsmServiceInterface", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
		initEReference(getAsmServiceInterface_Interface(), theSimPackage.getSystemInformationModel(), null, "interface", null, 0, 1, AsmServiceInterface.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
		initEReference(getAsmServiceInterface_Core(), theSimPackage.getSystemInformationModel(), null, "core", null, 0, 1, AsmServiceInterface.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
		initEReference(getAsmServiceInterface_Exceptions(), this.getAsmException(), null, "exceptions", null, 0, -1, AsmServiceInterface.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
		initEReference(getAsmServiceInterface_Operations(), this.getAsmServiceOperation(), null, "operations", null, 0, -1, AsmServiceInterface.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

		initEClass(asmExceptionEClass, AsmException.class, "AsmException", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

		initEClass(asmActorEClass, AsmActor.class, "AsmActor", IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
		initEAttribute(getAsmActor_Name(), ecorePackage.getEString(), "name", null, 0, 1, AsmActor.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

		initEClass(asmWatchdogEClass, AsmWatchdog.class, "AsmWatchdog", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

		initEClass(asmHumanEClass, AsmHuman.class, "AsmHuman", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

		initEClass(asmServiceOperationEClass, AsmServiceOperation.class, "AsmServiceOperation", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
		initEAttribute(getAsmServiceOperation_Name(), ecorePackage.getEString(), "name", null, 0, 1, AsmServiceOperation.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
		initEReference(getAsmServiceOperation_Parameters(), this.getAsmServiceParameter(), null, "parameters", null, 0, -1, AsmServiceOperation.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
		initEReference(getAsmServiceOperation_Raises(), this.getAsmException(), null, "raises", null, 0, -1, AsmServiceOperation.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
		initEReference(getAsmServiceOperation_Guards(), theBasePackage.getDExpression(), null, "guards", null, 0, -1, AsmServiceOperation.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
		initEReference(getAsmServiceOperation_Effects(), theBasePackage.getDExpression(), null, "effects", null, 0, -1, AsmServiceOperation.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

		initEClass(asmServiceParameterEClass, AsmServiceParameter.class, "AsmServiceParameter", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
		initEAttribute(getAsmServiceParameter_Direction(), this.getAsmParameterDirection(), "direction", null, 0, 1, AsmServiceParameter.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

		// Initialize enums and add enum literals
		initEEnum(asmServiceKindEEnum, AsmServiceKind.class, "AsmServiceKind");
		addEEnumLiteral(asmServiceKindEEnum, AsmServiceKind.SYNCHRONOUS);
		addEEnumLiteral(asmServiceKindEEnum, AsmServiceKind.ASYNCHRONOUS);

		initEEnum(asmParameterDirectionEEnum, AsmParameterDirection.class, "AsmParameterDirection");
		addEEnumLiteral(asmParameterDirectionEEnum, AsmParameterDirection.INBOUND);
		addEEnumLiteral(asmParameterDirectionEEnum, AsmParameterDirection.OUTBOUND);

		// Create resource
		createResource(eNS_URI);
	}

} //AsmPackageImpl
