/*
 * generated by Xtext 2.17.1
 */
grammar InternalAsm;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package com.mimacom.ddd.sm.asm.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package com.mimacom.ddd.sm.asm.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import com.mimacom.ddd.sm.asm.services.AsmGrammarAccess;

}

@parser::members {

 	private AsmGrammarAccess grammarAccess;

    public InternalAsmParser(TokenStream input, AsmGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Model";
   	}

   	@Override
   	protected AsmGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	iv_ruleModel=ruleModel
	{ $current=$iv_ruleModel.current; }
	EOF;

// Rule Model
ruleModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getModelAccess().getSApplicationParserRuleCall_0());
		}
		this_SApplication_0=ruleSApplication
		{
			$current = $this_SApplication_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getModelAccess().getSServiceInterfaceParserRuleCall_1());
		}
		this_SServiceInterface_1=ruleSServiceInterface
		{
			$current = $this_SServiceInterface_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleSApplication
entryRuleSApplication returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSApplicationRule()); }
	iv_ruleSApplication=ruleSApplication
	{ $current=$iv_ruleSApplication.current; }
	EOF;

// Rule SApplication
ruleSApplication returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='application'
		{
			newLeafNode(otherlv_0, grammarAccess.getSApplicationAccess().getApplicationKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSApplicationAccess().getNameSQualifiedNameParserRuleCall_1_0());
				}
				lv_name_1_0=ruleSQualifiedName
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSApplicationRule());
					}
					set(
						$current,
						"name",
						lv_name_1_0,
						"com.mimacom.ddd.sm.asm.Asm.SQualifiedName");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getSApplicationAccess().getImportsSImportParserRuleCall_2_0());
				}
				lv_imports_2_0=ruleSImport
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSApplicationRule());
					}
					add(
						$current,
						"imports",
						lv_imports_2_0,
						"com.mimacom.ddd.sm.asm.Asm.SImport");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_3='information'
		{
			newLeafNode(otherlv_3, grammarAccess.getSApplicationAccess().getInformationKeyword_3());
		}
		otherlv_4='model'
		{
			newLeafNode(otherlv_4, grammarAccess.getSApplicationAccess().getModelKeyword_4());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSApplicationRule());
					}
				}
				otherlv_5=RULE_ID
				{
					newLeafNode(otherlv_5, grammarAccess.getSApplicationAccess().getModelSInformationModelCrossReference_5_0());
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getSApplicationAccess().getActorsSActorParserRuleCall_6_0());
				}
				lv_actors_6_0=ruleSActor
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSApplicationRule());
					}
					add(
						$current,
						"actors",
						lv_actors_6_0,
						"com.mimacom.ddd.sm.asm.Asm.SActor");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleSServiceInterface
entryRuleSServiceInterface returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSServiceInterfaceRule()); }
	iv_ruleSServiceInterface=ruleSServiceInterface
	{ $current=$iv_ruleSServiceInterface.current; }
	EOF;

// Rule SServiceInterface
ruleSServiceInterface returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='service'
		{
			newLeafNode(otherlv_0, grammarAccess.getSServiceInterfaceAccess().getServiceKeyword_0());
		}
		otherlv_1='interface'
		{
			newLeafNode(otherlv_1, grammarAccess.getSServiceInterfaceAccess().getInterfaceKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSServiceInterfaceAccess().getNameSQualifiedNameParserRuleCall_2_0());
				}
				lv_name_2_0=ruleSQualifiedName
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSServiceInterfaceRule());
					}
					set(
						$current,
						"name",
						lv_name_2_0,
						"com.mimacom.ddd.sm.asm.Asm.SQualifiedName");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getSServiceInterfaceAccess().getImportsSImportParserRuleCall_3_0());
				}
				lv_imports_3_0=ruleSImport
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSServiceInterfaceRule());
					}
					add(
						$current,
						"imports",
						lv_imports_3_0,
						"com.mimacom.ddd.sm.asm.Asm.SImport");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_4='information'
		{
			newLeafNode(otherlv_4, grammarAccess.getSServiceInterfaceAccess().getInformationKeyword_4());
		}
		otherlv_5='model'
		{
			newLeafNode(otherlv_5, grammarAccess.getSServiceInterfaceAccess().getModelKeyword_5());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSServiceInterfaceRule());
					}
				}
				otherlv_6=RULE_ID
				{
					newLeafNode(otherlv_6, grammarAccess.getSServiceInterfaceAccess().getModelSInformationModelCrossReference_6_0());
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getSServiceInterfaceAccess().getOperationsSServiceOperationParserRuleCall_7_0());
				}
				lv_operations_7_0=ruleSServiceOperation
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSServiceInterfaceRule());
					}
					add(
						$current,
						"operations",
						lv_operations_7_0,
						"com.mimacom.ddd.sm.asm.Asm.SServiceOperation");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleSImport
entryRuleSImport returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSImportRule()); }
	iv_ruleSImport=ruleSImport
	{ $current=$iv_ruleSImport.current; }
	EOF;

// Rule SImport
ruleSImport returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='import'
		{
			newLeafNode(otherlv_0, grammarAccess.getSImportAccess().getImportKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSImportAccess().getImportedNamespaceSQualifiedNameWithWildcardParserRuleCall_1_0());
				}
				lv_importedNamespace_1_0=ruleSQualifiedNameWithWildcard
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSImportRule());
					}
					set(
						$current,
						"importedNamespace",
						lv_importedNamespace_1_0,
						"com.mimacom.ddd.sm.asm.Asm.SQualifiedNameWithWildcard");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleSActor
entryRuleSActor returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSActorRule()); }
	iv_ruleSActor=ruleSActor
	{ $current=$iv_ruleSActor.current; }
	EOF;

// Rule SActor
ruleSActor returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getSActorAccess().getSWatchdogParserRuleCall_0());
		}
		this_SWatchdog_0=ruleSWatchdog
		{
			$current = $this_SWatchdog_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getSActorAccess().getSHumanParserRuleCall_1());
		}
		this_SHuman_1=ruleSHuman
		{
			$current = $this_SHuman_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleSWatchdog
entryRuleSWatchdog returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSWatchdogRule()); }
	iv_ruleSWatchdog=ruleSWatchdog
	{ $current=$iv_ruleSWatchdog.current; }
	EOF;

// Rule SWatchdog
ruleSWatchdog returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='watchdog'
		{
			newLeafNode(otherlv_0, grammarAccess.getSWatchdogAccess().getWatchdogKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getSWatchdogAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSWatchdogRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
	)
;

// Entry rule entryRuleSHuman
entryRuleSHuman returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSHumanRule()); }
	iv_ruleSHuman=ruleSHuman
	{ $current=$iv_ruleSHuman.current; }
	EOF;

// Rule SHuman
ruleSHuman returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='human'
		{
			newLeafNode(otherlv_0, grammarAccess.getSHumanAccess().getHumanKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getSHumanAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSHumanRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
	)
;

// Entry rule entryRuleSServiceOperation
entryRuleSServiceOperation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSServiceOperationRule()); }
	iv_ruleSServiceOperation=ruleSServiceOperation
	{ $current=$iv_ruleSServiceOperation.current; }
	EOF;

// Rule SServiceOperation
ruleSServiceOperation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='operation'
		{
			newLeafNode(otherlv_0, grammarAccess.getSServiceOperationAccess().getOperationKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getSServiceOperationAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSServiceOperationRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='('
		{
			newLeafNode(otherlv_2, grammarAccess.getSServiceOperationAccess().getLeftParenthesisKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSServiceOperationAccess().getParametersSOperationParameterParserRuleCall_3_0());
				}
				lv_parameters_3_0=ruleSOperationParameter
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSServiceOperationRule());
					}
					add(
						$current,
						"parameters",
						lv_parameters_3_0,
						"com.mimacom.ddd.sm.asm.Asm.SOperationParameter");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_4=')'
		{
			newLeafNode(otherlv_4, grammarAccess.getSServiceOperationAccess().getRightParenthesisKeyword_4());
		}
		(
			otherlv_5='raises'
			{
				newLeafNode(otherlv_5, grammarAccess.getSServiceOperationAccess().getRaisesKeyword_5_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getSServiceOperationAccess().getExceptionsSExceptionParserRuleCall_5_1_0());
					}
					lv_exceptions_6_0=ruleSException
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSServiceOperationRule());
						}
						add(
							$current,
							"exceptions",
							lv_exceptions_6_0,
							"com.mimacom.ddd.sm.asm.Asm.SException");
						afterParserOrEnumRuleCall();
					}
				)
			)+
		)?
	)
;

// Entry rule entryRuleSOperationParameter
entryRuleSOperationParameter returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSOperationParameterRule()); }
	iv_ruleSOperationParameter=ruleSOperationParameter
	{ $current=$iv_ruleSOperationParameter.current; }
	EOF;

// Rule SOperationParameter
ruleSOperationParameter returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_name_0_0=RULE_ID
			{
				newLeafNode(lv_name_0_0, grammarAccess.getSOperationParameterAccess().getNameIDTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getSOperationParameterRule());
				}
				setWithLastConsumed(
					$current,
					"name",
					lv_name_0_0,
					"org.eclipse.xtext.common.Terminals.ID");
			}
		)
	)
;

// Entry rule entryRuleSException
entryRuleSException returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSExceptionRule()); }
	iv_ruleSException=ruleSException
	{ $current=$iv_ruleSException.current; }
	EOF;

// Rule SException
ruleSException returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_name_0_0=RULE_ID
			{
				newLeafNode(lv_name_0_0, grammarAccess.getSExceptionAccess().getNameIDTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getSExceptionRule());
				}
				setWithLastConsumed(
					$current,
					"name",
					lv_name_0_0,
					"org.eclipse.xtext.common.Terminals.ID");
			}
		)
	)
;

// Entry rule entryRuleSQualifiedNameWithWildcard
entryRuleSQualifiedNameWithWildcard returns [String current=null]:
	{ newCompositeNode(grammarAccess.getSQualifiedNameWithWildcardRule()); }
	iv_ruleSQualifiedNameWithWildcard=ruleSQualifiedNameWithWildcard
	{ $current=$iv_ruleSQualifiedNameWithWildcard.current.getText(); }
	EOF;

// Rule SQualifiedNameWithWildcard
ruleSQualifiedNameWithWildcard returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getSQualifiedNameWithWildcardAccess().getSQualifiedNameParserRuleCall_0());
		}
		this_SQualifiedName_0=ruleSQualifiedName
		{
			$current.merge(this_SQualifiedName_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		(
			kw='.*'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getSQualifiedNameWithWildcardAccess().getFullStopAsteriskKeyword_1());
			}
		)?
	)
;

// Entry rule entryRuleSQualifiedName
entryRuleSQualifiedName returns [String current=null]:
	{ newCompositeNode(grammarAccess.getSQualifiedNameRule()); }
	iv_ruleSQualifiedName=ruleSQualifiedName
	{ $current=$iv_ruleSQualifiedName.current.getText(); }
	EOF;

// Rule SQualifiedName
ruleSQualifiedName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_ID_0=RULE_ID
		{
			$current.merge(this_ID_0);
		}
		{
			newLeafNode(this_ID_0, grammarAccess.getSQualifiedNameAccess().getIDTerminalRuleCall_0());
		}
		(
			kw='.'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getSQualifiedNameAccess().getFullStopKeyword_1_0());
			}
			this_ID_2=RULE_ID
			{
				$current.merge(this_ID_2);
			}
			{
				newLeafNode(this_ID_2, grammarAccess.getSQualifiedNameAccess().getIDTerminalRuleCall_1_1());
			}
		)*
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
