/*
 * generated by Xtext 2.17.1
 */
package com.mimacom.ddd.sm.asm.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class AsmGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.sm.asm.Asm.Model");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSApplicationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSServiceInterfaceParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Model:
		//	SApplication | SServiceInterface
		//	//	(description=DRichText)?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//SApplication | SServiceInterface
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//SApplication
		public RuleCall getSApplicationParserRuleCall_0() { return cSApplicationParserRuleCall_0; }
		
		//SServiceInterface
		public RuleCall getSServiceInterfaceParserRuleCall_1() { return cSServiceInterfaceParserRuleCall_1; }
	}
	public class SApplicationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.sm.asm.Asm.SApplication");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cApplicationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cImportsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cImportsDImportParserRuleCall_2_0 = (RuleCall)cImportsAssignment_2.eContents().get(0);
		private final Keyword cInformationKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cModelKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cModelAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cModelSInformationModelCrossReference_5_0 = (CrossReference)cModelAssignment_5.eContents().get(0);
		private final RuleCall cModelSInformationModelIDTerminalRuleCall_5_0_1 = (RuleCall)cModelSInformationModelCrossReference_5_0.eContents().get(1);
		private final Assignment cActorsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cActorsSActorParserRuleCall_6_0 = (RuleCall)cActorsAssignment_6.eContents().get(0);
		
		//SApplication:
		//	'application'
		//	name=SQualifiedName
		//	imports+=DImport*
		//	'information' 'model' model=[SInformationModel] actors+=SActor*;
		@Override public ParserRule getRule() { return rule; }
		
		//'application' name=SQualifiedName imports+=DImport* 'information' 'model' model=[SInformationModel] actors+=SActor*
		public Group getGroup() { return cGroup; }
		
		//'application'
		public Keyword getApplicationKeyword_0() { return cApplicationKeyword_0; }
		
		//name=SQualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//SQualifiedName
		public RuleCall getNameSQualifiedNameParserRuleCall_1_0() { return cNameSQualifiedNameParserRuleCall_1_0; }
		
		//imports+=DImport*
		public Assignment getImportsAssignment_2() { return cImportsAssignment_2; }
		
		//DImport
		public RuleCall getImportsDImportParserRuleCall_2_0() { return cImportsDImportParserRuleCall_2_0; }
		
		//'information'
		public Keyword getInformationKeyword_3() { return cInformationKeyword_3; }
		
		//'model'
		public Keyword getModelKeyword_4() { return cModelKeyword_4; }
		
		//model=[SInformationModel]
		public Assignment getModelAssignment_5() { return cModelAssignment_5; }
		
		//[SInformationModel]
		public CrossReference getModelSInformationModelCrossReference_5_0() { return cModelSInformationModelCrossReference_5_0; }
		
		//ID
		public RuleCall getModelSInformationModelIDTerminalRuleCall_5_0_1() { return cModelSInformationModelIDTerminalRuleCall_5_0_1; }
		
		//actors+=SActor*
		public Assignment getActorsAssignment_6() { return cActorsAssignment_6; }
		
		//SActor
		public RuleCall getActorsSActorParserRuleCall_6_0() { return cActorsSActorParserRuleCall_6_0; }
	}
	public class SServiceInterfaceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.sm.asm.Asm.SServiceInterface");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cServiceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cInterfaceKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameSQualifiedNameParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Assignment cImportsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cImportsDImportParserRuleCall_3_0 = (RuleCall)cImportsAssignment_3.eContents().get(0);
		private final Keyword cInformationKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cModelKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cModelAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final CrossReference cModelSInformationModelCrossReference_6_0 = (CrossReference)cModelAssignment_6.eContents().get(0);
		private final RuleCall cModelSInformationModelIDTerminalRuleCall_6_0_1 = (RuleCall)cModelSInformationModelCrossReference_6_0.eContents().get(1);
		private final Assignment cOperationsAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cOperationsSServiceOperationParserRuleCall_7_0 = (RuleCall)cOperationsAssignment_7.eContents().get(0);
		
		//SServiceInterface:
		//	'service' 'interface'
		//	name=SQualifiedName
		//	imports+=DImport*
		//	'information' 'model' model=[SInformationModel] operations+=SServiceOperation;
		@Override public ParserRule getRule() { return rule; }
		
		//'service' 'interface' name=SQualifiedName imports+=DImport* 'information' 'model' model=[SInformationModel]
		//operations+=SServiceOperation
		public Group getGroup() { return cGroup; }
		
		//'service'
		public Keyword getServiceKeyword_0() { return cServiceKeyword_0; }
		
		//'interface'
		public Keyword getInterfaceKeyword_1() { return cInterfaceKeyword_1; }
		
		//name=SQualifiedName
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//SQualifiedName
		public RuleCall getNameSQualifiedNameParserRuleCall_2_0() { return cNameSQualifiedNameParserRuleCall_2_0; }
		
		//imports+=DImport*
		public Assignment getImportsAssignment_3() { return cImportsAssignment_3; }
		
		//DImport
		public RuleCall getImportsDImportParserRuleCall_3_0() { return cImportsDImportParserRuleCall_3_0; }
		
		//'information'
		public Keyword getInformationKeyword_4() { return cInformationKeyword_4; }
		
		//'model'
		public Keyword getModelKeyword_5() { return cModelKeyword_5; }
		
		//model=[SInformationModel]
		public Assignment getModelAssignment_6() { return cModelAssignment_6; }
		
		//[SInformationModel]
		public CrossReference getModelSInformationModelCrossReference_6_0() { return cModelSInformationModelCrossReference_6_0; }
		
		//ID
		public RuleCall getModelSInformationModelIDTerminalRuleCall_6_0_1() { return cModelSInformationModelIDTerminalRuleCall_6_0_1; }
		
		//operations+=SServiceOperation
		public Assignment getOperationsAssignment_7() { return cOperationsAssignment_7; }
		
		//SServiceOperation
		public RuleCall getOperationsSServiceOperationParserRuleCall_7_0() { return cOperationsSServiceOperationParserRuleCall_7_0; }
	}
	public class DImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.sm.asm.Asm.DImport");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImportedNamespaceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportedNamespaceSQualifiedNameWithWildcardParserRuleCall_1_0 = (RuleCall)cImportedNamespaceAssignment_1.eContents().get(0);
		
		//DImport:
		//	'import' importedNamespace=SQualifiedNameWithWildcard;
		@Override public ParserRule getRule() { return rule; }
		
		//'import' importedNamespace=SQualifiedNameWithWildcard
		public Group getGroup() { return cGroup; }
		
		//'import'
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }
		
		//importedNamespace=SQualifiedNameWithWildcard
		public Assignment getImportedNamespaceAssignment_1() { return cImportedNamespaceAssignment_1; }
		
		//SQualifiedNameWithWildcard
		public RuleCall getImportedNamespaceSQualifiedNameWithWildcardParserRuleCall_1_0() { return cImportedNamespaceSQualifiedNameWithWildcardParserRuleCall_1_0; }
	}
	public class SActorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.sm.asm.Asm.SActor");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSWatchdogParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSHumanParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//SActor:
		//	SWatchdog | SHuman;
		@Override public ParserRule getRule() { return rule; }
		
		//SWatchdog | SHuman
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//SWatchdog
		public RuleCall getSWatchdogParserRuleCall_0() { return cSWatchdogParserRuleCall_0; }
		
		//SHuman
		public RuleCall getSHumanParserRuleCall_1() { return cSHumanParserRuleCall_1; }
	}
	public class SWatchdogElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.sm.asm.Asm.SWatchdog");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWatchdogKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//SWatchdog:
		//	'watchdog'
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'watchdog' name=ID
		public Group getGroup() { return cGroup; }
		
		//'watchdog'
		public Keyword getWatchdogKeyword_0() { return cWatchdogKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class SHumanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.sm.asm.Asm.SHuman");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHumanKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//SHuman:
		//	'human'
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'human' name=ID
		public Group getGroup() { return cGroup; }
		
		//'human'
		public Keyword getHumanKeyword_0() { return cHumanKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class SServiceOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.sm.asm.Asm.SServiceOperation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOperationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cParametersAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cParametersSOperationParameterParserRuleCall_3_0 = (RuleCall)cParametersAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cRaisesKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cExceptionsAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cExceptionsSExceptionParserRuleCall_5_1_0 = (RuleCall)cExceptionsAssignment_5_1.eContents().get(0);
		
		//SServiceOperation:
		//	'operation'
		//	name=ID
		//	'('
		//	parameters+=SOperationParameter*
		//	')' ('raises' exceptions+=SException+)?;
		@Override public ParserRule getRule() { return rule; }
		
		//'operation' name=ID '(' parameters+=SOperationParameter* ')' ('raises' exceptions+=SException+)?
		public Group getGroup() { return cGroup; }
		
		//'operation'
		public Keyword getOperationKeyword_0() { return cOperationKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//parameters+=SOperationParameter*
		public Assignment getParametersAssignment_3() { return cParametersAssignment_3; }
		
		//SOperationParameter
		public RuleCall getParametersSOperationParameterParserRuleCall_3_0() { return cParametersSOperationParameterParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
		
		//('raises' exceptions+=SException+)?
		public Group getGroup_5() { return cGroup_5; }
		
		//'raises'
		public Keyword getRaisesKeyword_5_0() { return cRaisesKeyword_5_0; }
		
		//exceptions+=SException+
		public Assignment getExceptionsAssignment_5_1() { return cExceptionsAssignment_5_1; }
		
		//SException
		public RuleCall getExceptionsSExceptionParserRuleCall_5_1_0() { return cExceptionsSExceptionParserRuleCall_5_1_0; }
	}
	public class SOperationParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.sm.asm.Asm.SOperationParameter");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//SOperationParameter:
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class SExceptionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.sm.asm.Asm.SException");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//SException:
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class SQualifiedNameWithWildcardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.sm.asm.Asm.SQualifiedNameWithWildcard");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cSQualifiedNameParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopAsteriskKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//SQualifiedNameWithWildcard:
		//	SQualifiedName '.*'?;
		@Override public ParserRule getRule() { return rule; }
		
		//SQualifiedName '.*'?
		public Group getGroup() { return cGroup; }
		
		//SQualifiedName
		public RuleCall getSQualifiedNameParserRuleCall_0() { return cSQualifiedNameParserRuleCall_0; }
		
		//'.*'?
		public Keyword getFullStopAsteriskKeyword_1() { return cFullStopAsteriskKeyword_1; }
	}
	public class SQualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.sm.asm.Asm.SQualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//SQualifiedName:
		//	ID ('.' ID)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ID ('.' ID)*
		public Group getGroup() { return cGroup; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//('.' ID)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	
	
	private final ModelElements pModel;
	private final SApplicationElements pSApplication;
	private final SServiceInterfaceElements pSServiceInterface;
	private final DImportElements pDImport;
	private final SActorElements pSActor;
	private final SWatchdogElements pSWatchdog;
	private final SHumanElements pSHuman;
	private final SServiceOperationElements pSServiceOperation;
	private final SOperationParameterElements pSOperationParameter;
	private final SExceptionElements pSException;
	private final SQualifiedNameWithWildcardElements pSQualifiedNameWithWildcard;
	private final SQualifiedNameElements pSQualifiedName;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public AsmGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pSApplication = new SApplicationElements();
		this.pSServiceInterface = new SServiceInterfaceElements();
		this.pDImport = new DImportElements();
		this.pSActor = new SActorElements();
		this.pSWatchdog = new SWatchdogElements();
		this.pSHuman = new SHumanElements();
		this.pSServiceOperation = new SServiceOperationElements();
		this.pSOperationParameter = new SOperationParameterElements();
		this.pSException = new SExceptionElements();
		this.pSQualifiedNameWithWildcard = new SQualifiedNameWithWildcardElements();
		this.pSQualifiedName = new SQualifiedNameElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("com.mimacom.ddd.sm.asm.Asm".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	SApplication | SServiceInterface
	//	//	(description=DRichText)?
	//;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//SApplication:
	//	'application'
	//	name=SQualifiedName
	//	imports+=DImport*
	//	'information' 'model' model=[SInformationModel] actors+=SActor*;
	public SApplicationElements getSApplicationAccess() {
		return pSApplication;
	}
	
	public ParserRule getSApplicationRule() {
		return getSApplicationAccess().getRule();
	}
	
	//SServiceInterface:
	//	'service' 'interface'
	//	name=SQualifiedName
	//	imports+=DImport*
	//	'information' 'model' model=[SInformationModel] operations+=SServiceOperation;
	public SServiceInterfaceElements getSServiceInterfaceAccess() {
		return pSServiceInterface;
	}
	
	public ParserRule getSServiceInterfaceRule() {
		return getSServiceInterfaceAccess().getRule();
	}
	
	//DImport:
	//	'import' importedNamespace=SQualifiedNameWithWildcard;
	public DImportElements getDImportAccess() {
		return pDImport;
	}
	
	public ParserRule getDImportRule() {
		return getDImportAccess().getRule();
	}
	
	//SActor:
	//	SWatchdog | SHuman;
	public SActorElements getSActorAccess() {
		return pSActor;
	}
	
	public ParserRule getSActorRule() {
		return getSActorAccess().getRule();
	}
	
	//SWatchdog:
	//	'watchdog'
	//	name=ID;
	public SWatchdogElements getSWatchdogAccess() {
		return pSWatchdog;
	}
	
	public ParserRule getSWatchdogRule() {
		return getSWatchdogAccess().getRule();
	}
	
	//SHuman:
	//	'human'
	//	name=ID;
	public SHumanElements getSHumanAccess() {
		return pSHuman;
	}
	
	public ParserRule getSHumanRule() {
		return getSHumanAccess().getRule();
	}
	
	//SServiceOperation:
	//	'operation'
	//	name=ID
	//	'('
	//	parameters+=SOperationParameter*
	//	')' ('raises' exceptions+=SException+)?;
	public SServiceOperationElements getSServiceOperationAccess() {
		return pSServiceOperation;
	}
	
	public ParserRule getSServiceOperationRule() {
		return getSServiceOperationAccess().getRule();
	}
	
	//SOperationParameter:
	//	name=ID;
	public SOperationParameterElements getSOperationParameterAccess() {
		return pSOperationParameter;
	}
	
	public ParserRule getSOperationParameterRule() {
		return getSOperationParameterAccess().getRule();
	}
	
	//SException:
	//	name=ID;
	public SExceptionElements getSExceptionAccess() {
		return pSException;
	}
	
	public ParserRule getSExceptionRule() {
		return getSExceptionAccess().getRule();
	}
	
	//SQualifiedNameWithWildcard:
	//	SQualifiedName '.*'?;
	public SQualifiedNameWithWildcardElements getSQualifiedNameWithWildcardAccess() {
		return pSQualifiedNameWithWildcard;
	}
	
	public ParserRule getSQualifiedNameWithWildcardRule() {
		return getSQualifiedNameWithWildcardAccess().getRule();
	}
	
	//SQualifiedName:
	//	ID ('.' ID)*;
	public SQualifiedNameElements getSQualifiedNameAccess() {
		return pSQualifiedName;
	}
	
	public ParserRule getSQualifiedNameRule() {
		return getSQualifiedNameAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
