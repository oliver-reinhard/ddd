/*
 * generated by Xtext 2.17.1
 */
package com.mimacom.ddd.sm.asm.serializer;

import com.google.inject.Inject;
import com.mimacom.ddd.dm.base.BasePackage;
import com.mimacom.ddd.dm.base.DImport;
import com.mimacom.ddd.sm.asm.AsmPackage;
import com.mimacom.ddd.sm.asm.SApplication;
import com.mimacom.ddd.sm.asm.SException;
import com.mimacom.ddd.sm.asm.SHuman;
import com.mimacom.ddd.sm.asm.SOperationParameter;
import com.mimacom.ddd.sm.asm.SServiceInterface;
import com.mimacom.ddd.sm.asm.SServiceOperation;
import com.mimacom.ddd.sm.asm.SWatchdog;
import com.mimacom.ddd.sm.asm.services.AsmGrammarAccess;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class AsmSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private AsmGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == AsmPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case AsmPackage.SAPPLICATION:
				sequence_SApplication(context, (SApplication) semanticObject); 
				return; 
			case AsmPackage.SEXCEPTION:
				sequence_SException(context, (SException) semanticObject); 
				return; 
			case AsmPackage.SHUMAN:
				sequence_SHuman(context, (SHuman) semanticObject); 
				return; 
			case AsmPackage.SOPERATION_PARAMETER:
				sequence_SOperationParameter(context, (SOperationParameter) semanticObject); 
				return; 
			case AsmPackage.SSERVICE_INTERFACE:
				sequence_SServiceInterface(context, (SServiceInterface) semanticObject); 
				return; 
			case AsmPackage.SSERVICE_OPERATION:
				sequence_SServiceOperation(context, (SServiceOperation) semanticObject); 
				return; 
			case AsmPackage.SWATCHDOG:
				sequence_SWatchdog(context, (SWatchdog) semanticObject); 
				return; 
			}
		else if (epackage == BasePackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case BasePackage.DIMPORT:
				sequence_DImport(context, (DImport) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     DImport returns DImport
	 *
	 * Constraint:
	 *     importedNamespace=SQualifiedNameWithWildcard
	 */
	protected void sequence_DImport(ISerializationContext context, DImport semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BasePackage.Literals.DIMPORT__IMPORTED_NAMESPACE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BasePackage.Literals.DIMPORT__IMPORTED_NAMESPACE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDImportAccess().getImportedNamespaceSQualifiedNameWithWildcardParserRuleCall_1_0(), semanticObject.getImportedNamespace());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Model returns SApplication
	 *     SApplication returns SApplication
	 *
	 * Constraint:
	 *     (name=SQualifiedName imports+=DImport* model=[SInformationModel|ID] actors+=SActor*)
	 */
	protected void sequence_SApplication(ISerializationContext context, SApplication semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SException returns SException
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_SException(ISerializationContext context, SException semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AsmPackage.Literals.SEXCEPTION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AsmPackage.Literals.SEXCEPTION__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSExceptionAccess().getNameIDTerminalRuleCall_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     SActor returns SHuman
	 *     SHuman returns SHuman
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_SHuman(ISerializationContext context, SHuman semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AsmPackage.Literals.SACTOR__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AsmPackage.Literals.SACTOR__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSHumanAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     SOperationParameter returns SOperationParameter
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_SOperationParameter(ISerializationContext context, SOperationParameter semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AsmPackage.Literals.SOPERATION_PARAMETER__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AsmPackage.Literals.SOPERATION_PARAMETER__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSOperationParameterAccess().getNameIDTerminalRuleCall_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Model returns SServiceInterface
	 *     SServiceInterface returns SServiceInterface
	 *
	 * Constraint:
	 *     (name=SQualifiedName imports+=DImport* model=[SInformationModel|ID] operations+=SServiceOperation)
	 */
	protected void sequence_SServiceInterface(ISerializationContext context, SServiceInterface semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SServiceOperation returns SServiceOperation
	 *
	 * Constraint:
	 *     (name=ID parameters+=SOperationParameter* exceptions+=SException*)
	 */
	protected void sequence_SServiceOperation(ISerializationContext context, SServiceOperation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SActor returns SWatchdog
	 *     SWatchdog returns SWatchdog
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_SWatchdog(ISerializationContext context, SWatchdog semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AsmPackage.Literals.SACTOR__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AsmPackage.Literals.SACTOR__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSWatchdogAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
}
