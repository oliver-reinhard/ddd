grammar com.mimacom.ddd.sm.asm.Asm with com.mimacom.ddd.dm.dmx.Dmx

import "http://www.mimacom.com/ddd/dm/base"
import "http://www.mimacom.com/ddd/dm/dmx" 
import "http://www.mimacom.com/ddd/sm/sim"
//import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://www.mimacom.com/ddd/sm/asm"

Model:
	SApplication | SServiceInterface
//	(description=DRichText)?
	;

SApplication:
	(imports+=DImport)*
	'application'
	name= DQualifiedName
	'information' 'model' model=[SInformationModel|DQualifiedName]
	(actors+=SActor)*;

SServiceInterface:
	(imports+=DImport)*
	'service' 'interface'
	name=DQualifiedName
	'interface' 'model' interface=[SInformationModel|DQualifiedName]
	'core' 'model' core=[SInformationModel|DQualifiedName]
	(exceptions+=DException)*
	(operations+=SServiceOperation)*;

SActor:
	SWatchdog | SHuman;

SWatchdog:
	'watchdog'
	name=ID;

SHuman:
	'human'
	name=ID;

SServiceOperation:
	'operation'
	name=ID
	'(' 	(parameters+=DServiceParameter ( "," parameters+=DServiceParameter)*)?
	')'
	('raises' raises+=[DException|ID]  ( "," raises+=[DException|ID])* )?
	'{'
	('guard' guards+=DExpression)*
	('effect' effects+=DExpression)*
	'}';

DServiceParameter:
	direction=DDirection
	name=ID
	':'
	type=[DType|ID]  (multiplicity=DMultiplicity)?
	(description=DRichText)?;

DException:
	'exception'
	name=ID
	(description=DRichText)?;
	
enum DServiceKind:
				SYNCHRONOUS = 'synchronous' | ASYNCHRONOUS = 'async';

enum DDirection:
				INBOUND = 'in' | OUTBOUND = 'out';