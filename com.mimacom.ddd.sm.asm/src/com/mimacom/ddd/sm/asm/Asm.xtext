grammar com.mimacom.ddd.sm.asm.Asm with com.mimacom.ddd.dm.dmx.Dmx

import "http://www.mimacom.com/ddd/dm/base"
import "http://www.mimacom.com/ddd/dm/dmx" 
import "http://www.mimacom.com/ddd/sm/sim"
//import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://www.mimacom.com/ddd/sm/asm"

@Override 
DNamespace:
	'system'
	name=DQualifiedName
	(imports+=DImport)*
	model=(AsmApplication | AsmServiceInterface);


AsmApplication:
	'application'
	name=ID
	('alias' alias=ID)?
	'information' 'model' model=[SystemInformationModel|DQualifiedName]
	(actors+=AsmActor)*;

AsmServiceInterface:
	'service' 'interface'
	name=ID
	('alias' alias=ID)?
	'interface' 'model' interface=[SystemInformationModel|DQualifiedName]
	'core' 'model' core=[SystemInformationModel|DQualifiedName]
	(exceptions+=AsmException)*
	(operations+=AsmServiceOperation)*;

AsmActor:
	AsmWatchdog | AsmHuman;

AsmWatchdog:
	'watchdog'
	name=ID;

AsmHuman:
	'human'
	name=ID;

AsmServiceOperation:
	'operation'
	name=ID
	'(' 	(parameters+=AsmServiceParameter ( "," parameters+=AsmServiceParameter)*)?
	')'
	('raises' raises+=[AsmException|ID]  ( "," raises+=[AsmException|ID])* )?
	'{'
	('guard' guards+=DExpression)*
	('effect' effects+=DExpression)*
	'}';

AsmServiceParameter:
	direction=AsmParameterDirection
	name=ID
	':'
	type=[DType|ID]  (multiplicity=DMultiplicity)?
	(description=DRichText)?;

AsmException:
	'exception'
	name=ID
	(description=DRichText)?;
	
enum AsmServiceKind:
				SYNCHRONOUS = 'synchronous' | ASYNCHRONOUS = 'async';

enum AsmParameterDirection:
				INBOUND = 'in' | OUTBOUND = 'out';