/**
 * generated by Xtext 2.16.0
 */
package com.mimacom.ddd.dm.dim.ui.labeling;

import com.google.inject.Inject;
import com.mimacom.ddd.dm.base.base.DAggregate;
import com.mimacom.ddd.dm.base.base.DFeature;
import com.mimacom.ddd.dm.base.base.DLiteral;
import com.mimacom.ddd.dm.base.base.DNamedPredicate;
import com.mimacom.ddd.dm.base.base.DQueryParameter;
import com.mimacom.ddd.dm.base.base.DType;
import com.mimacom.ddd.dm.base.transpose.TAggregateTransposition;
import com.mimacom.ddd.dm.base.transpose.TFeatureTransposition;
import com.mimacom.ddd.dm.base.transpose.TLiteralTransposition;
import com.mimacom.ddd.dm.base.transpose.TQueryParameterTransposition;
import com.mimacom.ddd.dm.base.transpose.TTypeTransposition;
import com.mimacom.ddd.dm.dim.DimUtil;
import com.mimacom.ddd.dm.dim.ui.labeling.DimLabelProvider;
import org.eclipse.emf.edit.ui.provider.AdapterFactoryLabelProvider;
import org.eclipse.xtext.xbase.lib.Extension;

/**
 * Provides labels for EObjects.
 * 
 * See https://www.eclipse.org/Xtext/documentation/304_ide_concepts.html#label-provider
 */
@SuppressWarnings("all")
public class TransposedDimLabelProvider extends DimLabelProvider {
  @Inject
  @Extension
  private DimUtil _dimUtil;
  
  @Inject
  public TransposedDimLabelProvider(final AdapterFactoryLabelProvider delegate) {
    super(delegate);
  }
  
  public String label(final DAggregate a) {
    String _name = a.getName();
    return ("Aggregate " + _name);
  }
  
  @Override
  public String text(final DAggregate a) {
    if ((a instanceof TAggregateTransposition)) {
      String _label = this._dimUtil.label(((TAggregateTransposition)a).getRule());
      return (">" + _label);
    }
    return this.label(a);
  }
  
  @Override
  public String text(final DType t) {
    if ((t instanceof TTypeTransposition)) {
      String _label = this._dimUtil.label(((TTypeTransposition)t).getRule());
      return (">" + _label);
    }
    return this._dimUtil.label(t);
  }
  
  public String text(final DLiteral literal) {
    if ((literal instanceof TLiteralTransposition)) {
      String _label = this._dimUtil.label(((TLiteralTransposition)literal).getRule());
      return (">" + _label);
    }
    return literal.getName();
  }
  
  @Override
  public String text(final DFeature f) {
    if ((f instanceof TFeatureTransposition)) {
      String _label = this._dimUtil.label(((TFeatureTransposition)f).getRule());
      return (">" + _label);
    }
    return this._dimUtil.label(f);
  }
  
  @Override
  public String text(final DQueryParameter p) {
    if ((p instanceof TQueryParameterTransposition)) {
      String _label = this._dimUtil.label(((TQueryParameterTransposition)p).getRule());
      return (">" + _label);
    }
    return this._dimUtil.label(p);
  }
  
  @Override
  public String text(final DNamedPredicate c) {
    return this._dimUtil.label(c);
  }
}
