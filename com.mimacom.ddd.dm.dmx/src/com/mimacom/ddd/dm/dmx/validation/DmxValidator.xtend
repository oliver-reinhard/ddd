/*
 * generated by Xtext 2.16.0
 */
package com.mimacom.ddd.dm.dmx.validation

import com.google.inject.Inject
import com.mimacom.ddd.dm.base.base.DComplexType
import com.mimacom.ddd.dm.base.base.DFeature
import com.mimacom.ddd.dm.base.base.DQuery
import com.mimacom.ddd.dm.base.base.DRichText
import com.mimacom.ddd.dm.base.styledText.parser.ErrorMessageAcceptor
import com.mimacom.ddd.dm.dmx.DmxAssignment
import com.mimacom.ddd.dm.dmx.DmxContextReference
import com.mimacom.ddd.dm.dmx.DmxFilter
import com.mimacom.ddd.dm.dmx.DmxListExpression
import com.mimacom.ddd.dm.dmx.DmxMemberNavigation
import com.mimacom.ddd.dm.dmx.DmxRichTextUtil
import com.mimacom.ddd.dm.dmx.DmxUrlLiteral
import java.net.MalformedURLException
import java.net.URL
import org.eclipse.xtext.validation.Check

/**
 * This class contains custom validation rules. 
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
class DmxValidator extends DmxTypeCheckingValidator implements ErrorMessageAcceptor {
	 
	@Inject extension DmxRichTextUtil

	@Check
	def checkAssignmentTarget(DmxAssignment a) {
		if (a.precedingNavigationSegment === null) {
			error("Assignment target must be an attribute of a complex type.", a, DMX.dmxAssignment_AssignToMember)
		} else if (a.assignToMember instanceof DQuery) {
			error("Cannot assign a value to a query.", a, DMX.dmxAssignment_AssignToMember)
		}
	}

	@Check
	def checkFilterParameters(DmxFilter f) {
		if (f.typeDesc.isMultiTyped && ! f.parameters.exists[t|t.typeDesc !== null && t.typeDesc.isMultiTyped]) {
			error("For a multi-typed return type, there must be a parameter supporting the same types.", f, BASE.DNamedElement_Name, 0)
		}
	}

	@Check
	def checkUseOfAllQualifier(DmxContextReference ref) {
		if (ref.all && !(ref.target instanceof DComplexType)) {
			error("'all' qualifier is only supported after a static type reference.", ref, DMX.dmxContextReference_All)
		}
	}

	@Check
	def checkNavigationOfStaticTypeReference(DmxMemberNavigation nav) {
		if (nav.member instanceof DFeature) {
			val preceding = nav.precedingNavigationSegment
			if (preceding instanceof DmxContextReference && (preceding as DmxContextReference).target instanceof DComplexType) {
				error("Cannot navigate a feature from a static type reference. Use [[Type#feature]] syntax inside RichStrings.", nav, DMX.dmxMemberNavigation_Member)
			}
		}
	}

	@Check
	def checkNestedLists(DmxListExpression expr) {
		for (e : expr.elements) {
			if (e instanceof DmxListExpression) {
				error("Cannot nest lists", expr, DMX.dmxListExpression_Elements)
			}
		}
	}
	
	@Check
	def checkRichTextFormatting(DRichText rt) {
		rt.parse(this)
	}
	
	override acceptError(String message, int offset, int length) {
		val current = getCurrentObject()
		messageAcceptor.acceptError(message, current, offset, length, null);
	}
	@Check
	def urlFormat(DmxUrlLiteral url) {
		if (url.value !== null && ! url.value.empty) {
			try {
				new URL(url.value)
			} catch (MalformedURLException ex) {
				error("Malformed URL: " + ex.message, DMX.dmxUrlLiteral_Value)
			}
		}
		if (url.value !== null && url.value.empty) {
			error("Display value cannot be empty when specified", DMX.dmxUrlLiteral_Display)
		}
		
	}
	
}
