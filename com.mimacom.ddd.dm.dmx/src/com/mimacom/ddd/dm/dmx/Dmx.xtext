grammar com.mimacom.ddd.dm.dmx.Dmx hidden(WS, ML_COMMENT, SL_COMMENT)

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://www.mimacom.com/ddd/dm/base"
import "http://www.mimacom.com/ddd/dm/dmx" 

DmxNamespace:
	(imports+=DImport)*
	'namespace'
	name=DQualifiedName
	(types+=DmxArchetype)*
	(filters+=DmxFilter)* 
	// For unit-testing purposes:
	(tests+=DmxTest)*;
	
DImport:
	'import' importedNamespace=DQualifiedNameWithWildcard;	

/* 
 * Testing
 */
DmxTest:
	'test'
	name=ID
	(	'context'	
		context+=DmxTestContext (',' context+=DmxTestContext)*
	)?
	'{'
	expr=DExpression
	'}';

DmxTestContext returns DContext:
	name=ID
	':'
	type=[DType|ID] (multiplicity=DMultiplicity)?;	
	
/* 
 * Language base: archetypes & filters
 */
enum DmxBaseType:
	VOID | BOOLEAN | NUMBER | TEXT | IDENTIFIER | TIMEPOINT | COMPLEX | NOTIFICATION /*sent* */ | SERVICE /*invoked* */;
	
DmxBaseTypeSet:
	name=ID
	'in'
	'(' members+=DmxBaseType (',' members+=DmxBaseType)+')';
	
DmxArchetype:
	'archetype'
	name=ID
	'is'
	baseType=DmxBaseType
	(description=DRichText)?;

DmxFilter:
	'filter'
	name=ID 
	'(' (parameters+=DmxFilterParameter (','  parameters+=DmxFilterParameter)*)? ')'
	':'
	typeDesc=DmxFilterTypeDescriptor
	('with' withTypeSet=DmxBaseTypeSet)?;

DmxFilterTypeDescriptor:
	(	single=DmxBaseType
	|	multiple= [DmxBaseTypeSet|ID]
	)
	(collection?='*')?;

DmxFilterParameter:
	name=ID
	':'
	typeDesc=DmxFilterTypeDescriptor;
	
/*
 * Expressions
 */

DExpression returns DExpression :
	DmxAssignment | DmxPredicateWithCorrelationVariable | DRichText;
	
DRichText:
	segments+=DmxTextOnly
	|
	(	segments+= DmxTextStart
		segments+= DExpression 
		(segments+=DmxTextMiddle  segments+=DExpression)* 
		segments+= DmxTextEnd
	);

DmxTextOnly returns DTextSegment:		value=PLAIN_TEXT_ONLY;
DmxTextStart returns DTextSegment:		value=PLAIN_TEXT_START;
DmxTextMiddle returns DTextSegment:		value=PLAIN_TEXT_MIDDLE;
DmxTextEnd returns DTextSegment:			value=PLAIN_TEXT_END;

DmxNavigableMemberReference returns DExpression:
	DmxPrimaryExpression
	(	=> (
			{DmxAssignment.precedingNavigationSegment=current} '.' 
			assignToMember=[DNavigableMember|ID] 
			DmxOpSingleAssign
		) 
		value=DmxOrExpression
	| 	=> ({DmxMemberNavigation.precedingNavigationSegment=current} '.')
		member=[DNavigableMember|ID] 
		(
			(
				(	=> explicitOperationCall?='(' // => boolean => has 0.n explicit arguments
					callArguments=DmxCallArguments
					')'
				)
				|
				before?="@before"
			)?
		)
	)*;

DmxCallArguments:
	{DmxCallArguments} 
	(
		arguments+=DmxPredicateWithCorrelationVariable (',' arguments+=DmxPredicateWithCorrelationVariable)*
	)?	;
	
DmxAssignment returns DExpression :
	{DmxAssignment}
	assignToMember=[DNavigableMember|ID] DmxOpSingleAssign value=DmxOrExpression;

DmxOpSingleAssign:
	':=';

DmxPredicateWithCorrelationVariable returns DExpression :
	(	{DmxPredicateWithCorrelationVariable} 
		correlationVariable=DmxCorrelationVariable
		'|'
		predicate=DmxOrExpression
	|	DmxOrExpression
	);

DmxCorrelationVariable:
	name=ID;
	//	(':' type=[DType])? => type is always NULL!
	
DmxOrExpression returns DExpression:
	DmxAndExpression
	(=> ({DmxBinaryOperation.leftOperand=current} operator=DmxOpOr) rightOperand=DmxAndExpression)*;

enum DmxOpOr returns DmxBinaryOperator:
	OR='OR' | OR='or' | XOR='XOR' | XOR='xor';

DmxAndExpression returns DExpression:
	DmxEqualityExpression
	(=>({DmxBinaryOperation.leftOperand=current} operator=DmxOpAnd) rightOperand=DmxEqualityExpression)*;

enum DmxOpAnd returns DmxBinaryOperator:
	AND='AND' | AND='and';

DmxEqualityExpression returns DExpression:
	DmxRelationalExpression 
	(=> ({DmxBinaryOperation.leftOperand=current} operator=DmxOpEquality)	rightOperand=DmxRelationalExpression)*;

enum DmxOpEquality returns DmxBinaryOperator:
	EQUAL='=' | NOT_EQUAL='!=' | NOT_EQUAL='<>';

DmxRelationalExpression returns DExpression:
	DmxOtherOperatorExpression
	(	=> ({DmxInstanceOfExpression.expression=current} DmxOpInstanceOf) type=[DType]
	|	=> ({DmxBinaryOperation.leftOperand=current} operator=OpCompare) rightOperand=DmxOtherOperatorExpression
	)*;

DmxOpInstanceOf:
	'ISA' | 'isa';
	
enum OpCompare returns DmxBinaryOperator:
	LESS= '<' | LESS_OR_EQUAL= '<=' | LESS_OR_EQUAL='≤' | GREATER_OR_EQUAL='>=' | GREATER_OR_EQUAL='≥' | GREATER='>';

DmxOtherOperatorExpression returns DExpression:
	DmxAdditiveExpression
	(=>({DmxBinaryOperation.leftOperand=current} operator=OpOther) rightOperand=DmxAdditiveExpression)*;

enum OpOther returns DmxBinaryOperator:
	UNTIL='..' | SINGLE_ARROW= '->' | DOUBLE_ARROW='=>';

DmxAdditiveExpression returns DExpression:
	DmxMultiplicativeExpression
	(=>({DmxBinaryOperation.leftOperand=current} operator=OpAdd) rightOperand=DmxMultiplicativeExpression)*;

enum OpAdd returns DmxBinaryOperator:
	ADD='+' | SUBTRACT='-';

DmxMultiplicativeExpression returns DExpression:
	DmxUnaryOperation
	(=>({DmxBinaryOperation.leftOperand=current} operator=OpMulti) rightOperand=DmxUnaryOperation)*;

enum OpMulti returns DmxBinaryOperator:
	MULTIPLY='*' | DIVIDE='/' | POWER='**' | MODULO='%';

DmxUnaryOperation returns DExpression:
	{DmxUnaryOperation}
	operator=OpUnary operand=DmxUnaryOperation
	| DmxCastExpression;

enum OpUnary returns DmxUnaryOperator:
	PLUS='+' | MINUS='-' | NOT='!' | NOT='NOT' | NOT='not' ;

DmxCastExpression returns DExpression:
	DmxNavigableMemberReference (=>({DmxCastExpression.target=current} DmxOpCast) type=[DType])?;
	
DmxOpCast:
	'AS' | 'as';
	
DmxPrimaryExpression returns DExpression:
	DmxLiteralExpression |
	DmxParenthesizedExpression |
	DmxFunctionCall |
	DmxConstructorCall |
	DmxStaticReference |
	DmxContextReference |
	DmxIfExpression;
	
DmxLiteralExpression returns DExpression:
	DmxBooleanLiteral |
	DmxStringLiteral |
	DmxNaturalLiteral |
	DmxDecimalLiteral |
	DmxUndefinedLiteral;
	
DmxParenthesizedExpression returns DExpression:
	'(' DExpression ')';

DmxFunctionCall returns DExpression:
	{DmxFunctionCall}
	function=[DmxFilter|ID]
	'('
		callArguments=DmxFunctionCallArguments
	')';

DmxFunctionCallArguments returns DmxCallArguments:
	{DmxCallArguments} 
	(
		arguments+=DExpression (',' arguments+=DExpression)*
	)?	;
		
DmxConstructorCall returns DExpression:
	{DmxConstructorCall}
	DmxOpConstructor 
	constructor=[DComplexType|ID]
	(=> explicitConstructorCall?='(' // => boolean => has 0.n explicit arguments
		callArguments=DmxFunctionCallArguments
	')')?;

DmxOpConstructor:
	'NEW' | 'new';
		
DmxStaticReference returns DExpression:
	{DmxStaticReference}
	'['
	target=[IStaticReferenceTarget|DQualifiedName]
	('#' member=[DNavigableMember|ID])?
	("|" (displayName=ID | plural?="*"))?
	(-> ']') ; // '->' gives precedence to this ']' over PLAIN_TEXT_MIDDLE ('=>' works too but generates more lookahead overhead)
		
DmxContextReference returns DExpression:
	{DmxContextReference}
	target=[DNamedElement|ID] 
	(	before?="@before"
	|	'.' all?='all'
	)?;
	
DmxIfExpression returns DExpression: 
	{DmxIfExpression}
	'if' if=DExpression
	'then' then=DExpression
	(=> 'else' else=DExpression)?
	'end';
	
DMultiplicity:
	shorthand=DMultiplicityShorthand | '(' minOccurs=NATURAL '..' maxOccurs=MULTIPLICITY ')';
	
enum DMultiplicityShorthand: 
	ZERO_OR_ONE='?' | ONE_OR_MORE='+' | ZERO_OR_MORE='*';
	
MULTIPLICITY returns ecore::EInt:
	NATURAL | '*';
	
DmxBooleanLiteral returns DExpression: {DmxBooleanLiteral} (value?='TRUE' | value?='true' | 'FALSE' | 'false');
DmxNaturalLiteral returns DExpression: {DmxNaturalLiteral} value=NATURAL;
DmxDecimalLiteral returns DExpression: {DmxDecimalLiteral} value=DECIMAL;
DmxStringLiteral returns DExpression: {DmxStringLiteral} value=STRING;
DmxUndefinedLiteral returns DExpression: {DmxUndefinedLiteral} ('UNDEFINED' | 'undefined');

DECIMAL returns ecore::EString: NATURAL '.' NATURAL (('E'|'e')  ('+'|'-')? NATURAL)?;

DQualifiedNameWithWildcard: 
	DQualifiedName '.*'?;

DQualifiedName:
	ID ('.' ID)*;
	
terminal ID: '^'?(LETTER|'_') (LETTER|'_'|'0'..'9')*;
terminal STRING:	'"' ( '\\' . | !('\\'|'"') )* '"';
terminal NATURAL returns ecore::EInt: '0'..'9'+;
terminal fragment LETTER:'a'..'z'|'A'..'Z'|'\u00c0'..'\u00d6'|'\u00d8'..'\u00f6'|'\u00f8'..'\u00ff'; // Latin characters '\uc380'..'\uc396'|'\uc398'..'\uc3b6'|'\uc3b8'..'\uc3bf'

terminal fragment PLAIN_TEXT:	!('»' | ']' | '[');
terminal PLAIN_TEXT_ONLY:		'«' PLAIN_TEXT* '»';
terminal PLAIN_TEXT_START:		'«' PLAIN_TEXT* '[';
terminal PLAIN_TEXT_MIDDLE:	']'  PLAIN_TEXT* '[';
terminal PLAIN_TEXT_END:			']'  PLAIN_TEXT* '»';

terminal ML_COMMENT : '/*' -> '*/';
terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;

terminal WS         : (' '|'\t'|'\r'|'\n')+;

terminal ANY_OTHER: .;