/**
 * generated by Xtext 2.16.0
 */
package com.mimacom.ddd.dm.dmx.scoping;

import com.google.common.base.Objects;
import com.google.inject.Inject;
import com.mimacom.ddd.dm.base.BasePackage;
import com.mimacom.ddd.dm.base.DComplexType;
import com.mimacom.ddd.dm.base.DExpression;
import com.mimacom.ddd.dm.base.INavigableMemberContainer;
import com.mimacom.ddd.dm.base.IStaticReferenceTarget;
import com.mimacom.ddd.dm.dmx.DmxAssignment;
import com.mimacom.ddd.dm.dmx.DmxCallArguments;
import com.mimacom.ddd.dm.dmx.DmxComplexObject;
import com.mimacom.ddd.dm.dmx.DmxDetail;
import com.mimacom.ddd.dm.dmx.DmxEntity;
import com.mimacom.ddd.dm.dmx.DmxField;
import com.mimacom.ddd.dm.dmx.DmxFilter;
import com.mimacom.ddd.dm.dmx.DmxMemberNavigation;
import com.mimacom.ddd.dm.dmx.DmxPackage;
import com.mimacom.ddd.dm.dmx.DmxStaticReference;
import com.mimacom.ddd.dm.dmx.DmxUtil;
import com.mimacom.ddd.dm.dmx.indexing.DmxIndex;
import com.mimacom.ddd.dm.dmx.scoping.AbstractDmxScopeProvider;
import com.mimacom.ddd.dm.dmx.typecomputer.AbstractDmxTypeDescriptor;
import com.mimacom.ddd.dm.dmx.typecomputer.DmxTypeComputer;
import java.util.List;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.emf.ecore.EcoreFactory;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.scoping.Scopes;
import org.eclipse.xtext.xbase.lib.Extension;

/**
 * This class contains custom scoping for expressions and {@link DComplexType} feature inheritance.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
@SuppressWarnings("all")
public class DmxScopeProvider extends AbstractDmxScopeProvider {
  @Inject
  @Extension
  private DmxUtil _dmxUtil;
  
  @Inject
  @Extension
  private DmxTypeComputer _dmxTypeComputer;
  
  @Inject
  private DmxIndex index;
  
  private static final BasePackage BASE = BasePackage.eINSTANCE;
  
  private static final DmxPackage DMX = DmxPackage.eINSTANCE;
  
  @Override
  public IScope getScope(final EObject context, final EReference reference) {
    EReference _dmxContextReference_Target = DmxScopeProvider.DMX.getDmxContextReference_Target();
    boolean _equals = Objects.equal(reference, _dmxContextReference_Target);
    if (_equals) {
      return this.getContextReferenceScope(context, IScope.NULLSCOPE);
    } else {
      EReference _dmxStaticReference_Target = DmxScopeProvider.DMX.getDmxStaticReference_Target();
      boolean _equals_1 = Objects.equal(reference, _dmxStaticReference_Target);
      if (_equals_1) {
        return this.getDefaultScopeOfType(context, DmxScopeProvider.BASE.getIStaticReferenceTarget());
      } else {
        EReference _dmxStaticReference_Member = DmxScopeProvider.DMX.getDmxStaticReference_Member();
        boolean _equals_2 = Objects.equal(reference, _dmxStaticReference_Member);
        if (_equals_2) {
          if ((context instanceof DmxStaticReference)) {
            final IStaticReferenceTarget target = ((DmxStaticReference)context).getTarget();
            if ((target instanceof INavigableMemberContainer)) {
              final IScope scope = this.getEContainerNavigableMembersScopeSwitch(((INavigableMemberContainer)target), IScope.NULLSCOPE);
              return scope;
            }
          }
        } else {
          EReference _dmxMemberNavigation_Member = DmxScopeProvider.DMX.getDmxMemberNavigation_Member();
          boolean _equals_3 = Objects.equal(reference, _dmxMemberNavigation_Member);
          if (_equals_3) {
            if ((context instanceof DmxMemberNavigation)) {
              final DExpression preceding = ((DmxMemberNavigation)context).getPrecedingNavigationSegment();
              final AbstractDmxTypeDescriptor<?> typeDescriptor = this._dmxTypeComputer.typeFor(preceding);
              final IScope scope_1 = typeDescriptor.getNavigableMembersAndIteratorsScope(context, this.index);
              return scope_1;
            }
          } else {
            EReference _dmxAssignment_AssignToMember = DmxScopeProvider.DMX.getDmxAssignment_AssignToMember();
            boolean _equals_4 = Objects.equal(reference, _dmxAssignment_AssignToMember);
            if (_equals_4) {
              if ((context instanceof DmxAssignment)) {
                final DExpression preceding_1 = ((DmxAssignment)context).getPrecedingNavigationSegment();
                if ((preceding_1 != null)) {
                  final AbstractDmxTypeDescriptor<?> typeDescriptor_1 = this._dmxTypeComputer.typeFor(preceding_1);
                  final IScope scope_2 = typeDescriptor_1.getNavigableMembersScope();
                  return scope_2;
                } else {
                  final IScope outer = this.getDefaultScopeOfType(context, DmxScopeProvider.BASE.getIStaticReferenceTarget());
                  final IScope scope_3 = this.getEContainersNavigableMembersScopes(context, outer);
                  return scope_3;
                }
              } else {
                if ((context instanceof DmxMemberNavigation)) {
                  final DExpression preceding_2 = ((DmxMemberNavigation)context).getPrecedingNavigationSegment();
                  final AbstractDmxTypeDescriptor<?> typeDescriptor_2 = this._dmxTypeComputer.typeFor(preceding_2);
                  final IScope scope_4 = typeDescriptor_2.getNavigableMembersScope();
                  return scope_4;
                }
              }
            } else {
              EReference _dmxFunctionCall_Function = DmxScopeProvider.DMX.getDmxFunctionCall_Function();
              boolean _equals_5 = Objects.equal(reference, _dmxFunctionCall_Function);
              if (_equals_5) {
                final List<DmxFilter> allFilters = this.index.allVisibleFilters(context);
                final IScope scope_5 = Scopes.scopeFor(allFilters, super.getScope(context, reference));
                return scope_5;
              } else {
                EReference _dmxField_Feature = DmxScopeProvider.DMX.getDmxField_Feature();
                boolean _equals_6 = Objects.equal(reference, _dmxField_Feature);
                if (_equals_6) {
                  if ((context instanceof DmxField)) {
                    final EObject container = ((DmxField)context).eContainer();
                    if ((container instanceof DmxComplexObject)) {
                      DComplexType _type = ((DmxComplexObject)container).getType();
                      if ((_type instanceof DComplexType)) {
                        return Scopes.scopeFor(this._dmxUtil.allFeatures(((DmxComplexObject)container).getType()));
                      }
                    }
                  }
                } else {
                  EReference _dmxComplexObject_Type = DmxScopeProvider.DMX.getDmxComplexObject_Type();
                  boolean _equals_7 = Objects.equal(reference, _dmxComplexObject_Type);
                  if (_equals_7) {
                    if ((context instanceof DmxComplexObject)) {
                      IScope _switchResult = null;
                      boolean _matched = false;
                      if (context instanceof DmxEntity) {
                        _matched=true;
                        _switchResult = this.getDefaultScopeOfType(context, DmxScopeProvider.BASE.getDEntityType());
                      }
                      if (!_matched) {
                        if (context instanceof DmxDetail) {
                          _matched=true;
                          _switchResult = this.getDefaultScopeOfType(context, DmxScopeProvider.BASE.getDDetailType());
                        }
                      }
                      if (!_matched) {
                        _switchResult = super.getScope(context, reference);
                      }
                      final IScope scope_6 = _switchResult;
                      return scope_6;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    return super.getScope(context, reference);
  }
  
  /**
   * Obtains the default scope for the given reference, then narrows the result down to the given type and returns it.
   */
  public IScope getDefaultScopeOfType(final EObject context, final EClass type) {
    final EReference reference = EcoreFactory.eINSTANCE.createEReference();
    reference.setEType(type);
    final IScope scope = super.getScope(context, reference);
    return scope;
  }
  
  public IScope getContextReferenceScope(final EObject context, final IScope outerScope) {
    final IScope outer = this.getDefaultScopeOfType(context, DmxScopeProvider.BASE.getIStaticReferenceTarget());
    final IScope scope = this.getEContainersNavigableMembersScopes(context, outer);
    return scope;
  }
  
  /**
   * Returns all DNavigableMember elements of the given navigation member element along the eContainer CONTAINMENT hierarchy.
   */
  protected final IScope getEContainersNavigableMembersScopes(final EObject context, final IScope outerScope) {
    IScope scope = outerScope;
    EObject container = context.eContainer();
    if ((container == null)) {
      return scope;
    } else {
      if ((container instanceof INavigableMemberContainer)) {
        scope = this.getEContainerNavigableMembersScopeSwitch(((INavigableMemberContainer)container), outerScope);
      } else {
        if ((container instanceof DmxCallArguments)) {
          boolean _contains = ((DmxCallArguments)container).getArguments().contains(context);
          if (_contains) {
            container = ((DmxCallArguments)container).eContainer();
            if ((container instanceof DmxMemberNavigation)) {
              final AbstractDmxTypeDescriptor<?> typeDescriptor = this._dmxTypeComputer.typeFor(((DmxMemberNavigation)container).getPrecedingNavigationSegment());
              scope = typeDescriptor.getNavigableMembersScope(outerScope);
            }
          }
        }
      }
    }
    return this.getEContainersNavigableMembersScopes(container, scope);
  }
  
  /**
   * Overriders must ensure, that each type used as a discriminator in the switch statement implements  @INavigableMemberContainer,
   * otherwise this method will never be invoked.<p>
   * Also, the elements included in the scope must implement @DNavigableMember.
   */
  protected IScope getEContainerNavigableMembersScopeSwitch(final INavigableMemberContainer container, final IScope outerScope) {
    final IScope scope = Scopes.scopeFor(container.getNavigableMembers(), outerScope);
    return scope;
  }
}
