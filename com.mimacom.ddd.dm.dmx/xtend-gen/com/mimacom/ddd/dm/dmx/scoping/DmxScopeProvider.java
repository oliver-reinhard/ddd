/**
 * generated by Xtext 2.16.0
 */
package com.mimacom.ddd.dm.dmx.scoping;

import com.google.common.base.Objects;
import com.google.common.collect.Lists;
import com.mimacom.ddd.dm.base.BasePackage;
import com.mimacom.ddd.dm.base.DActor;
import com.mimacom.ddd.dm.base.DComplexType;
import com.mimacom.ddd.dm.base.DDomainEvent;
import com.mimacom.ddd.dm.base.DEnumeration;
import com.mimacom.ddd.dm.base.DExpression;
import com.mimacom.ddd.dm.base.DFunction;
import com.mimacom.ddd.dm.base.DNamedElement;
import com.mimacom.ddd.dm.base.DNavigableMember;
import com.mimacom.ddd.dm.base.DQuery;
import com.mimacom.ddd.dm.base.DService;
import com.mimacom.ddd.dm.base.DType;
import com.mimacom.ddd.dm.base.INavigableMemberContainer;
import com.mimacom.ddd.dm.dmx.DAssignment;
import com.mimacom.ddd.dm.dmx.DContextReference;
import com.mimacom.ddd.dm.dmx.DFunctionCall;
import com.mimacom.ddd.dm.dmx.DNavigableMemberReference;
import com.mimacom.ddd.dm.dmx.DSelfExpression;
import com.mimacom.ddd.dm.dmx.DmxPackage;
import com.mimacom.ddd.dm.dmx.scoping.AbstractDmxScopeProvider;
import java.util.ArrayList;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.emf.ecore.EcoreFactory;
import org.eclipse.xtext.EcoreUtil2;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.scoping.Scopes;

/**
 * This class contains custom scoping for expressions and {@link DComplexType} feature inheritance.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
@SuppressWarnings("all")
public class DmxScopeProvider extends AbstractDmxScopeProvider {
  private static final BasePackage BASE = BasePackage.eINSTANCE;
  
  private static final DmxPackage DMX = DmxPackage.eINSTANCE;
  
  @Override
  public IScope getScope(final EObject context, final EReference reference) {
    EReference _dNavigableMemberReference_Member = DmxScopeProvider.DMX.getDNavigableMemberReference_Member();
    boolean _equals = Objects.equal(reference, _dNavigableMemberReference_Member);
    if (_equals) {
      if ((context instanceof DNavigableMemberReference)) {
        final DExpression ref = ((DNavigableMemberReference)context).getMemberContainerReference();
        IScope _xifexpression = null;
        boolean _isExplicitOperationCall = ((DNavigableMemberReference)context).isExplicitOperationCall();
        if (_isExplicitOperationCall) {
          _xifexpression = this.getDefaultScopeForType(context, DmxScopeProvider.BASE.getDFunction());
        } else {
          IScope _xifexpression_1 = null;
          if (((ref instanceof DContextReference) && (((DContextReference) ref).getTarget() instanceof DComplexType))) {
            _xifexpression_1 = IScope.NULLSCOPE;
          } else {
            _xifexpression_1 = this.getNavigableMemberReferencesScope(ref);
          }
          _xifexpression = _xifexpression_1;
        }
        final IScope scope = _xifexpression;
        return scope;
      }
    } else {
      EReference _dAssignment_AssignToMember = DmxScopeProvider.DMX.getDAssignment_AssignToMember();
      boolean _equals_1 = Objects.equal(reference, _dAssignment_AssignToMember);
      if (_equals_1) {
        if ((context instanceof DAssignment)) {
          final IScope scope_1 = this.getAssignmentMemberScope(((DAssignment)context), reference);
          return scope_1;
        }
      } else {
        EReference _dContextReference_Target = DmxScopeProvider.DMX.getDContextReference_Target();
        boolean _equals_2 = Objects.equal(reference, _dContextReference_Target);
        if (_equals_2) {
          final IScope outer = this.getDefaultScopeForType(context, DmxScopeProvider.BASE.getIPrimaryNavigationTarget());
          final IScope scope_2 = this.getPrecedingNavigableMembersScope(context, outer);
          return scope_2;
        } else {
          EReference _dContextReference_Member = DmxScopeProvider.DMX.getDContextReference_Member();
          boolean _equals_3 = Objects.equal(reference, _dContextReference_Member);
          if (_equals_3) {
            if ((context instanceof DContextReference)) {
              final DNamedElement target = ((DContextReference)context).getTarget();
              if ((target instanceof INavigableMemberContainer)) {
                final IScope scope_3 = this.getNavigableMembersScope(((INavigableMemberContainer)target), IScope.NULLSCOPE);
                return scope_3;
              }
            }
          }
        }
      }
    }
    return super.getScope(context, reference);
  }
  
  /**
   * Obtains the default scope for the given reference, then narrows the result down to the given type.
   */
  public IScope getDefaultScopeForType(final EObject context, final EClass type) {
    final EReference reference = EcoreFactory.eINSTANCE.createEReference();
    reference.setEType(type);
    final IScope scope = super.getScope(context, reference);
    return scope;
  }
  
  protected IScope getNavigableMemberReferencesScope(final EObject memberContainerReference) {
    if ((memberContainerReference instanceof DContextReference)) {
      final DNamedElement memberContainer = ((DContextReference)memberContainerReference).getTarget();
      DNamedElement _switchResult = null;
      boolean _matched = false;
      if (memberContainer instanceof DEnumeration) {
        _matched=true;
        _switchResult = memberContainer;
      }
      if (!_matched) {
        if (memberContainer instanceof DNavigableMember) {
          _matched=true;
          _switchResult = ((DNavigableMember)memberContainer).getType();
        }
      }
      if (!_matched) {
        if (memberContainer instanceof INavigableMemberContainer) {
          _matched=true;
          _switchResult = memberContainer;
        }
      }
      if (!_matched) {
        _switchResult = null;
      }
      final DNamedElement targetType = _switchResult;
      IScope _switchResult_1 = null;
      boolean _matched_1 = false;
      if (targetType instanceof DEnumeration) {
        _matched_1=true;
        _switchResult_1 = Scopes.scopeFor(((DEnumeration)targetType).getLiterals());
      }
      if (!_matched_1) {
        if (targetType instanceof DComplexType) {
          _matched_1=true;
          _switchResult_1 = this.getOwnAndInheritedFeaturesScope(((DComplexType)targetType));
        }
      }
      if (!_matched_1) {
        if (targetType instanceof DQuery) {
          _matched_1=true;
          _switchResult_1 = Scopes.scopeFor(((DQuery)targetType).getParameters());
        }
      }
      if (!_matched_1) {
        if (targetType instanceof DService) {
          _matched_1=true;
          _switchResult_1 = Scopes.scopeFor(((DService)targetType).getParameters());
        }
      }
      if (!_matched_1) {
        if (targetType instanceof DDomainEvent) {
          _matched_1=true;
          _switchResult_1 = this.getDomainEventNavigableMemberScope(((DDomainEvent)targetType), IScope.NULLSCOPE);
        }
      }
      if (!_matched_1) {
        _switchResult_1 = IScope.NULLSCOPE;
      }
      return _switchResult_1;
    } else {
      if ((memberContainerReference instanceof DSelfExpression)) {
        return this.getPrecedingNavigableMembersScope(memberContainerReference, IScope.NULLSCOPE);
      } else {
        if ((memberContainerReference instanceof DNavigableMemberReference)) {
          final DNavigableMember member = ((DNavigableMemberReference)memberContainerReference).getMember();
          if ((member instanceof DNavigableMember)) {
            final DType type = member.getType();
            if ((type instanceof DComplexType)) {
              return this.getOwnAndInheritedFeaturesScope(((DComplexType)type));
            }
          }
        } else {
          if ((memberContainerReference instanceof DFunctionCall)) {
            final DFunction function = ((DFunctionCall)memberContainerReference).getFunction();
            if ((function instanceof DFunction)) {
              final DType type_1 = function.getType();
              if ((type_1 instanceof DComplexType)) {
                return this.getOwnAndInheritedFeaturesScope(((DComplexType)type_1));
              }
            }
          }
        }
      }
    }
    return IScope.NULLSCOPE;
  }
  
  protected IScope getAssignmentMemberScope(final DAssignment assignment, final EReference reference) {
    final DExpression memberContainer = assignment.getMemberContainer();
    if ((memberContainer != null)) {
      return this.getNavigableMemberReferencesScope(memberContainer);
    } else {
      final IScope outerScope = this.getDefaultScopeForType(assignment, DmxScopeProvider.BASE.getIPrimaryNavigationTarget());
      return this.getPrecedingNavigableMembersScope(assignment, outerScope);
    }
  }
  
  /**
   * Returns all DTypedMember elements of the given navigation member element.
   */
  protected final IScope getPrecedingNavigableMembersScope(final EObject member, final IScope outerScope) {
    IScope _xblockexpression = null;
    {
      final INavigableMemberContainer preceding = EcoreUtil2.<INavigableMemberContainer>getContainerOfType(member.eContainer(), INavigableMemberContainer.class);
      if ((preceding == null)) {
        return outerScope;
      }
      _xblockexpression = this.getNavigableMembersScope(preceding, outerScope);
    }
    return _xblockexpression;
  }
  
  /**
   * Overriders must ensure, that each type used as a discriminator in the switch statement implements  @INavigableMemberContainer,
   * otherwise this method will never be invoked.<p>
   * Also, the elements included in the scope must implement @DNavigableMember.
   */
  protected IScope getNavigableMembersScope(final INavigableMemberContainer container, final IScope outerScope) {
    IScope _switchResult = null;
    boolean _matched = false;
    if (container instanceof DEnumeration) {
      _matched=true;
      _switchResult = Scopes.scopeFor(((DEnumeration)container).getLiterals(), outerScope);
    }
    if (!_matched) {
      if (container instanceof DComplexType) {
        _matched=true;
        _switchResult = this.getOwnAndInheritedFeaturesScope(((DComplexType)container), outerScope);
      }
    }
    if (!_matched) {
      if (container instanceof DQuery) {
        _matched=true;
        _switchResult = Scopes.scopeFor(((DQuery)container).getParameters(), this.getPrecedingNavigableMembersScope(container, outerScope));
      }
    }
    if (!_matched) {
      if (container instanceof DService) {
        _matched=true;
        _switchResult = Scopes.scopeFor(((DService)container).getParameters(), outerScope);
      }
    }
    if (!_matched) {
      if (container instanceof DDomainEvent) {
        _matched=true;
        _switchResult = this.getDomainEventNavigableMemberScope(((DDomainEvent)container), outerScope);
      }
    }
    if (!_matched) {
      _switchResult = this.getPrecedingNavigableMembersScope(container, outerScope);
    }
    final IScope scope = _switchResult;
    return scope;
  }
  
  protected IScope getOwnAndInheritedFeaturesScope(final DComplexType type) {
    return this.getOwnAndInheritedFeaturesScope(type, IScope.NULLSCOPE);
  }
  
  protected IScope getOwnAndInheritedFeaturesScope(final DComplexType type, final IScope outerScope) {
    DComplexType _superType = type.getSuperType();
    boolean _tripleNotEquals = (_superType != null);
    if (_tripleNotEquals) {
      return Scopes.scopeFor(type.getFeatures(), this.getOwnAndInheritedFeaturesScope(type.getSuperType(), outerScope));
    } else {
      return Scopes.scopeFor(type.getFeatures(), outerScope);
    }
  }
  
  protected IScope getDomainEventNavigableMemberScope(final DDomainEvent event, final IScope outerScope) {
    final ArrayList<DNamedElement> list = Lists.<DNamedElement>newArrayList();
    list.addAll(event.getContext());
    DActor _trigger = event.getTrigger();
    boolean _tripleNotEquals = (_trigger != null);
    if (_tripleNotEquals) {
      list.add(event.getTrigger());
    }
    list.addAll(event.getNotifications());
    return Scopes.scopeFor(list, outerScope);
  }
}
