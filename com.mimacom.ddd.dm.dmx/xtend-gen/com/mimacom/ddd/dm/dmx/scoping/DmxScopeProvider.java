/**
 * generated by Xtext 2.16.0
 */
package com.mimacom.ddd.dm.dmx.scoping;

import com.google.common.base.Objects;
import com.google.common.collect.Lists;
import com.mimacom.ddd.dm.base.DActor;
import com.mimacom.ddd.dm.base.DAggregate;
import com.mimacom.ddd.dm.base.DComplexType;
import com.mimacom.ddd.dm.base.DDomain;
import com.mimacom.ddd.dm.base.DDomainEvent;
import com.mimacom.ddd.dm.base.DExistingApplication;
import com.mimacom.ddd.dm.base.DExpression;
import com.mimacom.ddd.dm.base.DFunction;
import com.mimacom.ddd.dm.base.DModel;
import com.mimacom.ddd.dm.base.DNamedElement;
import com.mimacom.ddd.dm.base.DQuery;
import com.mimacom.ddd.dm.base.DService;
import com.mimacom.ddd.dm.base.DType;
import com.mimacom.ddd.dm.base.DTypedMember;
import com.mimacom.ddd.dm.base.IIdentityType;
import com.mimacom.ddd.dm.dmx.DAssignment;
import com.mimacom.ddd.dm.dmx.DContextReference;
import com.mimacom.ddd.dm.dmx.DFunctionCall;
import com.mimacom.ddd.dm.dmx.DSelfExpression;
import com.mimacom.ddd.dm.dmx.DTypedMemberReference;
import com.mimacom.ddd.dm.dmx.DmxPackage;
import com.mimacom.ddd.dm.dmx.scoping.AbstractDmxScopeProvider;
import java.util.ArrayList;
import java.util.List;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.xtext.EcoreUtil2;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.scoping.Scopes;
import org.eclipse.xtext.xbase.lib.CollectionExtensions;
import org.eclipse.xtext.xbase.lib.IterableExtensions;

/**
 * This class contains custom scoping for expressions and {@link DComplexType} feature inheritance.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
@SuppressWarnings("all")
public class DmxScopeProvider extends AbstractDmxScopeProvider {
  private final DmxPackage epackage = DmxPackage.eINSTANCE;
  
  @Override
  public IScope getScope(final EObject context, final EReference reference) {
    EReference _dContextReference_ContextElement = this.epackage.getDContextReference_ContextElement();
    boolean _equals = Objects.equal(reference, _dContextReference_ContextElement);
    if (_equals) {
      final IScope outer = this.getPrimaryNavigationTargetScope(context);
      return this.getExpressionContainerScope(context, outer);
    } else {
      EReference _dTypedMemberReference_Member = this.epackage.getDTypedMemberReference_Member();
      boolean _equals_1 = Objects.equal(reference, _dTypedMemberReference_Member);
      if (_equals_1) {
        if ((context instanceof DTypedMemberReference)) {
          return this.getMemberReferenceScope(((DTypedMemberReference)context).getMemberContainer());
        }
      } else {
        EReference _dAssignment_Member = this.epackage.getDAssignment_Member();
        boolean _equals_2 = Objects.equal(reference, _dAssignment_Member);
        if (_equals_2) {
          if ((context instanceof DAssignment)) {
            return this.getAssignmentFeatureScope(((DAssignment)context));
          }
        } else {
          if ((Objects.equal(reference, this.epackage.getDFunctionCall_Function()) && (context instanceof DFunction))) {
            if ((context instanceof DFunction)) {
              return this.getFunctionReferenceScope(((DFunction)context));
            }
          } else {
            EReference _dConstructorCall_Constructor = this.epackage.getDConstructorCall_Constructor();
            boolean _equals_3 = Objects.equal(reference, _dConstructorCall_Constructor);
            if (_equals_3) {
              return this.<IIdentityType>getContainerTypesOfTypeScope(context, IIdentityType.class, false);
            } else {
              if ((Objects.equal(reference, this.epackage.getDInstanceOfExpression_Type()) || Objects.equal(reference, this.epackage.getDCastExpression_Type()))) {
                return this.<DType>getContainerTypesOfTypeScope(context, DType.class, false);
              }
            }
          }
        }
      }
    }
    return super.getScope(context, reference);
  }
  
  protected IScope getPrimaryNavigationTargetScope(final EObject context) {
    EObject _head = IterableExtensions.<EObject>head(context.eResource().getContents());
    final DModel model = ((DModel) _head);
    final ArrayList<EObject> modelChildren = new ArrayList<EObject>();
    modelChildren.addAll(model.getGlobalTypes());
    final DDomain domain = model.getDomain();
    if ((domain == null)) {
      return Scopes.scopeFor(modelChildren);
    }
    CollectionExtensions.<DDomain>addAll(modelChildren, domain);
    final IScope modelScope = Scopes.scopeFor(modelChildren);
    final ArrayList<DNamedElement> domainChildren = Lists.<DNamedElement>newArrayList();
    domainChildren.addAll(domain.getTypes());
    domainChildren.addAll(domain.getActors());
    domainChildren.addAll(domain.getEvents());
    domainChildren.addAll(domain.getApplications());
    final IScope domainScope = Scopes.scopeFor(domainChildren, modelScope);
    IScope outerScope = domainScope;
    EList<DExistingApplication> _applications = domain.getApplications();
    for (final DExistingApplication a : _applications) {
      outerScope = Scopes.scopeFor(a.getServices(), outerScope);
    }
    return outerScope;
  }
  
  protected IScope getMemberReferenceScope(final EObject memberContainer) {
    if ((memberContainer instanceof DContextReference)) {
      final DNamedElement context = ((DContextReference)memberContainer).getContextElement();
      if ((context instanceof DTypedMember)) {
        final DType type = ((DTypedMember)context).getType();
        IScope _switchResult = null;
        boolean _matched = false;
        if (type instanceof DComplexType) {
          _matched=true;
          _switchResult = this.getInheritedFeaturesScope(((DComplexType)type));
        }
        if (!_matched) {
          if (type instanceof DQuery) {
            _matched=true;
            _switchResult = Scopes.scopeFor(((DQuery)type).getParameters());
          }
        }
        if (!_matched) {
          if (type instanceof DService) {
            _matched=true;
            _switchResult = Scopes.scopeFor(((DService)type).getParameters());
          }
        }
        if (!_matched) {
          if (type instanceof DDomainEvent) {
            _matched=true;
            _switchResult = this.getDomainEventScope(((DDomainEvent)type), IScope.NULLSCOPE);
          }
        }
        if (!_matched) {
          _switchResult = IScope.NULLSCOPE;
        }
        return _switchResult;
      }
    } else {
      if ((memberContainer instanceof DSelfExpression)) {
        return this.getExpressionContainerScope(memberContainer, IScope.NULLSCOPE);
      } else {
        if ((memberContainer instanceof DTypedMemberReference)) {
          final DTypedMember member = ((DTypedMemberReference)memberContainer).getMember();
          if ((member instanceof DTypedMember)) {
            final DType type_1 = member.getType();
            if ((type_1 instanceof DComplexType)) {
              return this.getInheritedFeaturesScope(((DComplexType)type_1));
            }
          }
        } else {
          if ((memberContainer instanceof DFunctionCall)) {
            final DFunction function = ((DFunctionCall)memberContainer).getFunction();
            if ((function instanceof DFunction)) {
              final DType type_2 = function.getType();
              if ((type_2 instanceof DComplexType)) {
                return this.getInheritedFeaturesScope(((DComplexType)type_2));
              }
            }
          }
        }
      }
    }
    return IScope.NULLSCOPE;
  }
  
  protected IScope getAssignmentFeatureScope(final DAssignment context) {
    final DExpression memberContainer = context.getMemberContainer();
    if ((memberContainer != null)) {
      return this.getMemberReferenceScope(memberContainer);
    } else {
      final IScope outerScope = this.getPrimaryNavigationTargetScope(memberContainer);
      return this.getExpressionContainerScope(memberContainer, outerScope);
    }
  }
  
  protected IScope getExpressionContainerScope(final EObject context, final IScope outerScope) {
    EObject container = context.eContainer();
    IScope _switchResult = null;
    boolean _matched = false;
    if (container instanceof DComplexType) {
      _matched=true;
      _switchResult = this.getInheritedFeaturesScope(((DComplexType)container), outerScope);
    }
    if (!_matched) {
      if (container instanceof DQuery) {
        _matched=true;
        _switchResult = Scopes.scopeFor(((DQuery)container).getParameters(), this.getExpressionContainerScope(container, outerScope));
      }
    }
    if (!_matched) {
      if (container instanceof DService) {
        _matched=true;
        _switchResult = Scopes.scopeFor(((DService)container).getParameters(), outerScope);
      }
    }
    if (!_matched) {
      if (container instanceof DDomainEvent) {
        _matched=true;
        _switchResult = this.getDomainEventScope(((DDomainEvent)container), outerScope);
      }
    }
    if (!_matched) {
      if (Objects.equal(container, null)) {
        _matched=true;
        _switchResult = IScope.NULLSCOPE;
      }
    }
    if (!_matched) {
      _switchResult = this.getExpressionContainerScope(container, outerScope);
    }
    return _switchResult;
  }
  
  protected IScope getInheritedFeaturesScope(final DComplexType type) {
    return this.getInheritedFeaturesScope(type, IScope.NULLSCOPE);
  }
  
  protected IScope getInheritedFeaturesScope(final DComplexType type, final IScope outerScope) {
    DComplexType _superType = type.getSuperType();
    boolean _tripleNotEquals = (_superType != null);
    if (_tripleNotEquals) {
      return Scopes.scopeFor(type.getFeatures(), this.getInheritedFeaturesScope(type.getSuperType(), outerScope));
    } else {
      return Scopes.scopeFor(type.getFeatures(), outerScope);
    }
  }
  
  protected IScope getDomainEventScope(final DDomainEvent e, final IScope outerScope) {
    final ArrayList<DNamedElement> list = Lists.<DNamedElement>newArrayList();
    list.addAll(e.getContext());
    DActor _trigger = e.getTrigger();
    boolean _tripleNotEquals = (_trigger != null);
    if (_tripleNotEquals) {
      list.add(e.getTrigger());
    }
    list.addAll(e.getNotifications());
    return Scopes.scopeFor(list, outerScope);
  }
  
  protected IScope getFunctionReferenceScope(final DFunction context) {
    EObject _head = IterableExtensions.<EObject>head(context.eResource().getContents());
    return Scopes.scopeFor(((DModel) _head).getGlobalFunctions());
  }
  
  protected <T extends EObject> IScope getContainerTypesOfTypeScope(final EObject context, final Class<T> type, final boolean includeImported) {
    final EObject container = context.eContainer();
    IScope _switchResult = null;
    boolean _matched = false;
    if (Objects.equal(container, null)) {
      _matched=true;
      _switchResult = IScope.NULLSCOPE;
    }
    if (!_matched) {
      if (container instanceof DAggregate) {
        _matched=true;
        _switchResult = Scopes.scopeFor(EcoreUtil2.<T>typeSelect(((DAggregate)container).getTypes(), type), 
          this.<T>getContainerTypesOfTypeScope(container, type, includeImported));
      }
    }
    if (!_matched) {
      if (container instanceof DDomain) {
        _matched=true;
        _switchResult = Scopes.scopeFor(EcoreUtil2.<T>typeSelect(((DDomain)container).getTypes(), type), 
          this.<T>getContainerTypesOfTypeScope(container, type, includeImported));
      }
    }
    if (!_matched) {
      if (container instanceof DExistingApplication) {
        _matched=true;
        _switchResult = Scopes.scopeFor(EcoreUtil2.<T>typeSelect(((DExistingApplication)container).getTypes(), type), 
          this.<T>getContainerTypesOfTypeScope(container, type, includeImported));
      }
    }
    if (!_matched) {
      if (container instanceof DModel) {
        _matched=true;
        List<T> _typeSelect = EcoreUtil2.<T>typeSelect(((DModel)container).getGlobalTypes(), type);
        IScope _xifexpression = null;
        if (includeImported) {
          _xifexpression = this.getImportedObjectsOfTypeScope(container, type);
        } else {
          _xifexpression = IScope.NULLSCOPE;
        }
        _switchResult = Scopes.scopeFor(_typeSelect, _xifexpression);
      }
    }
    if (!_matched) {
      _switchResult = this.<T>getContainerTypesOfTypeScope(container, type, includeImported);
    }
    return _switchResult;
  }
  
  protected IScope getImportedObjectsOfTypeScope(final EObject context, final Class<?> type) {
    return IScope.NULLSCOPE;
  }
}
