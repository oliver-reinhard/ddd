/*
 * generated by Xtext 2.19.0
 */
package com.mimacom.ddd.dm.dmx.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class DmxGrammarAccess extends AbstractGrammarElementFinder {
	
	public class DmxNamespaceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.dmx.Dmx.DmxNamespace");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cImportsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cImportsDImportParserRuleCall_0_0 = (RuleCall)cImportsAssignment_0.eContents().get(0);
		private final Keyword cNamespaceKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameDQualifiedNameParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Assignment cTypesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypesDmxArchetypeParserRuleCall_3_0 = (RuleCall)cTypesAssignment_3.eContents().get(0);
		private final Assignment cFiltersAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cFiltersDmxFilterParserRuleCall_4_0 = (RuleCall)cFiltersAssignment_4.eContents().get(0);
		private final Assignment cTestsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cTestsDmxTestParserRuleCall_5_0 = (RuleCall)cTestsAssignment_5.eContents().get(0);
		
		//DmxNamespace:
		//	imports+=DImport*
		//	'namespace'
		//	name=DQualifiedName
		//	types+=DmxArchetype*
		//	filters+=DmxFilter*
		//	// For unit-testing purposes:
		//	tests+=DmxTest*;
		@Override public ParserRule getRule() { return rule; }
		
		//imports+=DImport* 'namespace' name=DQualifiedName types+=DmxArchetype* filters+=DmxFilter* // For unit-testing purposes:
		//tests+=DmxTest*
		public Group getGroup() { return cGroup; }
		
		//imports+=DImport*
		public Assignment getImportsAssignment_0() { return cImportsAssignment_0; }
		
		//DImport
		public RuleCall getImportsDImportParserRuleCall_0_0() { return cImportsDImportParserRuleCall_0_0; }
		
		//'namespace'
		public Keyword getNamespaceKeyword_1() { return cNamespaceKeyword_1; }
		
		//name=DQualifiedName
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//DQualifiedName
		public RuleCall getNameDQualifiedNameParserRuleCall_2_0() { return cNameDQualifiedNameParserRuleCall_2_0; }
		
		//types+=DmxArchetype*
		public Assignment getTypesAssignment_3() { return cTypesAssignment_3; }
		
		//DmxArchetype
		public RuleCall getTypesDmxArchetypeParserRuleCall_3_0() { return cTypesDmxArchetypeParserRuleCall_3_0; }
		
		//filters+=DmxFilter*
		public Assignment getFiltersAssignment_4() { return cFiltersAssignment_4; }
		
		//DmxFilter
		public RuleCall getFiltersDmxFilterParserRuleCall_4_0() { return cFiltersDmxFilterParserRuleCall_4_0; }
		
		//// For unit-testing purposes:
		//tests+=DmxTest*
		public Assignment getTestsAssignment_5() { return cTestsAssignment_5; }
		
		//DmxTest
		public RuleCall getTestsDmxTestParserRuleCall_5_0() { return cTestsDmxTestParserRuleCall_5_0; }
	}
	public class DImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.dmx.Dmx.DImport");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImportedNamespaceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportedNamespaceDQualifiedNameWithWildcardParserRuleCall_1_0 = (RuleCall)cImportedNamespaceAssignment_1.eContents().get(0);
		
		//DImport:
		//	'import' importedNamespace=DQualifiedNameWithWildcard;
		@Override public ParserRule getRule() { return rule; }
		
		//'import' importedNamespace=DQualifiedNameWithWildcard
		public Group getGroup() { return cGroup; }
		
		//'import'
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }
		
		//importedNamespace=DQualifiedNameWithWildcard
		public Assignment getImportedNamespaceAssignment_1() { return cImportedNamespaceAssignment_1; }
		
		//DQualifiedNameWithWildcard
		public RuleCall getImportedNamespaceDQualifiedNameWithWildcardParserRuleCall_1_0() { return cImportedNamespaceDQualifiedNameWithWildcardParserRuleCall_1_0; }
	}
	public class DmxTestElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.dmx.Dmx.DmxTest");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTestKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cContextKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cContextAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cContextDmxTestContextParserRuleCall_2_1_0 = (RuleCall)cContextAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cContextAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cContextDmxTestContextParserRuleCall_2_2_1_0 = (RuleCall)cContextAssignment_2_2_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cExprAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cExprDExpressionParserRuleCall_4_0 = (RuleCall)cExprAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		///* 
		// * Testing
		// */ DmxTest:
		//	'test'
		//	name=ID ('context'
		//	context+=DmxTestContext (',' context+=DmxTestContext)*)?
		//	'{'
		//	expr=DExpression
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'test' name=ID ('context' context+=DmxTestContext (',' context+=DmxTestContext)*)? '{' expr=DExpression '}'
		public Group getGroup() { return cGroup; }
		
		//'test'
		public Keyword getTestKeyword_0() { return cTestKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//('context' context+=DmxTestContext (',' context+=DmxTestContext)*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'context'
		public Keyword getContextKeyword_2_0() { return cContextKeyword_2_0; }
		
		//context+=DmxTestContext
		public Assignment getContextAssignment_2_1() { return cContextAssignment_2_1; }
		
		//DmxTestContext
		public RuleCall getContextDmxTestContextParserRuleCall_2_1_0() { return cContextDmxTestContextParserRuleCall_2_1_0; }
		
		//(',' context+=DmxTestContext)*
		public Group getGroup_2_2() { return cGroup_2_2; }
		
		//','
		public Keyword getCommaKeyword_2_2_0() { return cCommaKeyword_2_2_0; }
		
		//context+=DmxTestContext
		public Assignment getContextAssignment_2_2_1() { return cContextAssignment_2_2_1; }
		
		//DmxTestContext
		public RuleCall getContextDmxTestContextParserRuleCall_2_2_1_0() { return cContextDmxTestContextParserRuleCall_2_2_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//expr=DExpression
		public Assignment getExprAssignment_4() { return cExprAssignment_4; }
		
		//DExpression
		public RuleCall getExprDExpressionParserRuleCall_4_0() { return cExprDExpressionParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class DmxTestContextElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.dmx.Dmx.DmxTestContext");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cTypeDTypeCrossReference_2_0 = (CrossReference)cTypeAssignment_2.eContents().get(0);
		private final RuleCall cTypeDTypeIDTerminalRuleCall_2_0_1 = (RuleCall)cTypeDTypeCrossReference_2_0.eContents().get(1);
		private final Assignment cMultiplicityAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cMultiplicityDMultiplicityParserRuleCall_3_0 = (RuleCall)cMultiplicityAssignment_3.eContents().get(0);
		
		//DmxTestContext DContext:
		//	name=ID
		//	':'
		//	type=[DType] multiplicity=DMultiplicity?;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID ':' type=[DType] multiplicity=DMultiplicity?
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//type=[DType]
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//[DType]
		public CrossReference getTypeDTypeCrossReference_2_0() { return cTypeDTypeCrossReference_2_0; }
		
		//ID
		public RuleCall getTypeDTypeIDTerminalRuleCall_2_0_1() { return cTypeDTypeIDTerminalRuleCall_2_0_1; }
		
		//multiplicity=DMultiplicity?
		public Assignment getMultiplicityAssignment_3() { return cMultiplicityAssignment_3; }
		
		//DMultiplicity
		public RuleCall getMultiplicityDMultiplicityParserRuleCall_3_0() { return cMultiplicityDMultiplicityParserRuleCall_3_0; }
	}
	public class DmxBaseTypeSetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.dmx.Dmx.DmxBaseTypeSet");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cInKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cMembersAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cMembersDmxBaseTypeEnumRuleCall_3_0 = (RuleCall)cMembersAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cMembersAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cMembersDmxBaseTypeEnumRuleCall_4_1_0 = (RuleCall)cMembersAssignment_4_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//DmxBaseTypeSet:
		//	name=ID
		//	'in'
		//	'(' members+=DmxBaseType (',' members+=DmxBaseType)+ ')';
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID 'in' '(' members+=DmxBaseType (',' members+=DmxBaseType)+ ')'
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//'in'
		public Keyword getInKeyword_1() { return cInKeyword_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//members+=DmxBaseType
		public Assignment getMembersAssignment_3() { return cMembersAssignment_3; }
		
		//DmxBaseType
		public RuleCall getMembersDmxBaseTypeEnumRuleCall_3_0() { return cMembersDmxBaseTypeEnumRuleCall_3_0; }
		
		//(',' members+=DmxBaseType)+
		public Group getGroup_4() { return cGroup_4; }
		
		//','
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }
		
		//members+=DmxBaseType
		public Assignment getMembersAssignment_4_1() { return cMembersAssignment_4_1; }
		
		//DmxBaseType
		public RuleCall getMembersDmxBaseTypeEnumRuleCall_4_1_0() { return cMembersDmxBaseTypeEnumRuleCall_4_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class DmxArchetypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.dmx.Dmx.DmxArchetype");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cArchetypeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cIsKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cBaseTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cBaseTypeDmxBaseTypeEnumRuleCall_3_0 = (RuleCall)cBaseTypeAssignment_3.eContents().get(0);
		private final Assignment cDescriptionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cDescriptionDRichTextParserRuleCall_4_0 = (RuleCall)cDescriptionAssignment_4.eContents().get(0);
		
		//DmxArchetype:
		//	'archetype'
		//	name=ID
		//	'is'
		//	baseType=DmxBaseType
		//	description=DRichText?;
		@Override public ParserRule getRule() { return rule; }
		
		//'archetype' name=ID 'is' baseType=DmxBaseType description=DRichText?
		public Group getGroup() { return cGroup; }
		
		//'archetype'
		public Keyword getArchetypeKeyword_0() { return cArchetypeKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'is'
		public Keyword getIsKeyword_2() { return cIsKeyword_2; }
		
		//baseType=DmxBaseType
		public Assignment getBaseTypeAssignment_3() { return cBaseTypeAssignment_3; }
		
		//DmxBaseType
		public RuleCall getBaseTypeDmxBaseTypeEnumRuleCall_3_0() { return cBaseTypeDmxBaseTypeEnumRuleCall_3_0; }
		
		//description=DRichText?
		public Assignment getDescriptionAssignment_4() { return cDescriptionAssignment_4; }
		
		//DRichText
		public RuleCall getDescriptionDRichTextParserRuleCall_4_0() { return cDescriptionDRichTextParserRuleCall_4_0; }
	}
	public class DmxFilterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.dmx.Dmx.DmxFilter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFilterKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cParametersAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cParametersDmxFilterParameterParserRuleCall_3_0_0 = (RuleCall)cParametersAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cParametersAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cParametersDmxFilterParameterParserRuleCall_3_1_1_0 = (RuleCall)cParametersAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cColonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cTypeDescAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cTypeDescDmxFilterTypeDescriptorParserRuleCall_6_0 = (RuleCall)cTypeDescAssignment_6.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cWithKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cWithTypeSetAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cWithTypeSetDmxBaseTypeSetParserRuleCall_7_1_0 = (RuleCall)cWithTypeSetAssignment_7_1.eContents().get(0);
		
		//DmxFilter:
		//	'filter'
		//	name=ID
		//	'(' (parameters+=DmxFilterParameter (',' parameters+=DmxFilterParameter)*)? ')'
		//	':'
		//	typeDesc=DmxFilterTypeDescriptor ('with' withTypeSet=DmxBaseTypeSet)?;
		@Override public ParserRule getRule() { return rule; }
		
		//'filter' name=ID '(' (parameters+=DmxFilterParameter (',' parameters+=DmxFilterParameter)*)? ')' ':'
		//typeDesc=DmxFilterTypeDescriptor ('with' withTypeSet=DmxBaseTypeSet)?
		public Group getGroup() { return cGroup; }
		
		//'filter'
		public Keyword getFilterKeyword_0() { return cFilterKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//(parameters+=DmxFilterParameter (',' parameters+=DmxFilterParameter)*)?
		public Group getGroup_3() { return cGroup_3; }
		
		//parameters+=DmxFilterParameter
		public Assignment getParametersAssignment_3_0() { return cParametersAssignment_3_0; }
		
		//DmxFilterParameter
		public RuleCall getParametersDmxFilterParameterParserRuleCall_3_0_0() { return cParametersDmxFilterParameterParserRuleCall_3_0_0; }
		
		//(',' parameters+=DmxFilterParameter)*
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//','
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }
		
		//parameters+=DmxFilterParameter
		public Assignment getParametersAssignment_3_1_1() { return cParametersAssignment_3_1_1; }
		
		//DmxFilterParameter
		public RuleCall getParametersDmxFilterParameterParserRuleCall_3_1_1_0() { return cParametersDmxFilterParameterParserRuleCall_3_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
		
		//':'
		public Keyword getColonKeyword_5() { return cColonKeyword_5; }
		
		//typeDesc=DmxFilterTypeDescriptor
		public Assignment getTypeDescAssignment_6() { return cTypeDescAssignment_6; }
		
		//DmxFilterTypeDescriptor
		public RuleCall getTypeDescDmxFilterTypeDescriptorParserRuleCall_6_0() { return cTypeDescDmxFilterTypeDescriptorParserRuleCall_6_0; }
		
		//('with' withTypeSet=DmxBaseTypeSet)?
		public Group getGroup_7() { return cGroup_7; }
		
		//'with'
		public Keyword getWithKeyword_7_0() { return cWithKeyword_7_0; }
		
		//withTypeSet=DmxBaseTypeSet
		public Assignment getWithTypeSetAssignment_7_1() { return cWithTypeSetAssignment_7_1; }
		
		//DmxBaseTypeSet
		public RuleCall getWithTypeSetDmxBaseTypeSetParserRuleCall_7_1_0() { return cWithTypeSetDmxBaseTypeSetParserRuleCall_7_1_0; }
	}
	public class DmxFilterTypeDescriptorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.dmx.Dmx.DmxFilterTypeDescriptor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Assignment cSingleAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final RuleCall cSingleDmxBaseTypeEnumRuleCall_0_0_0 = (RuleCall)cSingleAssignment_0_0.eContents().get(0);
		private final Assignment cMultipleAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final CrossReference cMultipleDmxBaseTypeSetCrossReference_0_1_0 = (CrossReference)cMultipleAssignment_0_1.eContents().get(0);
		private final RuleCall cMultipleDmxBaseTypeSetIDTerminalRuleCall_0_1_0_1 = (RuleCall)cMultipleDmxBaseTypeSetCrossReference_0_1_0.eContents().get(1);
		private final Assignment cCollectionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cCollectionAsteriskKeyword_1_0 = (Keyword)cCollectionAssignment_1.eContents().get(0);
		
		//DmxFilterTypeDescriptor:
		//	(single=DmxBaseType
		//	| multiple=[DmxBaseTypeSet]) collection?='*'?;
		@Override public ParserRule getRule() { return rule; }
		
		//(single=DmxBaseType | multiple=[DmxBaseTypeSet]) collection?='*'?
		public Group getGroup() { return cGroup; }
		
		//(single=DmxBaseType | multiple=[DmxBaseTypeSet])
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//single=DmxBaseType
		public Assignment getSingleAssignment_0_0() { return cSingleAssignment_0_0; }
		
		//DmxBaseType
		public RuleCall getSingleDmxBaseTypeEnumRuleCall_0_0_0() { return cSingleDmxBaseTypeEnumRuleCall_0_0_0; }
		
		//multiple=[DmxBaseTypeSet]
		public Assignment getMultipleAssignment_0_1() { return cMultipleAssignment_0_1; }
		
		//[DmxBaseTypeSet]
		public CrossReference getMultipleDmxBaseTypeSetCrossReference_0_1_0() { return cMultipleDmxBaseTypeSetCrossReference_0_1_0; }
		
		//ID
		public RuleCall getMultipleDmxBaseTypeSetIDTerminalRuleCall_0_1_0_1() { return cMultipleDmxBaseTypeSetIDTerminalRuleCall_0_1_0_1; }
		
		//collection?='*'?
		public Assignment getCollectionAssignment_1() { return cCollectionAssignment_1; }
		
		//'*'
		public Keyword getCollectionAsteriskKeyword_1_0() { return cCollectionAsteriskKeyword_1_0; }
	}
	public class DmxFilterParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.dmx.Dmx.DmxFilterParameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeDescAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeDescDmxFilterTypeDescriptorParserRuleCall_2_0 = (RuleCall)cTypeDescAssignment_2.eContents().get(0);
		
		//DmxFilterParameter:
		//	name=ID
		//	':'
		//	typeDesc=DmxFilterTypeDescriptor;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID ':' typeDesc=DmxFilterTypeDescriptor
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//typeDesc=DmxFilterTypeDescriptor
		public Assignment getTypeDescAssignment_2() { return cTypeDescAssignment_2; }
		
		//DmxFilterTypeDescriptor
		public RuleCall getTypeDescDmxFilterTypeDescriptorParserRuleCall_2_0() { return cTypeDescDmxFilterTypeDescriptorParserRuleCall_2_0; }
	}
	public class DExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.dmx.Dmx.DExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDmxAssignmentParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDmxPredicateWithCorrelationVariableParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cDRichTextParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		///*
		// * Expressions
		// */ DExpression:
		//	DmxAssignment | DmxPredicateWithCorrelationVariable | DRichText;
		@Override public ParserRule getRule() { return rule; }
		
		//DmxAssignment | DmxPredicateWithCorrelationVariable | DRichText
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//DmxAssignment
		public RuleCall getDmxAssignmentParserRuleCall_0() { return cDmxAssignmentParserRuleCall_0; }
		
		//DmxPredicateWithCorrelationVariable
		public RuleCall getDmxPredicateWithCorrelationVariableParserRuleCall_1() { return cDmxPredicateWithCorrelationVariableParserRuleCall_1; }
		
		//DRichText
		public RuleCall getDRichTextParserRuleCall_2() { return cDRichTextParserRuleCall_2; }
	}
	public class DRichTextElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.dmx.Dmx.DRichText");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cSegmentsAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cSegmentsDmxTextOnlyParserRuleCall_0_0 = (RuleCall)cSegmentsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cSegmentsAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cSegmentsDmxTextStartParserRuleCall_1_0_0 = (RuleCall)cSegmentsAssignment_1_0.eContents().get(0);
		private final Assignment cSegmentsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cSegmentsDExpressionParserRuleCall_1_1_0 = (RuleCall)cSegmentsAssignment_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Assignment cSegmentsAssignment_1_2_0 = (Assignment)cGroup_1_2.eContents().get(0);
		private final RuleCall cSegmentsDmxTextMiddleParserRuleCall_1_2_0_0 = (RuleCall)cSegmentsAssignment_1_2_0.eContents().get(0);
		private final Assignment cSegmentsAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cSegmentsDExpressionParserRuleCall_1_2_1_0 = (RuleCall)cSegmentsAssignment_1_2_1.eContents().get(0);
		private final Assignment cSegmentsAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cSegmentsDmxTextEndParserRuleCall_1_3_0 = (RuleCall)cSegmentsAssignment_1_3.eContents().get(0);
		
		//DRichText:
		//	segments+=DmxTextOnly
		//	| segments+=DmxTextStart
		//	segments+=DExpression (segments+=DmxTextMiddle segments+=DExpression)*
		//	segments+=DmxTextEnd;
		@Override public ParserRule getRule() { return rule; }
		
		//segments+=DmxTextOnly | segments+=DmxTextStart segments+=DExpression (segments+=DmxTextMiddle segments+=DExpression)*
		//segments+=DmxTextEnd
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//segments+=DmxTextOnly
		public Assignment getSegmentsAssignment_0() { return cSegmentsAssignment_0; }
		
		//DmxTextOnly
		public RuleCall getSegmentsDmxTextOnlyParserRuleCall_0_0() { return cSegmentsDmxTextOnlyParserRuleCall_0_0; }
		
		//segments+=DmxTextStart segments+=DExpression (segments+=DmxTextMiddle segments+=DExpression)* segments+=DmxTextEnd
		public Group getGroup_1() { return cGroup_1; }
		
		//segments+=DmxTextStart
		public Assignment getSegmentsAssignment_1_0() { return cSegmentsAssignment_1_0; }
		
		//DmxTextStart
		public RuleCall getSegmentsDmxTextStartParserRuleCall_1_0_0() { return cSegmentsDmxTextStartParserRuleCall_1_0_0; }
		
		//segments+=DExpression
		public Assignment getSegmentsAssignment_1_1() { return cSegmentsAssignment_1_1; }
		
		//DExpression
		public RuleCall getSegmentsDExpressionParserRuleCall_1_1_0() { return cSegmentsDExpressionParserRuleCall_1_1_0; }
		
		//(segments+=DmxTextMiddle segments+=DExpression)*
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//segments+=DmxTextMiddle
		public Assignment getSegmentsAssignment_1_2_0() { return cSegmentsAssignment_1_2_0; }
		
		//DmxTextMiddle
		public RuleCall getSegmentsDmxTextMiddleParserRuleCall_1_2_0_0() { return cSegmentsDmxTextMiddleParserRuleCall_1_2_0_0; }
		
		//segments+=DExpression
		public Assignment getSegmentsAssignment_1_2_1() { return cSegmentsAssignment_1_2_1; }
		
		//DExpression
		public RuleCall getSegmentsDExpressionParserRuleCall_1_2_1_0() { return cSegmentsDExpressionParserRuleCall_1_2_1_0; }
		
		//segments+=DmxTextEnd
		public Assignment getSegmentsAssignment_1_3() { return cSegmentsAssignment_1_3; }
		
		//DmxTextEnd
		public RuleCall getSegmentsDmxTextEndParserRuleCall_1_3_0() { return cSegmentsDmxTextEndParserRuleCall_1_3_0; }
	}
	public class DmxTextOnlyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.dmx.Dmx.DmxTextOnly");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValuePLAIN_TEXT_ONLYTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//DmxTextOnly DTextSegment:
		//	value=PLAIN_TEXT_ONLY;
		@Override public ParserRule getRule() { return rule; }
		
		//value=PLAIN_TEXT_ONLY
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//PLAIN_TEXT_ONLY
		public RuleCall getValuePLAIN_TEXT_ONLYTerminalRuleCall_0() { return cValuePLAIN_TEXT_ONLYTerminalRuleCall_0; }
	}
	public class DmxTextStartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.dmx.Dmx.DmxTextStart");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValuePLAIN_TEXT_STARTTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//DmxTextStart DTextSegment:
		//	value=PLAIN_TEXT_START;
		@Override public ParserRule getRule() { return rule; }
		
		//value=PLAIN_TEXT_START
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//PLAIN_TEXT_START
		public RuleCall getValuePLAIN_TEXT_STARTTerminalRuleCall_0() { return cValuePLAIN_TEXT_STARTTerminalRuleCall_0; }
	}
	public class DmxTextMiddleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.dmx.Dmx.DmxTextMiddle");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValuePLAIN_TEXT_MIDDLETerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//DmxTextMiddle DTextSegment:
		//	value=PLAIN_TEXT_MIDDLE;
		@Override public ParserRule getRule() { return rule; }
		
		//value=PLAIN_TEXT_MIDDLE
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//PLAIN_TEXT_MIDDLE
		public RuleCall getValuePLAIN_TEXT_MIDDLETerminalRuleCall_0() { return cValuePLAIN_TEXT_MIDDLETerminalRuleCall_0; }
	}
	public class DmxTextEndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.dmx.Dmx.DmxTextEnd");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValuePLAIN_TEXT_ENDTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//DmxTextEnd DTextSegment:
		//	value=PLAIN_TEXT_END;
		@Override public ParserRule getRule() { return rule; }
		
		//value=PLAIN_TEXT_END
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//PLAIN_TEXT_END
		public RuleCall getValuePLAIN_TEXT_ENDTerminalRuleCall_0() { return cValuePLAIN_TEXT_ENDTerminalRuleCall_0; }
	}
	public class DmxNavigableMemberReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.dmx.Dmx.DmxNavigableMemberReference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cDmxPrimaryExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Group cGroup_1_0_0_0 = (Group)cGroup_1_0_0.eContents().get(0);
		private final Action cDmxAssignmentPrecedingNavigationSegmentAction_1_0_0_0_0 = (Action)cGroup_1_0_0_0.eContents().get(0);
		private final Keyword cFullStopKeyword_1_0_0_0_1 = (Keyword)cGroup_1_0_0_0.eContents().get(1);
		private final Assignment cAssignToMemberAssignment_1_0_0_0_2 = (Assignment)cGroup_1_0_0_0.eContents().get(2);
		private final CrossReference cAssignToMemberDNavigableMemberCrossReference_1_0_0_0_2_0 = (CrossReference)cAssignToMemberAssignment_1_0_0_0_2.eContents().get(0);
		private final RuleCall cAssignToMemberDNavigableMemberIDTerminalRuleCall_1_0_0_0_2_0_1 = (RuleCall)cAssignToMemberDNavigableMemberCrossReference_1_0_0_0_2_0.eContents().get(1);
		private final RuleCall cDmxOpSingleAssignParserRuleCall_1_0_0_0_3 = (RuleCall)cGroup_1_0_0_0.eContents().get(3);
		private final Assignment cValueAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cValueDmxOrExpressionParserRuleCall_1_0_1_0 = (RuleCall)cValueAssignment_1_0_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Group cGroup_1_1_0 = (Group)cGroup_1_1.eContents().get(0);
		private final Group cGroup_1_1_0_0 = (Group)cGroup_1_1_0.eContents().get(0);
		private final Action cDmxMemberNavigationPrecedingNavigationSegmentAction_1_1_0_0_0 = (Action)cGroup_1_1_0_0.eContents().get(0);
		private final Keyword cFullStopKeyword_1_1_0_0_1 = (Keyword)cGroup_1_1_0_0.eContents().get(1);
		private final Assignment cMemberAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final CrossReference cMemberDNavigableMemberCrossReference_1_1_1_0 = (CrossReference)cMemberAssignment_1_1_1.eContents().get(0);
		private final RuleCall cMemberDNavigableMemberIDTerminalRuleCall_1_1_1_0_1 = (RuleCall)cMemberDNavigableMemberCrossReference_1_1_1_0.eContents().get(1);
		private final Alternatives cAlternatives_1_1_2 = (Alternatives)cGroup_1_1.eContents().get(2);
		private final Group cGroup_1_1_2_0 = (Group)cAlternatives_1_1_2.eContents().get(0);
		private final Assignment cExplicitOperationCallAssignment_1_1_2_0_0 = (Assignment)cGroup_1_1_2_0.eContents().get(0);
		private final Keyword cExplicitOperationCallLeftParenthesisKeyword_1_1_2_0_0_0 = (Keyword)cExplicitOperationCallAssignment_1_1_2_0_0.eContents().get(0);
		private final Assignment cCallArgumentsAssignment_1_1_2_0_1 = (Assignment)cGroup_1_1_2_0.eContents().get(1);
		private final RuleCall cCallArgumentsDmxCallArgumentsParserRuleCall_1_1_2_0_1_0 = (RuleCall)cCallArgumentsAssignment_1_1_2_0_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_1_2_0_2 = (Keyword)cGroup_1_1_2_0.eContents().get(2);
		private final Assignment cBeforeAssignment_1_1_2_1 = (Assignment)cAlternatives_1_1_2.eContents().get(1);
		private final Keyword cBeforeBeforeKeyword_1_1_2_1_0 = (Keyword)cBeforeAssignment_1_1_2_1.eContents().get(0);
		
		//DmxNavigableMemberReference DExpression:
		//	DmxPrimaryExpression (=> ({DmxAssignment.precedingNavigationSegment=current} '.'
		//	assignToMember=[DNavigableMember] DmxOpSingleAssign) value=DmxOrExpression
		//	| => ({DmxMemberNavigation.precedingNavigationSegment=current} '.') member=[DNavigableMember] (=>
		//	explicitOperationCall?='(' // => boolean => has 0.n explicit arguments
		//	callArguments=DmxCallArguments
		//	')'
		//	| before?="@before")?)*;
		@Override public ParserRule getRule() { return rule; }
		
		//DmxPrimaryExpression (=> ({DmxAssignment.precedingNavigationSegment=current} '.' assignToMember=[DNavigableMember]
		//DmxOpSingleAssign) value=DmxOrExpression | => ({DmxMemberNavigation.precedingNavigationSegment=current} '.')
		//member=[DNavigableMember] (=> explicitOperationCall?='(' // => boolean => has 0.n explicit arguments
		//callArguments=DmxCallArguments ')' | before?="@before")?)*
		public Group getGroup() { return cGroup; }
		
		//DmxPrimaryExpression
		public RuleCall getDmxPrimaryExpressionParserRuleCall_0() { return cDmxPrimaryExpressionParserRuleCall_0; }
		
		//(=> ({DmxAssignment.precedingNavigationSegment=current} '.' assignToMember=[DNavigableMember] DmxOpSingleAssign)
		//value=DmxOrExpression | => ({DmxMemberNavigation.precedingNavigationSegment=current} '.') member=[DNavigableMember] (=>
		//explicitOperationCall?='(' // => boolean => has 0.n explicit arguments
		//callArguments=DmxCallArguments ')' | before?="@before")?)*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//=> ({DmxAssignment.precedingNavigationSegment=current} '.' assignToMember=[DNavigableMember] DmxOpSingleAssign)
		//value=DmxOrExpression
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//=> ({DmxAssignment.precedingNavigationSegment=current} '.' assignToMember=[DNavigableMember] DmxOpSingleAssign)
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//({DmxAssignment.precedingNavigationSegment=current} '.' assignToMember=[DNavigableMember] DmxOpSingleAssign)
		public Group getGroup_1_0_0_0() { return cGroup_1_0_0_0; }
		
		//{DmxAssignment.precedingNavigationSegment=current}
		public Action getDmxAssignmentPrecedingNavigationSegmentAction_1_0_0_0_0() { return cDmxAssignmentPrecedingNavigationSegmentAction_1_0_0_0_0; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0_0_0_1() { return cFullStopKeyword_1_0_0_0_1; }
		
		//assignToMember=[DNavigableMember]
		public Assignment getAssignToMemberAssignment_1_0_0_0_2() { return cAssignToMemberAssignment_1_0_0_0_2; }
		
		//[DNavigableMember]
		public CrossReference getAssignToMemberDNavigableMemberCrossReference_1_0_0_0_2_0() { return cAssignToMemberDNavigableMemberCrossReference_1_0_0_0_2_0; }
		
		//ID
		public RuleCall getAssignToMemberDNavigableMemberIDTerminalRuleCall_1_0_0_0_2_0_1() { return cAssignToMemberDNavigableMemberIDTerminalRuleCall_1_0_0_0_2_0_1; }
		
		//DmxOpSingleAssign
		public RuleCall getDmxOpSingleAssignParserRuleCall_1_0_0_0_3() { return cDmxOpSingleAssignParserRuleCall_1_0_0_0_3; }
		
		//value=DmxOrExpression
		public Assignment getValueAssignment_1_0_1() { return cValueAssignment_1_0_1; }
		
		//DmxOrExpression
		public RuleCall getValueDmxOrExpressionParserRuleCall_1_0_1_0() { return cValueDmxOrExpressionParserRuleCall_1_0_1_0; }
		
		//=> ({DmxMemberNavigation.precedingNavigationSegment=current} '.') member=[DNavigableMember] (=>
		//explicitOperationCall?='(' // => boolean => has 0.n explicit arguments
		//callArguments=DmxCallArguments ')' | before?="@before")?
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//=> ({DmxMemberNavigation.precedingNavigationSegment=current} '.')
		public Group getGroup_1_1_0() { return cGroup_1_1_0; }
		
		//({DmxMemberNavigation.precedingNavigationSegment=current} '.')
		public Group getGroup_1_1_0_0() { return cGroup_1_1_0_0; }
		
		//{DmxMemberNavigation.precedingNavigationSegment=current}
		public Action getDmxMemberNavigationPrecedingNavigationSegmentAction_1_1_0_0_0() { return cDmxMemberNavigationPrecedingNavigationSegmentAction_1_1_0_0_0; }
		
		//'.'
		public Keyword getFullStopKeyword_1_1_0_0_1() { return cFullStopKeyword_1_1_0_0_1; }
		
		//member=[DNavigableMember]
		public Assignment getMemberAssignment_1_1_1() { return cMemberAssignment_1_1_1; }
		
		//[DNavigableMember]
		public CrossReference getMemberDNavigableMemberCrossReference_1_1_1_0() { return cMemberDNavigableMemberCrossReference_1_1_1_0; }
		
		//ID
		public RuleCall getMemberDNavigableMemberIDTerminalRuleCall_1_1_1_0_1() { return cMemberDNavigableMemberIDTerminalRuleCall_1_1_1_0_1; }
		
		//(=> explicitOperationCall?='(' // => boolean => has 0.n explicit arguments
		//callArguments=DmxCallArguments ')' | before?="@before")?
		public Alternatives getAlternatives_1_1_2() { return cAlternatives_1_1_2; }
		
		//=> explicitOperationCall?='(' // => boolean => has 0.n explicit arguments
		//callArguments=DmxCallArguments ')'
		public Group getGroup_1_1_2_0() { return cGroup_1_1_2_0; }
		
		//=> explicitOperationCall?='('
		public Assignment getExplicitOperationCallAssignment_1_1_2_0_0() { return cExplicitOperationCallAssignment_1_1_2_0_0; }
		
		//'('
		public Keyword getExplicitOperationCallLeftParenthesisKeyword_1_1_2_0_0_0() { return cExplicitOperationCallLeftParenthesisKeyword_1_1_2_0_0_0; }
		
		//// => boolean => has 0.n explicit arguments
		//callArguments=DmxCallArguments
		public Assignment getCallArgumentsAssignment_1_1_2_0_1() { return cCallArgumentsAssignment_1_1_2_0_1; }
		
		//DmxCallArguments
		public RuleCall getCallArgumentsDmxCallArgumentsParserRuleCall_1_1_2_0_1_0() { return cCallArgumentsDmxCallArgumentsParserRuleCall_1_1_2_0_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_1_2_0_2() { return cRightParenthesisKeyword_1_1_2_0_2; }
		
		//before?="@before"
		public Assignment getBeforeAssignment_1_1_2_1() { return cBeforeAssignment_1_1_2_1; }
		
		//"@before"
		public Keyword getBeforeBeforeKeyword_1_1_2_1_0() { return cBeforeBeforeKeyword_1_1_2_1_0; }
	}
	public class DmxCallArgumentsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.dmx.Dmx.DmxCallArguments");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDmxCallArgumentsAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cArgumentsAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cArgumentsDmxPredicateWithCorrelationVariableParserRuleCall_1_0_0 = (RuleCall)cArgumentsAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cArgumentsAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cArgumentsDmxPredicateWithCorrelationVariableParserRuleCall_1_1_1_0 = (RuleCall)cArgumentsAssignment_1_1_1.eContents().get(0);
		
		//DmxCallArguments:
		//	{DmxCallArguments} (arguments+=DmxPredicateWithCorrelationVariable (','
		//	arguments+=DmxPredicateWithCorrelationVariable)*)?;
		@Override public ParserRule getRule() { return rule; }
		
		//{DmxCallArguments} (arguments+=DmxPredicateWithCorrelationVariable (','
		//arguments+=DmxPredicateWithCorrelationVariable)*)?
		public Group getGroup() { return cGroup; }
		
		//{DmxCallArguments}
		public Action getDmxCallArgumentsAction_0() { return cDmxCallArgumentsAction_0; }
		
		//(arguments+=DmxPredicateWithCorrelationVariable (',' arguments+=DmxPredicateWithCorrelationVariable)*)?
		public Group getGroup_1() { return cGroup_1; }
		
		//arguments+=DmxPredicateWithCorrelationVariable
		public Assignment getArgumentsAssignment_1_0() { return cArgumentsAssignment_1_0; }
		
		//DmxPredicateWithCorrelationVariable
		public RuleCall getArgumentsDmxPredicateWithCorrelationVariableParserRuleCall_1_0_0() { return cArgumentsDmxPredicateWithCorrelationVariableParserRuleCall_1_0_0; }
		
		//(',' arguments+=DmxPredicateWithCorrelationVariable)*
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//','
		public Keyword getCommaKeyword_1_1_0() { return cCommaKeyword_1_1_0; }
		
		//arguments+=DmxPredicateWithCorrelationVariable
		public Assignment getArgumentsAssignment_1_1_1() { return cArgumentsAssignment_1_1_1; }
		
		//DmxPredicateWithCorrelationVariable
		public RuleCall getArgumentsDmxPredicateWithCorrelationVariableParserRuleCall_1_1_1_0() { return cArgumentsDmxPredicateWithCorrelationVariableParserRuleCall_1_1_1_0; }
	}
	public class DmxAssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.dmx.Dmx.DmxAssignment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDmxAssignmentAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cAssignToMemberAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cAssignToMemberDNavigableMemberCrossReference_1_0 = (CrossReference)cAssignToMemberAssignment_1.eContents().get(0);
		private final RuleCall cAssignToMemberDNavigableMemberIDTerminalRuleCall_1_0_1 = (RuleCall)cAssignToMemberDNavigableMemberCrossReference_1_0.eContents().get(1);
		private final RuleCall cDmxOpSingleAssignParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueDmxOrExpressionParserRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		
		//DmxAssignment DExpression:
		//	{DmxAssignment} assignToMember=[DNavigableMember] DmxOpSingleAssign value=DmxOrExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//{DmxAssignment} assignToMember=[DNavigableMember] DmxOpSingleAssign value=DmxOrExpression
		public Group getGroup() { return cGroup; }
		
		//{DmxAssignment}
		public Action getDmxAssignmentAction_0() { return cDmxAssignmentAction_0; }
		
		//assignToMember=[DNavigableMember]
		public Assignment getAssignToMemberAssignment_1() { return cAssignToMemberAssignment_1; }
		
		//[DNavigableMember]
		public CrossReference getAssignToMemberDNavigableMemberCrossReference_1_0() { return cAssignToMemberDNavigableMemberCrossReference_1_0; }
		
		//ID
		public RuleCall getAssignToMemberDNavigableMemberIDTerminalRuleCall_1_0_1() { return cAssignToMemberDNavigableMemberIDTerminalRuleCall_1_0_1; }
		
		//DmxOpSingleAssign
		public RuleCall getDmxOpSingleAssignParserRuleCall_2() { return cDmxOpSingleAssignParserRuleCall_2; }
		
		//value=DmxOrExpression
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }
		
		//DmxOrExpression
		public RuleCall getValueDmxOrExpressionParserRuleCall_3_0() { return cValueDmxOrExpressionParserRuleCall_3_0; }
	}
	public class DmxOpSingleAssignElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.dmx.Dmx.DmxOpSingleAssign");
		private final Keyword cColonEqualsSignKeyword = (Keyword)rule.eContents().get(1);
		
		//DmxOpSingleAssign:
		//	':=';
		@Override public ParserRule getRule() { return rule; }
		
		//':='
		public Keyword getColonEqualsSignKeyword() { return cColonEqualsSignKeyword; }
	}
	public class DmxPredicateWithCorrelationVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.dmx.Dmx.DmxPredicateWithCorrelationVariable");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cDmxPredicateWithCorrelationVariableAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cCorrelationVariableAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cCorrelationVariableDmxCorrelationVariableParserRuleCall_0_1_0 = (RuleCall)cCorrelationVariableAssignment_0_1.eContents().get(0);
		private final Keyword cVerticalLineKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cPredicateAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cPredicateDmxOrExpressionParserRuleCall_0_3_0 = (RuleCall)cPredicateAssignment_0_3.eContents().get(0);
		private final RuleCall cDmxOrExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//DmxPredicateWithCorrelationVariable DExpression:
		//	{DmxPredicateWithCorrelationVariable} correlationVariable=DmxCorrelationVariable
		//	'|'
		//	predicate=DmxOrExpression
		//	| DmxOrExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//{DmxPredicateWithCorrelationVariable} correlationVariable=DmxCorrelationVariable '|' predicate=DmxOrExpression |
		//DmxOrExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{DmxPredicateWithCorrelationVariable} correlationVariable=DmxCorrelationVariable '|' predicate=DmxOrExpression
		public Group getGroup_0() { return cGroup_0; }
		
		//{DmxPredicateWithCorrelationVariable}
		public Action getDmxPredicateWithCorrelationVariableAction_0_0() { return cDmxPredicateWithCorrelationVariableAction_0_0; }
		
		//correlationVariable=DmxCorrelationVariable
		public Assignment getCorrelationVariableAssignment_0_1() { return cCorrelationVariableAssignment_0_1; }
		
		//DmxCorrelationVariable
		public RuleCall getCorrelationVariableDmxCorrelationVariableParserRuleCall_0_1_0() { return cCorrelationVariableDmxCorrelationVariableParserRuleCall_0_1_0; }
		
		//'|'
		public Keyword getVerticalLineKeyword_0_2() { return cVerticalLineKeyword_0_2; }
		
		//predicate=DmxOrExpression
		public Assignment getPredicateAssignment_0_3() { return cPredicateAssignment_0_3; }
		
		//DmxOrExpression
		public RuleCall getPredicateDmxOrExpressionParserRuleCall_0_3_0() { return cPredicateDmxOrExpressionParserRuleCall_0_3_0; }
		
		//DmxOrExpression
		public RuleCall getDmxOrExpressionParserRuleCall_1() { return cDmxOrExpressionParserRuleCall_1; }
	}
	public class DmxCorrelationVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.dmx.Dmx.DmxCorrelationVariable");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//DmxCorrelationVariable:
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class DmxOrExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.dmx.Dmx.DmxOrExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cDmxAndExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cDmxBinaryOperationLeftOperandAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cOperatorAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final RuleCall cOperatorDmxOpOrEnumRuleCall_1_0_0_1_0 = (RuleCall)cOperatorAssignment_1_0_0_1.eContents().get(0);
		private final Assignment cRightOperandAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightOperandDmxAndExpressionParserRuleCall_1_1_0 = (RuleCall)cRightOperandAssignment_1_1.eContents().get(0);
		
		////	(':' type=[DType])? => type is always NULL!
		//DmxOrExpression DExpression:
		//	DmxAndExpression (=> ({DmxBinaryOperation.leftOperand=current} operator=DmxOpOr) rightOperand=DmxAndExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//DmxAndExpression (=> ({DmxBinaryOperation.leftOperand=current} operator=DmxOpOr) rightOperand=DmxAndExpression)*
		public Group getGroup() { return cGroup; }
		
		//DmxAndExpression
		public RuleCall getDmxAndExpressionParserRuleCall_0() { return cDmxAndExpressionParserRuleCall_0; }
		
		//(=> ({DmxBinaryOperation.leftOperand=current} operator=DmxOpOr) rightOperand=DmxAndExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//=> ({DmxBinaryOperation.leftOperand=current} operator=DmxOpOr)
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//({DmxBinaryOperation.leftOperand=current} operator=DmxOpOr)
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//{DmxBinaryOperation.leftOperand=current}
		public Action getDmxBinaryOperationLeftOperandAction_1_0_0_0() { return cDmxBinaryOperationLeftOperandAction_1_0_0_0; }
		
		//operator=DmxOpOr
		public Assignment getOperatorAssignment_1_0_0_1() { return cOperatorAssignment_1_0_0_1; }
		
		//DmxOpOr
		public RuleCall getOperatorDmxOpOrEnumRuleCall_1_0_0_1_0() { return cOperatorDmxOpOrEnumRuleCall_1_0_0_1_0; }
		
		//rightOperand=DmxAndExpression
		public Assignment getRightOperandAssignment_1_1() { return cRightOperandAssignment_1_1; }
		
		//DmxAndExpression
		public RuleCall getRightOperandDmxAndExpressionParserRuleCall_1_1_0() { return cRightOperandDmxAndExpressionParserRuleCall_1_1_0; }
	}
	public class DmxAndExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.dmx.Dmx.DmxAndExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cDmxEqualityExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cDmxBinaryOperationLeftOperandAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cOperatorAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final RuleCall cOperatorDmxOpAndEnumRuleCall_1_0_0_1_0 = (RuleCall)cOperatorAssignment_1_0_0_1.eContents().get(0);
		private final Assignment cRightOperandAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightOperandDmxEqualityExpressionParserRuleCall_1_1_0 = (RuleCall)cRightOperandAssignment_1_1.eContents().get(0);
		
		//DmxAndExpression DExpression:
		//	DmxEqualityExpression (=> ({DmxBinaryOperation.leftOperand=current} operator=DmxOpAnd)
		//	rightOperand=DmxEqualityExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//DmxEqualityExpression (=> ({DmxBinaryOperation.leftOperand=current} operator=DmxOpAnd)
		//rightOperand=DmxEqualityExpression)*
		public Group getGroup() { return cGroup; }
		
		//DmxEqualityExpression
		public RuleCall getDmxEqualityExpressionParserRuleCall_0() { return cDmxEqualityExpressionParserRuleCall_0; }
		
		//(=> ({DmxBinaryOperation.leftOperand=current} operator=DmxOpAnd) rightOperand=DmxEqualityExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//=> ({DmxBinaryOperation.leftOperand=current} operator=DmxOpAnd)
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//({DmxBinaryOperation.leftOperand=current} operator=DmxOpAnd)
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//{DmxBinaryOperation.leftOperand=current}
		public Action getDmxBinaryOperationLeftOperandAction_1_0_0_0() { return cDmxBinaryOperationLeftOperandAction_1_0_0_0; }
		
		//operator=DmxOpAnd
		public Assignment getOperatorAssignment_1_0_0_1() { return cOperatorAssignment_1_0_0_1; }
		
		//DmxOpAnd
		public RuleCall getOperatorDmxOpAndEnumRuleCall_1_0_0_1_0() { return cOperatorDmxOpAndEnumRuleCall_1_0_0_1_0; }
		
		//rightOperand=DmxEqualityExpression
		public Assignment getRightOperandAssignment_1_1() { return cRightOperandAssignment_1_1; }
		
		//DmxEqualityExpression
		public RuleCall getRightOperandDmxEqualityExpressionParserRuleCall_1_1_0() { return cRightOperandDmxEqualityExpressionParserRuleCall_1_1_0; }
	}
	public class DmxEqualityExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.dmx.Dmx.DmxEqualityExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cDmxRelationalExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cDmxBinaryOperationLeftOperandAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cOperatorAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final RuleCall cOperatorDmxOpEqualityEnumRuleCall_1_0_0_1_0 = (RuleCall)cOperatorAssignment_1_0_0_1.eContents().get(0);
		private final Assignment cRightOperandAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightOperandDmxRelationalExpressionParserRuleCall_1_1_0 = (RuleCall)cRightOperandAssignment_1_1.eContents().get(0);
		
		//DmxEqualityExpression DExpression:
		//	DmxRelationalExpression (=> ({DmxBinaryOperation.leftOperand=current} operator=DmxOpEquality)
		//	rightOperand=DmxRelationalExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//DmxRelationalExpression (=> ({DmxBinaryOperation.leftOperand=current} operator=DmxOpEquality)
		//rightOperand=DmxRelationalExpression)*
		public Group getGroup() { return cGroup; }
		
		//DmxRelationalExpression
		public RuleCall getDmxRelationalExpressionParserRuleCall_0() { return cDmxRelationalExpressionParserRuleCall_0; }
		
		//(=> ({DmxBinaryOperation.leftOperand=current} operator=DmxOpEquality) rightOperand=DmxRelationalExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//=> ({DmxBinaryOperation.leftOperand=current} operator=DmxOpEquality)
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//({DmxBinaryOperation.leftOperand=current} operator=DmxOpEquality)
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//{DmxBinaryOperation.leftOperand=current}
		public Action getDmxBinaryOperationLeftOperandAction_1_0_0_0() { return cDmxBinaryOperationLeftOperandAction_1_0_0_0; }
		
		//operator=DmxOpEquality
		public Assignment getOperatorAssignment_1_0_0_1() { return cOperatorAssignment_1_0_0_1; }
		
		//DmxOpEquality
		public RuleCall getOperatorDmxOpEqualityEnumRuleCall_1_0_0_1_0() { return cOperatorDmxOpEqualityEnumRuleCall_1_0_0_1_0; }
		
		//rightOperand=DmxRelationalExpression
		public Assignment getRightOperandAssignment_1_1() { return cRightOperandAssignment_1_1; }
		
		//DmxRelationalExpression
		public RuleCall getRightOperandDmxRelationalExpressionParserRuleCall_1_1_0() { return cRightOperandDmxRelationalExpressionParserRuleCall_1_1_0; }
	}
	public class DmxRelationalExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.dmx.Dmx.DmxRelationalExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cDmxOtherOperatorExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Group cGroup_1_0_0_0 = (Group)cGroup_1_0_0.eContents().get(0);
		private final Action cDmxInstanceOfExpressionExpressionAction_1_0_0_0_0 = (Action)cGroup_1_0_0_0.eContents().get(0);
		private final RuleCall cDmxOpInstanceOfParserRuleCall_1_0_0_0_1 = (RuleCall)cGroup_1_0_0_0.eContents().get(1);
		private final Assignment cTypeAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final CrossReference cTypeDTypeCrossReference_1_0_1_0 = (CrossReference)cTypeAssignment_1_0_1.eContents().get(0);
		private final RuleCall cTypeDTypeIDTerminalRuleCall_1_0_1_0_1 = (RuleCall)cTypeDTypeCrossReference_1_0_1_0.eContents().get(1);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Group cGroup_1_1_0 = (Group)cGroup_1_1.eContents().get(0);
		private final Group cGroup_1_1_0_0 = (Group)cGroup_1_1_0.eContents().get(0);
		private final Action cDmxBinaryOperationLeftOperandAction_1_1_0_0_0 = (Action)cGroup_1_1_0_0.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1_0_0_1 = (Assignment)cGroup_1_1_0_0.eContents().get(1);
		private final RuleCall cOperatorOpCompareEnumRuleCall_1_1_0_0_1_0 = (RuleCall)cOperatorAssignment_1_1_0_0_1.eContents().get(0);
		private final Assignment cRightOperandAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cRightOperandDmxOtherOperatorExpressionParserRuleCall_1_1_1_0 = (RuleCall)cRightOperandAssignment_1_1_1.eContents().get(0);
		
		//DmxRelationalExpression DExpression:
		//	DmxOtherOperatorExpression (=> ({DmxInstanceOfExpression.expression=current} DmxOpInstanceOf) type=[DType] | =>
		//	({DmxBinaryOperation.leftOperand=current} operator=OpCompare) rightOperand=DmxOtherOperatorExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//DmxOtherOperatorExpression (=> ({DmxInstanceOfExpression.expression=current} DmxOpInstanceOf) type=[DType] | =>
		//({DmxBinaryOperation.leftOperand=current} operator=OpCompare) rightOperand=DmxOtherOperatorExpression)*
		public Group getGroup() { return cGroup; }
		
		//DmxOtherOperatorExpression
		public RuleCall getDmxOtherOperatorExpressionParserRuleCall_0() { return cDmxOtherOperatorExpressionParserRuleCall_0; }
		
		//(=> ({DmxInstanceOfExpression.expression=current} DmxOpInstanceOf) type=[DType] | =>
		//({DmxBinaryOperation.leftOperand=current} operator=OpCompare) rightOperand=DmxOtherOperatorExpression)*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//=> ({DmxInstanceOfExpression.expression=current} DmxOpInstanceOf) type=[DType]
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//=> ({DmxInstanceOfExpression.expression=current} DmxOpInstanceOf)
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//({DmxInstanceOfExpression.expression=current} DmxOpInstanceOf)
		public Group getGroup_1_0_0_0() { return cGroup_1_0_0_0; }
		
		//{DmxInstanceOfExpression.expression=current}
		public Action getDmxInstanceOfExpressionExpressionAction_1_0_0_0_0() { return cDmxInstanceOfExpressionExpressionAction_1_0_0_0_0; }
		
		//DmxOpInstanceOf
		public RuleCall getDmxOpInstanceOfParserRuleCall_1_0_0_0_1() { return cDmxOpInstanceOfParserRuleCall_1_0_0_0_1; }
		
		//type=[DType]
		public Assignment getTypeAssignment_1_0_1() { return cTypeAssignment_1_0_1; }
		
		//[DType]
		public CrossReference getTypeDTypeCrossReference_1_0_1_0() { return cTypeDTypeCrossReference_1_0_1_0; }
		
		//ID
		public RuleCall getTypeDTypeIDTerminalRuleCall_1_0_1_0_1() { return cTypeDTypeIDTerminalRuleCall_1_0_1_0_1; }
		
		//=> ({DmxBinaryOperation.leftOperand=current} operator=OpCompare) rightOperand=DmxOtherOperatorExpression
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//=> ({DmxBinaryOperation.leftOperand=current} operator=OpCompare)
		public Group getGroup_1_1_0() { return cGroup_1_1_0; }
		
		//({DmxBinaryOperation.leftOperand=current} operator=OpCompare)
		public Group getGroup_1_1_0_0() { return cGroup_1_1_0_0; }
		
		//{DmxBinaryOperation.leftOperand=current}
		public Action getDmxBinaryOperationLeftOperandAction_1_1_0_0_0() { return cDmxBinaryOperationLeftOperandAction_1_1_0_0_0; }
		
		//operator=OpCompare
		public Assignment getOperatorAssignment_1_1_0_0_1() { return cOperatorAssignment_1_1_0_0_1; }
		
		//OpCompare
		public RuleCall getOperatorOpCompareEnumRuleCall_1_1_0_0_1_0() { return cOperatorOpCompareEnumRuleCall_1_1_0_0_1_0; }
		
		//rightOperand=DmxOtherOperatorExpression
		public Assignment getRightOperandAssignment_1_1_1() { return cRightOperandAssignment_1_1_1; }
		
		//DmxOtherOperatorExpression
		public RuleCall getRightOperandDmxOtherOperatorExpressionParserRuleCall_1_1_1_0() { return cRightOperandDmxOtherOperatorExpressionParserRuleCall_1_1_1_0; }
	}
	public class DmxOpInstanceOfElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.dmx.Dmx.DmxOpInstanceOf");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cISAKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cIsaKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//DmxOpInstanceOf:
		//	'ISA' | 'isa';
		@Override public ParserRule getRule() { return rule; }
		
		//'ISA' | 'isa'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'ISA'
		public Keyword getISAKeyword_0() { return cISAKeyword_0; }
		
		//'isa'
		public Keyword getIsaKeyword_1() { return cIsaKeyword_1; }
	}
	public class DmxOtherOperatorExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.dmx.Dmx.DmxOtherOperatorExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cDmxAdditiveExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cDmxBinaryOperationLeftOperandAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cOperatorAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final RuleCall cOperatorOpOtherEnumRuleCall_1_0_0_1_0 = (RuleCall)cOperatorAssignment_1_0_0_1.eContents().get(0);
		private final Assignment cRightOperandAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightOperandDmxAdditiveExpressionParserRuleCall_1_1_0 = (RuleCall)cRightOperandAssignment_1_1.eContents().get(0);
		
		//DmxOtherOperatorExpression DExpression:
		//	DmxAdditiveExpression (=> ({DmxBinaryOperation.leftOperand=current} operator=OpOther)
		//	rightOperand=DmxAdditiveExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//DmxAdditiveExpression (=> ({DmxBinaryOperation.leftOperand=current} operator=OpOther)
		//rightOperand=DmxAdditiveExpression)*
		public Group getGroup() { return cGroup; }
		
		//DmxAdditiveExpression
		public RuleCall getDmxAdditiveExpressionParserRuleCall_0() { return cDmxAdditiveExpressionParserRuleCall_0; }
		
		//(=> ({DmxBinaryOperation.leftOperand=current} operator=OpOther) rightOperand=DmxAdditiveExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//=> ({DmxBinaryOperation.leftOperand=current} operator=OpOther)
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//({DmxBinaryOperation.leftOperand=current} operator=OpOther)
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//{DmxBinaryOperation.leftOperand=current}
		public Action getDmxBinaryOperationLeftOperandAction_1_0_0_0() { return cDmxBinaryOperationLeftOperandAction_1_0_0_0; }
		
		//operator=OpOther
		public Assignment getOperatorAssignment_1_0_0_1() { return cOperatorAssignment_1_0_0_1; }
		
		//OpOther
		public RuleCall getOperatorOpOtherEnumRuleCall_1_0_0_1_0() { return cOperatorOpOtherEnumRuleCall_1_0_0_1_0; }
		
		//rightOperand=DmxAdditiveExpression
		public Assignment getRightOperandAssignment_1_1() { return cRightOperandAssignment_1_1; }
		
		//DmxAdditiveExpression
		public RuleCall getRightOperandDmxAdditiveExpressionParserRuleCall_1_1_0() { return cRightOperandDmxAdditiveExpressionParserRuleCall_1_1_0; }
	}
	public class DmxAdditiveExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.dmx.Dmx.DmxAdditiveExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cDmxMultiplicativeExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cDmxBinaryOperationLeftOperandAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cOperatorAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final RuleCall cOperatorOpAddEnumRuleCall_1_0_0_1_0 = (RuleCall)cOperatorAssignment_1_0_0_1.eContents().get(0);
		private final Assignment cRightOperandAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightOperandDmxMultiplicativeExpressionParserRuleCall_1_1_0 = (RuleCall)cRightOperandAssignment_1_1.eContents().get(0);
		
		//DmxAdditiveExpression DExpression:
		//	DmxMultiplicativeExpression (=> ({DmxBinaryOperation.leftOperand=current} operator=OpAdd)
		//	rightOperand=DmxMultiplicativeExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//DmxMultiplicativeExpression (=> ({DmxBinaryOperation.leftOperand=current} operator=OpAdd)
		//rightOperand=DmxMultiplicativeExpression)*
		public Group getGroup() { return cGroup; }
		
		//DmxMultiplicativeExpression
		public RuleCall getDmxMultiplicativeExpressionParserRuleCall_0() { return cDmxMultiplicativeExpressionParserRuleCall_0; }
		
		//(=> ({DmxBinaryOperation.leftOperand=current} operator=OpAdd) rightOperand=DmxMultiplicativeExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//=> ({DmxBinaryOperation.leftOperand=current} operator=OpAdd)
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//({DmxBinaryOperation.leftOperand=current} operator=OpAdd)
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//{DmxBinaryOperation.leftOperand=current}
		public Action getDmxBinaryOperationLeftOperandAction_1_0_0_0() { return cDmxBinaryOperationLeftOperandAction_1_0_0_0; }
		
		//operator=OpAdd
		public Assignment getOperatorAssignment_1_0_0_1() { return cOperatorAssignment_1_0_0_1; }
		
		//OpAdd
		public RuleCall getOperatorOpAddEnumRuleCall_1_0_0_1_0() { return cOperatorOpAddEnumRuleCall_1_0_0_1_0; }
		
		//rightOperand=DmxMultiplicativeExpression
		public Assignment getRightOperandAssignment_1_1() { return cRightOperandAssignment_1_1; }
		
		//DmxMultiplicativeExpression
		public RuleCall getRightOperandDmxMultiplicativeExpressionParserRuleCall_1_1_0() { return cRightOperandDmxMultiplicativeExpressionParserRuleCall_1_1_0; }
	}
	public class DmxMultiplicativeExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.dmx.Dmx.DmxMultiplicativeExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cDmxUnaryOperationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cDmxBinaryOperationLeftOperandAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cOperatorAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final RuleCall cOperatorOpMultiEnumRuleCall_1_0_0_1_0 = (RuleCall)cOperatorAssignment_1_0_0_1.eContents().get(0);
		private final Assignment cRightOperandAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightOperandDmxUnaryOperationParserRuleCall_1_1_0 = (RuleCall)cRightOperandAssignment_1_1.eContents().get(0);
		
		//DmxMultiplicativeExpression DExpression:
		//	DmxUnaryOperation (=> ({DmxBinaryOperation.leftOperand=current} operator=OpMulti) rightOperand=DmxUnaryOperation)*;
		@Override public ParserRule getRule() { return rule; }
		
		//DmxUnaryOperation (=> ({DmxBinaryOperation.leftOperand=current} operator=OpMulti) rightOperand=DmxUnaryOperation)*
		public Group getGroup() { return cGroup; }
		
		//DmxUnaryOperation
		public RuleCall getDmxUnaryOperationParserRuleCall_0() { return cDmxUnaryOperationParserRuleCall_0; }
		
		//(=> ({DmxBinaryOperation.leftOperand=current} operator=OpMulti) rightOperand=DmxUnaryOperation)*
		public Group getGroup_1() { return cGroup_1; }
		
		//=> ({DmxBinaryOperation.leftOperand=current} operator=OpMulti)
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//({DmxBinaryOperation.leftOperand=current} operator=OpMulti)
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//{DmxBinaryOperation.leftOperand=current}
		public Action getDmxBinaryOperationLeftOperandAction_1_0_0_0() { return cDmxBinaryOperationLeftOperandAction_1_0_0_0; }
		
		//operator=OpMulti
		public Assignment getOperatorAssignment_1_0_0_1() { return cOperatorAssignment_1_0_0_1; }
		
		//OpMulti
		public RuleCall getOperatorOpMultiEnumRuleCall_1_0_0_1_0() { return cOperatorOpMultiEnumRuleCall_1_0_0_1_0; }
		
		//rightOperand=DmxUnaryOperation
		public Assignment getRightOperandAssignment_1_1() { return cRightOperandAssignment_1_1; }
		
		//DmxUnaryOperation
		public RuleCall getRightOperandDmxUnaryOperationParserRuleCall_1_1_0() { return cRightOperandDmxUnaryOperationParserRuleCall_1_1_0; }
	}
	public class DmxUnaryOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.dmx.Dmx.DmxUnaryOperation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cDmxUnaryOperationAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cOperatorAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cOperatorOpUnaryEnumRuleCall_0_1_0 = (RuleCall)cOperatorAssignment_0_1.eContents().get(0);
		private final Assignment cOperandAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cOperandDmxUnaryOperationParserRuleCall_0_2_0 = (RuleCall)cOperandAssignment_0_2.eContents().get(0);
		private final RuleCall cDmxCastExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//DmxUnaryOperation DExpression:
		//	{DmxUnaryOperation} operator=OpUnary operand=DmxUnaryOperation
		//	| DmxCastExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//{DmxUnaryOperation} operator=OpUnary operand=DmxUnaryOperation | DmxCastExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{DmxUnaryOperation} operator=OpUnary operand=DmxUnaryOperation
		public Group getGroup_0() { return cGroup_0; }
		
		//{DmxUnaryOperation}
		public Action getDmxUnaryOperationAction_0_0() { return cDmxUnaryOperationAction_0_0; }
		
		//operator=OpUnary
		public Assignment getOperatorAssignment_0_1() { return cOperatorAssignment_0_1; }
		
		//OpUnary
		public RuleCall getOperatorOpUnaryEnumRuleCall_0_1_0() { return cOperatorOpUnaryEnumRuleCall_0_1_0; }
		
		//operand=DmxUnaryOperation
		public Assignment getOperandAssignment_0_2() { return cOperandAssignment_0_2; }
		
		//DmxUnaryOperation
		public RuleCall getOperandDmxUnaryOperationParserRuleCall_0_2_0() { return cOperandDmxUnaryOperationParserRuleCall_0_2_0; }
		
		//DmxCastExpression
		public RuleCall getDmxCastExpressionParserRuleCall_1() { return cDmxCastExpressionParserRuleCall_1; }
	}
	public class DmxCastExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.dmx.Dmx.DmxCastExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cDmxNavigableMemberReferenceParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cDmxCastExpressionTargetAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final RuleCall cDmxOpCastParserRuleCall_1_0_0_1 = (RuleCall)cGroup_1_0_0.eContents().get(1);
		private final Assignment cTypeAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final CrossReference cTypeDTypeCrossReference_1_1_0 = (CrossReference)cTypeAssignment_1_1.eContents().get(0);
		private final RuleCall cTypeDTypeIDTerminalRuleCall_1_1_0_1 = (RuleCall)cTypeDTypeCrossReference_1_1_0.eContents().get(1);
		
		//DmxCastExpression DExpression:
		//	DmxNavigableMemberReference (=> ({DmxCastExpression.target=current} DmxOpCast) type=[DType])?;
		@Override public ParserRule getRule() { return rule; }
		
		//DmxNavigableMemberReference (=> ({DmxCastExpression.target=current} DmxOpCast) type=[DType])?
		public Group getGroup() { return cGroup; }
		
		//DmxNavigableMemberReference
		public RuleCall getDmxNavigableMemberReferenceParserRuleCall_0() { return cDmxNavigableMemberReferenceParserRuleCall_0; }
		
		//(=> ({DmxCastExpression.target=current} DmxOpCast) type=[DType])?
		public Group getGroup_1() { return cGroup_1; }
		
		//=> ({DmxCastExpression.target=current} DmxOpCast)
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//({DmxCastExpression.target=current} DmxOpCast)
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//{DmxCastExpression.target=current}
		public Action getDmxCastExpressionTargetAction_1_0_0_0() { return cDmxCastExpressionTargetAction_1_0_0_0; }
		
		//DmxOpCast
		public RuleCall getDmxOpCastParserRuleCall_1_0_0_1() { return cDmxOpCastParserRuleCall_1_0_0_1; }
		
		//type=[DType]
		public Assignment getTypeAssignment_1_1() { return cTypeAssignment_1_1; }
		
		//[DType]
		public CrossReference getTypeDTypeCrossReference_1_1_0() { return cTypeDTypeCrossReference_1_1_0; }
		
		//ID
		public RuleCall getTypeDTypeIDTerminalRuleCall_1_1_0_1() { return cTypeDTypeIDTerminalRuleCall_1_1_0_1; }
	}
	public class DmxOpCastElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.dmx.Dmx.DmxOpCast");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cASKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cAsKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//DmxOpCast:
		//	'AS' | 'as';
		@Override public ParserRule getRule() { return rule; }
		
		//'AS' | 'as'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'AS'
		public Keyword getASKeyword_0() { return cASKeyword_0; }
		
		//'as'
		public Keyword getAsKeyword_1() { return cAsKeyword_1; }
	}
	public class DmxPrimaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.dmx.Dmx.DmxPrimaryExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDmxLiteralExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDmxParenthesizedExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cDmxListExpressionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cDmxFunctionCallParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cDmxConstructorCallParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cDmxStaticReferenceParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cDmxContextReferenceParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cDmxIfExpressionParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		
		//DmxPrimaryExpression DExpression:
		//	DmxLiteralExpression | DmxParenthesizedExpression | DmxListExpression | DmxFunctionCall | DmxConstructorCall |
		//	DmxStaticReference | DmxContextReference | DmxIfExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//DmxLiteralExpression | DmxParenthesizedExpression | DmxListExpression | DmxFunctionCall | DmxConstructorCall |
		//DmxStaticReference | DmxContextReference | DmxIfExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//DmxLiteralExpression
		public RuleCall getDmxLiteralExpressionParserRuleCall_0() { return cDmxLiteralExpressionParserRuleCall_0; }
		
		//DmxParenthesizedExpression
		public RuleCall getDmxParenthesizedExpressionParserRuleCall_1() { return cDmxParenthesizedExpressionParserRuleCall_1; }
		
		//DmxListExpression
		public RuleCall getDmxListExpressionParserRuleCall_2() { return cDmxListExpressionParserRuleCall_2; }
		
		//DmxFunctionCall
		public RuleCall getDmxFunctionCallParserRuleCall_3() { return cDmxFunctionCallParserRuleCall_3; }
		
		//DmxConstructorCall
		public RuleCall getDmxConstructorCallParserRuleCall_4() { return cDmxConstructorCallParserRuleCall_4; }
		
		//DmxStaticReference
		public RuleCall getDmxStaticReferenceParserRuleCall_5() { return cDmxStaticReferenceParserRuleCall_5; }
		
		//DmxContextReference
		public RuleCall getDmxContextReferenceParserRuleCall_6() { return cDmxContextReferenceParserRuleCall_6; }
		
		//DmxIfExpression
		public RuleCall getDmxIfExpressionParserRuleCall_7() { return cDmxIfExpressionParserRuleCall_7; }
	}
	public class DmxLiteralExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.dmx.Dmx.DmxLiteralExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDmxBooleanLiteralParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDmxStringLiteralParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cDmxNaturalLiteralParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cDmxDecimalLiteralParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cDmxUndefinedLiteralParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//DmxLiteralExpression DExpression:
		//	DmxBooleanLiteral | DmxStringLiteral | DmxNaturalLiteral | DmxDecimalLiteral | DmxUndefinedLiteral;
		@Override public ParserRule getRule() { return rule; }
		
		//DmxBooleanLiteral | DmxStringLiteral | DmxNaturalLiteral | DmxDecimalLiteral | DmxUndefinedLiteral
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//DmxBooleanLiteral
		public RuleCall getDmxBooleanLiteralParserRuleCall_0() { return cDmxBooleanLiteralParserRuleCall_0; }
		
		//DmxStringLiteral
		public RuleCall getDmxStringLiteralParserRuleCall_1() { return cDmxStringLiteralParserRuleCall_1; }
		
		//DmxNaturalLiteral
		public RuleCall getDmxNaturalLiteralParserRuleCall_2() { return cDmxNaturalLiteralParserRuleCall_2; }
		
		//DmxDecimalLiteral
		public RuleCall getDmxDecimalLiteralParserRuleCall_3() { return cDmxDecimalLiteralParserRuleCall_3; }
		
		//DmxUndefinedLiteral
		public RuleCall getDmxUndefinedLiteralParserRuleCall_4() { return cDmxUndefinedLiteralParserRuleCall_4; }
	}
	public class DmxParenthesizedExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.dmx.Dmx.DmxParenthesizedExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cDExpressionParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//DmxParenthesizedExpression DExpression:
		//	'(' DExpression ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'(' DExpression ')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//DExpression
		public RuleCall getDExpressionParserRuleCall_1() { return cDExpressionParserRuleCall_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}
	public class DmxListExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.dmx.Dmx.DmxListExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDmxListExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cElementsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cElementsDExpressionParserRuleCall_2_0_0 = (RuleCall)cElementsAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cElementsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cElementsDExpressionParserRuleCall_2_1_1_0 = (RuleCall)cElementsAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//DmxListExpression DExpression:
		//	{DmxListExpression}
		//	'{' (elements+=DExpression (',' elements+=DExpression)*)?
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{DmxListExpression} '{' (elements+=DExpression (',' elements+=DExpression)*)? '}'
		public Group getGroup() { return cGroup; }
		
		//{DmxListExpression}
		public Action getDmxListExpressionAction_0() { return cDmxListExpressionAction_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//(elements+=DExpression (',' elements+=DExpression)*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//elements+=DExpression
		public Assignment getElementsAssignment_2_0() { return cElementsAssignment_2_0; }
		
		//DExpression
		public RuleCall getElementsDExpressionParserRuleCall_2_0_0() { return cElementsDExpressionParserRuleCall_2_0_0; }
		
		//(',' elements+=DExpression)*
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//','
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }
		
		//elements+=DExpression
		public Assignment getElementsAssignment_2_1_1() { return cElementsAssignment_2_1_1; }
		
		//DExpression
		public RuleCall getElementsDExpressionParserRuleCall_2_1_1_0() { return cElementsDExpressionParserRuleCall_2_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class DmxFunctionCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.dmx.Dmx.DmxFunctionCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDmxFunctionCallAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cFunctionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cFunctionDmxFilterCrossReference_1_0 = (CrossReference)cFunctionAssignment_1.eContents().get(0);
		private final RuleCall cFunctionDmxFilterIDTerminalRuleCall_1_0_1 = (RuleCall)cFunctionDmxFilterCrossReference_1_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cCallArgumentsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cCallArgumentsDmxFunctionCallArgumentsParserRuleCall_3_0 = (RuleCall)cCallArgumentsAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//DmxFunctionCall DExpression:
		//	{DmxFunctionCall} function=[DmxFilter]
		//	'('
		//	callArguments=DmxFunctionCallArguments
		//	')';
		@Override public ParserRule getRule() { return rule; }
		
		//{DmxFunctionCall} function=[DmxFilter] '(' callArguments=DmxFunctionCallArguments ')'
		public Group getGroup() { return cGroup; }
		
		//{DmxFunctionCall}
		public Action getDmxFunctionCallAction_0() { return cDmxFunctionCallAction_0; }
		
		//function=[DmxFilter]
		public Assignment getFunctionAssignment_1() { return cFunctionAssignment_1; }
		
		//[DmxFilter]
		public CrossReference getFunctionDmxFilterCrossReference_1_0() { return cFunctionDmxFilterCrossReference_1_0; }
		
		//ID
		public RuleCall getFunctionDmxFilterIDTerminalRuleCall_1_0_1() { return cFunctionDmxFilterIDTerminalRuleCall_1_0_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//callArguments=DmxFunctionCallArguments
		public Assignment getCallArgumentsAssignment_3() { return cCallArgumentsAssignment_3; }
		
		//DmxFunctionCallArguments
		public RuleCall getCallArgumentsDmxFunctionCallArgumentsParserRuleCall_3_0() { return cCallArgumentsDmxFunctionCallArgumentsParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class DmxFunctionCallArgumentsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.dmx.Dmx.DmxFunctionCallArguments");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDmxCallArgumentsAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cArgumentsAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cArgumentsDExpressionParserRuleCall_1_0_0 = (RuleCall)cArgumentsAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cArgumentsAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cArgumentsDExpressionParserRuleCall_1_1_1_0 = (RuleCall)cArgumentsAssignment_1_1_1.eContents().get(0);
		
		//DmxFunctionCallArguments DmxCallArguments:
		//	{DmxCallArguments} (arguments+=DExpression (',' arguments+=DExpression)*)?;
		@Override public ParserRule getRule() { return rule; }
		
		//{DmxCallArguments} (arguments+=DExpression (',' arguments+=DExpression)*)?
		public Group getGroup() { return cGroup; }
		
		//{DmxCallArguments}
		public Action getDmxCallArgumentsAction_0() { return cDmxCallArgumentsAction_0; }
		
		//(arguments+=DExpression (',' arguments+=DExpression)*)?
		public Group getGroup_1() { return cGroup_1; }
		
		//arguments+=DExpression
		public Assignment getArgumentsAssignment_1_0() { return cArgumentsAssignment_1_0; }
		
		//DExpression
		public RuleCall getArgumentsDExpressionParserRuleCall_1_0_0() { return cArgumentsDExpressionParserRuleCall_1_0_0; }
		
		//(',' arguments+=DExpression)*
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//','
		public Keyword getCommaKeyword_1_1_0() { return cCommaKeyword_1_1_0; }
		
		//arguments+=DExpression
		public Assignment getArgumentsAssignment_1_1_1() { return cArgumentsAssignment_1_1_1; }
		
		//DExpression
		public RuleCall getArgumentsDExpressionParserRuleCall_1_1_1_0() { return cArgumentsDExpressionParserRuleCall_1_1_1_0; }
	}
	public class DmxConstructorCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.dmx.Dmx.DmxConstructorCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDmxConstructorCallAction_0 = (Action)cGroup.eContents().get(0);
		private final RuleCall cDmxOpConstructorParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cConstructorAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cConstructorDComplexTypeCrossReference_2_0 = (CrossReference)cConstructorAssignment_2.eContents().get(0);
		private final RuleCall cConstructorDComplexTypeIDTerminalRuleCall_2_0_1 = (RuleCall)cConstructorDComplexTypeCrossReference_2_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cExplicitConstructorCallAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final Keyword cExplicitConstructorCallLeftParenthesisKeyword_3_0_0 = (Keyword)cExplicitConstructorCallAssignment_3_0.eContents().get(0);
		private final Assignment cCallArgumentsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cCallArgumentsDmxFunctionCallArgumentsParserRuleCall_3_1_0 = (RuleCall)cCallArgumentsAssignment_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		
		//DmxConstructorCall DExpression:
		//	{DmxConstructorCall} DmxOpConstructor
		//	constructor=[DComplexType] (=> explicitConstructorCall?='(' // => boolean => has 0.n explicit arguments
		//	callArguments=DmxFunctionCallArguments
		//	')')?;
		@Override public ParserRule getRule() { return rule; }
		
		//{DmxConstructorCall} DmxOpConstructor constructor=[DComplexType] (=> explicitConstructorCall?='(' // => boolean => has 0.n explicit arguments
		//callArguments=DmxFunctionCallArguments ')')?
		public Group getGroup() { return cGroup; }
		
		//{DmxConstructorCall}
		public Action getDmxConstructorCallAction_0() { return cDmxConstructorCallAction_0; }
		
		//DmxOpConstructor
		public RuleCall getDmxOpConstructorParserRuleCall_1() { return cDmxOpConstructorParserRuleCall_1; }
		
		//constructor=[DComplexType]
		public Assignment getConstructorAssignment_2() { return cConstructorAssignment_2; }
		
		//[DComplexType]
		public CrossReference getConstructorDComplexTypeCrossReference_2_0() { return cConstructorDComplexTypeCrossReference_2_0; }
		
		//ID
		public RuleCall getConstructorDComplexTypeIDTerminalRuleCall_2_0_1() { return cConstructorDComplexTypeIDTerminalRuleCall_2_0_1; }
		
		//(=> explicitConstructorCall?='(' // => boolean => has 0.n explicit arguments
		//callArguments=DmxFunctionCallArguments ')')?
		public Group getGroup_3() { return cGroup_3; }
		
		//=> explicitConstructorCall?='('
		public Assignment getExplicitConstructorCallAssignment_3_0() { return cExplicitConstructorCallAssignment_3_0; }
		
		//'('
		public Keyword getExplicitConstructorCallLeftParenthesisKeyword_3_0_0() { return cExplicitConstructorCallLeftParenthesisKeyword_3_0_0; }
		
		//// => boolean => has 0.n explicit arguments
		//callArguments=DmxFunctionCallArguments
		public Assignment getCallArgumentsAssignment_3_1() { return cCallArgumentsAssignment_3_1; }
		
		//DmxFunctionCallArguments
		public RuleCall getCallArgumentsDmxFunctionCallArgumentsParserRuleCall_3_1_0() { return cCallArgumentsDmxFunctionCallArgumentsParserRuleCall_3_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3_2() { return cRightParenthesisKeyword_3_2; }
	}
	public class DmxOpConstructorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.dmx.Dmx.DmxOpConstructor");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cNEWKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cNewKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//DmxOpConstructor:
		//	'NEW' | 'new';
		@Override public ParserRule getRule() { return rule; }
		
		//'NEW' | 'new'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'NEW'
		public Keyword getNEWKeyword_0() { return cNEWKeyword_0; }
		
		//'new'
		public Keyword getNewKeyword_1() { return cNewKeyword_1; }
	}
	public class DmxStaticReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.dmx.Dmx.DmxStaticReference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDmxStaticReferenceAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTargetAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cTargetIStaticReferenceTargetCrossReference_2_0 = (CrossReference)cTargetAssignment_2.eContents().get(0);
		private final RuleCall cTargetIStaticReferenceTargetDQualifiedNameParserRuleCall_2_0_1 = (RuleCall)cTargetIStaticReferenceTargetCrossReference_2_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cNumberSignKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cMemberAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cMemberDNavigableMemberCrossReference_3_1_0 = (CrossReference)cMemberAssignment_3_1.eContents().get(0);
		private final RuleCall cMemberDNavigableMemberIDTerminalRuleCall_3_1_0_1 = (RuleCall)cMemberDNavigableMemberCrossReference_3_1_0.eContents().get(1);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cVerticalLineKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Alternatives cAlternatives_4_1 = (Alternatives)cGroup_4.eContents().get(1);
		private final Assignment cDisplayNameAssignment_4_1_0 = (Assignment)cAlternatives_4_1.eContents().get(0);
		private final RuleCall cDisplayNameIDTerminalRuleCall_4_1_0_0 = (RuleCall)cDisplayNameAssignment_4_1_0.eContents().get(0);
		private final Assignment cPluralAssignment_4_1_1 = (Assignment)cAlternatives_4_1.eContents().get(1);
		private final Keyword cPluralAsteriskKeyword_4_1_1_0 = (Keyword)cPluralAssignment_4_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//DmxStaticReference DExpression:
		//	{DmxStaticReference}
		//	'['
		//	target=[IStaticReferenceTarget|DQualifiedName] ('#' member=[DNavigableMember])? ("|" (displayName=ID | plural?="*"))?
		//	-> ']';
		@Override public ParserRule getRule() { return rule; }
		
		//{DmxStaticReference} '[' target=[IStaticReferenceTarget|DQualifiedName] ('#' member=[DNavigableMember])? ("|"
		//(displayName=ID | plural?="*"))? -> ']'
		public Group getGroup() { return cGroup; }
		
		//{DmxStaticReference}
		public Action getDmxStaticReferenceAction_0() { return cDmxStaticReferenceAction_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }
		
		//target=[IStaticReferenceTarget|DQualifiedName]
		public Assignment getTargetAssignment_2() { return cTargetAssignment_2; }
		
		//[IStaticReferenceTarget|DQualifiedName]
		public CrossReference getTargetIStaticReferenceTargetCrossReference_2_0() { return cTargetIStaticReferenceTargetCrossReference_2_0; }
		
		//DQualifiedName
		public RuleCall getTargetIStaticReferenceTargetDQualifiedNameParserRuleCall_2_0_1() { return cTargetIStaticReferenceTargetDQualifiedNameParserRuleCall_2_0_1; }
		
		//('#' member=[DNavigableMember])?
		public Group getGroup_3() { return cGroup_3; }
		
		//'#'
		public Keyword getNumberSignKeyword_3_0() { return cNumberSignKeyword_3_0; }
		
		//member=[DNavigableMember]
		public Assignment getMemberAssignment_3_1() { return cMemberAssignment_3_1; }
		
		//[DNavigableMember]
		public CrossReference getMemberDNavigableMemberCrossReference_3_1_0() { return cMemberDNavigableMemberCrossReference_3_1_0; }
		
		//ID
		public RuleCall getMemberDNavigableMemberIDTerminalRuleCall_3_1_0_1() { return cMemberDNavigableMemberIDTerminalRuleCall_3_1_0_1; }
		
		//("|" (displayName=ID | plural?="*"))?
		public Group getGroup_4() { return cGroup_4; }
		
		//"|"
		public Keyword getVerticalLineKeyword_4_0() { return cVerticalLineKeyword_4_0; }
		
		//(displayName=ID | plural?="*")
		public Alternatives getAlternatives_4_1() { return cAlternatives_4_1; }
		
		//displayName=ID
		public Assignment getDisplayNameAssignment_4_1_0() { return cDisplayNameAssignment_4_1_0; }
		
		//ID
		public RuleCall getDisplayNameIDTerminalRuleCall_4_1_0_0() { return cDisplayNameIDTerminalRuleCall_4_1_0_0; }
		
		//plural?="*"
		public Assignment getPluralAssignment_4_1_1() { return cPluralAssignment_4_1_1; }
		
		//"*"
		public Keyword getPluralAsteriskKeyword_4_1_1_0() { return cPluralAsteriskKeyword_4_1_1_0; }
		
		//-> ']'
		public Keyword getRightSquareBracketKeyword_5() { return cRightSquareBracketKeyword_5; }
	}
	public class DmxContextReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.dmx.Dmx.DmxContextReference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDmxContextReferenceAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cTargetAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cTargetDNamedElementCrossReference_1_0 = (CrossReference)cTargetAssignment_1.eContents().get(0);
		private final RuleCall cTargetDNamedElementIDTerminalRuleCall_1_0_1 = (RuleCall)cTargetDNamedElementCrossReference_1_0.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cBeforeAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final Keyword cBeforeBeforeKeyword_2_0_0 = (Keyword)cBeforeAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Keyword cFullStopKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cAllAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final Keyword cAllAllKeyword_2_1_1_0 = (Keyword)cAllAssignment_2_1_1.eContents().get(0);
		
		//// '->' gives precedence to this ']' over PLAIN_TEXT_MIDDLE ('=>' works too but generates more lookahead overhead)
		//DmxContextReference DExpression:
		//	{DmxContextReference} target=[DNamedElement] (before?="@before"
		//	| '.' all?='all')?;
		@Override public ParserRule getRule() { return rule; }
		
		//{DmxContextReference} target=[DNamedElement] (before?="@before" | '.' all?='all')?
		public Group getGroup() { return cGroup; }
		
		//{DmxContextReference}
		public Action getDmxContextReferenceAction_0() { return cDmxContextReferenceAction_0; }
		
		//target=[DNamedElement]
		public Assignment getTargetAssignment_1() { return cTargetAssignment_1; }
		
		//[DNamedElement]
		public CrossReference getTargetDNamedElementCrossReference_1_0() { return cTargetDNamedElementCrossReference_1_0; }
		
		//ID
		public RuleCall getTargetDNamedElementIDTerminalRuleCall_1_0_1() { return cTargetDNamedElementIDTerminalRuleCall_1_0_1; }
		
		//(before?="@before" | '.' all?='all')?
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//before?="@before"
		public Assignment getBeforeAssignment_2_0() { return cBeforeAssignment_2_0; }
		
		//"@before"
		public Keyword getBeforeBeforeKeyword_2_0_0() { return cBeforeBeforeKeyword_2_0_0; }
		
		//'.' all?='all'
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//'.'
		public Keyword getFullStopKeyword_2_1_0() { return cFullStopKeyword_2_1_0; }
		
		//all?='all'
		public Assignment getAllAssignment_2_1_1() { return cAllAssignment_2_1_1; }
		
		//'all'
		public Keyword getAllAllKeyword_2_1_1_0() { return cAllAllKeyword_2_1_1_0; }
	}
	public class DmxIfExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.dmx.Dmx.DmxIfExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDmxIfExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cIfKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cIfAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cIfDExpressionParserRuleCall_2_0 = (RuleCall)cIfAssignment_2.eContents().get(0);
		private final Keyword cThenKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cThenAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cThenDExpressionParserRuleCall_4_0 = (RuleCall)cThenAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cElseKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cElseAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cElseDExpressionParserRuleCall_5_1_0 = (RuleCall)cElseAssignment_5_1.eContents().get(0);
		private final Keyword cEndKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//DmxIfExpression DExpression:
		//	{DmxIfExpression}
		//	'if' if=DExpression
		//	'then' then=DExpression (=> 'else' else=DExpression)?
		//	'end';
		@Override public ParserRule getRule() { return rule; }
		
		//{DmxIfExpression} 'if' if=DExpression 'then' then=DExpression (=> 'else' else=DExpression)? 'end'
		public Group getGroup() { return cGroup; }
		
		//{DmxIfExpression}
		public Action getDmxIfExpressionAction_0() { return cDmxIfExpressionAction_0; }
		
		//'if'
		public Keyword getIfKeyword_1() { return cIfKeyword_1; }
		
		//if=DExpression
		public Assignment getIfAssignment_2() { return cIfAssignment_2; }
		
		//DExpression
		public RuleCall getIfDExpressionParserRuleCall_2_0() { return cIfDExpressionParserRuleCall_2_0; }
		
		//'then'
		public Keyword getThenKeyword_3() { return cThenKeyword_3; }
		
		//then=DExpression
		public Assignment getThenAssignment_4() { return cThenAssignment_4; }
		
		//DExpression
		public RuleCall getThenDExpressionParserRuleCall_4_0() { return cThenDExpressionParserRuleCall_4_0; }
		
		//(=> 'else' else=DExpression)?
		public Group getGroup_5() { return cGroup_5; }
		
		//=> 'else'
		public Keyword getElseKeyword_5_0() { return cElseKeyword_5_0; }
		
		//else=DExpression
		public Assignment getElseAssignment_5_1() { return cElseAssignment_5_1; }
		
		//DExpression
		public RuleCall getElseDExpressionParserRuleCall_5_1_0() { return cElseDExpressionParserRuleCall_5_1_0; }
		
		//'end'
		public Keyword getEndKeyword_6() { return cEndKeyword_6; }
	}
	public class DMultiplicityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.dmx.Dmx.DMultiplicity");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cShorthandAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cShorthandDMultiplicityShorthandEnumRuleCall_0_0 = (RuleCall)cShorthandAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cMinOccursAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cMinOccursNATURALTerminalRuleCall_1_1_0 = (RuleCall)cMinOccursAssignment_1_1.eContents().get(0);
		private final Keyword cFullStopFullStopKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cMaxOccursAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cMaxOccursMULTIPLICITYParserRuleCall_1_3_0 = (RuleCall)cMaxOccursAssignment_1_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		
		//DMultiplicity:
		//	shorthand=DMultiplicityShorthand | '(' minOccurs=NATURAL '..' maxOccurs=MULTIPLICITY ')';
		@Override public ParserRule getRule() { return rule; }
		
		//shorthand=DMultiplicityShorthand | '(' minOccurs=NATURAL '..' maxOccurs=MULTIPLICITY ')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//shorthand=DMultiplicityShorthand
		public Assignment getShorthandAssignment_0() { return cShorthandAssignment_0; }
		
		//DMultiplicityShorthand
		public RuleCall getShorthandDMultiplicityShorthandEnumRuleCall_0_0() { return cShorthandDMultiplicityShorthandEnumRuleCall_0_0; }
		
		//'(' minOccurs=NATURAL '..' maxOccurs=MULTIPLICITY ')'
		public Group getGroup_1() { return cGroup_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }
		
		//minOccurs=NATURAL
		public Assignment getMinOccursAssignment_1_1() { return cMinOccursAssignment_1_1; }
		
		//NATURAL
		public RuleCall getMinOccursNATURALTerminalRuleCall_1_1_0() { return cMinOccursNATURALTerminalRuleCall_1_1_0; }
		
		//'..'
		public Keyword getFullStopFullStopKeyword_1_2() { return cFullStopFullStopKeyword_1_2; }
		
		//maxOccurs=MULTIPLICITY
		public Assignment getMaxOccursAssignment_1_3() { return cMaxOccursAssignment_1_3; }
		
		//MULTIPLICITY
		public RuleCall getMaxOccursMULTIPLICITYParserRuleCall_1_3_0() { return cMaxOccursMULTIPLICITYParserRuleCall_1_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_4() { return cRightParenthesisKeyword_1_4; }
	}
	public class MULTIPLICITYElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.dmx.Dmx.MULTIPLICITY");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNATURALTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Keyword cAsteriskKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//MULTIPLICITY ecore::EInt:
		//	NATURAL | '*';
		@Override public ParserRule getRule() { return rule; }
		
		//NATURAL | '*'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//NATURAL
		public RuleCall getNATURALTerminalRuleCall_0() { return cNATURALTerminalRuleCall_0; }
		
		//'*'
		public Keyword getAsteriskKeyword_1() { return cAsteriskKeyword_1; }
	}
	public class DmxBooleanLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.dmx.Dmx.DmxBooleanLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDmxBooleanLiteralAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final Keyword cValueTRUEKeyword_1_0_0 = (Keyword)cValueAssignment_1_0.eContents().get(0);
		private final Assignment cValueAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final Keyword cValueTrueKeyword_1_1_0 = (Keyword)cValueAssignment_1_1.eContents().get(0);
		private final Keyword cFALSEKeyword_1_2 = (Keyword)cAlternatives_1.eContents().get(2);
		private final Keyword cFalseKeyword_1_3 = (Keyword)cAlternatives_1.eContents().get(3);
		
		//DmxBooleanLiteral DExpression:
		//	{DmxBooleanLiteral} (value?='TRUE' | value?='true' | 'FALSE' | 'false');
		@Override public ParserRule getRule() { return rule; }
		
		//{DmxBooleanLiteral} (value?='TRUE' | value?='true' | 'FALSE' | 'false')
		public Group getGroup() { return cGroup; }
		
		//{DmxBooleanLiteral}
		public Action getDmxBooleanLiteralAction_0() { return cDmxBooleanLiteralAction_0; }
		
		//(value?='TRUE' | value?='true' | 'FALSE' | 'false')
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//value?='TRUE'
		public Assignment getValueAssignment_1_0() { return cValueAssignment_1_0; }
		
		//'TRUE'
		public Keyword getValueTRUEKeyword_1_0_0() { return cValueTRUEKeyword_1_0_0; }
		
		//value?='true'
		public Assignment getValueAssignment_1_1() { return cValueAssignment_1_1; }
		
		//'true'
		public Keyword getValueTrueKeyword_1_1_0() { return cValueTrueKeyword_1_1_0; }
		
		//'FALSE'
		public Keyword getFALSEKeyword_1_2() { return cFALSEKeyword_1_2; }
		
		//'false'
		public Keyword getFalseKeyword_1_3() { return cFalseKeyword_1_3; }
	}
	public class DmxNaturalLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.dmx.Dmx.DmxNaturalLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDmxNaturalLiteralAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueNATURALTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//DmxNaturalLiteral DExpression:
		//	{DmxNaturalLiteral} value=NATURAL;
		@Override public ParserRule getRule() { return rule; }
		
		//{DmxNaturalLiteral} value=NATURAL
		public Group getGroup() { return cGroup; }
		
		//{DmxNaturalLiteral}
		public Action getDmxNaturalLiteralAction_0() { return cDmxNaturalLiteralAction_0; }
		
		//value=NATURAL
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//NATURAL
		public RuleCall getValueNATURALTerminalRuleCall_1_0() { return cValueNATURALTerminalRuleCall_1_0; }
	}
	public class DmxDecimalLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.dmx.Dmx.DmxDecimalLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDmxDecimalLiteralAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueDECIMALParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//DmxDecimalLiteral DExpression:
		//	{DmxDecimalLiteral} value=DECIMAL;
		@Override public ParserRule getRule() { return rule; }
		
		//{DmxDecimalLiteral} value=DECIMAL
		public Group getGroup() { return cGroup; }
		
		//{DmxDecimalLiteral}
		public Action getDmxDecimalLiteralAction_0() { return cDmxDecimalLiteralAction_0; }
		
		//value=DECIMAL
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//DECIMAL
		public RuleCall getValueDECIMALParserRuleCall_1_0() { return cValueDECIMALParserRuleCall_1_0; }
	}
	public class DmxStringLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.dmx.Dmx.DmxStringLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDmxStringLiteralAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//DmxStringLiteral DExpression:
		//	{DmxStringLiteral} value=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//{DmxStringLiteral} value=STRING
		public Group getGroup() { return cGroup; }
		
		//{DmxStringLiteral}
		public Action getDmxStringLiteralAction_0() { return cDmxStringLiteralAction_0; }
		
		//value=STRING
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_1_0() { return cValueSTRINGTerminalRuleCall_1_0; }
	}
	public class DmxUndefinedLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.dmx.Dmx.DmxUndefinedLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDmxUndefinedLiteralAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cUNDEFINEDKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cUndefinedKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		
		//DmxUndefinedLiteral DExpression:
		//	{DmxUndefinedLiteral} ('UNDEFINED' | 'undefined');
		@Override public ParserRule getRule() { return rule; }
		
		//{DmxUndefinedLiteral} ('UNDEFINED' | 'undefined')
		public Group getGroup() { return cGroup; }
		
		//{DmxUndefinedLiteral}
		public Action getDmxUndefinedLiteralAction_0() { return cDmxUndefinedLiteralAction_0; }
		
		//('UNDEFINED' | 'undefined')
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'UNDEFINED'
		public Keyword getUNDEFINEDKeyword_1_0() { return cUNDEFINEDKeyword_1_0; }
		
		//'undefined'
		public Keyword getUndefinedKeyword_1_1() { return cUndefinedKeyword_1_1; }
	}
	public class DECIMALElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.dmx.Dmx.DECIMAL");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cNATURALTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cNATURALTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Alternatives cAlternatives_3_0 = (Alternatives)cGroup_3.eContents().get(0);
		private final Keyword cEKeyword_3_0_0 = (Keyword)cAlternatives_3_0.eContents().get(0);
		private final Keyword cEKeyword_3_0_1 = (Keyword)cAlternatives_3_0.eContents().get(1);
		private final Alternatives cAlternatives_3_1 = (Alternatives)cGroup_3.eContents().get(1);
		private final Keyword cPlusSignKeyword_3_1_0 = (Keyword)cAlternatives_3_1.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_3_1_1 = (Keyword)cAlternatives_3_1.eContents().get(1);
		private final RuleCall cNATURALTerminalRuleCall_3_2 = (RuleCall)cGroup_3.eContents().get(2);
		
		//DECIMAL:
		//	NATURAL '.' NATURAL (('E' | 'e') ('+' | '-')? NATURAL)?;
		@Override public ParserRule getRule() { return rule; }
		
		//NATURAL '.' NATURAL (('E' | 'e') ('+' | '-')? NATURAL)?
		public Group getGroup() { return cGroup; }
		
		//NATURAL
		public RuleCall getNATURALTerminalRuleCall_0() { return cNATURALTerminalRuleCall_0; }
		
		//'.'
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
		
		//NATURAL
		public RuleCall getNATURALTerminalRuleCall_2() { return cNATURALTerminalRuleCall_2; }
		
		//(('E' | 'e') ('+' | '-')? NATURAL)?
		public Group getGroup_3() { return cGroup_3; }
		
		//('E' | 'e')
		public Alternatives getAlternatives_3_0() { return cAlternatives_3_0; }
		
		//'E'
		public Keyword getEKeyword_3_0_0() { return cEKeyword_3_0_0; }
		
		//'e'
		public Keyword getEKeyword_3_0_1() { return cEKeyword_3_0_1; }
		
		//('+' | '-')?
		public Alternatives getAlternatives_3_1() { return cAlternatives_3_1; }
		
		//'+'
		public Keyword getPlusSignKeyword_3_1_0() { return cPlusSignKeyword_3_1_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_3_1_1() { return cHyphenMinusKeyword_3_1_1; }
		
		//NATURAL
		public RuleCall getNATURALTerminalRuleCall_3_2() { return cNATURALTerminalRuleCall_3_2; }
	}
	public class DQualifiedNameWithWildcardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.dmx.Dmx.DQualifiedNameWithWildcard");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cDQualifiedNameParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopAsteriskKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//DQualifiedNameWithWildcard:
		//	DQualifiedName '.*'?;
		@Override public ParserRule getRule() { return rule; }
		
		//DQualifiedName '.*'?
		public Group getGroup() { return cGroup; }
		
		//DQualifiedName
		public RuleCall getDQualifiedNameParserRuleCall_0() { return cDQualifiedNameParserRuleCall_0; }
		
		//'.*'?
		public Keyword getFullStopAsteriskKeyword_1() { return cFullStopAsteriskKeyword_1; }
	}
	public class DQualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.dmx.Dmx.DQualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//DQualifiedName:
		//	ID ('.' ID)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ID ('.' ID)*
		public Group getGroup() { return cGroup; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//('.' ID)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	
	public class DmxBaseTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.dmx.Dmx.DmxBaseType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cVOIDEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cVOIDVOIDKeyword_0_0 = (Keyword)cVOIDEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cBOOLEANEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cBOOLEANBOOLEANKeyword_1_0 = (Keyword)cBOOLEANEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cNUMBEREnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cNUMBERNUMBERKeyword_2_0 = (Keyword)cNUMBEREnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cTEXTEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cTEXTTEXTKeyword_3_0 = (Keyword)cTEXTEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cIDENTIFIEREnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cIDENTIFIERIDENTIFIERKeyword_4_0 = (Keyword)cIDENTIFIEREnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cTIMEPOINTEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cTIMEPOINTTIMEPOINTKeyword_5_0 = (Keyword)cTIMEPOINTEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cSTATEEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cSTATESTATEKeyword_6_0 = (Keyword)cSTATEEnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cSTATE_EVENTEnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cSTATE_EVENTSTATE_EVENTKeyword_7_0 = (Keyword)cSTATE_EVENTEnumLiteralDeclaration_7.eContents().get(0);
		private final EnumLiteralDeclaration cCOMPLEXEnumLiteralDeclaration_8 = (EnumLiteralDeclaration)cAlternatives.eContents().get(8);
		private final Keyword cCOMPLEXCOMPLEXKeyword_8_0 = (Keyword)cCOMPLEXEnumLiteralDeclaration_8.eContents().get(0);
		private final EnumLiteralDeclaration cNOTIFICATIONEnumLiteralDeclaration_9 = (EnumLiteralDeclaration)cAlternatives.eContents().get(9);
		private final Keyword cNOTIFICATIONNOTIFICATIONKeyword_9_0 = (Keyword)cNOTIFICATIONEnumLiteralDeclaration_9.eContents().get(0);
		private final EnumLiteralDeclaration cSERVICEEnumLiteralDeclaration_10 = (EnumLiteralDeclaration)cAlternatives.eContents().get(10);
		private final Keyword cSERVICESERVICEKeyword_10_0 = (Keyword)cSERVICEEnumLiteralDeclaration_10.eContents().get(0);
		
		//enum DmxBaseType:
		//	VOID | BOOLEAN | NUMBER | TEXT | IDENTIFIER | TIMEPOINT | STATE /*transition*/ | STATE_EVENT | COMPLEX | NOTIFICATION
		//	/*sent* */ | SERVICE /*invoked* */;
		public EnumRule getRule() { return rule; }
		
		//VOID | BOOLEAN | NUMBER | TEXT | IDENTIFIER | TIMEPOINT | STATE /*transition*/ | STATE_EVENT | COMPLEX | NOTIFICATION
		///*sent* */ | SERVICE
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//VOID
		public EnumLiteralDeclaration getVOIDEnumLiteralDeclaration_0() { return cVOIDEnumLiteralDeclaration_0; }
		
		//"VOID"
		public Keyword getVOIDVOIDKeyword_0_0() { return cVOIDVOIDKeyword_0_0; }
		
		//BOOLEAN
		public EnumLiteralDeclaration getBOOLEANEnumLiteralDeclaration_1() { return cBOOLEANEnumLiteralDeclaration_1; }
		
		//"BOOLEAN"
		public Keyword getBOOLEANBOOLEANKeyword_1_0() { return cBOOLEANBOOLEANKeyword_1_0; }
		
		//NUMBER
		public EnumLiteralDeclaration getNUMBEREnumLiteralDeclaration_2() { return cNUMBEREnumLiteralDeclaration_2; }
		
		//"NUMBER"
		public Keyword getNUMBERNUMBERKeyword_2_0() { return cNUMBERNUMBERKeyword_2_0; }
		
		//TEXT
		public EnumLiteralDeclaration getTEXTEnumLiteralDeclaration_3() { return cTEXTEnumLiteralDeclaration_3; }
		
		//"TEXT"
		public Keyword getTEXTTEXTKeyword_3_0() { return cTEXTTEXTKeyword_3_0; }
		
		//IDENTIFIER
		public EnumLiteralDeclaration getIDENTIFIEREnumLiteralDeclaration_4() { return cIDENTIFIEREnumLiteralDeclaration_4; }
		
		//"IDENTIFIER"
		public Keyword getIDENTIFIERIDENTIFIERKeyword_4_0() { return cIDENTIFIERIDENTIFIERKeyword_4_0; }
		
		//TIMEPOINT
		public EnumLiteralDeclaration getTIMEPOINTEnumLiteralDeclaration_5() { return cTIMEPOINTEnumLiteralDeclaration_5; }
		
		//"TIMEPOINT"
		public Keyword getTIMEPOINTTIMEPOINTKeyword_5_0() { return cTIMEPOINTTIMEPOINTKeyword_5_0; }
		
		//STATE
		public EnumLiteralDeclaration getSTATEEnumLiteralDeclaration_6() { return cSTATEEnumLiteralDeclaration_6; }
		
		//"STATE"
		public Keyword getSTATESTATEKeyword_6_0() { return cSTATESTATEKeyword_6_0; }
		
		//STATE_EVENT
		public EnumLiteralDeclaration getSTATE_EVENTEnumLiteralDeclaration_7() { return cSTATE_EVENTEnumLiteralDeclaration_7; }
		
		//"STATE_EVENT"
		public Keyword getSTATE_EVENTSTATE_EVENTKeyword_7_0() { return cSTATE_EVENTSTATE_EVENTKeyword_7_0; }
		
		//COMPLEX
		public EnumLiteralDeclaration getCOMPLEXEnumLiteralDeclaration_8() { return cCOMPLEXEnumLiteralDeclaration_8; }
		
		//"COMPLEX"
		public Keyword getCOMPLEXCOMPLEXKeyword_8_0() { return cCOMPLEXCOMPLEXKeyword_8_0; }
		
		//NOTIFICATION
		public EnumLiteralDeclaration getNOTIFICATIONEnumLiteralDeclaration_9() { return cNOTIFICATIONEnumLiteralDeclaration_9; }
		
		//"NOTIFICATION"
		public Keyword getNOTIFICATIONNOTIFICATIONKeyword_9_0() { return cNOTIFICATIONNOTIFICATIONKeyword_9_0; }
		
		//SERVICE
		public EnumLiteralDeclaration getSERVICEEnumLiteralDeclaration_10() { return cSERVICEEnumLiteralDeclaration_10; }
		
		//"SERVICE"
		public Keyword getSERVICESERVICEKeyword_10_0() { return cSERVICESERVICEKeyword_10_0; }
	}
	public class DmxOpOrElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.dmx.Dmx.DmxOpOr");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cOREnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cORORKeyword_0_0 = (Keyword)cOREnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cOREnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cOROrKeyword_1_0 = (Keyword)cOREnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cXOREnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cXORXORKeyword_2_0 = (Keyword)cXOREnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cXOREnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cXORXorKeyword_3_0 = (Keyword)cXOREnumLiteralDeclaration_3.eContents().get(0);
		
		//enum DmxOpOr returns DmxBinaryOperator:
		//	OR | OR='or' | XOR | XOR='xor';
		public EnumRule getRule() { return rule; }
		
		//OR | OR='or' | XOR | XOR='xor'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//OR
		public EnumLiteralDeclaration getOREnumLiteralDeclaration_0() { return cOREnumLiteralDeclaration_0; }
		
		//'OR'
		public Keyword getORORKeyword_0_0() { return cORORKeyword_0_0; }
		
		//OR='or'
		public EnumLiteralDeclaration getOREnumLiteralDeclaration_1() { return cOREnumLiteralDeclaration_1; }
		
		//'or'
		public Keyword getOROrKeyword_1_0() { return cOROrKeyword_1_0; }
		
		//XOR
		public EnumLiteralDeclaration getXOREnumLiteralDeclaration_2() { return cXOREnumLiteralDeclaration_2; }
		
		//'XOR'
		public Keyword getXORXORKeyword_2_0() { return cXORXORKeyword_2_0; }
		
		//XOR='xor'
		public EnumLiteralDeclaration getXOREnumLiteralDeclaration_3() { return cXOREnumLiteralDeclaration_3; }
		
		//'xor'
		public Keyword getXORXorKeyword_3_0() { return cXORXorKeyword_3_0; }
	}
	public class DmxOpAndElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.dmx.Dmx.DmxOpAnd");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cANDEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cANDANDKeyword_0_0 = (Keyword)cANDEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cANDEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cANDAndKeyword_1_0 = (Keyword)cANDEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum DmxOpAnd returns DmxBinaryOperator:
		//	AND | AND='and';
		public EnumRule getRule() { return rule; }
		
		//AND | AND='and'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//AND
		public EnumLiteralDeclaration getANDEnumLiteralDeclaration_0() { return cANDEnumLiteralDeclaration_0; }
		
		//'AND'
		public Keyword getANDANDKeyword_0_0() { return cANDANDKeyword_0_0; }
		
		//AND='and'
		public EnumLiteralDeclaration getANDEnumLiteralDeclaration_1() { return cANDEnumLiteralDeclaration_1; }
		
		//'and'
		public Keyword getANDAndKeyword_1_0() { return cANDAndKeyword_1_0; }
	}
	public class DmxOpEqualityElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.dmx.Dmx.DmxOpEquality");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cEQUALEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cEQUALEqualsSignKeyword_0_0 = (Keyword)cEQUALEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cNOT_EQUALEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cNOT_EQUALExclamationMarkEqualsSignKeyword_1_0 = (Keyword)cNOT_EQUALEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cNOT_EQUALEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cNOT_EQUALLessThanSignGreaterThanSignKeyword_2_0 = (Keyword)cNOT_EQUALEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum DmxOpEquality returns DmxBinaryOperator:
		//	EQUAL='=' | NOT_EQUAL='!=' | NOT_EQUAL='<>';
		public EnumRule getRule() { return rule; }
		
		//EQUAL='=' | NOT_EQUAL='!=' | NOT_EQUAL='<>'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//EQUAL='='
		public EnumLiteralDeclaration getEQUALEnumLiteralDeclaration_0() { return cEQUALEnumLiteralDeclaration_0; }
		
		//'='
		public Keyword getEQUALEqualsSignKeyword_0_0() { return cEQUALEqualsSignKeyword_0_0; }
		
		//NOT_EQUAL='!='
		public EnumLiteralDeclaration getNOT_EQUALEnumLiteralDeclaration_1() { return cNOT_EQUALEnumLiteralDeclaration_1; }
		
		//'!='
		public Keyword getNOT_EQUALExclamationMarkEqualsSignKeyword_1_0() { return cNOT_EQUALExclamationMarkEqualsSignKeyword_1_0; }
		
		//NOT_EQUAL='<>'
		public EnumLiteralDeclaration getNOT_EQUALEnumLiteralDeclaration_2() { return cNOT_EQUALEnumLiteralDeclaration_2; }
		
		//'<>'
		public Keyword getNOT_EQUALLessThanSignGreaterThanSignKeyword_2_0() { return cNOT_EQUALLessThanSignGreaterThanSignKeyword_2_0; }
	}
	public class OpCompareElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.dmx.Dmx.OpCompare");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cLESSEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cLESSLessThanSignKeyword_0_0 = (Keyword)cLESSEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cLESS_OR_EQUALEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cLESS_OR_EQUALLessThanSignEqualsSignKeyword_1_0 = (Keyword)cLESS_OR_EQUALEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cLESS_OR_EQUALEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cLESS_OR_EQUALLessThanOrEqualToKeyword_2_0 = (Keyword)cLESS_OR_EQUALEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cGREATER_OR_EQUALEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cGREATER_OR_EQUALGreaterThanSignEqualsSignKeyword_3_0 = (Keyword)cGREATER_OR_EQUALEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cGREATER_OR_EQUALEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cGREATER_OR_EQUALGreaterThanOrEqualToKeyword_4_0 = (Keyword)cGREATER_OR_EQUALEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cGREATEREnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cGREATERGreaterThanSignKeyword_5_0 = (Keyword)cGREATEREnumLiteralDeclaration_5.eContents().get(0);
		
		//enum OpCompare returns DmxBinaryOperator:
		//	LESS='<' | LESS_OR_EQUAL='<=' | LESS_OR_EQUAL='≤' | GREATER_OR_EQUAL='>=' | GREATER_OR_EQUAL='≥' | GREATER='>';
		public EnumRule getRule() { return rule; }
		
		//LESS='<' | LESS_OR_EQUAL='<=' | LESS_OR_EQUAL='≤' | GREATER_OR_EQUAL='>=' | GREATER_OR_EQUAL='≥' | GREATER='>'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//LESS='<'
		public EnumLiteralDeclaration getLESSEnumLiteralDeclaration_0() { return cLESSEnumLiteralDeclaration_0; }
		
		//'<'
		public Keyword getLESSLessThanSignKeyword_0_0() { return cLESSLessThanSignKeyword_0_0; }
		
		//LESS_OR_EQUAL='<='
		public EnumLiteralDeclaration getLESS_OR_EQUALEnumLiteralDeclaration_1() { return cLESS_OR_EQUALEnumLiteralDeclaration_1; }
		
		//'<='
		public Keyword getLESS_OR_EQUALLessThanSignEqualsSignKeyword_1_0() { return cLESS_OR_EQUALLessThanSignEqualsSignKeyword_1_0; }
		
		//LESS_OR_EQUAL='≤'
		public EnumLiteralDeclaration getLESS_OR_EQUALEnumLiteralDeclaration_2() { return cLESS_OR_EQUALEnumLiteralDeclaration_2; }
		
		//'≤'
		public Keyword getLESS_OR_EQUALLessThanOrEqualToKeyword_2_0() { return cLESS_OR_EQUALLessThanOrEqualToKeyword_2_0; }
		
		//GREATER_OR_EQUAL='>='
		public EnumLiteralDeclaration getGREATER_OR_EQUALEnumLiteralDeclaration_3() { return cGREATER_OR_EQUALEnumLiteralDeclaration_3; }
		
		//'>='
		public Keyword getGREATER_OR_EQUALGreaterThanSignEqualsSignKeyword_3_0() { return cGREATER_OR_EQUALGreaterThanSignEqualsSignKeyword_3_0; }
		
		//GREATER_OR_EQUAL='≥'
		public EnumLiteralDeclaration getGREATER_OR_EQUALEnumLiteralDeclaration_4() { return cGREATER_OR_EQUALEnumLiteralDeclaration_4; }
		
		//'≥'
		public Keyword getGREATER_OR_EQUALGreaterThanOrEqualToKeyword_4_0() { return cGREATER_OR_EQUALGreaterThanOrEqualToKeyword_4_0; }
		
		//GREATER='>'
		public EnumLiteralDeclaration getGREATEREnumLiteralDeclaration_5() { return cGREATEREnumLiteralDeclaration_5; }
		
		//'>'
		public Keyword getGREATERGreaterThanSignKeyword_5_0() { return cGREATERGreaterThanSignKeyword_5_0; }
	}
	public class OpOtherElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.dmx.Dmx.OpOther");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cINEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cININKeyword_0_0 = (Keyword)cINEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cINEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cINInKeyword_1_0 = (Keyword)cINEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cUNTILEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cUNTILFullStopFullStopKeyword_2_0 = (Keyword)cUNTILEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cSINGLE_ARROWEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cSINGLE_ARROWHyphenMinusGreaterThanSignKeyword_3_0 = (Keyword)cSINGLE_ARROWEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cDOUBLE_ARROWEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cDOUBLE_ARROWEqualsSignGreaterThanSignKeyword_4_0 = (Keyword)cDOUBLE_ARROWEnumLiteralDeclaration_4.eContents().get(0);
		
		//enum OpOther returns DmxBinaryOperator:
		//	IN | IN='in' | UNTIL='..' | SINGLE_ARROW='->' | DOUBLE_ARROW='=>';
		public EnumRule getRule() { return rule; }
		
		//IN | IN='in' | UNTIL='..' | SINGLE_ARROW='->' | DOUBLE_ARROW='=>'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//IN
		public EnumLiteralDeclaration getINEnumLiteralDeclaration_0() { return cINEnumLiteralDeclaration_0; }
		
		//'IN'
		public Keyword getININKeyword_0_0() { return cININKeyword_0_0; }
		
		//IN='in'
		public EnumLiteralDeclaration getINEnumLiteralDeclaration_1() { return cINEnumLiteralDeclaration_1; }
		
		//'in'
		public Keyword getINInKeyword_1_0() { return cINInKeyword_1_0; }
		
		//UNTIL='..'
		public EnumLiteralDeclaration getUNTILEnumLiteralDeclaration_2() { return cUNTILEnumLiteralDeclaration_2; }
		
		//'..'
		public Keyword getUNTILFullStopFullStopKeyword_2_0() { return cUNTILFullStopFullStopKeyword_2_0; }
		
		//SINGLE_ARROW='->'
		public EnumLiteralDeclaration getSINGLE_ARROWEnumLiteralDeclaration_3() { return cSINGLE_ARROWEnumLiteralDeclaration_3; }
		
		//'->'
		public Keyword getSINGLE_ARROWHyphenMinusGreaterThanSignKeyword_3_0() { return cSINGLE_ARROWHyphenMinusGreaterThanSignKeyword_3_0; }
		
		//DOUBLE_ARROW='=>'
		public EnumLiteralDeclaration getDOUBLE_ARROWEnumLiteralDeclaration_4() { return cDOUBLE_ARROWEnumLiteralDeclaration_4; }
		
		//'=>'
		public Keyword getDOUBLE_ARROWEqualsSignGreaterThanSignKeyword_4_0() { return cDOUBLE_ARROWEqualsSignGreaterThanSignKeyword_4_0; }
	}
	public class OpAddElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.dmx.Dmx.OpAdd");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cADDEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cADDPlusSignKeyword_0_0 = (Keyword)cADDEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cSUBTRACTEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cSUBTRACTHyphenMinusKeyword_1_0 = (Keyword)cSUBTRACTEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum OpAdd returns DmxBinaryOperator:
		//	ADD='+' | SUBTRACT='-';
		public EnumRule getRule() { return rule; }
		
		//ADD='+' | SUBTRACT='-'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ADD='+'
		public EnumLiteralDeclaration getADDEnumLiteralDeclaration_0() { return cADDEnumLiteralDeclaration_0; }
		
		//'+'
		public Keyword getADDPlusSignKeyword_0_0() { return cADDPlusSignKeyword_0_0; }
		
		//SUBTRACT='-'
		public EnumLiteralDeclaration getSUBTRACTEnumLiteralDeclaration_1() { return cSUBTRACTEnumLiteralDeclaration_1; }
		
		//'-'
		public Keyword getSUBTRACTHyphenMinusKeyword_1_0() { return cSUBTRACTHyphenMinusKeyword_1_0; }
	}
	public class OpMultiElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.dmx.Dmx.OpMulti");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cMULTIPLYEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cMULTIPLYAsteriskKeyword_0_0 = (Keyword)cMULTIPLYEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cDIVIDEEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cDIVIDESolidusKeyword_1_0 = (Keyword)cDIVIDEEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cPOWEREnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cPOWERAsteriskAsteriskKeyword_2_0 = (Keyword)cPOWEREnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cMODULOEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cMODULOPercentSignKeyword_3_0 = (Keyword)cMODULOEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum OpMulti returns DmxBinaryOperator:
		//	MULTIPLY='*' | DIVIDE='/' | POWER='**' | MODULO='%';
		public EnumRule getRule() { return rule; }
		
		//MULTIPLY='*' | DIVIDE='/' | POWER='**' | MODULO='%'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//MULTIPLY='*'
		public EnumLiteralDeclaration getMULTIPLYEnumLiteralDeclaration_0() { return cMULTIPLYEnumLiteralDeclaration_0; }
		
		//'*'
		public Keyword getMULTIPLYAsteriskKeyword_0_0() { return cMULTIPLYAsteriskKeyword_0_0; }
		
		//DIVIDE='/'
		public EnumLiteralDeclaration getDIVIDEEnumLiteralDeclaration_1() { return cDIVIDEEnumLiteralDeclaration_1; }
		
		//'/'
		public Keyword getDIVIDESolidusKeyword_1_0() { return cDIVIDESolidusKeyword_1_0; }
		
		//POWER='**'
		public EnumLiteralDeclaration getPOWEREnumLiteralDeclaration_2() { return cPOWEREnumLiteralDeclaration_2; }
		
		//'**'
		public Keyword getPOWERAsteriskAsteriskKeyword_2_0() { return cPOWERAsteriskAsteriskKeyword_2_0; }
		
		//MODULO='%'
		public EnumLiteralDeclaration getMODULOEnumLiteralDeclaration_3() { return cMODULOEnumLiteralDeclaration_3; }
		
		//'%'
		public Keyword getMODULOPercentSignKeyword_3_0() { return cMODULOPercentSignKeyword_3_0; }
	}
	public class OpUnaryElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.dmx.Dmx.OpUnary");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cPLUSEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cPLUSPlusSignKeyword_0_0 = (Keyword)cPLUSEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cMINUSEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cMINUSHyphenMinusKeyword_1_0 = (Keyword)cMINUSEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cNOTEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cNOTExclamationMarkKeyword_2_0 = (Keyword)cNOTEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cNOTEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cNOTNOTKeyword_3_0 = (Keyword)cNOTEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cNOTEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cNOTNotKeyword_4_0 = (Keyword)cNOTEnumLiteralDeclaration_4.eContents().get(0);
		
		//enum OpUnary returns DmxUnaryOperator:
		//	PLUS='+' | MINUS='-' | NOT='!' | NOT | NOT='not';
		public EnumRule getRule() { return rule; }
		
		//PLUS='+' | MINUS='-' | NOT='!' | NOT | NOT='not'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//PLUS='+'
		public EnumLiteralDeclaration getPLUSEnumLiteralDeclaration_0() { return cPLUSEnumLiteralDeclaration_0; }
		
		//'+'
		public Keyword getPLUSPlusSignKeyword_0_0() { return cPLUSPlusSignKeyword_0_0; }
		
		//MINUS='-'
		public EnumLiteralDeclaration getMINUSEnumLiteralDeclaration_1() { return cMINUSEnumLiteralDeclaration_1; }
		
		//'-'
		public Keyword getMINUSHyphenMinusKeyword_1_0() { return cMINUSHyphenMinusKeyword_1_0; }
		
		//NOT='!'
		public EnumLiteralDeclaration getNOTEnumLiteralDeclaration_2() { return cNOTEnumLiteralDeclaration_2; }
		
		//'!'
		public Keyword getNOTExclamationMarkKeyword_2_0() { return cNOTExclamationMarkKeyword_2_0; }
		
		//NOT
		public EnumLiteralDeclaration getNOTEnumLiteralDeclaration_3() { return cNOTEnumLiteralDeclaration_3; }
		
		//'NOT'
		public Keyword getNOTNOTKeyword_3_0() { return cNOTNOTKeyword_3_0; }
		
		//NOT='not'
		public EnumLiteralDeclaration getNOTEnumLiteralDeclaration_4() { return cNOTEnumLiteralDeclaration_4; }
		
		//'not'
		public Keyword getNOTNotKeyword_4_0() { return cNOTNotKeyword_4_0; }
	}
	public class DMultiplicityShorthandElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.dmx.Dmx.DMultiplicityShorthand");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cZERO_OR_ONEEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cZERO_OR_ONEQuestionMarkKeyword_0_0 = (Keyword)cZERO_OR_ONEEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cONE_OR_MOREEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cONE_OR_MOREPlusSignKeyword_1_0 = (Keyword)cONE_OR_MOREEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cZERO_OR_MOREEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cZERO_OR_MOREAsteriskKeyword_2_0 = (Keyword)cZERO_OR_MOREEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum DMultiplicityShorthand:
		//	ZERO_OR_ONE='?' | ONE_OR_MORE='+' | ZERO_OR_MORE='*';
		public EnumRule getRule() { return rule; }
		
		//ZERO_OR_ONE='?' | ONE_OR_MORE='+' | ZERO_OR_MORE='*'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ZERO_OR_ONE='?'
		public EnumLiteralDeclaration getZERO_OR_ONEEnumLiteralDeclaration_0() { return cZERO_OR_ONEEnumLiteralDeclaration_0; }
		
		//'?'
		public Keyword getZERO_OR_ONEQuestionMarkKeyword_0_0() { return cZERO_OR_ONEQuestionMarkKeyword_0_0; }
		
		//ONE_OR_MORE='+'
		public EnumLiteralDeclaration getONE_OR_MOREEnumLiteralDeclaration_1() { return cONE_OR_MOREEnumLiteralDeclaration_1; }
		
		//'+'
		public Keyword getONE_OR_MOREPlusSignKeyword_1_0() { return cONE_OR_MOREPlusSignKeyword_1_0; }
		
		//ZERO_OR_MORE='*'
		public EnumLiteralDeclaration getZERO_OR_MOREEnumLiteralDeclaration_2() { return cZERO_OR_MOREEnumLiteralDeclaration_2; }
		
		//'*'
		public Keyword getZERO_OR_MOREAsteriskKeyword_2_0() { return cZERO_OR_MOREAsteriskKeyword_2_0; }
	}
	
	private final DmxNamespaceElements pDmxNamespace;
	private final DImportElements pDImport;
	private final DmxTestElements pDmxTest;
	private final DmxTestContextElements pDmxTestContext;
	private final DmxBaseTypeElements eDmxBaseType;
	private final DmxBaseTypeSetElements pDmxBaseTypeSet;
	private final DmxArchetypeElements pDmxArchetype;
	private final DmxFilterElements pDmxFilter;
	private final DmxFilterTypeDescriptorElements pDmxFilterTypeDescriptor;
	private final DmxFilterParameterElements pDmxFilterParameter;
	private final DExpressionElements pDExpression;
	private final DRichTextElements pDRichText;
	private final DmxTextOnlyElements pDmxTextOnly;
	private final DmxTextStartElements pDmxTextStart;
	private final DmxTextMiddleElements pDmxTextMiddle;
	private final DmxTextEndElements pDmxTextEnd;
	private final DmxNavigableMemberReferenceElements pDmxNavigableMemberReference;
	private final DmxCallArgumentsElements pDmxCallArguments;
	private final DmxAssignmentElements pDmxAssignment;
	private final DmxOpSingleAssignElements pDmxOpSingleAssign;
	private final DmxPredicateWithCorrelationVariableElements pDmxPredicateWithCorrelationVariable;
	private final DmxCorrelationVariableElements pDmxCorrelationVariable;
	private final DmxOrExpressionElements pDmxOrExpression;
	private final DmxOpOrElements eDmxOpOr;
	private final DmxAndExpressionElements pDmxAndExpression;
	private final DmxOpAndElements eDmxOpAnd;
	private final DmxEqualityExpressionElements pDmxEqualityExpression;
	private final DmxOpEqualityElements eDmxOpEquality;
	private final DmxRelationalExpressionElements pDmxRelationalExpression;
	private final DmxOpInstanceOfElements pDmxOpInstanceOf;
	private final OpCompareElements eOpCompare;
	private final DmxOtherOperatorExpressionElements pDmxOtherOperatorExpression;
	private final OpOtherElements eOpOther;
	private final DmxAdditiveExpressionElements pDmxAdditiveExpression;
	private final OpAddElements eOpAdd;
	private final DmxMultiplicativeExpressionElements pDmxMultiplicativeExpression;
	private final OpMultiElements eOpMulti;
	private final DmxUnaryOperationElements pDmxUnaryOperation;
	private final OpUnaryElements eOpUnary;
	private final DmxCastExpressionElements pDmxCastExpression;
	private final DmxOpCastElements pDmxOpCast;
	private final DmxPrimaryExpressionElements pDmxPrimaryExpression;
	private final DmxLiteralExpressionElements pDmxLiteralExpression;
	private final DmxParenthesizedExpressionElements pDmxParenthesizedExpression;
	private final DmxListExpressionElements pDmxListExpression;
	private final DmxFunctionCallElements pDmxFunctionCall;
	private final DmxFunctionCallArgumentsElements pDmxFunctionCallArguments;
	private final DmxConstructorCallElements pDmxConstructorCall;
	private final DmxOpConstructorElements pDmxOpConstructor;
	private final DmxStaticReferenceElements pDmxStaticReference;
	private final DmxContextReferenceElements pDmxContextReference;
	private final DmxIfExpressionElements pDmxIfExpression;
	private final DMultiplicityElements pDMultiplicity;
	private final DMultiplicityShorthandElements eDMultiplicityShorthand;
	private final MULTIPLICITYElements pMULTIPLICITY;
	private final DmxBooleanLiteralElements pDmxBooleanLiteral;
	private final DmxNaturalLiteralElements pDmxNaturalLiteral;
	private final DmxDecimalLiteralElements pDmxDecimalLiteral;
	private final DmxStringLiteralElements pDmxStringLiteral;
	private final DmxUndefinedLiteralElements pDmxUndefinedLiteral;
	private final DECIMALElements pDECIMAL;
	private final DQualifiedNameWithWildcardElements pDQualifiedNameWithWildcard;
	private final DQualifiedNameElements pDQualifiedName;
	private final TerminalRule tID;
	private final TerminalRule tSTRING;
	private final TerminalRule tNATURAL;
	private final TerminalRule tLETTER;
	private final TerminalRule tPLAIN_TEXT;
	private final TerminalRule tPLAIN_TEXT_ONLY;
	private final TerminalRule tPLAIN_TEXT_START;
	private final TerminalRule tPLAIN_TEXT_MIDDLE;
	private final TerminalRule tPLAIN_TEXT_END;
	private final TerminalRule tML_COMMENT;
	private final TerminalRule tSL_COMMENT;
	private final TerminalRule tWS;
	private final TerminalRule tANY_OTHER;
	
	private final Grammar grammar;

	@Inject
	public DmxGrammarAccess(GrammarProvider grammarProvider) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.pDmxNamespace = new DmxNamespaceElements();
		this.pDImport = new DImportElements();
		this.pDmxTest = new DmxTestElements();
		this.pDmxTestContext = new DmxTestContextElements();
		this.eDmxBaseType = new DmxBaseTypeElements();
		this.pDmxBaseTypeSet = new DmxBaseTypeSetElements();
		this.pDmxArchetype = new DmxArchetypeElements();
		this.pDmxFilter = new DmxFilterElements();
		this.pDmxFilterTypeDescriptor = new DmxFilterTypeDescriptorElements();
		this.pDmxFilterParameter = new DmxFilterParameterElements();
		this.pDExpression = new DExpressionElements();
		this.pDRichText = new DRichTextElements();
		this.pDmxTextOnly = new DmxTextOnlyElements();
		this.pDmxTextStart = new DmxTextStartElements();
		this.pDmxTextMiddle = new DmxTextMiddleElements();
		this.pDmxTextEnd = new DmxTextEndElements();
		this.pDmxNavigableMemberReference = new DmxNavigableMemberReferenceElements();
		this.pDmxCallArguments = new DmxCallArgumentsElements();
		this.pDmxAssignment = new DmxAssignmentElements();
		this.pDmxOpSingleAssign = new DmxOpSingleAssignElements();
		this.pDmxPredicateWithCorrelationVariable = new DmxPredicateWithCorrelationVariableElements();
		this.pDmxCorrelationVariable = new DmxCorrelationVariableElements();
		this.pDmxOrExpression = new DmxOrExpressionElements();
		this.eDmxOpOr = new DmxOpOrElements();
		this.pDmxAndExpression = new DmxAndExpressionElements();
		this.eDmxOpAnd = new DmxOpAndElements();
		this.pDmxEqualityExpression = new DmxEqualityExpressionElements();
		this.eDmxOpEquality = new DmxOpEqualityElements();
		this.pDmxRelationalExpression = new DmxRelationalExpressionElements();
		this.pDmxOpInstanceOf = new DmxOpInstanceOfElements();
		this.eOpCompare = new OpCompareElements();
		this.pDmxOtherOperatorExpression = new DmxOtherOperatorExpressionElements();
		this.eOpOther = new OpOtherElements();
		this.pDmxAdditiveExpression = new DmxAdditiveExpressionElements();
		this.eOpAdd = new OpAddElements();
		this.pDmxMultiplicativeExpression = new DmxMultiplicativeExpressionElements();
		this.eOpMulti = new OpMultiElements();
		this.pDmxUnaryOperation = new DmxUnaryOperationElements();
		this.eOpUnary = new OpUnaryElements();
		this.pDmxCastExpression = new DmxCastExpressionElements();
		this.pDmxOpCast = new DmxOpCastElements();
		this.pDmxPrimaryExpression = new DmxPrimaryExpressionElements();
		this.pDmxLiteralExpression = new DmxLiteralExpressionElements();
		this.pDmxParenthesizedExpression = new DmxParenthesizedExpressionElements();
		this.pDmxListExpression = new DmxListExpressionElements();
		this.pDmxFunctionCall = new DmxFunctionCallElements();
		this.pDmxFunctionCallArguments = new DmxFunctionCallArgumentsElements();
		this.pDmxConstructorCall = new DmxConstructorCallElements();
		this.pDmxOpConstructor = new DmxOpConstructorElements();
		this.pDmxStaticReference = new DmxStaticReferenceElements();
		this.pDmxContextReference = new DmxContextReferenceElements();
		this.pDmxIfExpression = new DmxIfExpressionElements();
		this.pDMultiplicity = new DMultiplicityElements();
		this.eDMultiplicityShorthand = new DMultiplicityShorthandElements();
		this.pMULTIPLICITY = new MULTIPLICITYElements();
		this.pDmxBooleanLiteral = new DmxBooleanLiteralElements();
		this.pDmxNaturalLiteral = new DmxNaturalLiteralElements();
		this.pDmxDecimalLiteral = new DmxDecimalLiteralElements();
		this.pDmxStringLiteral = new DmxStringLiteralElements();
		this.pDmxUndefinedLiteral = new DmxUndefinedLiteralElements();
		this.pDECIMAL = new DECIMALElements();
		this.pDQualifiedNameWithWildcard = new DQualifiedNameWithWildcardElements();
		this.pDQualifiedName = new DQualifiedNameElements();
		this.tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.dmx.Dmx.ID");
		this.tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.dmx.Dmx.STRING");
		this.tNATURAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.dmx.Dmx.NATURAL");
		this.tLETTER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.dmx.Dmx.LETTER");
		this.tPLAIN_TEXT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.dmx.Dmx.PLAIN_TEXT");
		this.tPLAIN_TEXT_ONLY = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.dmx.Dmx.PLAIN_TEXT_ONLY");
		this.tPLAIN_TEXT_START = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.dmx.Dmx.PLAIN_TEXT_START");
		this.tPLAIN_TEXT_MIDDLE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.dmx.Dmx.PLAIN_TEXT_MIDDLE");
		this.tPLAIN_TEXT_END = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.dmx.Dmx.PLAIN_TEXT_END");
		this.tML_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.dmx.Dmx.ML_COMMENT");
		this.tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.dmx.Dmx.SL_COMMENT");
		this.tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.dmx.Dmx.WS");
		this.tANY_OTHER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.dmx.Dmx.ANY_OTHER");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("com.mimacom.ddd.dm.dmx.Dmx".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	
	//DmxNamespace:
	//	imports+=DImport*
	//	'namespace'
	//	name=DQualifiedName
	//	types+=DmxArchetype*
	//	filters+=DmxFilter*
	//	// For unit-testing purposes:
	//	tests+=DmxTest*;
	public DmxNamespaceElements getDmxNamespaceAccess() {
		return pDmxNamespace;
	}
	
	public ParserRule getDmxNamespaceRule() {
		return getDmxNamespaceAccess().getRule();
	}
	
	//DImport:
	//	'import' importedNamespace=DQualifiedNameWithWildcard;
	public DImportElements getDImportAccess() {
		return pDImport;
	}
	
	public ParserRule getDImportRule() {
		return getDImportAccess().getRule();
	}
	
	///* 
	// * Testing
	// */ DmxTest:
	//	'test'
	//	name=ID ('context'
	//	context+=DmxTestContext (',' context+=DmxTestContext)*)?
	//	'{'
	//	expr=DExpression
	//	'}';
	public DmxTestElements getDmxTestAccess() {
		return pDmxTest;
	}
	
	public ParserRule getDmxTestRule() {
		return getDmxTestAccess().getRule();
	}
	
	//DmxTestContext DContext:
	//	name=ID
	//	':'
	//	type=[DType] multiplicity=DMultiplicity?;
	public DmxTestContextElements getDmxTestContextAccess() {
		return pDmxTestContext;
	}
	
	public ParserRule getDmxTestContextRule() {
		return getDmxTestContextAccess().getRule();
	}
	
	//enum DmxBaseType:
	//	VOID | BOOLEAN | NUMBER | TEXT | IDENTIFIER | TIMEPOINT | STATE /*transition*/ | STATE_EVENT | COMPLEX | NOTIFICATION
	//	/*sent* */ | SERVICE /*invoked* */;
	public DmxBaseTypeElements getDmxBaseTypeAccess() {
		return eDmxBaseType;
	}
	
	public EnumRule getDmxBaseTypeRule() {
		return getDmxBaseTypeAccess().getRule();
	}
	
	//DmxBaseTypeSet:
	//	name=ID
	//	'in'
	//	'(' members+=DmxBaseType (',' members+=DmxBaseType)+ ')';
	public DmxBaseTypeSetElements getDmxBaseTypeSetAccess() {
		return pDmxBaseTypeSet;
	}
	
	public ParserRule getDmxBaseTypeSetRule() {
		return getDmxBaseTypeSetAccess().getRule();
	}
	
	//DmxArchetype:
	//	'archetype'
	//	name=ID
	//	'is'
	//	baseType=DmxBaseType
	//	description=DRichText?;
	public DmxArchetypeElements getDmxArchetypeAccess() {
		return pDmxArchetype;
	}
	
	public ParserRule getDmxArchetypeRule() {
		return getDmxArchetypeAccess().getRule();
	}
	
	//DmxFilter:
	//	'filter'
	//	name=ID
	//	'(' (parameters+=DmxFilterParameter (',' parameters+=DmxFilterParameter)*)? ')'
	//	':'
	//	typeDesc=DmxFilterTypeDescriptor ('with' withTypeSet=DmxBaseTypeSet)?;
	public DmxFilterElements getDmxFilterAccess() {
		return pDmxFilter;
	}
	
	public ParserRule getDmxFilterRule() {
		return getDmxFilterAccess().getRule();
	}
	
	//DmxFilterTypeDescriptor:
	//	(single=DmxBaseType
	//	| multiple=[DmxBaseTypeSet]) collection?='*'?;
	public DmxFilterTypeDescriptorElements getDmxFilterTypeDescriptorAccess() {
		return pDmxFilterTypeDescriptor;
	}
	
	public ParserRule getDmxFilterTypeDescriptorRule() {
		return getDmxFilterTypeDescriptorAccess().getRule();
	}
	
	//DmxFilterParameter:
	//	name=ID
	//	':'
	//	typeDesc=DmxFilterTypeDescriptor;
	public DmxFilterParameterElements getDmxFilterParameterAccess() {
		return pDmxFilterParameter;
	}
	
	public ParserRule getDmxFilterParameterRule() {
		return getDmxFilterParameterAccess().getRule();
	}
	
	///*
	// * Expressions
	// */ DExpression:
	//	DmxAssignment | DmxPredicateWithCorrelationVariable | DRichText;
	public DExpressionElements getDExpressionAccess() {
		return pDExpression;
	}
	
	public ParserRule getDExpressionRule() {
		return getDExpressionAccess().getRule();
	}
	
	//DRichText:
	//	segments+=DmxTextOnly
	//	| segments+=DmxTextStart
	//	segments+=DExpression (segments+=DmxTextMiddle segments+=DExpression)*
	//	segments+=DmxTextEnd;
	public DRichTextElements getDRichTextAccess() {
		return pDRichText;
	}
	
	public ParserRule getDRichTextRule() {
		return getDRichTextAccess().getRule();
	}
	
	//DmxTextOnly DTextSegment:
	//	value=PLAIN_TEXT_ONLY;
	public DmxTextOnlyElements getDmxTextOnlyAccess() {
		return pDmxTextOnly;
	}
	
	public ParserRule getDmxTextOnlyRule() {
		return getDmxTextOnlyAccess().getRule();
	}
	
	//DmxTextStart DTextSegment:
	//	value=PLAIN_TEXT_START;
	public DmxTextStartElements getDmxTextStartAccess() {
		return pDmxTextStart;
	}
	
	public ParserRule getDmxTextStartRule() {
		return getDmxTextStartAccess().getRule();
	}
	
	//DmxTextMiddle DTextSegment:
	//	value=PLAIN_TEXT_MIDDLE;
	public DmxTextMiddleElements getDmxTextMiddleAccess() {
		return pDmxTextMiddle;
	}
	
	public ParserRule getDmxTextMiddleRule() {
		return getDmxTextMiddleAccess().getRule();
	}
	
	//DmxTextEnd DTextSegment:
	//	value=PLAIN_TEXT_END;
	public DmxTextEndElements getDmxTextEndAccess() {
		return pDmxTextEnd;
	}
	
	public ParserRule getDmxTextEndRule() {
		return getDmxTextEndAccess().getRule();
	}
	
	//DmxNavigableMemberReference DExpression:
	//	DmxPrimaryExpression (=> ({DmxAssignment.precedingNavigationSegment=current} '.'
	//	assignToMember=[DNavigableMember] DmxOpSingleAssign) value=DmxOrExpression
	//	| => ({DmxMemberNavigation.precedingNavigationSegment=current} '.') member=[DNavigableMember] (=>
	//	explicitOperationCall?='(' // => boolean => has 0.n explicit arguments
	//	callArguments=DmxCallArguments
	//	')'
	//	| before?="@before")?)*;
	public DmxNavigableMemberReferenceElements getDmxNavigableMemberReferenceAccess() {
		return pDmxNavigableMemberReference;
	}
	
	public ParserRule getDmxNavigableMemberReferenceRule() {
		return getDmxNavigableMemberReferenceAccess().getRule();
	}
	
	//DmxCallArguments:
	//	{DmxCallArguments} (arguments+=DmxPredicateWithCorrelationVariable (','
	//	arguments+=DmxPredicateWithCorrelationVariable)*)?;
	public DmxCallArgumentsElements getDmxCallArgumentsAccess() {
		return pDmxCallArguments;
	}
	
	public ParserRule getDmxCallArgumentsRule() {
		return getDmxCallArgumentsAccess().getRule();
	}
	
	//DmxAssignment DExpression:
	//	{DmxAssignment} assignToMember=[DNavigableMember] DmxOpSingleAssign value=DmxOrExpression;
	public DmxAssignmentElements getDmxAssignmentAccess() {
		return pDmxAssignment;
	}
	
	public ParserRule getDmxAssignmentRule() {
		return getDmxAssignmentAccess().getRule();
	}
	
	//DmxOpSingleAssign:
	//	':=';
	public DmxOpSingleAssignElements getDmxOpSingleAssignAccess() {
		return pDmxOpSingleAssign;
	}
	
	public ParserRule getDmxOpSingleAssignRule() {
		return getDmxOpSingleAssignAccess().getRule();
	}
	
	//DmxPredicateWithCorrelationVariable DExpression:
	//	{DmxPredicateWithCorrelationVariable} correlationVariable=DmxCorrelationVariable
	//	'|'
	//	predicate=DmxOrExpression
	//	| DmxOrExpression;
	public DmxPredicateWithCorrelationVariableElements getDmxPredicateWithCorrelationVariableAccess() {
		return pDmxPredicateWithCorrelationVariable;
	}
	
	public ParserRule getDmxPredicateWithCorrelationVariableRule() {
		return getDmxPredicateWithCorrelationVariableAccess().getRule();
	}
	
	//DmxCorrelationVariable:
	//	name=ID;
	public DmxCorrelationVariableElements getDmxCorrelationVariableAccess() {
		return pDmxCorrelationVariable;
	}
	
	public ParserRule getDmxCorrelationVariableRule() {
		return getDmxCorrelationVariableAccess().getRule();
	}
	
	////	(':' type=[DType])? => type is always NULL!
	//DmxOrExpression DExpression:
	//	DmxAndExpression (=> ({DmxBinaryOperation.leftOperand=current} operator=DmxOpOr) rightOperand=DmxAndExpression)*;
	public DmxOrExpressionElements getDmxOrExpressionAccess() {
		return pDmxOrExpression;
	}
	
	public ParserRule getDmxOrExpressionRule() {
		return getDmxOrExpressionAccess().getRule();
	}
	
	//enum DmxOpOr returns DmxBinaryOperator:
	//	OR | OR='or' | XOR | XOR='xor';
	public DmxOpOrElements getDmxOpOrAccess() {
		return eDmxOpOr;
	}
	
	public EnumRule getDmxOpOrRule() {
		return getDmxOpOrAccess().getRule();
	}
	
	//DmxAndExpression DExpression:
	//	DmxEqualityExpression (=> ({DmxBinaryOperation.leftOperand=current} operator=DmxOpAnd)
	//	rightOperand=DmxEqualityExpression)*;
	public DmxAndExpressionElements getDmxAndExpressionAccess() {
		return pDmxAndExpression;
	}
	
	public ParserRule getDmxAndExpressionRule() {
		return getDmxAndExpressionAccess().getRule();
	}
	
	//enum DmxOpAnd returns DmxBinaryOperator:
	//	AND | AND='and';
	public DmxOpAndElements getDmxOpAndAccess() {
		return eDmxOpAnd;
	}
	
	public EnumRule getDmxOpAndRule() {
		return getDmxOpAndAccess().getRule();
	}
	
	//DmxEqualityExpression DExpression:
	//	DmxRelationalExpression (=> ({DmxBinaryOperation.leftOperand=current} operator=DmxOpEquality)
	//	rightOperand=DmxRelationalExpression)*;
	public DmxEqualityExpressionElements getDmxEqualityExpressionAccess() {
		return pDmxEqualityExpression;
	}
	
	public ParserRule getDmxEqualityExpressionRule() {
		return getDmxEqualityExpressionAccess().getRule();
	}
	
	//enum DmxOpEquality returns DmxBinaryOperator:
	//	EQUAL='=' | NOT_EQUAL='!=' | NOT_EQUAL='<>';
	public DmxOpEqualityElements getDmxOpEqualityAccess() {
		return eDmxOpEquality;
	}
	
	public EnumRule getDmxOpEqualityRule() {
		return getDmxOpEqualityAccess().getRule();
	}
	
	//DmxRelationalExpression DExpression:
	//	DmxOtherOperatorExpression (=> ({DmxInstanceOfExpression.expression=current} DmxOpInstanceOf) type=[DType] | =>
	//	({DmxBinaryOperation.leftOperand=current} operator=OpCompare) rightOperand=DmxOtherOperatorExpression)*;
	public DmxRelationalExpressionElements getDmxRelationalExpressionAccess() {
		return pDmxRelationalExpression;
	}
	
	public ParserRule getDmxRelationalExpressionRule() {
		return getDmxRelationalExpressionAccess().getRule();
	}
	
	//DmxOpInstanceOf:
	//	'ISA' | 'isa';
	public DmxOpInstanceOfElements getDmxOpInstanceOfAccess() {
		return pDmxOpInstanceOf;
	}
	
	public ParserRule getDmxOpInstanceOfRule() {
		return getDmxOpInstanceOfAccess().getRule();
	}
	
	//enum OpCompare returns DmxBinaryOperator:
	//	LESS='<' | LESS_OR_EQUAL='<=' | LESS_OR_EQUAL='≤' | GREATER_OR_EQUAL='>=' | GREATER_OR_EQUAL='≥' | GREATER='>';
	public OpCompareElements getOpCompareAccess() {
		return eOpCompare;
	}
	
	public EnumRule getOpCompareRule() {
		return getOpCompareAccess().getRule();
	}
	
	//DmxOtherOperatorExpression DExpression:
	//	DmxAdditiveExpression (=> ({DmxBinaryOperation.leftOperand=current} operator=OpOther)
	//	rightOperand=DmxAdditiveExpression)*;
	public DmxOtherOperatorExpressionElements getDmxOtherOperatorExpressionAccess() {
		return pDmxOtherOperatorExpression;
	}
	
	public ParserRule getDmxOtherOperatorExpressionRule() {
		return getDmxOtherOperatorExpressionAccess().getRule();
	}
	
	//enum OpOther returns DmxBinaryOperator:
	//	IN | IN='in' | UNTIL='..' | SINGLE_ARROW='->' | DOUBLE_ARROW='=>';
	public OpOtherElements getOpOtherAccess() {
		return eOpOther;
	}
	
	public EnumRule getOpOtherRule() {
		return getOpOtherAccess().getRule();
	}
	
	//DmxAdditiveExpression DExpression:
	//	DmxMultiplicativeExpression (=> ({DmxBinaryOperation.leftOperand=current} operator=OpAdd)
	//	rightOperand=DmxMultiplicativeExpression)*;
	public DmxAdditiveExpressionElements getDmxAdditiveExpressionAccess() {
		return pDmxAdditiveExpression;
	}
	
	public ParserRule getDmxAdditiveExpressionRule() {
		return getDmxAdditiveExpressionAccess().getRule();
	}
	
	//enum OpAdd returns DmxBinaryOperator:
	//	ADD='+' | SUBTRACT='-';
	public OpAddElements getOpAddAccess() {
		return eOpAdd;
	}
	
	public EnumRule getOpAddRule() {
		return getOpAddAccess().getRule();
	}
	
	//DmxMultiplicativeExpression DExpression:
	//	DmxUnaryOperation (=> ({DmxBinaryOperation.leftOperand=current} operator=OpMulti) rightOperand=DmxUnaryOperation)*;
	public DmxMultiplicativeExpressionElements getDmxMultiplicativeExpressionAccess() {
		return pDmxMultiplicativeExpression;
	}
	
	public ParserRule getDmxMultiplicativeExpressionRule() {
		return getDmxMultiplicativeExpressionAccess().getRule();
	}
	
	//enum OpMulti returns DmxBinaryOperator:
	//	MULTIPLY='*' | DIVIDE='/' | POWER='**' | MODULO='%';
	public OpMultiElements getOpMultiAccess() {
		return eOpMulti;
	}
	
	public EnumRule getOpMultiRule() {
		return getOpMultiAccess().getRule();
	}
	
	//DmxUnaryOperation DExpression:
	//	{DmxUnaryOperation} operator=OpUnary operand=DmxUnaryOperation
	//	| DmxCastExpression;
	public DmxUnaryOperationElements getDmxUnaryOperationAccess() {
		return pDmxUnaryOperation;
	}
	
	public ParserRule getDmxUnaryOperationRule() {
		return getDmxUnaryOperationAccess().getRule();
	}
	
	//enum OpUnary returns DmxUnaryOperator:
	//	PLUS='+' | MINUS='-' | NOT='!' | NOT | NOT='not';
	public OpUnaryElements getOpUnaryAccess() {
		return eOpUnary;
	}
	
	public EnumRule getOpUnaryRule() {
		return getOpUnaryAccess().getRule();
	}
	
	//DmxCastExpression DExpression:
	//	DmxNavigableMemberReference (=> ({DmxCastExpression.target=current} DmxOpCast) type=[DType])?;
	public DmxCastExpressionElements getDmxCastExpressionAccess() {
		return pDmxCastExpression;
	}
	
	public ParserRule getDmxCastExpressionRule() {
		return getDmxCastExpressionAccess().getRule();
	}
	
	//DmxOpCast:
	//	'AS' | 'as';
	public DmxOpCastElements getDmxOpCastAccess() {
		return pDmxOpCast;
	}
	
	public ParserRule getDmxOpCastRule() {
		return getDmxOpCastAccess().getRule();
	}
	
	//DmxPrimaryExpression DExpression:
	//	DmxLiteralExpression | DmxParenthesizedExpression | DmxListExpression | DmxFunctionCall | DmxConstructorCall |
	//	DmxStaticReference | DmxContextReference | DmxIfExpression;
	public DmxPrimaryExpressionElements getDmxPrimaryExpressionAccess() {
		return pDmxPrimaryExpression;
	}
	
	public ParserRule getDmxPrimaryExpressionRule() {
		return getDmxPrimaryExpressionAccess().getRule();
	}
	
	//DmxLiteralExpression DExpression:
	//	DmxBooleanLiteral | DmxStringLiteral | DmxNaturalLiteral | DmxDecimalLiteral | DmxUndefinedLiteral;
	public DmxLiteralExpressionElements getDmxLiteralExpressionAccess() {
		return pDmxLiteralExpression;
	}
	
	public ParserRule getDmxLiteralExpressionRule() {
		return getDmxLiteralExpressionAccess().getRule();
	}
	
	//DmxParenthesizedExpression DExpression:
	//	'(' DExpression ')';
	public DmxParenthesizedExpressionElements getDmxParenthesizedExpressionAccess() {
		return pDmxParenthesizedExpression;
	}
	
	public ParserRule getDmxParenthesizedExpressionRule() {
		return getDmxParenthesizedExpressionAccess().getRule();
	}
	
	//DmxListExpression DExpression:
	//	{DmxListExpression}
	//	'{' (elements+=DExpression (',' elements+=DExpression)*)?
	//	'}';
	public DmxListExpressionElements getDmxListExpressionAccess() {
		return pDmxListExpression;
	}
	
	public ParserRule getDmxListExpressionRule() {
		return getDmxListExpressionAccess().getRule();
	}
	
	//DmxFunctionCall DExpression:
	//	{DmxFunctionCall} function=[DmxFilter]
	//	'('
	//	callArguments=DmxFunctionCallArguments
	//	')';
	public DmxFunctionCallElements getDmxFunctionCallAccess() {
		return pDmxFunctionCall;
	}
	
	public ParserRule getDmxFunctionCallRule() {
		return getDmxFunctionCallAccess().getRule();
	}
	
	//DmxFunctionCallArguments DmxCallArguments:
	//	{DmxCallArguments} (arguments+=DExpression (',' arguments+=DExpression)*)?;
	public DmxFunctionCallArgumentsElements getDmxFunctionCallArgumentsAccess() {
		return pDmxFunctionCallArguments;
	}
	
	public ParserRule getDmxFunctionCallArgumentsRule() {
		return getDmxFunctionCallArgumentsAccess().getRule();
	}
	
	//DmxConstructorCall DExpression:
	//	{DmxConstructorCall} DmxOpConstructor
	//	constructor=[DComplexType] (=> explicitConstructorCall?='(' // => boolean => has 0.n explicit arguments
	//	callArguments=DmxFunctionCallArguments
	//	')')?;
	public DmxConstructorCallElements getDmxConstructorCallAccess() {
		return pDmxConstructorCall;
	}
	
	public ParserRule getDmxConstructorCallRule() {
		return getDmxConstructorCallAccess().getRule();
	}
	
	//DmxOpConstructor:
	//	'NEW' | 'new';
	public DmxOpConstructorElements getDmxOpConstructorAccess() {
		return pDmxOpConstructor;
	}
	
	public ParserRule getDmxOpConstructorRule() {
		return getDmxOpConstructorAccess().getRule();
	}
	
	//DmxStaticReference DExpression:
	//	{DmxStaticReference}
	//	'['
	//	target=[IStaticReferenceTarget|DQualifiedName] ('#' member=[DNavigableMember])? ("|" (displayName=ID | plural?="*"))?
	//	-> ']';
	public DmxStaticReferenceElements getDmxStaticReferenceAccess() {
		return pDmxStaticReference;
	}
	
	public ParserRule getDmxStaticReferenceRule() {
		return getDmxStaticReferenceAccess().getRule();
	}
	
	//// '->' gives precedence to this ']' over PLAIN_TEXT_MIDDLE ('=>' works too but generates more lookahead overhead)
	//DmxContextReference DExpression:
	//	{DmxContextReference} target=[DNamedElement] (before?="@before"
	//	| '.' all?='all')?;
	public DmxContextReferenceElements getDmxContextReferenceAccess() {
		return pDmxContextReference;
	}
	
	public ParserRule getDmxContextReferenceRule() {
		return getDmxContextReferenceAccess().getRule();
	}
	
	//DmxIfExpression DExpression:
	//	{DmxIfExpression}
	//	'if' if=DExpression
	//	'then' then=DExpression (=> 'else' else=DExpression)?
	//	'end';
	public DmxIfExpressionElements getDmxIfExpressionAccess() {
		return pDmxIfExpression;
	}
	
	public ParserRule getDmxIfExpressionRule() {
		return getDmxIfExpressionAccess().getRule();
	}
	
	//DMultiplicity:
	//	shorthand=DMultiplicityShorthand | '(' minOccurs=NATURAL '..' maxOccurs=MULTIPLICITY ')';
	public DMultiplicityElements getDMultiplicityAccess() {
		return pDMultiplicity;
	}
	
	public ParserRule getDMultiplicityRule() {
		return getDMultiplicityAccess().getRule();
	}
	
	//enum DMultiplicityShorthand:
	//	ZERO_OR_ONE='?' | ONE_OR_MORE='+' | ZERO_OR_MORE='*';
	public DMultiplicityShorthandElements getDMultiplicityShorthandAccess() {
		return eDMultiplicityShorthand;
	}
	
	public EnumRule getDMultiplicityShorthandRule() {
		return getDMultiplicityShorthandAccess().getRule();
	}
	
	//MULTIPLICITY ecore::EInt:
	//	NATURAL | '*';
	public MULTIPLICITYElements getMULTIPLICITYAccess() {
		return pMULTIPLICITY;
	}
	
	public ParserRule getMULTIPLICITYRule() {
		return getMULTIPLICITYAccess().getRule();
	}
	
	//DmxBooleanLiteral DExpression:
	//	{DmxBooleanLiteral} (value?='TRUE' | value?='true' | 'FALSE' | 'false');
	public DmxBooleanLiteralElements getDmxBooleanLiteralAccess() {
		return pDmxBooleanLiteral;
	}
	
	public ParserRule getDmxBooleanLiteralRule() {
		return getDmxBooleanLiteralAccess().getRule();
	}
	
	//DmxNaturalLiteral DExpression:
	//	{DmxNaturalLiteral} value=NATURAL;
	public DmxNaturalLiteralElements getDmxNaturalLiteralAccess() {
		return pDmxNaturalLiteral;
	}
	
	public ParserRule getDmxNaturalLiteralRule() {
		return getDmxNaturalLiteralAccess().getRule();
	}
	
	//DmxDecimalLiteral DExpression:
	//	{DmxDecimalLiteral} value=DECIMAL;
	public DmxDecimalLiteralElements getDmxDecimalLiteralAccess() {
		return pDmxDecimalLiteral;
	}
	
	public ParserRule getDmxDecimalLiteralRule() {
		return getDmxDecimalLiteralAccess().getRule();
	}
	
	//DmxStringLiteral DExpression:
	//	{DmxStringLiteral} value=STRING;
	public DmxStringLiteralElements getDmxStringLiteralAccess() {
		return pDmxStringLiteral;
	}
	
	public ParserRule getDmxStringLiteralRule() {
		return getDmxStringLiteralAccess().getRule();
	}
	
	//DmxUndefinedLiteral DExpression:
	//	{DmxUndefinedLiteral} ('UNDEFINED' | 'undefined');
	public DmxUndefinedLiteralElements getDmxUndefinedLiteralAccess() {
		return pDmxUndefinedLiteral;
	}
	
	public ParserRule getDmxUndefinedLiteralRule() {
		return getDmxUndefinedLiteralAccess().getRule();
	}
	
	//DECIMAL:
	//	NATURAL '.' NATURAL (('E' | 'e') ('+' | '-')? NATURAL)?;
	public DECIMALElements getDECIMALAccess() {
		return pDECIMAL;
	}
	
	public ParserRule getDECIMALRule() {
		return getDECIMALAccess().getRule();
	}
	
	//DQualifiedNameWithWildcard:
	//	DQualifiedName '.*'?;
	public DQualifiedNameWithWildcardElements getDQualifiedNameWithWildcardAccess() {
		return pDQualifiedNameWithWildcard;
	}
	
	public ParserRule getDQualifiedNameWithWildcardRule() {
		return getDQualifiedNameWithWildcardAccess().getRule();
	}
	
	//DQualifiedName:
	//	ID ('.' ID)*;
	public DQualifiedNameElements getDQualifiedNameAccess() {
		return pDQualifiedName;
	}
	
	public ParserRule getDQualifiedNameRule() {
		return getDQualifiedNameAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? (LETTER | '_') (LETTER | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return tID;
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"';
	public TerminalRule getSTRINGRule() {
		return tSTRING;
	}
	
	//terminal NATURAL returns ecore::EInt:
	//	'0'..'9'+ | '∞';
	public TerminalRule getNATURALRule() {
		return tNATURAL;
	}
	
	//terminal fragment LETTER:
	//	'a'..'z' | 'A'..'Z' | '\\u00c0'..'\\u00d6' | '\\u00d8'..'\\u00f6' | '\\u00f8'..'\\u00ff';
	public TerminalRule getLETTERRule() {
		return tLETTER;
	}
	
	//terminal fragment PLAIN_TEXT:
	//	!('»' | ']' | '[');
	public TerminalRule getPLAIN_TEXTRule() {
		return tPLAIN_TEXT;
	}
	
	//terminal PLAIN_TEXT_ONLY:
	//	'«' PLAIN_TEXT* '»';
	public TerminalRule getPLAIN_TEXT_ONLYRule() {
		return tPLAIN_TEXT_ONLY;
	}
	
	//terminal PLAIN_TEXT_START:
	//	'«' PLAIN_TEXT* '[';
	public TerminalRule getPLAIN_TEXT_STARTRule() {
		return tPLAIN_TEXT_START;
	}
	
	//terminal PLAIN_TEXT_MIDDLE:
	//	']' PLAIN_TEXT* '[';
	public TerminalRule getPLAIN_TEXT_MIDDLERule() {
		return tPLAIN_TEXT_MIDDLE;
	}
	
	//terminal PLAIN_TEXT_END:
	//	']' PLAIN_TEXT* '»';
	public TerminalRule getPLAIN_TEXT_ENDRule() {
		return tPLAIN_TEXT_END;
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return tML_COMMENT;
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return tSL_COMMENT;
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return tWS;
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return tANY_OTHER;
	}
}
