/*
 * generated by Xtext 2.16.0
 */
package com.mimacom.ddd.dm.dmx.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class DmxGrammarAccess extends AbstractGrammarElementFinder {
	
	public class DmxModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.dmx.Dmx.DmxModel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDmxModelAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cTextKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cNATURALTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Keyword cColonKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cTextsAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cTextsDRichTextParserRuleCall_1_3_0 = (RuleCall)cTextsAssignment_1_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cExprKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final RuleCall cNATURALTerminalRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final Keyword cColonKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Assignment cExpressionsAssignment_2_3 = (Assignment)cGroup_2.eContents().get(3);
		private final RuleCall cExpressionsDExpressionParserRuleCall_2_3_0 = (RuleCall)cExpressionsAssignment_2_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_4 = (Keyword)cGroup_2.eContents().get(4);
		
		//DmxModel:
		//	{DmxModel} ('text' NATURAL ':' texts+=DRichText ';')* ('expr' NATURAL ':' expressions+=DExpression ';')*;
		@Override public ParserRule getRule() { return rule; }
		
		//{DmxModel} ('text' NATURAL ':' texts+=DRichText ';')* ('expr' NATURAL ':' expressions+=DExpression ';')*
		public Group getGroup() { return cGroup; }
		
		//{DmxModel}
		public Action getDmxModelAction_0() { return cDmxModelAction_0; }
		
		//('text' NATURAL ':' texts+=DRichText ';')*
		public Group getGroup_1() { return cGroup_1; }
		
		//'text'
		public Keyword getTextKeyword_1_0() { return cTextKeyword_1_0; }
		
		//NATURAL
		public RuleCall getNATURALTerminalRuleCall_1_1() { return cNATURALTerminalRuleCall_1_1; }
		
		//':'
		public Keyword getColonKeyword_1_2() { return cColonKeyword_1_2; }
		
		//texts+=DRichText
		public Assignment getTextsAssignment_1_3() { return cTextsAssignment_1_3; }
		
		//DRichText
		public RuleCall getTextsDRichTextParserRuleCall_1_3_0() { return cTextsDRichTextParserRuleCall_1_3_0; }
		
		//';'
		public Keyword getSemicolonKeyword_1_4() { return cSemicolonKeyword_1_4; }
		
		//('expr' NATURAL ':' expressions+=DExpression ';')*
		public Group getGroup_2() { return cGroup_2; }
		
		//'expr'
		public Keyword getExprKeyword_2_0() { return cExprKeyword_2_0; }
		
		//NATURAL
		public RuleCall getNATURALTerminalRuleCall_2_1() { return cNATURALTerminalRuleCall_2_1; }
		
		//':'
		public Keyword getColonKeyword_2_2() { return cColonKeyword_2_2; }
		
		//expressions+=DExpression
		public Assignment getExpressionsAssignment_2_3() { return cExpressionsAssignment_2_3; }
		
		//DExpression
		public RuleCall getExpressionsDExpressionParserRuleCall_2_3_0() { return cExpressionsDExpressionParserRuleCall_2_3_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2_4() { return cSemicolonKeyword_2_4; }
	}
	public class DRichTextElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.dmx.Dmx.DRichText");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cElementsAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cElementsDTextOnlyParserRuleCall_0_0 = (RuleCall)cElementsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cElementsAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cElementsDTextStartParserRuleCall_1_0_0 = (RuleCall)cElementsAssignment_1_0.eContents().get(0);
		private final Assignment cElementsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cElementsDExpressionParserRuleCall_1_1_0 = (RuleCall)cElementsAssignment_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Assignment cElementsAssignment_1_2_0 = (Assignment)cGroup_1_2.eContents().get(0);
		private final RuleCall cElementsDTextMiddleParserRuleCall_1_2_0_0 = (RuleCall)cElementsAssignment_1_2_0.eContents().get(0);
		private final Assignment cElementsAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cElementsDExpressionParserRuleCall_1_2_1_0 = (RuleCall)cElementsAssignment_1_2_1.eContents().get(0);
		private final Assignment cElementsAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cElementsDTextEndParserRuleCall_1_3_0 = (RuleCall)cElementsAssignment_1_3.eContents().get(0);
		
		//////
		//DRichText:
		//	elements+=DTextOnly
		//	| elements+=DTextStart
		//	elements+=DExpression (elements+=DTextMiddle elements+=DExpression)*
		//	elements+=DTextEnd;
		@Override public ParserRule getRule() { return rule; }
		
		//elements+=DTextOnly | elements+=DTextStart elements+=DExpression (elements+=DTextMiddle elements+=DExpression)*
		//elements+=DTextEnd
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//elements+=DTextOnly
		public Assignment getElementsAssignment_0() { return cElementsAssignment_0; }
		
		//DTextOnly
		public RuleCall getElementsDTextOnlyParserRuleCall_0_0() { return cElementsDTextOnlyParserRuleCall_0_0; }
		
		//elements+=DTextStart elements+=DExpression (elements+=DTextMiddle elements+=DExpression)* elements+=DTextEnd
		public Group getGroup_1() { return cGroup_1; }
		
		//elements+=DTextStart
		public Assignment getElementsAssignment_1_0() { return cElementsAssignment_1_0; }
		
		//DTextStart
		public RuleCall getElementsDTextStartParserRuleCall_1_0_0() { return cElementsDTextStartParserRuleCall_1_0_0; }
		
		//elements+=DExpression
		public Assignment getElementsAssignment_1_1() { return cElementsAssignment_1_1; }
		
		//DExpression
		public RuleCall getElementsDExpressionParserRuleCall_1_1_0() { return cElementsDExpressionParserRuleCall_1_1_0; }
		
		//(elements+=DTextMiddle elements+=DExpression)*
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//elements+=DTextMiddle
		public Assignment getElementsAssignment_1_2_0() { return cElementsAssignment_1_2_0; }
		
		//DTextMiddle
		public RuleCall getElementsDTextMiddleParserRuleCall_1_2_0_0() { return cElementsDTextMiddleParserRuleCall_1_2_0_0; }
		
		//elements+=DExpression
		public Assignment getElementsAssignment_1_2_1() { return cElementsAssignment_1_2_1; }
		
		//DExpression
		public RuleCall getElementsDExpressionParserRuleCall_1_2_1_0() { return cElementsDExpressionParserRuleCall_1_2_1_0; }
		
		//elements+=DTextEnd
		public Assignment getElementsAssignment_1_3() { return cElementsAssignment_1_3; }
		
		//DTextEnd
		public RuleCall getElementsDTextEndParserRuleCall_1_3_0() { return cElementsDTextEndParserRuleCall_1_3_0; }
	}
	public class DTextOnlyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.dmx.Dmx.DTextOnly");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValuePLAIN_TEXT_ONLYTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//DTextOnly DText:
		//	value=PLAIN_TEXT_ONLY;
		@Override public ParserRule getRule() { return rule; }
		
		//value=PLAIN_TEXT_ONLY
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//PLAIN_TEXT_ONLY
		public RuleCall getValuePLAIN_TEXT_ONLYTerminalRuleCall_0() { return cValuePLAIN_TEXT_ONLYTerminalRuleCall_0; }
	}
	public class DTextStartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.dmx.Dmx.DTextStart");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValuePLAIN_TEXT_STARTTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//DTextStart DText:
		//	value=PLAIN_TEXT_START;
		@Override public ParserRule getRule() { return rule; }
		
		//value=PLAIN_TEXT_START
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//PLAIN_TEXT_START
		public RuleCall getValuePLAIN_TEXT_STARTTerminalRuleCall_0() { return cValuePLAIN_TEXT_STARTTerminalRuleCall_0; }
	}
	public class DTextMiddleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.dmx.Dmx.DTextMiddle");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValuePLAIN_TEXT_MIDDLETerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//DTextMiddle DText:
		//	value=PLAIN_TEXT_MIDDLE;
		@Override public ParserRule getRule() { return rule; }
		
		//value=PLAIN_TEXT_MIDDLE
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//PLAIN_TEXT_MIDDLE
		public RuleCall getValuePLAIN_TEXT_MIDDLETerminalRuleCall_0() { return cValuePLAIN_TEXT_MIDDLETerminalRuleCall_0; }
	}
	public class DTextEndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.dmx.Dmx.DTextEnd");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValuePLAIN_TEXT_ENDTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//DTextEnd DText:
		//	value=PLAIN_TEXT_END;
		@Override public ParserRule getRule() { return rule; }
		
		//value=PLAIN_TEXT_END
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//PLAIN_TEXT_END
		public RuleCall getValuePLAIN_TEXT_ENDTerminalRuleCall_0() { return cValuePLAIN_TEXT_ENDTerminalRuleCall_0; }
	}
	public class DExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.dmx.Dmx.DExpression");
		private final RuleCall cDAssignmentParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//DExpression:
		//	DAssignment;
		@Override public ParserRule getRule() { return rule; }
		
		//DAssignment
		public RuleCall getDAssignmentParserRuleCall() { return cDAssignmentParserRuleCall; }
	}
	public class DAssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.dmx.Dmx.DAssignment");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cDAssignmentAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cMemberAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final CrossReference cMemberDTypedMemberCrossReference_0_1_0 = (CrossReference)cMemberAssignment_0_1.eContents().get(0);
		private final RuleCall cMemberDTypedMemberIDTerminalRuleCall_0_1_0_1 = (RuleCall)cMemberDTypedMemberCrossReference_0_1_0.eContents().get(1);
		private final RuleCall cOpSingleAssignParserRuleCall_0_2 = (RuleCall)cGroup_0.eContents().get(2);
		private final Assignment cValueAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cValueDAssignmentParserRuleCall_0_3_0 = (RuleCall)cValueAssignment_0_3.eContents().get(0);
		private final RuleCall cDOrExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//DAssignment DExpression:
		//	{DAssignment} member=[DTypedMember] OpSingleAssign value=DAssignment
		//	| DOrExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//{DAssignment} member=[DTypedMember] OpSingleAssign value=DAssignment | DOrExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{DAssignment} member=[DTypedMember] OpSingleAssign value=DAssignment
		public Group getGroup_0() { return cGroup_0; }
		
		//{DAssignment}
		public Action getDAssignmentAction_0_0() { return cDAssignmentAction_0_0; }
		
		//member=[DTypedMember]
		public Assignment getMemberAssignment_0_1() { return cMemberAssignment_0_1; }
		
		//[DTypedMember]
		public CrossReference getMemberDTypedMemberCrossReference_0_1_0() { return cMemberDTypedMemberCrossReference_0_1_0; }
		
		//ID
		public RuleCall getMemberDTypedMemberIDTerminalRuleCall_0_1_0_1() { return cMemberDTypedMemberIDTerminalRuleCall_0_1_0_1; }
		
		//OpSingleAssign
		public RuleCall getOpSingleAssignParserRuleCall_0_2() { return cOpSingleAssignParserRuleCall_0_2; }
		
		//value=DAssignment
		public Assignment getValueAssignment_0_3() { return cValueAssignment_0_3; }
		
		//DAssignment
		public RuleCall getValueDAssignmentParserRuleCall_0_3_0() { return cValueDAssignmentParserRuleCall_0_3_0; }
		
		//DOrExpression
		public RuleCall getDOrExpressionParserRuleCall_1() { return cDOrExpressionParserRuleCall_1; }
	}
	public class OpSingleAssignElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.dmx.Dmx.OpSingleAssign");
		private final Keyword cColonEqualsSignKeyword = (Keyword)rule.eContents().get(1);
		
		//OpSingleAssign:
		//	':=';
		@Override public ParserRule getRule() { return rule; }
		
		//':='
		public Keyword getColonEqualsSignKeyword() { return cColonEqualsSignKeyword; }
	}
	public class DOrExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.dmx.Dmx.DOrExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cDAndExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cDBinaryOperationLeftOperandAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cOperatorAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final RuleCall cOperatorOpOrEnumRuleCall_1_0_0_1_0 = (RuleCall)cOperatorAssignment_1_0_0_1.eContents().get(0);
		private final Assignment cRightOperandAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightOperandDAndExpressionParserRuleCall_1_1_0 = (RuleCall)cRightOperandAssignment_1_1.eContents().get(0);
		
		//DOrExpression DExpression:
		//	DAndExpression (=> ({DBinaryOperation.leftOperand=current} operator=OpOr) rightOperand=DAndExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//DAndExpression (=> ({DBinaryOperation.leftOperand=current} operator=OpOr) rightOperand=DAndExpression)*
		public Group getGroup() { return cGroup; }
		
		//DAndExpression
		public RuleCall getDAndExpressionParserRuleCall_0() { return cDAndExpressionParserRuleCall_0; }
		
		//(=> ({DBinaryOperation.leftOperand=current} operator=OpOr) rightOperand=DAndExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//=> ({DBinaryOperation.leftOperand=current} operator=OpOr)
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//{DBinaryOperation.leftOperand=current} operator=OpOr
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//{DBinaryOperation.leftOperand=current}
		public Action getDBinaryOperationLeftOperandAction_1_0_0_0() { return cDBinaryOperationLeftOperandAction_1_0_0_0; }
		
		//operator=OpOr
		public Assignment getOperatorAssignment_1_0_0_1() { return cOperatorAssignment_1_0_0_1; }
		
		//OpOr
		public RuleCall getOperatorOpOrEnumRuleCall_1_0_0_1_0() { return cOperatorOpOrEnumRuleCall_1_0_0_1_0; }
		
		//rightOperand=DAndExpression
		public Assignment getRightOperandAssignment_1_1() { return cRightOperandAssignment_1_1; }
		
		//DAndExpression
		public RuleCall getRightOperandDAndExpressionParserRuleCall_1_1_0() { return cRightOperandDAndExpressionParserRuleCall_1_1_0; }
	}
	public class DAndExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.dmx.Dmx.DAndExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cDEqualityExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cDBinaryOperationLeftOperandAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cOperatorAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final RuleCall cOperatorOpAndEnumRuleCall_1_0_0_1_0 = (RuleCall)cOperatorAssignment_1_0_0_1.eContents().get(0);
		private final Assignment cRightOperandAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightOperandDEqualityExpressionParserRuleCall_1_1_0 = (RuleCall)cRightOperandAssignment_1_1.eContents().get(0);
		
		//DAndExpression DExpression:
		//	DEqualityExpression (=> ({DBinaryOperation.leftOperand=current} operator=OpAnd) rightOperand=DEqualityExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//DEqualityExpression (=> ({DBinaryOperation.leftOperand=current} operator=OpAnd) rightOperand=DEqualityExpression)*
		public Group getGroup() { return cGroup; }
		
		//DEqualityExpression
		public RuleCall getDEqualityExpressionParserRuleCall_0() { return cDEqualityExpressionParserRuleCall_0; }
		
		//(=> ({DBinaryOperation.leftOperand=current} operator=OpAnd) rightOperand=DEqualityExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//=> ({DBinaryOperation.leftOperand=current} operator=OpAnd)
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//{DBinaryOperation.leftOperand=current} operator=OpAnd
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//{DBinaryOperation.leftOperand=current}
		public Action getDBinaryOperationLeftOperandAction_1_0_0_0() { return cDBinaryOperationLeftOperandAction_1_0_0_0; }
		
		//operator=OpAnd
		public Assignment getOperatorAssignment_1_0_0_1() { return cOperatorAssignment_1_0_0_1; }
		
		//OpAnd
		public RuleCall getOperatorOpAndEnumRuleCall_1_0_0_1_0() { return cOperatorOpAndEnumRuleCall_1_0_0_1_0; }
		
		//rightOperand=DEqualityExpression
		public Assignment getRightOperandAssignment_1_1() { return cRightOperandAssignment_1_1; }
		
		//DEqualityExpression
		public RuleCall getRightOperandDEqualityExpressionParserRuleCall_1_1_0() { return cRightOperandDEqualityExpressionParserRuleCall_1_1_0; }
	}
	public class DEqualityExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.dmx.Dmx.DEqualityExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cDRelationalExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cDBinaryOperationLeftOperandAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cOperatorAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final RuleCall cOperatorOpEqualityEnumRuleCall_1_0_0_1_0 = (RuleCall)cOperatorAssignment_1_0_0_1.eContents().get(0);
		private final Assignment cRightOperandAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightOperandDRelationalExpressionParserRuleCall_1_1_0 = (RuleCall)cRightOperandAssignment_1_1.eContents().get(0);
		
		//DEqualityExpression DExpression:
		//	DRelationalExpression (=> ({DBinaryOperation.leftOperand=current} operator=OpEquality)
		//	rightOperand=DRelationalExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//DRelationalExpression (=> ({DBinaryOperation.leftOperand=current} operator=OpEquality)
		//rightOperand=DRelationalExpression)*
		public Group getGroup() { return cGroup; }
		
		//DRelationalExpression
		public RuleCall getDRelationalExpressionParserRuleCall_0() { return cDRelationalExpressionParserRuleCall_0; }
		
		//(=> ({DBinaryOperation.leftOperand=current} operator=OpEquality) rightOperand=DRelationalExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//=> ({DBinaryOperation.leftOperand=current} operator=OpEquality)
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//{DBinaryOperation.leftOperand=current} operator=OpEquality
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//{DBinaryOperation.leftOperand=current}
		public Action getDBinaryOperationLeftOperandAction_1_0_0_0() { return cDBinaryOperationLeftOperandAction_1_0_0_0; }
		
		//operator=OpEquality
		public Assignment getOperatorAssignment_1_0_0_1() { return cOperatorAssignment_1_0_0_1; }
		
		//OpEquality
		public RuleCall getOperatorOpEqualityEnumRuleCall_1_0_0_1_0() { return cOperatorOpEqualityEnumRuleCall_1_0_0_1_0; }
		
		//rightOperand=DRelationalExpression
		public Assignment getRightOperandAssignment_1_1() { return cRightOperandAssignment_1_1; }
		
		//DRelationalExpression
		public RuleCall getRightOperandDRelationalExpressionParserRuleCall_1_1_0() { return cRightOperandDRelationalExpressionParserRuleCall_1_1_0; }
	}
	public class DRelationalExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.dmx.Dmx.DRelationalExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cDOtherOperatorExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Group cGroup_1_0_0_0 = (Group)cGroup_1_0_0.eContents().get(0);
		private final Action cDInstanceOfExpressionExpressionAction_1_0_0_0_0 = (Action)cGroup_1_0_0_0.eContents().get(0);
		private final RuleCall cOpInstanceOfParserRuleCall_1_0_0_0_1 = (RuleCall)cGroup_1_0_0_0.eContents().get(1);
		private final Assignment cTypeAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final CrossReference cTypeDTypeCrossReference_1_0_1_0 = (CrossReference)cTypeAssignment_1_0_1.eContents().get(0);
		private final RuleCall cTypeDTypeIDTerminalRuleCall_1_0_1_0_1 = (RuleCall)cTypeDTypeCrossReference_1_0_1_0.eContents().get(1);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Group cGroup_1_1_0 = (Group)cGroup_1_1.eContents().get(0);
		private final Group cGroup_1_1_0_0 = (Group)cGroup_1_1_0.eContents().get(0);
		private final Action cDBinaryOperationLeftOperandAction_1_1_0_0_0 = (Action)cGroup_1_1_0_0.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1_0_0_1 = (Assignment)cGroup_1_1_0_0.eContents().get(1);
		private final RuleCall cOperatorOpCompareEnumRuleCall_1_1_0_0_1_0 = (RuleCall)cOperatorAssignment_1_1_0_0_1.eContents().get(0);
		private final Assignment cRightOperandAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cRightOperandDOtherOperatorExpressionParserRuleCall_1_1_1_0 = (RuleCall)cRightOperandAssignment_1_1_1.eContents().get(0);
		
		//DRelationalExpression DExpression:
		//	DOtherOperatorExpression (=> ({DInstanceOfExpression.expression=current} OpInstanceOf) type=[DType] | =>
		//	({DBinaryOperation.leftOperand=current} operator=OpCompare) rightOperand=DOtherOperatorExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//DOtherOperatorExpression (=> ({DInstanceOfExpression.expression=current} OpInstanceOf) type=[DType] | =>
		//({DBinaryOperation.leftOperand=current} operator=OpCompare) rightOperand=DOtherOperatorExpression)*
		public Group getGroup() { return cGroup; }
		
		//DOtherOperatorExpression
		public RuleCall getDOtherOperatorExpressionParserRuleCall_0() { return cDOtherOperatorExpressionParserRuleCall_0; }
		
		//(=> ({DInstanceOfExpression.expression=current} OpInstanceOf) type=[DType] | => ({DBinaryOperation.leftOperand=current}
		//operator=OpCompare) rightOperand=DOtherOperatorExpression)*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//=> ({DInstanceOfExpression.expression=current} OpInstanceOf) type=[DType]
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//=> ({DInstanceOfExpression.expression=current} OpInstanceOf)
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//{DInstanceOfExpression.expression=current} OpInstanceOf
		public Group getGroup_1_0_0_0() { return cGroup_1_0_0_0; }
		
		//{DInstanceOfExpression.expression=current}
		public Action getDInstanceOfExpressionExpressionAction_1_0_0_0_0() { return cDInstanceOfExpressionExpressionAction_1_0_0_0_0; }
		
		//OpInstanceOf
		public RuleCall getOpInstanceOfParserRuleCall_1_0_0_0_1() { return cOpInstanceOfParserRuleCall_1_0_0_0_1; }
		
		//type=[DType]
		public Assignment getTypeAssignment_1_0_1() { return cTypeAssignment_1_0_1; }
		
		//[DType]
		public CrossReference getTypeDTypeCrossReference_1_0_1_0() { return cTypeDTypeCrossReference_1_0_1_0; }
		
		//ID
		public RuleCall getTypeDTypeIDTerminalRuleCall_1_0_1_0_1() { return cTypeDTypeIDTerminalRuleCall_1_0_1_0_1; }
		
		//=> ({DBinaryOperation.leftOperand=current} operator=OpCompare) rightOperand=DOtherOperatorExpression
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//=> ({DBinaryOperation.leftOperand=current} operator=OpCompare)
		public Group getGroup_1_1_0() { return cGroup_1_1_0; }
		
		//{DBinaryOperation.leftOperand=current} operator=OpCompare
		public Group getGroup_1_1_0_0() { return cGroup_1_1_0_0; }
		
		//{DBinaryOperation.leftOperand=current}
		public Action getDBinaryOperationLeftOperandAction_1_1_0_0_0() { return cDBinaryOperationLeftOperandAction_1_1_0_0_0; }
		
		//operator=OpCompare
		public Assignment getOperatorAssignment_1_1_0_0_1() { return cOperatorAssignment_1_1_0_0_1; }
		
		//OpCompare
		public RuleCall getOperatorOpCompareEnumRuleCall_1_1_0_0_1_0() { return cOperatorOpCompareEnumRuleCall_1_1_0_0_1_0; }
		
		//rightOperand=DOtherOperatorExpression
		public Assignment getRightOperandAssignment_1_1_1() { return cRightOperandAssignment_1_1_1; }
		
		//DOtherOperatorExpression
		public RuleCall getRightOperandDOtherOperatorExpressionParserRuleCall_1_1_1_0() { return cRightOperandDOtherOperatorExpressionParserRuleCall_1_1_1_0; }
	}
	public class OpInstanceOfElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.dmx.Dmx.OpInstanceOf");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cISAKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cIsaKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//OpInstanceOf:
		//	'ISA' | 'isa';
		@Override public ParserRule getRule() { return rule; }
		
		//'ISA' | 'isa'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'ISA'
		public Keyword getISAKeyword_0() { return cISAKeyword_0; }
		
		//'isa'
		public Keyword getIsaKeyword_1() { return cIsaKeyword_1; }
	}
	public class DOtherOperatorExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.dmx.Dmx.DOtherOperatorExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cDAdditiveExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cDBinaryOperationLeftOperandAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cOperatorAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final RuleCall cOperatorOpOtherEnumRuleCall_1_0_0_1_0 = (RuleCall)cOperatorAssignment_1_0_0_1.eContents().get(0);
		private final Assignment cRightOperandAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightOperandDAdditiveExpressionParserRuleCall_1_1_0 = (RuleCall)cRightOperandAssignment_1_1.eContents().get(0);
		
		//DOtherOperatorExpression DExpression:
		//	DAdditiveExpression (=> ({DBinaryOperation.leftOperand=current} operator=OpOther) rightOperand=DAdditiveExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//DAdditiveExpression (=> ({DBinaryOperation.leftOperand=current} operator=OpOther) rightOperand=DAdditiveExpression)*
		public Group getGroup() { return cGroup; }
		
		//DAdditiveExpression
		public RuleCall getDAdditiveExpressionParserRuleCall_0() { return cDAdditiveExpressionParserRuleCall_0; }
		
		//(=> ({DBinaryOperation.leftOperand=current} operator=OpOther) rightOperand=DAdditiveExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//=> ({DBinaryOperation.leftOperand=current} operator=OpOther)
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//{DBinaryOperation.leftOperand=current} operator=OpOther
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//{DBinaryOperation.leftOperand=current}
		public Action getDBinaryOperationLeftOperandAction_1_0_0_0() { return cDBinaryOperationLeftOperandAction_1_0_0_0; }
		
		//operator=OpOther
		public Assignment getOperatorAssignment_1_0_0_1() { return cOperatorAssignment_1_0_0_1; }
		
		//OpOther
		public RuleCall getOperatorOpOtherEnumRuleCall_1_0_0_1_0() { return cOperatorOpOtherEnumRuleCall_1_0_0_1_0; }
		
		//rightOperand=DAdditiveExpression
		public Assignment getRightOperandAssignment_1_1() { return cRightOperandAssignment_1_1; }
		
		//DAdditiveExpression
		public RuleCall getRightOperandDAdditiveExpressionParserRuleCall_1_1_0() { return cRightOperandDAdditiveExpressionParserRuleCall_1_1_0; }
	}
	public class DAdditiveExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.dmx.Dmx.DAdditiveExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cDMultiplicativeExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cDBinaryOperationLeftOperandAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cOperatorAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final RuleCall cOperatorOpAddEnumRuleCall_1_0_0_1_0 = (RuleCall)cOperatorAssignment_1_0_0_1.eContents().get(0);
		private final Assignment cRightOperandAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightOperandDMultiplicativeExpressionParserRuleCall_1_1_0 = (RuleCall)cRightOperandAssignment_1_1.eContents().get(0);
		
		//DAdditiveExpression DExpression:
		//	DMultiplicativeExpression (=> ({DBinaryOperation.leftOperand=current} operator=OpAdd)
		//	rightOperand=DMultiplicativeExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//DMultiplicativeExpression (=> ({DBinaryOperation.leftOperand=current} operator=OpAdd)
		//rightOperand=DMultiplicativeExpression)*
		public Group getGroup() { return cGroup; }
		
		//DMultiplicativeExpression
		public RuleCall getDMultiplicativeExpressionParserRuleCall_0() { return cDMultiplicativeExpressionParserRuleCall_0; }
		
		//(=> ({DBinaryOperation.leftOperand=current} operator=OpAdd) rightOperand=DMultiplicativeExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//=> ({DBinaryOperation.leftOperand=current} operator=OpAdd)
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//{DBinaryOperation.leftOperand=current} operator=OpAdd
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//{DBinaryOperation.leftOperand=current}
		public Action getDBinaryOperationLeftOperandAction_1_0_0_0() { return cDBinaryOperationLeftOperandAction_1_0_0_0; }
		
		//operator=OpAdd
		public Assignment getOperatorAssignment_1_0_0_1() { return cOperatorAssignment_1_0_0_1; }
		
		//OpAdd
		public RuleCall getOperatorOpAddEnumRuleCall_1_0_0_1_0() { return cOperatorOpAddEnumRuleCall_1_0_0_1_0; }
		
		//rightOperand=DMultiplicativeExpression
		public Assignment getRightOperandAssignment_1_1() { return cRightOperandAssignment_1_1; }
		
		//DMultiplicativeExpression
		public RuleCall getRightOperandDMultiplicativeExpressionParserRuleCall_1_1_0() { return cRightOperandDMultiplicativeExpressionParserRuleCall_1_1_0; }
	}
	public class DMultiplicativeExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.dmx.Dmx.DMultiplicativeExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cDUnaryOperationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cDBinaryOperationLeftOperandAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cOperatorAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final RuleCall cOperatorOpMultiEnumRuleCall_1_0_0_1_0 = (RuleCall)cOperatorAssignment_1_0_0_1.eContents().get(0);
		private final Assignment cRightOperandAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightOperandDUnaryOperationParserRuleCall_1_1_0 = (RuleCall)cRightOperandAssignment_1_1.eContents().get(0);
		
		//DMultiplicativeExpression DExpression:
		//	DUnaryOperation (=> ({DBinaryOperation.leftOperand=current} operator=OpMulti) rightOperand=DUnaryOperation)*;
		@Override public ParserRule getRule() { return rule; }
		
		//DUnaryOperation (=> ({DBinaryOperation.leftOperand=current} operator=OpMulti) rightOperand=DUnaryOperation)*
		public Group getGroup() { return cGroup; }
		
		//DUnaryOperation
		public RuleCall getDUnaryOperationParserRuleCall_0() { return cDUnaryOperationParserRuleCall_0; }
		
		//(=> ({DBinaryOperation.leftOperand=current} operator=OpMulti) rightOperand=DUnaryOperation)*
		public Group getGroup_1() { return cGroup_1; }
		
		//=> ({DBinaryOperation.leftOperand=current} operator=OpMulti)
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//{DBinaryOperation.leftOperand=current} operator=OpMulti
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//{DBinaryOperation.leftOperand=current}
		public Action getDBinaryOperationLeftOperandAction_1_0_0_0() { return cDBinaryOperationLeftOperandAction_1_0_0_0; }
		
		//operator=OpMulti
		public Assignment getOperatorAssignment_1_0_0_1() { return cOperatorAssignment_1_0_0_1; }
		
		//OpMulti
		public RuleCall getOperatorOpMultiEnumRuleCall_1_0_0_1_0() { return cOperatorOpMultiEnumRuleCall_1_0_0_1_0; }
		
		//rightOperand=DUnaryOperation
		public Assignment getRightOperandAssignment_1_1() { return cRightOperandAssignment_1_1; }
		
		//DUnaryOperation
		public RuleCall getRightOperandDUnaryOperationParserRuleCall_1_1_0() { return cRightOperandDUnaryOperationParserRuleCall_1_1_0; }
	}
	public class DUnaryOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.dmx.Dmx.DUnaryOperation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cDUnaryOperationAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cOperatorAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cOperatorOpUnaryEnumRuleCall_0_1_0 = (RuleCall)cOperatorAssignment_0_1.eContents().get(0);
		private final Assignment cOperandAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cOperandDUnaryOperationParserRuleCall_0_2_0 = (RuleCall)cOperandAssignment_0_2.eContents().get(0);
		private final RuleCall cDCastExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//DUnaryOperation DExpression:
		//	{DUnaryOperation} operator=OpUnary operand=DUnaryOperation
		//	| DCastExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//{DUnaryOperation} operator=OpUnary operand=DUnaryOperation | DCastExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{DUnaryOperation} operator=OpUnary operand=DUnaryOperation
		public Group getGroup_0() { return cGroup_0; }
		
		//{DUnaryOperation}
		public Action getDUnaryOperationAction_0_0() { return cDUnaryOperationAction_0_0; }
		
		//operator=OpUnary
		public Assignment getOperatorAssignment_0_1() { return cOperatorAssignment_0_1; }
		
		//OpUnary
		public RuleCall getOperatorOpUnaryEnumRuleCall_0_1_0() { return cOperatorOpUnaryEnumRuleCall_0_1_0; }
		
		//operand=DUnaryOperation
		public Assignment getOperandAssignment_0_2() { return cOperandAssignment_0_2; }
		
		//DUnaryOperation
		public RuleCall getOperandDUnaryOperationParserRuleCall_0_2_0() { return cOperandDUnaryOperationParserRuleCall_0_2_0; }
		
		//DCastExpression
		public RuleCall getDCastExpressionParserRuleCall_1() { return cDCastExpressionParserRuleCall_1; }
	}
	public class DCastExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.dmx.Dmx.DCastExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cDTypedMemberReferenceParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cDCastExpressionTargetAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final RuleCall cOpCastParserRuleCall_1_0_0_1 = (RuleCall)cGroup_1_0_0.eContents().get(1);
		private final Assignment cTypeAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final CrossReference cTypeDTypeCrossReference_1_1_0 = (CrossReference)cTypeAssignment_1_1.eContents().get(0);
		private final RuleCall cTypeDTypeIDTerminalRuleCall_1_1_0_1 = (RuleCall)cTypeDTypeCrossReference_1_1_0.eContents().get(1);
		
		//DCastExpression DExpression:
		//	DTypedMemberReference (=> ({DCastExpression.target=current} OpCast) type=[DType])?;
		@Override public ParserRule getRule() { return rule; }
		
		//DTypedMemberReference (=> ({DCastExpression.target=current} OpCast) type=[DType])?
		public Group getGroup() { return cGroup; }
		
		//DTypedMemberReference
		public RuleCall getDTypedMemberReferenceParserRuleCall_0() { return cDTypedMemberReferenceParserRuleCall_0; }
		
		//(=> ({DCastExpression.target=current} OpCast) type=[DType])?
		public Group getGroup_1() { return cGroup_1; }
		
		//=> ({DCastExpression.target=current} OpCast)
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//{DCastExpression.target=current} OpCast
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//{DCastExpression.target=current}
		public Action getDCastExpressionTargetAction_1_0_0_0() { return cDCastExpressionTargetAction_1_0_0_0; }
		
		//OpCast
		public RuleCall getOpCastParserRuleCall_1_0_0_1() { return cOpCastParserRuleCall_1_0_0_1; }
		
		//type=[DType]
		public Assignment getTypeAssignment_1_1() { return cTypeAssignment_1_1; }
		
		//[DType]
		public CrossReference getTypeDTypeCrossReference_1_1_0() { return cTypeDTypeCrossReference_1_1_0; }
		
		//ID
		public RuleCall getTypeDTypeIDTerminalRuleCall_1_1_0_1() { return cTypeDTypeIDTerminalRuleCall_1_1_0_1; }
	}
	public class OpCastElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.dmx.Dmx.OpCast");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cASKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cAsKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//OpCast:
		//	'AS' | 'as';
		@Override public ParserRule getRule() { return rule; }
		
		//'AS' | 'as'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'AS'
		public Keyword getASKeyword_0() { return cASKeyword_0; }
		
		//'as'
		public Keyword getAsKeyword_1() { return cAsKeyword_1; }
	}
	public class DTypedMemberReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.dmx.Dmx.DTypedMemberReference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cDPrimaryExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Group cGroup_1_0_0_0 = (Group)cGroup_1_0_0.eContents().get(0);
		private final Action cDAssignmentMemberContainerAction_1_0_0_0_0 = (Action)cGroup_1_0_0_0.eContents().get(0);
		private final Keyword cFullStopKeyword_1_0_0_0_1 = (Keyword)cGroup_1_0_0_0.eContents().get(1);
		private final Assignment cMemberAssignment_1_0_0_0_2 = (Assignment)cGroup_1_0_0_0.eContents().get(2);
		private final CrossReference cMemberDTypedMemberCrossReference_1_0_0_0_2_0 = (CrossReference)cMemberAssignment_1_0_0_0_2.eContents().get(0);
		private final RuleCall cMemberDTypedMemberIDTerminalRuleCall_1_0_0_0_2_0_1 = (RuleCall)cMemberDTypedMemberCrossReference_1_0_0_0_2_0.eContents().get(1);
		private final RuleCall cOpSingleAssignParserRuleCall_1_0_0_0_3 = (RuleCall)cGroup_1_0_0_0.eContents().get(3);
		private final Assignment cValueAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cValueDAssignmentParserRuleCall_1_0_1_0 = (RuleCall)cValueAssignment_1_0_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Group cGroup_1_1_0 = (Group)cGroup_1_1.eContents().get(0);
		private final Group cGroup_1_1_0_0 = (Group)cGroup_1_1_0.eContents().get(0);
		private final Action cDTypedMemberReferenceMemberContainerAction_1_1_0_0_0 = (Action)cGroup_1_1_0_0.eContents().get(0);
		private final Keyword cFullStopKeyword_1_1_0_0_1 = (Keyword)cGroup_1_1_0_0.eContents().get(1);
		private final Assignment cMemberAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final CrossReference cMemberDTypedMemberCrossReference_1_1_1_0 = (CrossReference)cMemberAssignment_1_1_1.eContents().get(0);
		private final RuleCall cMemberDTypedMemberIDTerminalRuleCall_1_1_1_0_1 = (RuleCall)cMemberDTypedMemberCrossReference_1_1_1_0.eContents().get(1);
		private final Group cGroup_1_1_2 = (Group)cGroup_1_1.eContents().get(2);
		private final Assignment cExplicitOperationCallAssignment_1_1_2_0 = (Assignment)cGroup_1_1_2.eContents().get(0);
		private final Keyword cExplicitOperationCallLeftParenthesisKeyword_1_1_2_0_0 = (Keyword)cExplicitOperationCallAssignment_1_1_2_0.eContents().get(0);
		private final Group cGroup_1_1_2_1 = (Group)cGroup_1_1_2.eContents().get(1);
		private final Assignment cMemberCallArgumentsAssignment_1_1_2_1_0 = (Assignment)cGroup_1_1_2_1.eContents().get(0);
		private final RuleCall cMemberCallArgumentsDExpressionParserRuleCall_1_1_2_1_0_0 = (RuleCall)cMemberCallArgumentsAssignment_1_1_2_1_0.eContents().get(0);
		private final Group cGroup_1_1_2_1_1 = (Group)cGroup_1_1_2_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_1_2_1_1_0 = (Keyword)cGroup_1_1_2_1_1.eContents().get(0);
		private final Assignment cMemberCallArgumentsAssignment_1_1_2_1_1_1 = (Assignment)cGroup_1_1_2_1_1.eContents().get(1);
		private final RuleCall cMemberCallArgumentsDExpressionParserRuleCall_1_1_2_1_1_1_0 = (RuleCall)cMemberCallArgumentsAssignment_1_1_2_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_1_2_2 = (Keyword)cGroup_1_1_2.eContents().get(2);
		
		//DTypedMemberReference DExpression:
		//	DPrimaryExpression (=> ({DAssignment.memberContainer=current} '.' member=[DTypedMember] OpSingleAssign)
		//	value=DAssignment
		//	| => ({DTypedMemberReference.memberContainer=current} '.') member=[DTypedMember] (=> explicitOperationCall?='('
		//	(memberCallArguments+=DExpression (',' memberCallArguments+=DExpression)*)?
		//	')')?)*;
		@Override public ParserRule getRule() { return rule; }
		
		//DPrimaryExpression (=> ({DAssignment.memberContainer=current} '.' member=[DTypedMember] OpSingleAssign)
		//value=DAssignment | => ({DTypedMemberReference.memberContainer=current} '.') member=[DTypedMember] (=>
		//explicitOperationCall?='(' (memberCallArguments+=DExpression (',' memberCallArguments+=DExpression)*)? ')')?)*
		public Group getGroup() { return cGroup; }
		
		//DPrimaryExpression
		public RuleCall getDPrimaryExpressionParserRuleCall_0() { return cDPrimaryExpressionParserRuleCall_0; }
		
		//(=> ({DAssignment.memberContainer=current} '.' member=[DTypedMember] OpSingleAssign) value=DAssignment | =>
		//({DTypedMemberReference.memberContainer=current} '.') member=[DTypedMember] (=> explicitOperationCall?='('
		//(memberCallArguments+=DExpression (',' memberCallArguments+=DExpression)*)? ')')?)*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//=> ({DAssignment.memberContainer=current} '.' member=[DTypedMember] OpSingleAssign) value=DAssignment
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//=> ({DAssignment.memberContainer=current} '.' member=[DTypedMember] OpSingleAssign)
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//{DAssignment.memberContainer=current} '.' member=[DTypedMember] OpSingleAssign
		public Group getGroup_1_0_0_0() { return cGroup_1_0_0_0; }
		
		//{DAssignment.memberContainer=current}
		public Action getDAssignmentMemberContainerAction_1_0_0_0_0() { return cDAssignmentMemberContainerAction_1_0_0_0_0; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0_0_0_1() { return cFullStopKeyword_1_0_0_0_1; }
		
		//member=[DTypedMember]
		public Assignment getMemberAssignment_1_0_0_0_2() { return cMemberAssignment_1_0_0_0_2; }
		
		//[DTypedMember]
		public CrossReference getMemberDTypedMemberCrossReference_1_0_0_0_2_0() { return cMemberDTypedMemberCrossReference_1_0_0_0_2_0; }
		
		//ID
		public RuleCall getMemberDTypedMemberIDTerminalRuleCall_1_0_0_0_2_0_1() { return cMemberDTypedMemberIDTerminalRuleCall_1_0_0_0_2_0_1; }
		
		//OpSingleAssign
		public RuleCall getOpSingleAssignParserRuleCall_1_0_0_0_3() { return cOpSingleAssignParserRuleCall_1_0_0_0_3; }
		
		//value=DAssignment
		public Assignment getValueAssignment_1_0_1() { return cValueAssignment_1_0_1; }
		
		//DAssignment
		public RuleCall getValueDAssignmentParserRuleCall_1_0_1_0() { return cValueDAssignmentParserRuleCall_1_0_1_0; }
		
		//=> ({DTypedMemberReference.memberContainer=current} '.') member=[DTypedMember] (=> explicitOperationCall?='('
		//(memberCallArguments+=DExpression (',' memberCallArguments+=DExpression)*)? ')')?
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//=> ({DTypedMemberReference.memberContainer=current} '.')
		public Group getGroup_1_1_0() { return cGroup_1_1_0; }
		
		//{DTypedMemberReference.memberContainer=current} '.'
		public Group getGroup_1_1_0_0() { return cGroup_1_1_0_0; }
		
		//{DTypedMemberReference.memberContainer=current}
		public Action getDTypedMemberReferenceMemberContainerAction_1_1_0_0_0() { return cDTypedMemberReferenceMemberContainerAction_1_1_0_0_0; }
		
		//'.'
		public Keyword getFullStopKeyword_1_1_0_0_1() { return cFullStopKeyword_1_1_0_0_1; }
		
		//member=[DTypedMember]
		public Assignment getMemberAssignment_1_1_1() { return cMemberAssignment_1_1_1; }
		
		//[DTypedMember]
		public CrossReference getMemberDTypedMemberCrossReference_1_1_1_0() { return cMemberDTypedMemberCrossReference_1_1_1_0; }
		
		//ID
		public RuleCall getMemberDTypedMemberIDTerminalRuleCall_1_1_1_0_1() { return cMemberDTypedMemberIDTerminalRuleCall_1_1_1_0_1; }
		
		//(=> explicitOperationCall?='(' (memberCallArguments+=DExpression (',' memberCallArguments+=DExpression)*)? ')')?
		public Group getGroup_1_1_2() { return cGroup_1_1_2; }
		
		//=> explicitOperationCall?='('
		public Assignment getExplicitOperationCallAssignment_1_1_2_0() { return cExplicitOperationCallAssignment_1_1_2_0; }
		
		//'('
		public Keyword getExplicitOperationCallLeftParenthesisKeyword_1_1_2_0_0() { return cExplicitOperationCallLeftParenthesisKeyword_1_1_2_0_0; }
		
		//(memberCallArguments+=DExpression (',' memberCallArguments+=DExpression)*)?
		public Group getGroup_1_1_2_1() { return cGroup_1_1_2_1; }
		
		//memberCallArguments+=DExpression
		public Assignment getMemberCallArgumentsAssignment_1_1_2_1_0() { return cMemberCallArgumentsAssignment_1_1_2_1_0; }
		
		//DExpression
		public RuleCall getMemberCallArgumentsDExpressionParserRuleCall_1_1_2_1_0_0() { return cMemberCallArgumentsDExpressionParserRuleCall_1_1_2_1_0_0; }
		
		//(',' memberCallArguments+=DExpression)*
		public Group getGroup_1_1_2_1_1() { return cGroup_1_1_2_1_1; }
		
		//','
		public Keyword getCommaKeyword_1_1_2_1_1_0() { return cCommaKeyword_1_1_2_1_1_0; }
		
		//memberCallArguments+=DExpression
		public Assignment getMemberCallArgumentsAssignment_1_1_2_1_1_1() { return cMemberCallArgumentsAssignment_1_1_2_1_1_1; }
		
		//DExpression
		public RuleCall getMemberCallArgumentsDExpressionParserRuleCall_1_1_2_1_1_1_0() { return cMemberCallArgumentsDExpressionParserRuleCall_1_1_2_1_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_1_2_2() { return cRightParenthesisKeyword_1_1_2_2; }
	}
	public class DPrimaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.dmx.Dmx.DPrimaryExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDLiteralExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDSelfExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cDReturnExpressionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cDRaiseExpressionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cDParenthesizedExpressionParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cDFunctionCallParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cDConstructorCallParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cDContextReferenceParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cDIfExpressionParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cDForLoopExpressionParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		
		//DPrimaryExpression DExpression:
		//	DLiteralExpression | DSelfExpression | DReturnExpression | DRaiseExpression | DParenthesizedExpression | DFunctionCall
		//	| DConstructorCall | DContextReference | DIfExpression | DForLoopExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//DLiteralExpression | DSelfExpression | DReturnExpression | DRaiseExpression | DParenthesizedExpression | DFunctionCall |
		//DConstructorCall | DContextReference | DIfExpression | DForLoopExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//DLiteralExpression
		public RuleCall getDLiteralExpressionParserRuleCall_0() { return cDLiteralExpressionParserRuleCall_0; }
		
		//DSelfExpression
		public RuleCall getDSelfExpressionParserRuleCall_1() { return cDSelfExpressionParserRuleCall_1; }
		
		//DReturnExpression
		public RuleCall getDReturnExpressionParserRuleCall_2() { return cDReturnExpressionParserRuleCall_2; }
		
		//DRaiseExpression
		public RuleCall getDRaiseExpressionParserRuleCall_3() { return cDRaiseExpressionParserRuleCall_3; }
		
		//DParenthesizedExpression
		public RuleCall getDParenthesizedExpressionParserRuleCall_4() { return cDParenthesizedExpressionParserRuleCall_4; }
		
		//DFunctionCall
		public RuleCall getDFunctionCallParserRuleCall_5() { return cDFunctionCallParserRuleCall_5; }
		
		//DConstructorCall
		public RuleCall getDConstructorCallParserRuleCall_6() { return cDConstructorCallParserRuleCall_6; }
		
		//DContextReference
		public RuleCall getDContextReferenceParserRuleCall_7() { return cDContextReferenceParserRuleCall_7; }
		
		//DIfExpression
		public RuleCall getDIfExpressionParserRuleCall_8() { return cDIfExpressionParserRuleCall_8; }
		
		//DForLoopExpression
		public RuleCall getDForLoopExpressionParserRuleCall_9() { return cDForLoopExpressionParserRuleCall_9; }
	}
	public class DLiteralExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.dmx.Dmx.DLiteralExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDBooleanLiteralParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDStringLiteralParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cDNaturalLiteralParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cDDecimalLiteralParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cDNilLiteralParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//DLiteralExpression DExpression:
		//	DBooleanLiteral | DStringLiteral | DNaturalLiteral | DDecimalLiteral | DNilLiteral;
		@Override public ParserRule getRule() { return rule; }
		
		//DBooleanLiteral | DStringLiteral | DNaturalLiteral | DDecimalLiteral | DNilLiteral
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//DBooleanLiteral
		public RuleCall getDBooleanLiteralParserRuleCall_0() { return cDBooleanLiteralParserRuleCall_0; }
		
		//DStringLiteral
		public RuleCall getDStringLiteralParserRuleCall_1() { return cDStringLiteralParserRuleCall_1; }
		
		//DNaturalLiteral
		public RuleCall getDNaturalLiteralParserRuleCall_2() { return cDNaturalLiteralParserRuleCall_2; }
		
		//DDecimalLiteral
		public RuleCall getDDecimalLiteralParserRuleCall_3() { return cDDecimalLiteralParserRuleCall_3; }
		
		//DNilLiteral
		public RuleCall getDNilLiteralParserRuleCall_4() { return cDNilLiteralParserRuleCall_4; }
	}
	public class DSelfExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.dmx.Dmx.DSelfExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDSelfExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cSELFKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cSelfKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		
		//DSelfExpression DExpression:
		//	{DSelfExpression} ('SELF' | 'self');
		@Override public ParserRule getRule() { return rule; }
		
		//{DSelfExpression} ('SELF' | 'self')
		public Group getGroup() { return cGroup; }
		
		//{DSelfExpression}
		public Action getDSelfExpressionAction_0() { return cDSelfExpressionAction_0; }
		
		//'SELF' | 'self'
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'SELF'
		public Keyword getSELFKeyword_1_0() { return cSELFKeyword_1_0; }
		
		//'self'
		public Keyword getSelfKeyword_1_1() { return cSelfKeyword_1_1; }
	}
	public class DReturnExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.dmx.Dmx.DReturnExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDReturnExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cRETURNKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cReturnKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionDExpressionParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		
		//DReturnExpression DExpression:
		//	{DReturnExpression} ('RETURN' | 'return') -> expression=DExpression?;
		@Override public ParserRule getRule() { return rule; }
		
		//{DReturnExpression} ('RETURN' | 'return') -> expression=DExpression?
		public Group getGroup() { return cGroup; }
		
		//{DReturnExpression}
		public Action getDReturnExpressionAction_0() { return cDReturnExpressionAction_0; }
		
		//'RETURN' | 'return'
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'RETURN'
		public Keyword getRETURNKeyword_1_0() { return cRETURNKeyword_1_0; }
		
		//'return'
		public Keyword getReturnKeyword_1_1() { return cReturnKeyword_1_1; }
		
		//-> expression=DExpression?
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }
		
		//DExpression
		public RuleCall getExpressionDExpressionParserRuleCall_2_0() { return cExpressionDExpressionParserRuleCall_2_0; }
	}
	public class DRaiseExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.dmx.Dmx.DRaiseExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDRaiseExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cRAISEKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cRaiseKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionDExpressionParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		
		//DRaiseExpression DExpression:
		//	{DRaiseExpression} ('RAISE' | 'raise') expression=DExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//{DRaiseExpression} ('RAISE' | 'raise') expression=DExpression
		public Group getGroup() { return cGroup; }
		
		//{DRaiseExpression}
		public Action getDRaiseExpressionAction_0() { return cDRaiseExpressionAction_0; }
		
		//'RAISE' | 'raise'
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'RAISE'
		public Keyword getRAISEKeyword_1_0() { return cRAISEKeyword_1_0; }
		
		//'raise'
		public Keyword getRaiseKeyword_1_1() { return cRaiseKeyword_1_1; }
		
		//expression=DExpression
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }
		
		//DExpression
		public RuleCall getExpressionDExpressionParserRuleCall_2_0() { return cExpressionDExpressionParserRuleCall_2_0; }
	}
	public class DParenthesizedExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.dmx.Dmx.DParenthesizedExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cDExpressionParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//DParenthesizedExpression DExpression:
		//	'(' DExpression ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'(' DExpression ')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//DExpression
		public RuleCall getDExpressionParserRuleCall_1() { return cDExpressionParserRuleCall_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}
	public class DFunctionCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.dmx.Dmx.DFunctionCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDFunctionCallAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cFunctionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cFunctionDFunctionCrossReference_1_0 = (CrossReference)cFunctionAssignment_1.eContents().get(0);
		private final RuleCall cFunctionDFunctionIDTerminalRuleCall_1_0_1 = (RuleCall)cFunctionDFunctionCrossReference_1_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cFunctionCallArgumentsAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cFunctionCallArgumentsDExpressionParserRuleCall_3_0_0 = (RuleCall)cFunctionCallArgumentsAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cFunctionCallArgumentsAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cFunctionCallArgumentsDExpressionParserRuleCall_3_1_1_0 = (RuleCall)cFunctionCallArgumentsAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//DFunctionCall DExpression:
		//	{DFunctionCall} function=[DFunction]
		//	'(' (functionCallArguments+=DExpression (',' functionCallArguments+=DExpression)*)?
		//	')';
		@Override public ParserRule getRule() { return rule; }
		
		//{DFunctionCall} function=[DFunction] '(' (functionCallArguments+=DExpression (',' functionCallArguments+=DExpression)*)?
		//')'
		public Group getGroup() { return cGroup; }
		
		//{DFunctionCall}
		public Action getDFunctionCallAction_0() { return cDFunctionCallAction_0; }
		
		//function=[DFunction]
		public Assignment getFunctionAssignment_1() { return cFunctionAssignment_1; }
		
		//[DFunction]
		public CrossReference getFunctionDFunctionCrossReference_1_0() { return cFunctionDFunctionCrossReference_1_0; }
		
		//ID
		public RuleCall getFunctionDFunctionIDTerminalRuleCall_1_0_1() { return cFunctionDFunctionIDTerminalRuleCall_1_0_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//(functionCallArguments+=DExpression (',' functionCallArguments+=DExpression)*)?
		public Group getGroup_3() { return cGroup_3; }
		
		//functionCallArguments+=DExpression
		public Assignment getFunctionCallArgumentsAssignment_3_0() { return cFunctionCallArgumentsAssignment_3_0; }
		
		//DExpression
		public RuleCall getFunctionCallArgumentsDExpressionParserRuleCall_3_0_0() { return cFunctionCallArgumentsDExpressionParserRuleCall_3_0_0; }
		
		//(',' functionCallArguments+=DExpression)*
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//','
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }
		
		//functionCallArguments+=DExpression
		public Assignment getFunctionCallArgumentsAssignment_3_1_1() { return cFunctionCallArgumentsAssignment_3_1_1; }
		
		//DExpression
		public RuleCall getFunctionCallArgumentsDExpressionParserRuleCall_3_1_1_0() { return cFunctionCallArgumentsDExpressionParserRuleCall_3_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class DConstructorCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.dmx.Dmx.DConstructorCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDConstructorCallAction_0 = (Action)cGroup.eContents().get(0);
		private final RuleCall cOpConstructorParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cConstructorAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cConstructorDIdentityTypeCrossReference_2_0 = (CrossReference)cConstructorAssignment_2.eContents().get(0);
		private final RuleCall cConstructorDIdentityTypeIDTerminalRuleCall_2_0_1 = (RuleCall)cConstructorDIdentityTypeCrossReference_2_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cExplicitConstructorCallAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final Keyword cExplicitConstructorCallLeftParenthesisKeyword_3_0_0 = (Keyword)cExplicitConstructorCallAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Assignment cArgumentsAssignment_3_1_0 = (Assignment)cGroup_3_1.eContents().get(0);
		private final RuleCall cArgumentsDExpressionParserRuleCall_3_1_0_0 = (RuleCall)cArgumentsAssignment_3_1_0.eContents().get(0);
		private final Group cGroup_3_1_1 = (Group)cGroup_3_1.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_1_0 = (Keyword)cGroup_3_1_1.eContents().get(0);
		private final Assignment cArgumentsAssignment_3_1_1_1 = (Assignment)cGroup_3_1_1.eContents().get(1);
		private final RuleCall cArgumentsDExpressionParserRuleCall_3_1_1_1_0 = (RuleCall)cArgumentsAssignment_3_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		
		//DConstructorCall DExpression:
		//	{DConstructorCall} OpConstructor constructor=[DIdentityType] (=> explicitConstructorCall?='(' (arguments+=DExpression
		//	(',' arguments+=DExpression)*)?
		//	')')?;
		@Override public ParserRule getRule() { return rule; }
		
		//{DConstructorCall} OpConstructor constructor=[DIdentityType] (=> explicitConstructorCall?='(' (arguments+=DExpression
		//(',' arguments+=DExpression)*)? ')')?
		public Group getGroup() { return cGroup; }
		
		//{DConstructorCall}
		public Action getDConstructorCallAction_0() { return cDConstructorCallAction_0; }
		
		//OpConstructor
		public RuleCall getOpConstructorParserRuleCall_1() { return cOpConstructorParserRuleCall_1; }
		
		//constructor=[DIdentityType]
		public Assignment getConstructorAssignment_2() { return cConstructorAssignment_2; }
		
		//[DIdentityType]
		public CrossReference getConstructorDIdentityTypeCrossReference_2_0() { return cConstructorDIdentityTypeCrossReference_2_0; }
		
		//ID
		public RuleCall getConstructorDIdentityTypeIDTerminalRuleCall_2_0_1() { return cConstructorDIdentityTypeIDTerminalRuleCall_2_0_1; }
		
		//(=> explicitConstructorCall?='(' (arguments+=DExpression (',' arguments+=DExpression)*)? ')')?
		public Group getGroup_3() { return cGroup_3; }
		
		//=> explicitConstructorCall?='('
		public Assignment getExplicitConstructorCallAssignment_3_0() { return cExplicitConstructorCallAssignment_3_0; }
		
		//'('
		public Keyword getExplicitConstructorCallLeftParenthesisKeyword_3_0_0() { return cExplicitConstructorCallLeftParenthesisKeyword_3_0_0; }
		
		//(arguments+=DExpression (',' arguments+=DExpression)*)?
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//arguments+=DExpression
		public Assignment getArgumentsAssignment_3_1_0() { return cArgumentsAssignment_3_1_0; }
		
		//DExpression
		public RuleCall getArgumentsDExpressionParserRuleCall_3_1_0_0() { return cArgumentsDExpressionParserRuleCall_3_1_0_0; }
		
		//(',' arguments+=DExpression)*
		public Group getGroup_3_1_1() { return cGroup_3_1_1; }
		
		//','
		public Keyword getCommaKeyword_3_1_1_0() { return cCommaKeyword_3_1_1_0; }
		
		//arguments+=DExpression
		public Assignment getArgumentsAssignment_3_1_1_1() { return cArgumentsAssignment_3_1_1_1; }
		
		//DExpression
		public RuleCall getArgumentsDExpressionParserRuleCall_3_1_1_1_0() { return cArgumentsDExpressionParserRuleCall_3_1_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3_2() { return cRightParenthesisKeyword_3_2; }
	}
	public class OpConstructorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.dmx.Dmx.OpConstructor");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cNEWKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cNewKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//OpConstructor:
		//	'NEW' | 'new';
		@Override public ParserRule getRule() { return rule; }
		
		//'NEW' | 'new'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'NEW'
		public Keyword getNEWKeyword_0() { return cNEWKeyword_0; }
		
		//'new'
		public Keyword getNewKeyword_1() { return cNewKeyword_1; }
	}
	public class DContextReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.dmx.Dmx.DContextReference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDContextReferenceAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cContextElementAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cContextElementDNamedElementCrossReference_1_0 = (CrossReference)cContextElementAssignment_1.eContents().get(0);
		private final RuleCall cContextElementDNamedElementIDTerminalRuleCall_1_0_1 = (RuleCall)cContextElementDNamedElementCrossReference_1_0.eContents().get(1);
		
		//DContextReference DExpression:
		//	{DContextReference} contextElement=[DNamedElement];
		@Override public ParserRule getRule() { return rule; }
		
		//{DContextReference} contextElement=[DNamedElement]
		public Group getGroup() { return cGroup; }
		
		//{DContextReference}
		public Action getDContextReferenceAction_0() { return cDContextReferenceAction_0; }
		
		//contextElement=[DNamedElement]
		public Assignment getContextElementAssignment_1() { return cContextElementAssignment_1; }
		
		//[DNamedElement]
		public CrossReference getContextElementDNamedElementCrossReference_1_0() { return cContextElementDNamedElementCrossReference_1_0; }
		
		//ID
		public RuleCall getContextElementDNamedElementIDTerminalRuleCall_1_0_1() { return cContextElementDNamedElementIDTerminalRuleCall_1_0_1; }
	}
	public class DIfExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.dmx.Dmx.DIfExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDIfExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cIfKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cIfAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cIfDExpressionParserRuleCall_2_0 = (RuleCall)cIfAssignment_2.eContents().get(0);
		private final Keyword cThenKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cThenAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cThenDExpressionParserRuleCall_4_0 = (RuleCall)cThenAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cElseKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cElseAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cElseDExpressionParserRuleCall_5_1_0 = (RuleCall)cElseAssignment_5_1.eContents().get(0);
		private final Keyword cEndKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//DIfExpression DExpression:
		//	{DIfExpression}
		//	'if' if=DExpression
		//	'then' then=DExpression (=> 'else' else=DExpression)?
		//	'end';
		@Override public ParserRule getRule() { return rule; }
		
		//{DIfExpression} 'if' if=DExpression 'then' then=DExpression (=> 'else' else=DExpression)? 'end'
		public Group getGroup() { return cGroup; }
		
		//{DIfExpression}
		public Action getDIfExpressionAction_0() { return cDIfExpressionAction_0; }
		
		//'if'
		public Keyword getIfKeyword_1() { return cIfKeyword_1; }
		
		//if=DExpression
		public Assignment getIfAssignment_2() { return cIfAssignment_2; }
		
		//DExpression
		public RuleCall getIfDExpressionParserRuleCall_2_0() { return cIfDExpressionParserRuleCall_2_0; }
		
		//'then'
		public Keyword getThenKeyword_3() { return cThenKeyword_3; }
		
		//then=DExpression
		public Assignment getThenAssignment_4() { return cThenAssignment_4; }
		
		//DExpression
		public RuleCall getThenDExpressionParserRuleCall_4_0() { return cThenDExpressionParserRuleCall_4_0; }
		
		//(=> 'else' else=DExpression)?
		public Group getGroup_5() { return cGroup_5; }
		
		//=> 'else'
		public Keyword getElseKeyword_5_0() { return cElseKeyword_5_0; }
		
		//else=DExpression
		public Assignment getElseAssignment_5_1() { return cElseAssignment_5_1; }
		
		//DExpression
		public RuleCall getElseDExpressionParserRuleCall_5_1_0() { return cElseDExpressionParserRuleCall_5_1_0; }
		
		//'end'
		public Keyword getEndKeyword_6() { return cEndKeyword_6; }
	}
	public class DForLoopExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.dmx.Dmx.DForLoopExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cGroup_0.eContents().get(0);
		private final Action cDForLoopExpressionAction_0_0_0 = (Action)cGroup_0_0.eContents().get(0);
		private final Keyword cForKeyword_0_0_1 = (Keyword)cGroup_0_0.eContents().get(1);
		private final Assignment cDeclaredParamAssignment_0_0_2 = (Assignment)cGroup_0_0.eContents().get(2);
		private final RuleCall cDeclaredParamIDTerminalRuleCall_0_0_2_0 = (RuleCall)cDeclaredParamAssignment_0_0_2.eContents().get(0);
		private final Keyword cColonKeyword_0_0_3 = (Keyword)cGroup_0_0.eContents().get(3);
		private final Assignment cForExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cForExpressionDExpressionParserRuleCall_1_0 = (RuleCall)cForExpressionAssignment_1.eContents().get(0);
		private final Keyword cDoKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cEachExpressionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cEachExpressionDExpressionParserRuleCall_3_0 = (RuleCall)cEachExpressionAssignment_3.eContents().get(0);
		private final Keyword cEndKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//DForLoopExpression DExpression:
		//	=> ({DForLoopExpression}
		//	'for' declaredParam=ID ':') forExpression=DExpression 'do'
		//	eachExpression=DExpression
		//	'end';
		@Override public ParserRule getRule() { return rule; }
		
		//=> ({DForLoopExpression} 'for' declaredParam=ID ':') forExpression=DExpression 'do' eachExpression=DExpression 'end'
		public Group getGroup() { return cGroup; }
		
		//=> ({DForLoopExpression} 'for' declaredParam=ID ':')
		public Group getGroup_0() { return cGroup_0; }
		
		//{DForLoopExpression} 'for' declaredParam=ID ':'
		public Group getGroup_0_0() { return cGroup_0_0; }
		
		//{DForLoopExpression}
		public Action getDForLoopExpressionAction_0_0_0() { return cDForLoopExpressionAction_0_0_0; }
		
		//'for'
		public Keyword getForKeyword_0_0_1() { return cForKeyword_0_0_1; }
		
		//declaredParam=ID
		public Assignment getDeclaredParamAssignment_0_0_2() { return cDeclaredParamAssignment_0_0_2; }
		
		//ID
		public RuleCall getDeclaredParamIDTerminalRuleCall_0_0_2_0() { return cDeclaredParamIDTerminalRuleCall_0_0_2_0; }
		
		//':'
		public Keyword getColonKeyword_0_0_3() { return cColonKeyword_0_0_3; }
		
		//forExpression=DExpression
		public Assignment getForExpressionAssignment_1() { return cForExpressionAssignment_1; }
		
		//DExpression
		public RuleCall getForExpressionDExpressionParserRuleCall_1_0() { return cForExpressionDExpressionParserRuleCall_1_0; }
		
		//'do'
		public Keyword getDoKeyword_2() { return cDoKeyword_2; }
		
		//eachExpression=DExpression
		public Assignment getEachExpressionAssignment_3() { return cEachExpressionAssignment_3; }
		
		//DExpression
		public RuleCall getEachExpressionDExpressionParserRuleCall_3_0() { return cEachExpressionDExpressionParserRuleCall_3_0; }
		
		//'end'
		public Keyword getEndKeyword_4() { return cEndKeyword_4; }
	}
	public class DMultiplicityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.dmx.Dmx.DMultiplicity");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cMinOccursAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cMinOccursNATURALTerminalRuleCall_1_0 = (RuleCall)cMinOccursAssignment_1.eContents().get(0);
		private final Keyword cFullStopFullStopKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cMaxOccursAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cMaxOccursMULTIPLICITYParserRuleCall_3_0 = (RuleCall)cMaxOccursAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//DMultiplicity:
		//	'(' minOccurs=NATURAL '..' maxOccurs=MULTIPLICITY ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'(' minOccurs=NATURAL '..' maxOccurs=MULTIPLICITY ')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//minOccurs=NATURAL
		public Assignment getMinOccursAssignment_1() { return cMinOccursAssignment_1; }
		
		//NATURAL
		public RuleCall getMinOccursNATURALTerminalRuleCall_1_0() { return cMinOccursNATURALTerminalRuleCall_1_0; }
		
		//'..'
		public Keyword getFullStopFullStopKeyword_2() { return cFullStopFullStopKeyword_2; }
		
		//maxOccurs=MULTIPLICITY
		public Assignment getMaxOccursAssignment_3() { return cMaxOccursAssignment_3; }
		
		//MULTIPLICITY
		public RuleCall getMaxOccursMULTIPLICITYParserRuleCall_3_0() { return cMaxOccursMULTIPLICITYParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class MULTIPLICITYElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.dmx.Dmx.MULTIPLICITY");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNATURALTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Keyword cAsteriskKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//MULTIPLICITY ecore::EInt:
		//	NATURAL | '*';
		@Override public ParserRule getRule() { return rule; }
		
		//NATURAL | '*'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//NATURAL
		public RuleCall getNATURALTerminalRuleCall_0() { return cNATURALTerminalRuleCall_0; }
		
		//'*'
		public Keyword getAsteriskKeyword_1() { return cAsteriskKeyword_1; }
	}
	public class DBooleanLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.dmx.Dmx.DBooleanLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDBooleanLiteralAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final Keyword cValueTRUEKeyword_1_0_0 = (Keyword)cValueAssignment_1_0.eContents().get(0);
		private final Assignment cValueAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final Keyword cValueTrueKeyword_1_1_0 = (Keyword)cValueAssignment_1_1.eContents().get(0);
		private final Keyword cFALSEKeyword_1_2 = (Keyword)cAlternatives_1.eContents().get(2);
		private final Keyword cFalseKeyword_1_3 = (Keyword)cAlternatives_1.eContents().get(3);
		
		//DBooleanLiteral DExpression:
		//	{DBooleanLiteral} (value?='TRUE' | value?='true' | 'FALSE' | 'false');
		@Override public ParserRule getRule() { return rule; }
		
		//{DBooleanLiteral} (value?='TRUE' | value?='true' | 'FALSE' | 'false')
		public Group getGroup() { return cGroup; }
		
		//{DBooleanLiteral}
		public Action getDBooleanLiteralAction_0() { return cDBooleanLiteralAction_0; }
		
		//value?='TRUE' | value?='true' | 'FALSE' | 'false'
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//value?='TRUE'
		public Assignment getValueAssignment_1_0() { return cValueAssignment_1_0; }
		
		//'TRUE'
		public Keyword getValueTRUEKeyword_1_0_0() { return cValueTRUEKeyword_1_0_0; }
		
		//value?='true'
		public Assignment getValueAssignment_1_1() { return cValueAssignment_1_1; }
		
		//'true'
		public Keyword getValueTrueKeyword_1_1_0() { return cValueTrueKeyword_1_1_0; }
		
		//'FALSE'
		public Keyword getFALSEKeyword_1_2() { return cFALSEKeyword_1_2; }
		
		//'false'
		public Keyword getFalseKeyword_1_3() { return cFalseKeyword_1_3; }
	}
	public class DStringLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.dmx.Dmx.DStringLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDStringLiteralAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//DStringLiteral DExpression:
		//	{DStringLiteral} value=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//{DStringLiteral} value=STRING
		public Group getGroup() { return cGroup; }
		
		//{DStringLiteral}
		public Action getDStringLiteralAction_0() { return cDStringLiteralAction_0; }
		
		//value=STRING
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_1_0() { return cValueSTRINGTerminalRuleCall_1_0; }
	}
	public class DNaturalLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.dmx.Dmx.DNaturalLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDNaturalLiteralAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueNATURALTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//DNaturalLiteral DExpression:
		//	{DNaturalLiteral} value=NATURAL;
		@Override public ParserRule getRule() { return rule; }
		
		//{DNaturalLiteral} value=NATURAL
		public Group getGroup() { return cGroup; }
		
		//{DNaturalLiteral}
		public Action getDNaturalLiteralAction_0() { return cDNaturalLiteralAction_0; }
		
		//value=NATURAL
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//NATURAL
		public RuleCall getValueNATURALTerminalRuleCall_1_0() { return cValueNATURALTerminalRuleCall_1_0; }
	}
	public class DDecimalLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.dmx.Dmx.DDecimalLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDDecimalLiteralAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueDECIMALParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//DDecimalLiteral DExpression:
		//	{DDecimalLiteral} value=DECIMAL;
		@Override public ParserRule getRule() { return rule; }
		
		//{DDecimalLiteral} value=DECIMAL
		public Group getGroup() { return cGroup; }
		
		//{DDecimalLiteral}
		public Action getDDecimalLiteralAction_0() { return cDDecimalLiteralAction_0; }
		
		//value=DECIMAL
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//DECIMAL
		public RuleCall getValueDECIMALParserRuleCall_1_0() { return cValueDECIMALParserRuleCall_1_0; }
	}
	public class DNilLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.dmx.Dmx.DNilLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDNilLiteralAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cNILKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cNilKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		
		//DNilLiteral DExpression:
		//	{DNilLiteral} ('NIL' | 'nil');
		@Override public ParserRule getRule() { return rule; }
		
		//{DNilLiteral} ('NIL' | 'nil')
		public Group getGroup() { return cGroup; }
		
		//{DNilLiteral}
		public Action getDNilLiteralAction_0() { return cDNilLiteralAction_0; }
		
		//'NIL' | 'nil'
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'NIL'
		public Keyword getNILKeyword_1_0() { return cNILKeyword_1_0; }
		
		//'nil'
		public Keyword getNilKeyword_1_1() { return cNilKeyword_1_1; }
	}
	public class DECIMALElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.dmx.Dmx.DECIMAL");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cNATURALTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cNATURALTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Alternatives cAlternatives_3_0 = (Alternatives)cGroup_3.eContents().get(0);
		private final Keyword cEKeyword_3_0_0 = (Keyword)cAlternatives_3_0.eContents().get(0);
		private final Keyword cEKeyword_3_0_1 = (Keyword)cAlternatives_3_0.eContents().get(1);
		private final Alternatives cAlternatives_3_1 = (Alternatives)cGroup_3.eContents().get(1);
		private final Keyword cPlusSignKeyword_3_1_0 = (Keyword)cAlternatives_3_1.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_3_1_1 = (Keyword)cAlternatives_3_1.eContents().get(1);
		private final RuleCall cNATURALTerminalRuleCall_3_2 = (RuleCall)cGroup_3.eContents().get(2);
		
		//DECIMAL:
		//	NATURAL '.' NATURAL (('E' | 'e') ('+' | '-')? NATURAL)?;
		@Override public ParserRule getRule() { return rule; }
		
		//NATURAL '.' NATURAL (('E' | 'e') ('+' | '-')? NATURAL)?
		public Group getGroup() { return cGroup; }
		
		//NATURAL
		public RuleCall getNATURALTerminalRuleCall_0() { return cNATURALTerminalRuleCall_0; }
		
		//'.'
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
		
		//NATURAL
		public RuleCall getNATURALTerminalRuleCall_2() { return cNATURALTerminalRuleCall_2; }
		
		//(('E' | 'e') ('+' | '-')? NATURAL)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'E' | 'e'
		public Alternatives getAlternatives_3_0() { return cAlternatives_3_0; }
		
		//'E'
		public Keyword getEKeyword_3_0_0() { return cEKeyword_3_0_0; }
		
		//'e'
		public Keyword getEKeyword_3_0_1() { return cEKeyword_3_0_1; }
		
		//('+' | '-')?
		public Alternatives getAlternatives_3_1() { return cAlternatives_3_1; }
		
		//'+'
		public Keyword getPlusSignKeyword_3_1_0() { return cPlusSignKeyword_3_1_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_3_1_1() { return cHyphenMinusKeyword_3_1_1; }
		
		//NATURAL
		public RuleCall getNATURALTerminalRuleCall_3_2() { return cNATURALTerminalRuleCall_3_2; }
	}
	public class DQualifiedNameWithWildcardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.dmx.Dmx.DQualifiedNameWithWildcard");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cQualifiedNameParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopAsteriskKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//DQualifiedNameWithWildcard:
		//	QualifiedName '.*'?;
		@Override public ParserRule getRule() { return rule; }
		
		//QualifiedName '.*'?
		public Group getGroup() { return cGroup; }
		
		//QualifiedName
		public RuleCall getQualifiedNameParserRuleCall_0() { return cQualifiedNameParserRuleCall_0; }
		
		//'.*'?
		public Keyword getFullStopAsteriskKeyword_1() { return cFullStopAsteriskKeyword_1; }
	}
	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.dmx.Dmx.QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QualifiedName:
		//	ID ('.' ID)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ID ('.' ID)*
		public Group getGroup() { return cGroup; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//('.' ID)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	
	public class OpOrElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.dmx.Dmx.OpOr");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cOREnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cORORKeyword_0_0 = (Keyword)cOREnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cOREnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cOROrKeyword_1_0 = (Keyword)cOREnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cXOREnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cXORXORKeyword_2_0 = (Keyword)cXOREnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cXOREnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cXORXorKeyword_3_0 = (Keyword)cXOREnumLiteralDeclaration_3.eContents().get(0);
		
		//enum OpOr returns DBinaryOperator:
		//	OR | OR='or' | XOR | XOR='xor';
		public EnumRule getRule() { return rule; }
		
		//OR | OR='or' | XOR | XOR='xor'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//OR
		public EnumLiteralDeclaration getOREnumLiteralDeclaration_0() { return cOREnumLiteralDeclaration_0; }
		
		//'OR'
		public Keyword getORORKeyword_0_0() { return cORORKeyword_0_0; }
		
		//OR='or'
		public EnumLiteralDeclaration getOREnumLiteralDeclaration_1() { return cOREnumLiteralDeclaration_1; }
		
		//'or'
		public Keyword getOROrKeyword_1_0() { return cOROrKeyword_1_0; }
		
		//XOR
		public EnumLiteralDeclaration getXOREnumLiteralDeclaration_2() { return cXOREnumLiteralDeclaration_2; }
		
		//'XOR'
		public Keyword getXORXORKeyword_2_0() { return cXORXORKeyword_2_0; }
		
		//XOR='xor'
		public EnumLiteralDeclaration getXOREnumLiteralDeclaration_3() { return cXOREnumLiteralDeclaration_3; }
		
		//'xor'
		public Keyword getXORXorKeyword_3_0() { return cXORXorKeyword_3_0; }
	}
	public class OpAndElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.dmx.Dmx.OpAnd");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cANDEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cANDANDKeyword_0_0 = (Keyword)cANDEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cANDEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cANDAndKeyword_1_0 = (Keyword)cANDEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum OpAnd returns DBinaryOperator:
		//	AND | AND='and';
		public EnumRule getRule() { return rule; }
		
		//AND | AND='and'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//AND
		public EnumLiteralDeclaration getANDEnumLiteralDeclaration_0() { return cANDEnumLiteralDeclaration_0; }
		
		//'AND'
		public Keyword getANDANDKeyword_0_0() { return cANDANDKeyword_0_0; }
		
		//AND='and'
		public EnumLiteralDeclaration getANDEnumLiteralDeclaration_1() { return cANDEnumLiteralDeclaration_1; }
		
		//'and'
		public Keyword getANDAndKeyword_1_0() { return cANDAndKeyword_1_0; }
	}
	public class OpEqualityElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.dmx.Dmx.OpEquality");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cEQUALEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cEQUALEqualsSignKeyword_0_0 = (Keyword)cEQUALEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cNOT_EQUALEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cNOT_EQUALExclamationMarkEqualsSignKeyword_1_0 = (Keyword)cNOT_EQUALEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cNOT_EQUALEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cNOT_EQUALLessThanSignGreaterThanSignKeyword_2_0 = (Keyword)cNOT_EQUALEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum OpEquality returns DBinaryOperator:
		//	EQUAL='=' | NOT_EQUAL='!=' | NOT_EQUAL='<>';
		public EnumRule getRule() { return rule; }
		
		//EQUAL='=' | NOT_EQUAL='!=' | NOT_EQUAL='<>'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//EQUAL='='
		public EnumLiteralDeclaration getEQUALEnumLiteralDeclaration_0() { return cEQUALEnumLiteralDeclaration_0; }
		
		//'='
		public Keyword getEQUALEqualsSignKeyword_0_0() { return cEQUALEqualsSignKeyword_0_0; }
		
		//NOT_EQUAL='!='
		public EnumLiteralDeclaration getNOT_EQUALEnumLiteralDeclaration_1() { return cNOT_EQUALEnumLiteralDeclaration_1; }
		
		//'!='
		public Keyword getNOT_EQUALExclamationMarkEqualsSignKeyword_1_0() { return cNOT_EQUALExclamationMarkEqualsSignKeyword_1_0; }
		
		//NOT_EQUAL='<>'
		public EnumLiteralDeclaration getNOT_EQUALEnumLiteralDeclaration_2() { return cNOT_EQUALEnumLiteralDeclaration_2; }
		
		//'<>'
		public Keyword getNOT_EQUALLessThanSignGreaterThanSignKeyword_2_0() { return cNOT_EQUALLessThanSignGreaterThanSignKeyword_2_0; }
	}
	public class OpCompareElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.dmx.Dmx.OpCompare");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cLESSEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cLESSLessThanSignKeyword_0_0 = (Keyword)cLESSEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cLESS_OR_EQUALEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cLESS_OR_EQUALLessThanSignEqualsSignKeyword_1_0 = (Keyword)cLESS_OR_EQUALEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cLESS_OR_EQUALEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cLESS_OR_EQUALLessThanOrEqualToKeyword_2_0 = (Keyword)cLESS_OR_EQUALEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cGREATER_OR_EQUALEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cGREATER_OR_EQUALGreaterThanSignEqualsSignKeyword_3_0 = (Keyword)cGREATER_OR_EQUALEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cGREATER_OR_EQUALEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cGREATER_OR_EQUALGreaterThanOrEqualToKeyword_4_0 = (Keyword)cGREATER_OR_EQUALEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cGREATEREnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cGREATERGreaterThanSignKeyword_5_0 = (Keyword)cGREATEREnumLiteralDeclaration_5.eContents().get(0);
		
		//enum OpCompare returns DBinaryOperator:
		//	LESS='<' | LESS_OR_EQUAL='<=' | LESS_OR_EQUAL='≤' | GREATER_OR_EQUAL='>=' | GREATER_OR_EQUAL='≥' | GREATER='>';
		public EnumRule getRule() { return rule; }
		
		//LESS='<' | LESS_OR_EQUAL='<=' | LESS_OR_EQUAL='≤' | GREATER_OR_EQUAL='>=' | GREATER_OR_EQUAL='≥' | GREATER='>'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//LESS='<'
		public EnumLiteralDeclaration getLESSEnumLiteralDeclaration_0() { return cLESSEnumLiteralDeclaration_0; }
		
		//'<'
		public Keyword getLESSLessThanSignKeyword_0_0() { return cLESSLessThanSignKeyword_0_0; }
		
		//LESS_OR_EQUAL='<='
		public EnumLiteralDeclaration getLESS_OR_EQUALEnumLiteralDeclaration_1() { return cLESS_OR_EQUALEnumLiteralDeclaration_1; }
		
		//'<='
		public Keyword getLESS_OR_EQUALLessThanSignEqualsSignKeyword_1_0() { return cLESS_OR_EQUALLessThanSignEqualsSignKeyword_1_0; }
		
		//LESS_OR_EQUAL='≤'
		public EnumLiteralDeclaration getLESS_OR_EQUALEnumLiteralDeclaration_2() { return cLESS_OR_EQUALEnumLiteralDeclaration_2; }
		
		//'≤'
		public Keyword getLESS_OR_EQUALLessThanOrEqualToKeyword_2_0() { return cLESS_OR_EQUALLessThanOrEqualToKeyword_2_0; }
		
		//GREATER_OR_EQUAL='>='
		public EnumLiteralDeclaration getGREATER_OR_EQUALEnumLiteralDeclaration_3() { return cGREATER_OR_EQUALEnumLiteralDeclaration_3; }
		
		//'>='
		public Keyword getGREATER_OR_EQUALGreaterThanSignEqualsSignKeyword_3_0() { return cGREATER_OR_EQUALGreaterThanSignEqualsSignKeyword_3_0; }
		
		//GREATER_OR_EQUAL='≥'
		public EnumLiteralDeclaration getGREATER_OR_EQUALEnumLiteralDeclaration_4() { return cGREATER_OR_EQUALEnumLiteralDeclaration_4; }
		
		//'≥'
		public Keyword getGREATER_OR_EQUALGreaterThanOrEqualToKeyword_4_0() { return cGREATER_OR_EQUALGreaterThanOrEqualToKeyword_4_0; }
		
		//GREATER='>'
		public EnumLiteralDeclaration getGREATEREnumLiteralDeclaration_5() { return cGREATEREnumLiteralDeclaration_5; }
		
		//'>'
		public Keyword getGREATERGreaterThanSignKeyword_5_0() { return cGREATERGreaterThanSignKeyword_5_0; }
	}
	public class OpOtherElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.dmx.Dmx.OpOther");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cUNTILEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cUNTILFullStopFullStopKeyword_0_0 = (Keyword)cUNTILEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cSINGLE_ARROWEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cSINGLE_ARROWHyphenMinusGreaterThanSignKeyword_1_0 = (Keyword)cSINGLE_ARROWEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cDOUBLE_ARROWEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cDOUBLE_ARROWEqualsSignGreaterThanSignKeyword_2_0 = (Keyword)cDOUBLE_ARROWEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum OpOther returns DBinaryOperator:
		//	UNTIL='..' | SINGLE_ARROW='->' | DOUBLE_ARROW='=>';
		public EnumRule getRule() { return rule; }
		
		//UNTIL='..' | SINGLE_ARROW='->' | DOUBLE_ARROW='=>'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//UNTIL='..'
		public EnumLiteralDeclaration getUNTILEnumLiteralDeclaration_0() { return cUNTILEnumLiteralDeclaration_0; }
		
		//'..'
		public Keyword getUNTILFullStopFullStopKeyword_0_0() { return cUNTILFullStopFullStopKeyword_0_0; }
		
		//SINGLE_ARROW='->'
		public EnumLiteralDeclaration getSINGLE_ARROWEnumLiteralDeclaration_1() { return cSINGLE_ARROWEnumLiteralDeclaration_1; }
		
		//'->'
		public Keyword getSINGLE_ARROWHyphenMinusGreaterThanSignKeyword_1_0() { return cSINGLE_ARROWHyphenMinusGreaterThanSignKeyword_1_0; }
		
		//DOUBLE_ARROW='=>'
		public EnumLiteralDeclaration getDOUBLE_ARROWEnumLiteralDeclaration_2() { return cDOUBLE_ARROWEnumLiteralDeclaration_2; }
		
		//'=>'
		public Keyword getDOUBLE_ARROWEqualsSignGreaterThanSignKeyword_2_0() { return cDOUBLE_ARROWEqualsSignGreaterThanSignKeyword_2_0; }
	}
	public class OpAddElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.dmx.Dmx.OpAdd");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cADDEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cADDPlusSignKeyword_0_0 = (Keyword)cADDEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cSUBTRACTEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cSUBTRACTHyphenMinusKeyword_1_0 = (Keyword)cSUBTRACTEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum OpAdd returns DBinaryOperator:
		//	ADD='+' | SUBTRACT='-';
		public EnumRule getRule() { return rule; }
		
		//ADD='+' | SUBTRACT='-'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ADD='+'
		public EnumLiteralDeclaration getADDEnumLiteralDeclaration_0() { return cADDEnumLiteralDeclaration_0; }
		
		//'+'
		public Keyword getADDPlusSignKeyword_0_0() { return cADDPlusSignKeyword_0_0; }
		
		//SUBTRACT='-'
		public EnumLiteralDeclaration getSUBTRACTEnumLiteralDeclaration_1() { return cSUBTRACTEnumLiteralDeclaration_1; }
		
		//'-'
		public Keyword getSUBTRACTHyphenMinusKeyword_1_0() { return cSUBTRACTHyphenMinusKeyword_1_0; }
	}
	public class OpMultiElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.dmx.Dmx.OpMulti");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cMULTIPLYEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cMULTIPLYAsteriskKeyword_0_0 = (Keyword)cMULTIPLYEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cDIVIDEEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cDIVIDESolidusKeyword_1_0 = (Keyword)cDIVIDEEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cPOWEREnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cPOWERAsteriskAsteriskKeyword_2_0 = (Keyword)cPOWEREnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cMODULOEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cMODULOPercentSignKeyword_3_0 = (Keyword)cMODULOEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum OpMulti returns DBinaryOperator:
		//	MULTIPLY='*' | DIVIDE='/' | POWER='**' | MODULO='%';
		public EnumRule getRule() { return rule; }
		
		//MULTIPLY='*' | DIVIDE='/' | POWER='**' | MODULO='%'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//MULTIPLY='*'
		public EnumLiteralDeclaration getMULTIPLYEnumLiteralDeclaration_0() { return cMULTIPLYEnumLiteralDeclaration_0; }
		
		//'*'
		public Keyword getMULTIPLYAsteriskKeyword_0_0() { return cMULTIPLYAsteriskKeyword_0_0; }
		
		//DIVIDE='/'
		public EnumLiteralDeclaration getDIVIDEEnumLiteralDeclaration_1() { return cDIVIDEEnumLiteralDeclaration_1; }
		
		//'/'
		public Keyword getDIVIDESolidusKeyword_1_0() { return cDIVIDESolidusKeyword_1_0; }
		
		//POWER='**'
		public EnumLiteralDeclaration getPOWEREnumLiteralDeclaration_2() { return cPOWEREnumLiteralDeclaration_2; }
		
		//'**'
		public Keyword getPOWERAsteriskAsteriskKeyword_2_0() { return cPOWERAsteriskAsteriskKeyword_2_0; }
		
		//MODULO='%'
		public EnumLiteralDeclaration getMODULOEnumLiteralDeclaration_3() { return cMODULOEnumLiteralDeclaration_3; }
		
		//'%'
		public Keyword getMODULOPercentSignKeyword_3_0() { return cMODULOPercentSignKeyword_3_0; }
	}
	public class OpUnaryElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.dmx.Dmx.OpUnary");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cPLUSEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cPLUSPlusSignKeyword_0_0 = (Keyword)cPLUSEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cMINUSEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cMINUSHyphenMinusKeyword_1_0 = (Keyword)cMINUSEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cNOTEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cNOTExclamationMarkKeyword_2_0 = (Keyword)cNOTEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cNOTEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cNOTNOTKeyword_3_0 = (Keyword)cNOTEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cNOTEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cNOTNotKeyword_4_0 = (Keyword)cNOTEnumLiteralDeclaration_4.eContents().get(0);
		
		//enum OpUnary returns DUnaryOperator:
		//	PLUS='+' | MINUS='-' | NOT='!' | NOT | NOT='not';
		public EnumRule getRule() { return rule; }
		
		//PLUS='+' | MINUS='-' | NOT='!' | NOT | NOT='not'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//PLUS='+'
		public EnumLiteralDeclaration getPLUSEnumLiteralDeclaration_0() { return cPLUSEnumLiteralDeclaration_0; }
		
		//'+'
		public Keyword getPLUSPlusSignKeyword_0_0() { return cPLUSPlusSignKeyword_0_0; }
		
		//MINUS='-'
		public EnumLiteralDeclaration getMINUSEnumLiteralDeclaration_1() { return cMINUSEnumLiteralDeclaration_1; }
		
		//'-'
		public Keyword getMINUSHyphenMinusKeyword_1_0() { return cMINUSHyphenMinusKeyword_1_0; }
		
		//NOT='!'
		public EnumLiteralDeclaration getNOTEnumLiteralDeclaration_2() { return cNOTEnumLiteralDeclaration_2; }
		
		//'!'
		public Keyword getNOTExclamationMarkKeyword_2_0() { return cNOTExclamationMarkKeyword_2_0; }
		
		//NOT
		public EnumLiteralDeclaration getNOTEnumLiteralDeclaration_3() { return cNOTEnumLiteralDeclaration_3; }
		
		//'NOT'
		public Keyword getNOTNOTKeyword_3_0() { return cNOTNOTKeyword_3_0; }
		
		//NOT='not'
		public EnumLiteralDeclaration getNOTEnumLiteralDeclaration_4() { return cNOTEnumLiteralDeclaration_4; }
		
		//'not'
		public Keyword getNOTNotKeyword_4_0() { return cNOTNotKeyword_4_0; }
	}
	
	private final DmxModelElements pDmxModel;
	private final DRichTextElements pDRichText;
	private final DTextOnlyElements pDTextOnly;
	private final DTextStartElements pDTextStart;
	private final DTextMiddleElements pDTextMiddle;
	private final DTextEndElements pDTextEnd;
	private final DExpressionElements pDExpression;
	private final DAssignmentElements pDAssignment;
	private final OpSingleAssignElements pOpSingleAssign;
	private final DOrExpressionElements pDOrExpression;
	private final OpOrElements eOpOr;
	private final DAndExpressionElements pDAndExpression;
	private final OpAndElements eOpAnd;
	private final DEqualityExpressionElements pDEqualityExpression;
	private final OpEqualityElements eOpEquality;
	private final DRelationalExpressionElements pDRelationalExpression;
	private final OpInstanceOfElements pOpInstanceOf;
	private final OpCompareElements eOpCompare;
	private final DOtherOperatorExpressionElements pDOtherOperatorExpression;
	private final OpOtherElements eOpOther;
	private final DAdditiveExpressionElements pDAdditiveExpression;
	private final OpAddElements eOpAdd;
	private final DMultiplicativeExpressionElements pDMultiplicativeExpression;
	private final OpMultiElements eOpMulti;
	private final DUnaryOperationElements pDUnaryOperation;
	private final OpUnaryElements eOpUnary;
	private final DCastExpressionElements pDCastExpression;
	private final OpCastElements pOpCast;
	private final DTypedMemberReferenceElements pDTypedMemberReference;
	private final DPrimaryExpressionElements pDPrimaryExpression;
	private final DLiteralExpressionElements pDLiteralExpression;
	private final DSelfExpressionElements pDSelfExpression;
	private final DReturnExpressionElements pDReturnExpression;
	private final DRaiseExpressionElements pDRaiseExpression;
	private final DParenthesizedExpressionElements pDParenthesizedExpression;
	private final DFunctionCallElements pDFunctionCall;
	private final DConstructorCallElements pDConstructorCall;
	private final OpConstructorElements pOpConstructor;
	private final DContextReferenceElements pDContextReference;
	private final DIfExpressionElements pDIfExpression;
	private final DForLoopExpressionElements pDForLoopExpression;
	private final DMultiplicityElements pDMultiplicity;
	private final MULTIPLICITYElements pMULTIPLICITY;
	private final DBooleanLiteralElements pDBooleanLiteral;
	private final DStringLiteralElements pDStringLiteral;
	private final DNaturalLiteralElements pDNaturalLiteral;
	private final DDecimalLiteralElements pDDecimalLiteral;
	private final DNilLiteralElements pDNilLiteral;
	private final DECIMALElements pDECIMAL;
	private final DQualifiedNameWithWildcardElements pDQualifiedNameWithWildcard;
	private final QualifiedNameElements pQualifiedName;
	private final TerminalRule tID;
	private final TerminalRule tSTRING;
	private final TerminalRule tNATURAL;
	private final TerminalRule tPLAIN_TEXT;
	private final TerminalRule tPLAIN_TEXT_ONLY;
	private final TerminalRule tPLAIN_TEXT_START;
	private final TerminalRule tPLAIN_TEXT_MIDDLE;
	private final TerminalRule tPLAIN_TEXT_END;
	private final TerminalRule tML_COMMENT;
	private final TerminalRule tSL_COMMENT;
	private final TerminalRule tWS;
	private final TerminalRule tANY_OTHER;
	
	private final Grammar grammar;

	@Inject
	public DmxGrammarAccess(GrammarProvider grammarProvider) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.pDmxModel = new DmxModelElements();
		this.pDRichText = new DRichTextElements();
		this.pDTextOnly = new DTextOnlyElements();
		this.pDTextStart = new DTextStartElements();
		this.pDTextMiddle = new DTextMiddleElements();
		this.pDTextEnd = new DTextEndElements();
		this.pDExpression = new DExpressionElements();
		this.pDAssignment = new DAssignmentElements();
		this.pOpSingleAssign = new OpSingleAssignElements();
		this.pDOrExpression = new DOrExpressionElements();
		this.eOpOr = new OpOrElements();
		this.pDAndExpression = new DAndExpressionElements();
		this.eOpAnd = new OpAndElements();
		this.pDEqualityExpression = new DEqualityExpressionElements();
		this.eOpEquality = new OpEqualityElements();
		this.pDRelationalExpression = new DRelationalExpressionElements();
		this.pOpInstanceOf = new OpInstanceOfElements();
		this.eOpCompare = new OpCompareElements();
		this.pDOtherOperatorExpression = new DOtherOperatorExpressionElements();
		this.eOpOther = new OpOtherElements();
		this.pDAdditiveExpression = new DAdditiveExpressionElements();
		this.eOpAdd = new OpAddElements();
		this.pDMultiplicativeExpression = new DMultiplicativeExpressionElements();
		this.eOpMulti = new OpMultiElements();
		this.pDUnaryOperation = new DUnaryOperationElements();
		this.eOpUnary = new OpUnaryElements();
		this.pDCastExpression = new DCastExpressionElements();
		this.pOpCast = new OpCastElements();
		this.pDTypedMemberReference = new DTypedMemberReferenceElements();
		this.pDPrimaryExpression = new DPrimaryExpressionElements();
		this.pDLiteralExpression = new DLiteralExpressionElements();
		this.pDSelfExpression = new DSelfExpressionElements();
		this.pDReturnExpression = new DReturnExpressionElements();
		this.pDRaiseExpression = new DRaiseExpressionElements();
		this.pDParenthesizedExpression = new DParenthesizedExpressionElements();
		this.pDFunctionCall = new DFunctionCallElements();
		this.pDConstructorCall = new DConstructorCallElements();
		this.pOpConstructor = new OpConstructorElements();
		this.pDContextReference = new DContextReferenceElements();
		this.pDIfExpression = new DIfExpressionElements();
		this.pDForLoopExpression = new DForLoopExpressionElements();
		this.pDMultiplicity = new DMultiplicityElements();
		this.pMULTIPLICITY = new MULTIPLICITYElements();
		this.pDBooleanLiteral = new DBooleanLiteralElements();
		this.pDStringLiteral = new DStringLiteralElements();
		this.pDNaturalLiteral = new DNaturalLiteralElements();
		this.pDDecimalLiteral = new DDecimalLiteralElements();
		this.pDNilLiteral = new DNilLiteralElements();
		this.pDECIMAL = new DECIMALElements();
		this.pDQualifiedNameWithWildcard = new DQualifiedNameWithWildcardElements();
		this.pQualifiedName = new QualifiedNameElements();
		this.tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.dmx.Dmx.ID");
		this.tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.dmx.Dmx.STRING");
		this.tNATURAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.dmx.Dmx.NATURAL");
		this.tPLAIN_TEXT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.dmx.Dmx.PLAIN_TEXT");
		this.tPLAIN_TEXT_ONLY = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.dmx.Dmx.PLAIN_TEXT_ONLY");
		this.tPLAIN_TEXT_START = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.dmx.Dmx.PLAIN_TEXT_START");
		this.tPLAIN_TEXT_MIDDLE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.dmx.Dmx.PLAIN_TEXT_MIDDLE");
		this.tPLAIN_TEXT_END = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.dmx.Dmx.PLAIN_TEXT_END");
		this.tML_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.dmx.Dmx.ML_COMMENT");
		this.tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.dmx.Dmx.SL_COMMENT");
		this.tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.dmx.Dmx.WS");
		this.tANY_OTHER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.dmx.Dmx.ANY_OTHER");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("com.mimacom.ddd.dm.dmx.Dmx".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	
	//DmxModel:
	//	{DmxModel} ('text' NATURAL ':' texts+=DRichText ';')* ('expr' NATURAL ':' expressions+=DExpression ';')*;
	public DmxModelElements getDmxModelAccess() {
		return pDmxModel;
	}
	
	public ParserRule getDmxModelRule() {
		return getDmxModelAccess().getRule();
	}
	
	//////
	//DRichText:
	//	elements+=DTextOnly
	//	| elements+=DTextStart
	//	elements+=DExpression (elements+=DTextMiddle elements+=DExpression)*
	//	elements+=DTextEnd;
	public DRichTextElements getDRichTextAccess() {
		return pDRichText;
	}
	
	public ParserRule getDRichTextRule() {
		return getDRichTextAccess().getRule();
	}
	
	//DTextOnly DText:
	//	value=PLAIN_TEXT_ONLY;
	public DTextOnlyElements getDTextOnlyAccess() {
		return pDTextOnly;
	}
	
	public ParserRule getDTextOnlyRule() {
		return getDTextOnlyAccess().getRule();
	}
	
	//DTextStart DText:
	//	value=PLAIN_TEXT_START;
	public DTextStartElements getDTextStartAccess() {
		return pDTextStart;
	}
	
	public ParserRule getDTextStartRule() {
		return getDTextStartAccess().getRule();
	}
	
	//DTextMiddle DText:
	//	value=PLAIN_TEXT_MIDDLE;
	public DTextMiddleElements getDTextMiddleAccess() {
		return pDTextMiddle;
	}
	
	public ParserRule getDTextMiddleRule() {
		return getDTextMiddleAccess().getRule();
	}
	
	//DTextEnd DText:
	//	value=PLAIN_TEXT_END;
	public DTextEndElements getDTextEndAccess() {
		return pDTextEnd;
	}
	
	public ParserRule getDTextEndRule() {
		return getDTextEndAccess().getRule();
	}
	
	//DExpression:
	//	DAssignment;
	public DExpressionElements getDExpressionAccess() {
		return pDExpression;
	}
	
	public ParserRule getDExpressionRule() {
		return getDExpressionAccess().getRule();
	}
	
	//DAssignment DExpression:
	//	{DAssignment} member=[DTypedMember] OpSingleAssign value=DAssignment
	//	| DOrExpression;
	public DAssignmentElements getDAssignmentAccess() {
		return pDAssignment;
	}
	
	public ParserRule getDAssignmentRule() {
		return getDAssignmentAccess().getRule();
	}
	
	//OpSingleAssign:
	//	':=';
	public OpSingleAssignElements getOpSingleAssignAccess() {
		return pOpSingleAssign;
	}
	
	public ParserRule getOpSingleAssignRule() {
		return getOpSingleAssignAccess().getRule();
	}
	
	//DOrExpression DExpression:
	//	DAndExpression (=> ({DBinaryOperation.leftOperand=current} operator=OpOr) rightOperand=DAndExpression)*;
	public DOrExpressionElements getDOrExpressionAccess() {
		return pDOrExpression;
	}
	
	public ParserRule getDOrExpressionRule() {
		return getDOrExpressionAccess().getRule();
	}
	
	//enum OpOr returns DBinaryOperator:
	//	OR | OR='or' | XOR | XOR='xor';
	public OpOrElements getOpOrAccess() {
		return eOpOr;
	}
	
	public EnumRule getOpOrRule() {
		return getOpOrAccess().getRule();
	}
	
	//DAndExpression DExpression:
	//	DEqualityExpression (=> ({DBinaryOperation.leftOperand=current} operator=OpAnd) rightOperand=DEqualityExpression)*;
	public DAndExpressionElements getDAndExpressionAccess() {
		return pDAndExpression;
	}
	
	public ParserRule getDAndExpressionRule() {
		return getDAndExpressionAccess().getRule();
	}
	
	//enum OpAnd returns DBinaryOperator:
	//	AND | AND='and';
	public OpAndElements getOpAndAccess() {
		return eOpAnd;
	}
	
	public EnumRule getOpAndRule() {
		return getOpAndAccess().getRule();
	}
	
	//DEqualityExpression DExpression:
	//	DRelationalExpression (=> ({DBinaryOperation.leftOperand=current} operator=OpEquality)
	//	rightOperand=DRelationalExpression)*;
	public DEqualityExpressionElements getDEqualityExpressionAccess() {
		return pDEqualityExpression;
	}
	
	public ParserRule getDEqualityExpressionRule() {
		return getDEqualityExpressionAccess().getRule();
	}
	
	//enum OpEquality returns DBinaryOperator:
	//	EQUAL='=' | NOT_EQUAL='!=' | NOT_EQUAL='<>';
	public OpEqualityElements getOpEqualityAccess() {
		return eOpEquality;
	}
	
	public EnumRule getOpEqualityRule() {
		return getOpEqualityAccess().getRule();
	}
	
	//DRelationalExpression DExpression:
	//	DOtherOperatorExpression (=> ({DInstanceOfExpression.expression=current} OpInstanceOf) type=[DType] | =>
	//	({DBinaryOperation.leftOperand=current} operator=OpCompare) rightOperand=DOtherOperatorExpression)*;
	public DRelationalExpressionElements getDRelationalExpressionAccess() {
		return pDRelationalExpression;
	}
	
	public ParserRule getDRelationalExpressionRule() {
		return getDRelationalExpressionAccess().getRule();
	}
	
	//OpInstanceOf:
	//	'ISA' | 'isa';
	public OpInstanceOfElements getOpInstanceOfAccess() {
		return pOpInstanceOf;
	}
	
	public ParserRule getOpInstanceOfRule() {
		return getOpInstanceOfAccess().getRule();
	}
	
	//enum OpCompare returns DBinaryOperator:
	//	LESS='<' | LESS_OR_EQUAL='<=' | LESS_OR_EQUAL='≤' | GREATER_OR_EQUAL='>=' | GREATER_OR_EQUAL='≥' | GREATER='>';
	public OpCompareElements getOpCompareAccess() {
		return eOpCompare;
	}
	
	public EnumRule getOpCompareRule() {
		return getOpCompareAccess().getRule();
	}
	
	//DOtherOperatorExpression DExpression:
	//	DAdditiveExpression (=> ({DBinaryOperation.leftOperand=current} operator=OpOther) rightOperand=DAdditiveExpression)*;
	public DOtherOperatorExpressionElements getDOtherOperatorExpressionAccess() {
		return pDOtherOperatorExpression;
	}
	
	public ParserRule getDOtherOperatorExpressionRule() {
		return getDOtherOperatorExpressionAccess().getRule();
	}
	
	//enum OpOther returns DBinaryOperator:
	//	UNTIL='..' | SINGLE_ARROW='->' | DOUBLE_ARROW='=>';
	public OpOtherElements getOpOtherAccess() {
		return eOpOther;
	}
	
	public EnumRule getOpOtherRule() {
		return getOpOtherAccess().getRule();
	}
	
	//DAdditiveExpression DExpression:
	//	DMultiplicativeExpression (=> ({DBinaryOperation.leftOperand=current} operator=OpAdd)
	//	rightOperand=DMultiplicativeExpression)*;
	public DAdditiveExpressionElements getDAdditiveExpressionAccess() {
		return pDAdditiveExpression;
	}
	
	public ParserRule getDAdditiveExpressionRule() {
		return getDAdditiveExpressionAccess().getRule();
	}
	
	//enum OpAdd returns DBinaryOperator:
	//	ADD='+' | SUBTRACT='-';
	public OpAddElements getOpAddAccess() {
		return eOpAdd;
	}
	
	public EnumRule getOpAddRule() {
		return getOpAddAccess().getRule();
	}
	
	//DMultiplicativeExpression DExpression:
	//	DUnaryOperation (=> ({DBinaryOperation.leftOperand=current} operator=OpMulti) rightOperand=DUnaryOperation)*;
	public DMultiplicativeExpressionElements getDMultiplicativeExpressionAccess() {
		return pDMultiplicativeExpression;
	}
	
	public ParserRule getDMultiplicativeExpressionRule() {
		return getDMultiplicativeExpressionAccess().getRule();
	}
	
	//enum OpMulti returns DBinaryOperator:
	//	MULTIPLY='*' | DIVIDE='/' | POWER='**' | MODULO='%';
	public OpMultiElements getOpMultiAccess() {
		return eOpMulti;
	}
	
	public EnumRule getOpMultiRule() {
		return getOpMultiAccess().getRule();
	}
	
	//DUnaryOperation DExpression:
	//	{DUnaryOperation} operator=OpUnary operand=DUnaryOperation
	//	| DCastExpression;
	public DUnaryOperationElements getDUnaryOperationAccess() {
		return pDUnaryOperation;
	}
	
	public ParserRule getDUnaryOperationRule() {
		return getDUnaryOperationAccess().getRule();
	}
	
	//enum OpUnary returns DUnaryOperator:
	//	PLUS='+' | MINUS='-' | NOT='!' | NOT | NOT='not';
	public OpUnaryElements getOpUnaryAccess() {
		return eOpUnary;
	}
	
	public EnumRule getOpUnaryRule() {
		return getOpUnaryAccess().getRule();
	}
	
	//DCastExpression DExpression:
	//	DTypedMemberReference (=> ({DCastExpression.target=current} OpCast) type=[DType])?;
	public DCastExpressionElements getDCastExpressionAccess() {
		return pDCastExpression;
	}
	
	public ParserRule getDCastExpressionRule() {
		return getDCastExpressionAccess().getRule();
	}
	
	//OpCast:
	//	'AS' | 'as';
	public OpCastElements getOpCastAccess() {
		return pOpCast;
	}
	
	public ParserRule getOpCastRule() {
		return getOpCastAccess().getRule();
	}
	
	//DTypedMemberReference DExpression:
	//	DPrimaryExpression (=> ({DAssignment.memberContainer=current} '.' member=[DTypedMember] OpSingleAssign)
	//	value=DAssignment
	//	| => ({DTypedMemberReference.memberContainer=current} '.') member=[DTypedMember] (=> explicitOperationCall?='('
	//	(memberCallArguments+=DExpression (',' memberCallArguments+=DExpression)*)?
	//	')')?)*;
	public DTypedMemberReferenceElements getDTypedMemberReferenceAccess() {
		return pDTypedMemberReference;
	}
	
	public ParserRule getDTypedMemberReferenceRule() {
		return getDTypedMemberReferenceAccess().getRule();
	}
	
	//DPrimaryExpression DExpression:
	//	DLiteralExpression | DSelfExpression | DReturnExpression | DRaiseExpression | DParenthesizedExpression | DFunctionCall
	//	| DConstructorCall | DContextReference | DIfExpression | DForLoopExpression;
	public DPrimaryExpressionElements getDPrimaryExpressionAccess() {
		return pDPrimaryExpression;
	}
	
	public ParserRule getDPrimaryExpressionRule() {
		return getDPrimaryExpressionAccess().getRule();
	}
	
	//DLiteralExpression DExpression:
	//	DBooleanLiteral | DStringLiteral | DNaturalLiteral | DDecimalLiteral | DNilLiteral;
	public DLiteralExpressionElements getDLiteralExpressionAccess() {
		return pDLiteralExpression;
	}
	
	public ParserRule getDLiteralExpressionRule() {
		return getDLiteralExpressionAccess().getRule();
	}
	
	//DSelfExpression DExpression:
	//	{DSelfExpression} ('SELF' | 'self');
	public DSelfExpressionElements getDSelfExpressionAccess() {
		return pDSelfExpression;
	}
	
	public ParserRule getDSelfExpressionRule() {
		return getDSelfExpressionAccess().getRule();
	}
	
	//DReturnExpression DExpression:
	//	{DReturnExpression} ('RETURN' | 'return') -> expression=DExpression?;
	public DReturnExpressionElements getDReturnExpressionAccess() {
		return pDReturnExpression;
	}
	
	public ParserRule getDReturnExpressionRule() {
		return getDReturnExpressionAccess().getRule();
	}
	
	//DRaiseExpression DExpression:
	//	{DRaiseExpression} ('RAISE' | 'raise') expression=DExpression;
	public DRaiseExpressionElements getDRaiseExpressionAccess() {
		return pDRaiseExpression;
	}
	
	public ParserRule getDRaiseExpressionRule() {
		return getDRaiseExpressionAccess().getRule();
	}
	
	//DParenthesizedExpression DExpression:
	//	'(' DExpression ')';
	public DParenthesizedExpressionElements getDParenthesizedExpressionAccess() {
		return pDParenthesizedExpression;
	}
	
	public ParserRule getDParenthesizedExpressionRule() {
		return getDParenthesizedExpressionAccess().getRule();
	}
	
	//DFunctionCall DExpression:
	//	{DFunctionCall} function=[DFunction]
	//	'(' (functionCallArguments+=DExpression (',' functionCallArguments+=DExpression)*)?
	//	')';
	public DFunctionCallElements getDFunctionCallAccess() {
		return pDFunctionCall;
	}
	
	public ParserRule getDFunctionCallRule() {
		return getDFunctionCallAccess().getRule();
	}
	
	//DConstructorCall DExpression:
	//	{DConstructorCall} OpConstructor constructor=[DIdentityType] (=> explicitConstructorCall?='(' (arguments+=DExpression
	//	(',' arguments+=DExpression)*)?
	//	')')?;
	public DConstructorCallElements getDConstructorCallAccess() {
		return pDConstructorCall;
	}
	
	public ParserRule getDConstructorCallRule() {
		return getDConstructorCallAccess().getRule();
	}
	
	//OpConstructor:
	//	'NEW' | 'new';
	public OpConstructorElements getOpConstructorAccess() {
		return pOpConstructor;
	}
	
	public ParserRule getOpConstructorRule() {
		return getOpConstructorAccess().getRule();
	}
	
	//DContextReference DExpression:
	//	{DContextReference} contextElement=[DNamedElement];
	public DContextReferenceElements getDContextReferenceAccess() {
		return pDContextReference;
	}
	
	public ParserRule getDContextReferenceRule() {
		return getDContextReferenceAccess().getRule();
	}
	
	//DIfExpression DExpression:
	//	{DIfExpression}
	//	'if' if=DExpression
	//	'then' then=DExpression (=> 'else' else=DExpression)?
	//	'end';
	public DIfExpressionElements getDIfExpressionAccess() {
		return pDIfExpression;
	}
	
	public ParserRule getDIfExpressionRule() {
		return getDIfExpressionAccess().getRule();
	}
	
	//DForLoopExpression DExpression:
	//	=> ({DForLoopExpression}
	//	'for' declaredParam=ID ':') forExpression=DExpression 'do'
	//	eachExpression=DExpression
	//	'end';
	public DForLoopExpressionElements getDForLoopExpressionAccess() {
		return pDForLoopExpression;
	}
	
	public ParserRule getDForLoopExpressionRule() {
		return getDForLoopExpressionAccess().getRule();
	}
	
	//DMultiplicity:
	//	'(' minOccurs=NATURAL '..' maxOccurs=MULTIPLICITY ')';
	public DMultiplicityElements getDMultiplicityAccess() {
		return pDMultiplicity;
	}
	
	public ParserRule getDMultiplicityRule() {
		return getDMultiplicityAccess().getRule();
	}
	
	//MULTIPLICITY ecore::EInt:
	//	NATURAL | '*';
	public MULTIPLICITYElements getMULTIPLICITYAccess() {
		return pMULTIPLICITY;
	}
	
	public ParserRule getMULTIPLICITYRule() {
		return getMULTIPLICITYAccess().getRule();
	}
	
	//DBooleanLiteral DExpression:
	//	{DBooleanLiteral} (value?='TRUE' | value?='true' | 'FALSE' | 'false');
	public DBooleanLiteralElements getDBooleanLiteralAccess() {
		return pDBooleanLiteral;
	}
	
	public ParserRule getDBooleanLiteralRule() {
		return getDBooleanLiteralAccess().getRule();
	}
	
	//DStringLiteral DExpression:
	//	{DStringLiteral} value=STRING;
	public DStringLiteralElements getDStringLiteralAccess() {
		return pDStringLiteral;
	}
	
	public ParserRule getDStringLiteralRule() {
		return getDStringLiteralAccess().getRule();
	}
	
	//DNaturalLiteral DExpression:
	//	{DNaturalLiteral} value=NATURAL;
	public DNaturalLiteralElements getDNaturalLiteralAccess() {
		return pDNaturalLiteral;
	}
	
	public ParserRule getDNaturalLiteralRule() {
		return getDNaturalLiteralAccess().getRule();
	}
	
	//DDecimalLiteral DExpression:
	//	{DDecimalLiteral} value=DECIMAL;
	public DDecimalLiteralElements getDDecimalLiteralAccess() {
		return pDDecimalLiteral;
	}
	
	public ParserRule getDDecimalLiteralRule() {
		return getDDecimalLiteralAccess().getRule();
	}
	
	//DNilLiteral DExpression:
	//	{DNilLiteral} ('NIL' | 'nil');
	public DNilLiteralElements getDNilLiteralAccess() {
		return pDNilLiteral;
	}
	
	public ParserRule getDNilLiteralRule() {
		return getDNilLiteralAccess().getRule();
	}
	
	//DECIMAL:
	//	NATURAL '.' NATURAL (('E' | 'e') ('+' | '-')? NATURAL)?;
	public DECIMALElements getDECIMALAccess() {
		return pDECIMAL;
	}
	
	public ParserRule getDECIMALRule() {
		return getDECIMALAccess().getRule();
	}
	
	//DQualifiedNameWithWildcard:
	//	QualifiedName '.*'?;
	public DQualifiedNameWithWildcardElements getDQualifiedNameWithWildcardAccess() {
		return pDQualifiedNameWithWildcard;
	}
	
	public ParserRule getDQualifiedNameWithWildcardRule() {
		return getDQualifiedNameWithWildcardAccess().getRule();
	}
	
	//QualifiedName:
	//	ID ('.' ID)*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return pQualifiedName;
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return tID;
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"';
	public TerminalRule getSTRINGRule() {
		return tSTRING;
	}
	
	//terminal NATURAL returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getNATURALRule() {
		return tNATURAL;
	}
	
	//terminal fragment PLAIN_TEXT:
	//	!('»' | '[');
	public TerminalRule getPLAIN_TEXTRule() {
		return tPLAIN_TEXT;
	}
	
	//terminal PLAIN_TEXT_ONLY:
	//	'«' PLAIN_TEXT* '»';
	public TerminalRule getPLAIN_TEXT_ONLYRule() {
		return tPLAIN_TEXT_ONLY;
	}
	
	//terminal PLAIN_TEXT_START:
	//	'«' PLAIN_TEXT* '[';
	public TerminalRule getPLAIN_TEXT_STARTRule() {
		return tPLAIN_TEXT_START;
	}
	
	//terminal PLAIN_TEXT_MIDDLE:
	//	']' PLAIN_TEXT* '[';
	public TerminalRule getPLAIN_TEXT_MIDDLERule() {
		return tPLAIN_TEXT_MIDDLE;
	}
	
	//terminal PLAIN_TEXT_END:
	//	']' PLAIN_TEXT* '»';
	public TerminalRule getPLAIN_TEXT_ENDRule() {
		return tPLAIN_TEXT_END;
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return tML_COMMENT;
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return tSL_COMMENT;
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return tWS;
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return tANY_OTHER;
	}
}
