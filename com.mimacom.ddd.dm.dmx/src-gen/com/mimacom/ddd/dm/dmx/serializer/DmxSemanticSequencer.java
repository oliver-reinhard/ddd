/*
 * generated by Xtext 2.17.1
 */
package com.mimacom.ddd.dm.dmx.serializer;

import com.google.inject.Inject;
import com.mimacom.ddd.dm.base.BasePackage;
import com.mimacom.ddd.dm.base.DImport;
import com.mimacom.ddd.dm.base.DMultiplicity;
import com.mimacom.ddd.dm.base.DRichText;
import com.mimacom.ddd.dm.base.DTextSegment;
import com.mimacom.ddd.dm.dmx.DmxArchetype;
import com.mimacom.ddd.dm.dmx.DmxAssignment;
import com.mimacom.ddd.dm.dmx.DmxBaseTypeSet;
import com.mimacom.ddd.dm.dmx.DmxBinaryOperation;
import com.mimacom.ddd.dm.dmx.DmxBooleanLiteral;
import com.mimacom.ddd.dm.dmx.DmxCallArguments;
import com.mimacom.ddd.dm.dmx.DmxCastExpression;
import com.mimacom.ddd.dm.dmx.DmxContextReference;
import com.mimacom.ddd.dm.dmx.DmxCorrelationVariable;
import com.mimacom.ddd.dm.dmx.DmxDecimalLiteral;
import com.mimacom.ddd.dm.dmx.DmxDetail;
import com.mimacom.ddd.dm.dmx.DmxEntity;
import com.mimacom.ddd.dm.dmx.DmxField;
import com.mimacom.ddd.dm.dmx.DmxFilter;
import com.mimacom.ddd.dm.dmx.DmxFilterParameter;
import com.mimacom.ddd.dm.dmx.DmxFilterTypeDescriptor;
import com.mimacom.ddd.dm.dmx.DmxFunctionCall;
import com.mimacom.ddd.dm.dmx.DmxIfExpression;
import com.mimacom.ddd.dm.dmx.DmxInstanceOfExpression;
import com.mimacom.ddd.dm.dmx.DmxListExpression;
import com.mimacom.ddd.dm.dmx.DmxMemberNavigation;
import com.mimacom.ddd.dm.dmx.DmxNamespace;
import com.mimacom.ddd.dm.dmx.DmxNaturalLiteral;
import com.mimacom.ddd.dm.dmx.DmxPackage;
import com.mimacom.ddd.dm.dmx.DmxPredicateWithCorrelationVariable;
import com.mimacom.ddd.dm.dmx.DmxStaticReference;
import com.mimacom.ddd.dm.dmx.DmxStringLiteral;
import com.mimacom.ddd.dm.dmx.DmxTest;
import com.mimacom.ddd.dm.dmx.DmxTestContext;
import com.mimacom.ddd.dm.dmx.DmxUnaryOperation;
import com.mimacom.ddd.dm.dmx.DmxUndefinedLiteral;
import com.mimacom.ddd.dm.dmx.services.DmxGrammarAccess;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class DmxSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private DmxGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == BasePackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case BasePackage.DIMPORT:
				sequence_DImport(context, (DImport) semanticObject); 
				return; 
			case BasePackage.DMULTIPLICITY:
				sequence_DMultiplicity(context, (DMultiplicity) semanticObject); 
				return; 
			case BasePackage.DRICH_TEXT:
				sequence_DRichText(context, (DRichText) semanticObject); 
				return; 
			case BasePackage.DTEXT_SEGMENT:
				if (rule == grammarAccess.getDmxTextEndRule()) {
					sequence_DmxTextEnd(context, (DTextSegment) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getDmxTextMiddleRule()) {
					sequence_DmxTextMiddle(context, (DTextSegment) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getDmxTextOnlyRule()) {
					sequence_DmxTextOnly(context, (DTextSegment) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getDmxTextStartRule()) {
					sequence_DmxTextStart(context, (DTextSegment) semanticObject); 
					return; 
				}
				else break;
			}
		else if (epackage == DmxPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case DmxPackage.DMX_ARCHETYPE:
				sequence_DmxArchetype(context, (DmxArchetype) semanticObject); 
				return; 
			case DmxPackage.DMX_ASSIGNMENT:
				if (rule == grammarAccess.getDmxAssignmentRule()) {
					sequence_DmxAssignment(context, (DmxAssignment) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getDExpressionRule()
						|| rule == grammarAccess.getDmxNavigableMemberReferenceRule()
						|| action == grammarAccess.getDmxNavigableMemberReferenceAccess().getDmxAssignmentPrecedingNavigationSegmentAction_1_0_0_0_0()
						|| action == grammarAccess.getDmxNavigableMemberReferenceAccess().getDmxMemberNavigationPrecedingNavigationSegmentAction_1_1_0_0_0()
						|| rule == grammarAccess.getDmxPredicateWithCorrelationVariableRule()
						|| rule == grammarAccess.getDmxOrExpressionRule()
						|| action == grammarAccess.getDmxOrExpressionAccess().getDmxBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getDmxAndExpressionRule()
						|| action == grammarAccess.getDmxAndExpressionAccess().getDmxBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getDmxEqualityExpressionRule()
						|| action == grammarAccess.getDmxEqualityExpressionAccess().getDmxBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getDmxRelationalExpressionRule()
						|| action == grammarAccess.getDmxRelationalExpressionAccess().getDmxInstanceOfExpressionExpressionAction_1_0_0_0_0()
						|| action == grammarAccess.getDmxRelationalExpressionAccess().getDmxBinaryOperationLeftOperandAction_1_1_0_0_0()
						|| rule == grammarAccess.getDmxOtherOperatorExpressionRule()
						|| action == grammarAccess.getDmxOtherOperatorExpressionAccess().getDmxBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getDmxAdditiveExpressionRule()
						|| action == grammarAccess.getDmxAdditiveExpressionAccess().getDmxBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getDmxMultiplicativeExpressionRule()
						|| action == grammarAccess.getDmxMultiplicativeExpressionAccess().getDmxBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getDmxUnaryOperationRule()
						|| rule == grammarAccess.getDmxCastExpressionRule()
						|| action == grammarAccess.getDmxCastExpressionAccess().getDmxCastExpressionTargetAction_1_0_0_0()
						|| rule == grammarAccess.getDmxPrimaryExpressionRule()
						|| rule == grammarAccess.getDmxParenthesizedExpressionRule()) {
					sequence_DmxAssignment_DmxNavigableMemberReference(context, (DmxAssignment) semanticObject); 
					return; 
				}
				else break;
			case DmxPackage.DMX_BASE_TYPE_SET:
				sequence_DmxBaseTypeSet(context, (DmxBaseTypeSet) semanticObject); 
				return; 
			case DmxPackage.DMX_BINARY_OPERATION:
				sequence_DmxAdditiveExpression_DmxAndExpression_DmxEqualityExpression_DmxMultiplicativeExpression_DmxOrExpression_DmxOtherOperatorExpression_DmxRelationalExpression(context, (DmxBinaryOperation) semanticObject); 
				return; 
			case DmxPackage.DMX_BOOLEAN_LITERAL:
				sequence_DmxBooleanLiteral(context, (DmxBooleanLiteral) semanticObject); 
				return; 
			case DmxPackage.DMX_CALL_ARGUMENTS:
				if (rule == grammarAccess.getDmxCallArgumentsRule()) {
					sequence_DmxCallArguments(context, (DmxCallArguments) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getDmxFunctionCallArgumentsRule()) {
					sequence_DmxFunctionCallArguments(context, (DmxCallArguments) semanticObject); 
					return; 
				}
				else break;
			case DmxPackage.DMX_CAST_EXPRESSION:
				sequence_DmxCastExpression(context, (DmxCastExpression) semanticObject); 
				return; 
			case DmxPackage.DMX_CONTEXT_REFERENCE:
				sequence_DmxContextReference(context, (DmxContextReference) semanticObject); 
				return; 
			case DmxPackage.DMX_CORRELATION_VARIABLE:
				sequence_DmxCorrelationVariable(context, (DmxCorrelationVariable) semanticObject); 
				return; 
			case DmxPackage.DMX_DECIMAL_LITERAL:
				sequence_DmxDecimalLiteral(context, (DmxDecimalLiteral) semanticObject); 
				return; 
			case DmxPackage.DMX_DETAIL:
				sequence_DmxComplexObject(context, (DmxDetail) semanticObject); 
				return; 
			case DmxPackage.DMX_ENTITY:
				sequence_DmxComplexObject(context, (DmxEntity) semanticObject); 
				return; 
			case DmxPackage.DMX_FIELD:
				sequence_DmxField(context, (DmxField) semanticObject); 
				return; 
			case DmxPackage.DMX_FILTER:
				sequence_DmxFilter(context, (DmxFilter) semanticObject); 
				return; 
			case DmxPackage.DMX_FILTER_PARAMETER:
				sequence_DmxFilterParameter(context, (DmxFilterParameter) semanticObject); 
				return; 
			case DmxPackage.DMX_FILTER_TYPE_DESCRIPTOR:
				sequence_DmxFilterTypeDescriptor(context, (DmxFilterTypeDescriptor) semanticObject); 
				return; 
			case DmxPackage.DMX_FUNCTION_CALL:
				sequence_DmxFunctionCall(context, (DmxFunctionCall) semanticObject); 
				return; 
			case DmxPackage.DMX_IF_EXPRESSION:
				sequence_DmxIfExpression(context, (DmxIfExpression) semanticObject); 
				return; 
			case DmxPackage.DMX_INSTANCE_OF_EXPRESSION:
				sequence_DmxRelationalExpression(context, (DmxInstanceOfExpression) semanticObject); 
				return; 
			case DmxPackage.DMX_LIST_EXPRESSION:
				if (rule == grammarAccess.getDExpressionRule()
						|| rule == grammarAccess.getDmxNavigableMemberReferenceRule()
						|| action == grammarAccess.getDmxNavigableMemberReferenceAccess().getDmxAssignmentPrecedingNavigationSegmentAction_1_0_0_0_0()
						|| action == grammarAccess.getDmxNavigableMemberReferenceAccess().getDmxMemberNavigationPrecedingNavigationSegmentAction_1_1_0_0_0()
						|| rule == grammarAccess.getDmxPredicateWithCorrelationVariableRule()
						|| rule == grammarAccess.getDmxOrExpressionRule()
						|| action == grammarAccess.getDmxOrExpressionAccess().getDmxBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getDmxAndExpressionRule()
						|| action == grammarAccess.getDmxAndExpressionAccess().getDmxBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getDmxEqualityExpressionRule()
						|| action == grammarAccess.getDmxEqualityExpressionAccess().getDmxBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getDmxRelationalExpressionRule()
						|| action == grammarAccess.getDmxRelationalExpressionAccess().getDmxInstanceOfExpressionExpressionAction_1_0_0_0_0()
						|| action == grammarAccess.getDmxRelationalExpressionAccess().getDmxBinaryOperationLeftOperandAction_1_1_0_0_0()
						|| rule == grammarAccess.getDmxOtherOperatorExpressionRule()
						|| action == grammarAccess.getDmxOtherOperatorExpressionAccess().getDmxBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getDmxAdditiveExpressionRule()
						|| action == grammarAccess.getDmxAdditiveExpressionAccess().getDmxBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getDmxMultiplicativeExpressionRule()
						|| action == grammarAccess.getDmxMultiplicativeExpressionAccess().getDmxBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getDmxUnaryOperationRule()
						|| rule == grammarAccess.getDmxCastExpressionRule()
						|| action == grammarAccess.getDmxCastExpressionAccess().getDmxCastExpressionTargetAction_1_0_0_0()
						|| rule == grammarAccess.getDmxPrimaryExpressionRule()
						|| rule == grammarAccess.getDmxParenthesizedExpressionRule()
						|| rule == grammarAccess.getDmxListExpressionRule()) {
					sequence_DmxListExpression(context, (DmxListExpression) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getDmxLiteralListExpressionRule()) {
					sequence_DmxLiteralListExpression(context, (DmxListExpression) semanticObject); 
					return; 
				}
				else break;
			case DmxPackage.DMX_MEMBER_NAVIGATION:
				sequence_DmxNavigableMemberReference(context, (DmxMemberNavigation) semanticObject); 
				return; 
			case DmxPackage.DMX_NAMESPACE:
				sequence_DmxNamespace(context, (DmxNamespace) semanticObject); 
				return; 
			case DmxPackage.DMX_NATURAL_LITERAL:
				sequence_DmxNaturalLiteral(context, (DmxNaturalLiteral) semanticObject); 
				return; 
			case DmxPackage.DMX_PREDICATE_WITH_CORRELATION_VARIABLE:
				sequence_DmxPredicateWithCorrelationVariable(context, (DmxPredicateWithCorrelationVariable) semanticObject); 
				return; 
			case DmxPackage.DMX_STATIC_REFERENCE:
				sequence_DmxStaticReference(context, (DmxStaticReference) semanticObject); 
				return; 
			case DmxPackage.DMX_STRING_LITERAL:
				sequence_DmxStringLiteral(context, (DmxStringLiteral) semanticObject); 
				return; 
			case DmxPackage.DMX_TEST:
				sequence_DmxTest(context, (DmxTest) semanticObject); 
				return; 
			case DmxPackage.DMX_TEST_CONTEXT:
				sequence_DmxTestContext(context, (DmxTestContext) semanticObject); 
				return; 
			case DmxPackage.DMX_UNARY_OPERATION:
				sequence_DmxUnaryOperation(context, (DmxUnaryOperation) semanticObject); 
				return; 
			case DmxPackage.DMX_UNDEFINED_LITERAL:
				sequence_DmxUndefinedLiteral(context, (DmxUndefinedLiteral) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     DImport returns DImport
	 *
	 * Constraint:
	 *     importedNamespace=DQualifiedNameWithWildcard
	 */
	protected void sequence_DImport(ISerializationContext context, DImport semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BasePackage.Literals.DIMPORT__IMPORTED_NAMESPACE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BasePackage.Literals.DIMPORT__IMPORTED_NAMESPACE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDImportAccess().getImportedNamespaceDQualifiedNameWithWildcardParserRuleCall_1_0(), semanticObject.getImportedNamespace());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     DMultiplicity returns DMultiplicity
	 *
	 * Constraint:
	 *     (shorthand=DMultiplicityShorthand | (minOccurs=NATURAL maxOccurs=MULTIPLICITY))
	 */
	protected void sequence_DMultiplicity(ISerializationContext context, DMultiplicity semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DExpression returns DRichText
	 *     DRichText returns DRichText
	 *     DmxNavigableMemberReference returns DRichText
	 *     DmxNavigableMemberReference.DmxAssignment_1_0_0_0_0 returns DRichText
	 *     DmxNavigableMemberReference.DmxMemberNavigation_1_1_0_0_0 returns DRichText
	 *     DmxPredicateWithCorrelationVariable returns DRichText
	 *     DmxOrExpression returns DRichText
	 *     DmxOrExpression.DmxBinaryOperation_1_0_0_0 returns DRichText
	 *     DmxAndExpression returns DRichText
	 *     DmxAndExpression.DmxBinaryOperation_1_0_0_0 returns DRichText
	 *     DmxEqualityExpression returns DRichText
	 *     DmxEqualityExpression.DmxBinaryOperation_1_0_0_0 returns DRichText
	 *     DmxRelationalExpression returns DRichText
	 *     DmxRelationalExpression.DmxInstanceOfExpression_1_0_0_0_0 returns DRichText
	 *     DmxRelationalExpression.DmxBinaryOperation_1_1_0_0_0 returns DRichText
	 *     DmxOtherOperatorExpression returns DRichText
	 *     DmxOtherOperatorExpression.DmxBinaryOperation_1_0_0_0 returns DRichText
	 *     DmxAdditiveExpression returns DRichText
	 *     DmxAdditiveExpression.DmxBinaryOperation_1_0_0_0 returns DRichText
	 *     DmxMultiplicativeExpression returns DRichText
	 *     DmxMultiplicativeExpression.DmxBinaryOperation_1_0_0_0 returns DRichText
	 *     DmxUnaryOperation returns DRichText
	 *     DmxCastExpression returns DRichText
	 *     DmxCastExpression.DmxCastExpression_1_0_0_0 returns DRichText
	 *     DmxPrimaryExpression returns DRichText
	 *     DmxParenthesizedExpression returns DRichText
	 *
	 * Constraint:
	 *     (segments+=DmxTextOnly | (segments+=DmxTextStart segments+=DExpression (segments+=DmxTextMiddle segments+=DExpression)* segments+=DmxTextEnd))
	 */
	protected void sequence_DRichText(ISerializationContext context, DRichText semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DExpression returns DmxBinaryOperation
	 *     DmxNavigableMemberReference returns DmxBinaryOperation
	 *     DmxNavigableMemberReference.DmxAssignment_1_0_0_0_0 returns DmxBinaryOperation
	 *     DmxNavigableMemberReference.DmxMemberNavigation_1_1_0_0_0 returns DmxBinaryOperation
	 *     DmxPredicateWithCorrelationVariable returns DmxBinaryOperation
	 *     DmxOrExpression returns DmxBinaryOperation
	 *     DmxOrExpression.DmxBinaryOperation_1_0_0_0 returns DmxBinaryOperation
	 *     DmxAndExpression returns DmxBinaryOperation
	 *     DmxAndExpression.DmxBinaryOperation_1_0_0_0 returns DmxBinaryOperation
	 *     DmxEqualityExpression returns DmxBinaryOperation
	 *     DmxEqualityExpression.DmxBinaryOperation_1_0_0_0 returns DmxBinaryOperation
	 *     DmxRelationalExpression returns DmxBinaryOperation
	 *     DmxRelationalExpression.DmxInstanceOfExpression_1_0_0_0_0 returns DmxBinaryOperation
	 *     DmxRelationalExpression.DmxBinaryOperation_1_1_0_0_0 returns DmxBinaryOperation
	 *     DmxOtherOperatorExpression returns DmxBinaryOperation
	 *     DmxOtherOperatorExpression.DmxBinaryOperation_1_0_0_0 returns DmxBinaryOperation
	 *     DmxAdditiveExpression returns DmxBinaryOperation
	 *     DmxAdditiveExpression.DmxBinaryOperation_1_0_0_0 returns DmxBinaryOperation
	 *     DmxMultiplicativeExpression returns DmxBinaryOperation
	 *     DmxMultiplicativeExpression.DmxBinaryOperation_1_0_0_0 returns DmxBinaryOperation
	 *     DmxUnaryOperation returns DmxBinaryOperation
	 *     DmxCastExpression returns DmxBinaryOperation
	 *     DmxCastExpression.DmxCastExpression_1_0_0_0 returns DmxBinaryOperation
	 *     DmxPrimaryExpression returns DmxBinaryOperation
	 *     DmxParenthesizedExpression returns DmxBinaryOperation
	 *
	 * Constraint:
	 *     (
	 *         (leftOperand=DmxOrExpression_DmxBinaryOperation_1_0_0_0 operator=DmxOpOr rightOperand=DmxAndExpression) | 
	 *         (leftOperand=DmxAndExpression_DmxBinaryOperation_1_0_0_0 operator=DmxOpAnd rightOperand=DmxEqualityExpression) | 
	 *         (leftOperand=DmxEqualityExpression_DmxBinaryOperation_1_0_0_0 operator=DmxOpEquality rightOperand=DmxRelationalExpression) | 
	 *         (leftOperand=DmxRelationalExpression_DmxBinaryOperation_1_1_0_0_0 operator=OpCompare rightOperand=DmxOtherOperatorExpression) | 
	 *         (leftOperand=DmxOtherOperatorExpression_DmxBinaryOperation_1_0_0_0 operator=OpOther rightOperand=DmxAdditiveExpression) | 
	 *         (leftOperand=DmxAdditiveExpression_DmxBinaryOperation_1_0_0_0 operator=OpAdd rightOperand=DmxMultiplicativeExpression) | 
	 *         (leftOperand=DmxMultiplicativeExpression_DmxBinaryOperation_1_0_0_0 operator=OpMulti rightOperand=DmxUnaryOperation)
	 *     )
	 */
	protected void sequence_DmxAdditiveExpression_DmxAndExpression_DmxEqualityExpression_DmxMultiplicativeExpression_DmxOrExpression_DmxOtherOperatorExpression_DmxRelationalExpression(ISerializationContext context, DmxBinaryOperation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DmxArchetype returns DmxArchetype
	 *
	 * Constraint:
	 *     (name=ID baseType=DmxBaseType description=DRichText?)
	 */
	protected void sequence_DmxArchetype(ISerializationContext context, DmxArchetype semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DmxAssignment returns DmxAssignment
	 *
	 * Constraint:
	 *     (assignToMember=[DNavigableMember|ID] value=DmxOrExpression)
	 */
	protected void sequence_DmxAssignment(ISerializationContext context, DmxAssignment semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DmxPackage.Literals.DMX_ASSIGNMENT__ASSIGN_TO_MEMBER) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DmxPackage.Literals.DMX_ASSIGNMENT__ASSIGN_TO_MEMBER));
			if (transientValues.isValueTransient(semanticObject, DmxPackage.Literals.DMX_ASSIGNMENT__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DmxPackage.Literals.DMX_ASSIGNMENT__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDmxAssignmentAccess().getAssignToMemberDNavigableMemberIDTerminalRuleCall_1_0_1(), semanticObject.eGet(DmxPackage.Literals.DMX_ASSIGNMENT__ASSIGN_TO_MEMBER, false));
		feeder.accept(grammarAccess.getDmxAssignmentAccess().getValueDmxOrExpressionParserRuleCall_3_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     DExpression returns DmxAssignment
	 *     DmxNavigableMemberReference returns DmxAssignment
	 *     DmxNavigableMemberReference.DmxAssignment_1_0_0_0_0 returns DmxAssignment
	 *     DmxNavigableMemberReference.DmxMemberNavigation_1_1_0_0_0 returns DmxAssignment
	 *     DmxPredicateWithCorrelationVariable returns DmxAssignment
	 *     DmxOrExpression returns DmxAssignment
	 *     DmxOrExpression.DmxBinaryOperation_1_0_0_0 returns DmxAssignment
	 *     DmxAndExpression returns DmxAssignment
	 *     DmxAndExpression.DmxBinaryOperation_1_0_0_0 returns DmxAssignment
	 *     DmxEqualityExpression returns DmxAssignment
	 *     DmxEqualityExpression.DmxBinaryOperation_1_0_0_0 returns DmxAssignment
	 *     DmxRelationalExpression returns DmxAssignment
	 *     DmxRelationalExpression.DmxInstanceOfExpression_1_0_0_0_0 returns DmxAssignment
	 *     DmxRelationalExpression.DmxBinaryOperation_1_1_0_0_0 returns DmxAssignment
	 *     DmxOtherOperatorExpression returns DmxAssignment
	 *     DmxOtherOperatorExpression.DmxBinaryOperation_1_0_0_0 returns DmxAssignment
	 *     DmxAdditiveExpression returns DmxAssignment
	 *     DmxAdditiveExpression.DmxBinaryOperation_1_0_0_0 returns DmxAssignment
	 *     DmxMultiplicativeExpression returns DmxAssignment
	 *     DmxMultiplicativeExpression.DmxBinaryOperation_1_0_0_0 returns DmxAssignment
	 *     DmxUnaryOperation returns DmxAssignment
	 *     DmxCastExpression returns DmxAssignment
	 *     DmxCastExpression.DmxCastExpression_1_0_0_0 returns DmxAssignment
	 *     DmxPrimaryExpression returns DmxAssignment
	 *     DmxParenthesizedExpression returns DmxAssignment
	 *
	 * Constraint:
	 *     (
	 *         (precedingNavigationSegment=DmxNavigableMemberReference_DmxAssignment_1_0_0_0_0 assignToMember=[DNavigableMember|ID] value=DmxOrExpression) | 
	 *         (assignToMember=[DNavigableMember|ID] value=DmxOrExpression)
	 *     )
	 */
	protected void sequence_DmxAssignment_DmxNavigableMemberReference(ISerializationContext context, DmxAssignment semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DmxBaseTypeSet returns DmxBaseTypeSet
	 *
	 * Constraint:
	 *     (name=ID members+=DmxBaseType members+=DmxBaseType+)
	 */
	protected void sequence_DmxBaseTypeSet(ISerializationContext context, DmxBaseTypeSet semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DExpression returns DmxBooleanLiteral
	 *     DmxNavigableMemberReference returns DmxBooleanLiteral
	 *     DmxNavigableMemberReference.DmxAssignment_1_0_0_0_0 returns DmxBooleanLiteral
	 *     DmxNavigableMemberReference.DmxMemberNavigation_1_1_0_0_0 returns DmxBooleanLiteral
	 *     DmxPredicateWithCorrelationVariable returns DmxBooleanLiteral
	 *     DmxOrExpression returns DmxBooleanLiteral
	 *     DmxOrExpression.DmxBinaryOperation_1_0_0_0 returns DmxBooleanLiteral
	 *     DmxAndExpression returns DmxBooleanLiteral
	 *     DmxAndExpression.DmxBinaryOperation_1_0_0_0 returns DmxBooleanLiteral
	 *     DmxEqualityExpression returns DmxBooleanLiteral
	 *     DmxEqualityExpression.DmxBinaryOperation_1_0_0_0 returns DmxBooleanLiteral
	 *     DmxRelationalExpression returns DmxBooleanLiteral
	 *     DmxRelationalExpression.DmxInstanceOfExpression_1_0_0_0_0 returns DmxBooleanLiteral
	 *     DmxRelationalExpression.DmxBinaryOperation_1_1_0_0_0 returns DmxBooleanLiteral
	 *     DmxOtherOperatorExpression returns DmxBooleanLiteral
	 *     DmxOtherOperatorExpression.DmxBinaryOperation_1_0_0_0 returns DmxBooleanLiteral
	 *     DmxAdditiveExpression returns DmxBooleanLiteral
	 *     DmxAdditiveExpression.DmxBinaryOperation_1_0_0_0 returns DmxBooleanLiteral
	 *     DmxMultiplicativeExpression returns DmxBooleanLiteral
	 *     DmxMultiplicativeExpression.DmxBinaryOperation_1_0_0_0 returns DmxBooleanLiteral
	 *     DmxUnaryOperation returns DmxBooleanLiteral
	 *     DmxCastExpression returns DmxBooleanLiteral
	 *     DmxCastExpression.DmxCastExpression_1_0_0_0 returns DmxBooleanLiteral
	 *     DmxPrimaryExpression returns DmxBooleanLiteral
	 *     DmxLiteralExpression returns DmxBooleanLiteral
	 *     DmxParenthesizedExpression returns DmxBooleanLiteral
	 *     DmxBooleanLiteral returns DmxBooleanLiteral
	 *
	 * Constraint:
	 *     (value?='TRUE' | value?='true')?
	 */
	protected void sequence_DmxBooleanLiteral(ISerializationContext context, DmxBooleanLiteral semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DmxCallArguments returns DmxCallArguments
	 *
	 * Constraint:
	 *     (arguments+=DmxPredicateWithCorrelationVariable arguments+=DmxPredicateWithCorrelationVariable*)?
	 */
	protected void sequence_DmxCallArguments(ISerializationContext context, DmxCallArguments semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DExpression returns DmxCastExpression
	 *     DmxNavigableMemberReference returns DmxCastExpression
	 *     DmxNavigableMemberReference.DmxAssignment_1_0_0_0_0 returns DmxCastExpression
	 *     DmxNavigableMemberReference.DmxMemberNavigation_1_1_0_0_0 returns DmxCastExpression
	 *     DmxPredicateWithCorrelationVariable returns DmxCastExpression
	 *     DmxOrExpression returns DmxCastExpression
	 *     DmxOrExpression.DmxBinaryOperation_1_0_0_0 returns DmxCastExpression
	 *     DmxAndExpression returns DmxCastExpression
	 *     DmxAndExpression.DmxBinaryOperation_1_0_0_0 returns DmxCastExpression
	 *     DmxEqualityExpression returns DmxCastExpression
	 *     DmxEqualityExpression.DmxBinaryOperation_1_0_0_0 returns DmxCastExpression
	 *     DmxRelationalExpression returns DmxCastExpression
	 *     DmxRelationalExpression.DmxInstanceOfExpression_1_0_0_0_0 returns DmxCastExpression
	 *     DmxRelationalExpression.DmxBinaryOperation_1_1_0_0_0 returns DmxCastExpression
	 *     DmxOtherOperatorExpression returns DmxCastExpression
	 *     DmxOtherOperatorExpression.DmxBinaryOperation_1_0_0_0 returns DmxCastExpression
	 *     DmxAdditiveExpression returns DmxCastExpression
	 *     DmxAdditiveExpression.DmxBinaryOperation_1_0_0_0 returns DmxCastExpression
	 *     DmxMultiplicativeExpression returns DmxCastExpression
	 *     DmxMultiplicativeExpression.DmxBinaryOperation_1_0_0_0 returns DmxCastExpression
	 *     DmxUnaryOperation returns DmxCastExpression
	 *     DmxCastExpression returns DmxCastExpression
	 *     DmxCastExpression.DmxCastExpression_1_0_0_0 returns DmxCastExpression
	 *     DmxPrimaryExpression returns DmxCastExpression
	 *     DmxParenthesizedExpression returns DmxCastExpression
	 *
	 * Constraint:
	 *     (target=DmxCastExpression_DmxCastExpression_1_0_0_0 type=[DType|ID])
	 */
	protected void sequence_DmxCastExpression(ISerializationContext context, DmxCastExpression semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DmxPackage.Literals.DMX_CAST_EXPRESSION__TARGET) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DmxPackage.Literals.DMX_CAST_EXPRESSION__TARGET));
			if (transientValues.isValueTransient(semanticObject, DmxPackage.Literals.DMX_CAST_EXPRESSION__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DmxPackage.Literals.DMX_CAST_EXPRESSION__TYPE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDmxCastExpressionAccess().getDmxCastExpressionTargetAction_1_0_0_0(), semanticObject.getTarget());
		feeder.accept(grammarAccess.getDmxCastExpressionAccess().getTypeDTypeIDTerminalRuleCall_1_1_0_1(), semanticObject.eGet(DmxPackage.Literals.DMX_CAST_EXPRESSION__TYPE, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     DExpression returns DmxDetail
	 *     DmxNavigableMemberReference returns DmxDetail
	 *     DmxNavigableMemberReference.DmxAssignment_1_0_0_0_0 returns DmxDetail
	 *     DmxNavigableMemberReference.DmxMemberNavigation_1_1_0_0_0 returns DmxDetail
	 *     DmxPredicateWithCorrelationVariable returns DmxDetail
	 *     DmxOrExpression returns DmxDetail
	 *     DmxOrExpression.DmxBinaryOperation_1_0_0_0 returns DmxDetail
	 *     DmxAndExpression returns DmxDetail
	 *     DmxAndExpression.DmxBinaryOperation_1_0_0_0 returns DmxDetail
	 *     DmxEqualityExpression returns DmxDetail
	 *     DmxEqualityExpression.DmxBinaryOperation_1_0_0_0 returns DmxDetail
	 *     DmxRelationalExpression returns DmxDetail
	 *     DmxRelationalExpression.DmxInstanceOfExpression_1_0_0_0_0 returns DmxDetail
	 *     DmxRelationalExpression.DmxBinaryOperation_1_1_0_0_0 returns DmxDetail
	 *     DmxOtherOperatorExpression returns DmxDetail
	 *     DmxOtherOperatorExpression.DmxBinaryOperation_1_0_0_0 returns DmxDetail
	 *     DmxAdditiveExpression returns DmxDetail
	 *     DmxAdditiveExpression.DmxBinaryOperation_1_0_0_0 returns DmxDetail
	 *     DmxMultiplicativeExpression returns DmxDetail
	 *     DmxMultiplicativeExpression.DmxBinaryOperation_1_0_0_0 returns DmxDetail
	 *     DmxUnaryOperation returns DmxDetail
	 *     DmxCastExpression returns DmxDetail
	 *     DmxCastExpression.DmxCastExpression_1_0_0_0 returns DmxDetail
	 *     DmxPrimaryExpression returns DmxDetail
	 *     DmxLiteralExpression returns DmxDetail
	 *     DmxParenthesizedExpression returns DmxDetail
	 *     DmxDetail returns DmxDetail
	 *
	 * Constraint:
	 *     (type=[DComplexType|ID] fields+=DmxField*)
	 */
	protected void sequence_DmxComplexObject(ISerializationContext context, DmxDetail semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DExpression returns DmxEntity
	 *     DmxNavigableMemberReference returns DmxEntity
	 *     DmxNavigableMemberReference.DmxAssignment_1_0_0_0_0 returns DmxEntity
	 *     DmxNavigableMemberReference.DmxMemberNavigation_1_1_0_0_0 returns DmxEntity
	 *     DmxPredicateWithCorrelationVariable returns DmxEntity
	 *     DmxOrExpression returns DmxEntity
	 *     DmxOrExpression.DmxBinaryOperation_1_0_0_0 returns DmxEntity
	 *     DmxAndExpression returns DmxEntity
	 *     DmxAndExpression.DmxBinaryOperation_1_0_0_0 returns DmxEntity
	 *     DmxEqualityExpression returns DmxEntity
	 *     DmxEqualityExpression.DmxBinaryOperation_1_0_0_0 returns DmxEntity
	 *     DmxRelationalExpression returns DmxEntity
	 *     DmxRelationalExpression.DmxInstanceOfExpression_1_0_0_0_0 returns DmxEntity
	 *     DmxRelationalExpression.DmxBinaryOperation_1_1_0_0_0 returns DmxEntity
	 *     DmxOtherOperatorExpression returns DmxEntity
	 *     DmxOtherOperatorExpression.DmxBinaryOperation_1_0_0_0 returns DmxEntity
	 *     DmxAdditiveExpression returns DmxEntity
	 *     DmxAdditiveExpression.DmxBinaryOperation_1_0_0_0 returns DmxEntity
	 *     DmxMultiplicativeExpression returns DmxEntity
	 *     DmxMultiplicativeExpression.DmxBinaryOperation_1_0_0_0 returns DmxEntity
	 *     DmxUnaryOperation returns DmxEntity
	 *     DmxCastExpression returns DmxEntity
	 *     DmxCastExpression.DmxCastExpression_1_0_0_0 returns DmxEntity
	 *     DmxPrimaryExpression returns DmxEntity
	 *     DmxLiteralExpression returns DmxEntity
	 *     DmxParenthesizedExpression returns DmxEntity
	 *     DmxEntity returns DmxEntity
	 *
	 * Constraint:
	 *     (type=[DComplexType|ID] fields+=DmxField*)
	 */
	protected void sequence_DmxComplexObject(ISerializationContext context, DmxEntity semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DExpression returns DmxContextReference
	 *     DmxNavigableMemberReference returns DmxContextReference
	 *     DmxNavigableMemberReference.DmxAssignment_1_0_0_0_0 returns DmxContextReference
	 *     DmxNavigableMemberReference.DmxMemberNavigation_1_1_0_0_0 returns DmxContextReference
	 *     DmxPredicateWithCorrelationVariable returns DmxContextReference
	 *     DmxOrExpression returns DmxContextReference
	 *     DmxOrExpression.DmxBinaryOperation_1_0_0_0 returns DmxContextReference
	 *     DmxAndExpression returns DmxContextReference
	 *     DmxAndExpression.DmxBinaryOperation_1_0_0_0 returns DmxContextReference
	 *     DmxEqualityExpression returns DmxContextReference
	 *     DmxEqualityExpression.DmxBinaryOperation_1_0_0_0 returns DmxContextReference
	 *     DmxRelationalExpression returns DmxContextReference
	 *     DmxRelationalExpression.DmxInstanceOfExpression_1_0_0_0_0 returns DmxContextReference
	 *     DmxRelationalExpression.DmxBinaryOperation_1_1_0_0_0 returns DmxContextReference
	 *     DmxOtherOperatorExpression returns DmxContextReference
	 *     DmxOtherOperatorExpression.DmxBinaryOperation_1_0_0_0 returns DmxContextReference
	 *     DmxAdditiveExpression returns DmxContextReference
	 *     DmxAdditiveExpression.DmxBinaryOperation_1_0_0_0 returns DmxContextReference
	 *     DmxMultiplicativeExpression returns DmxContextReference
	 *     DmxMultiplicativeExpression.DmxBinaryOperation_1_0_0_0 returns DmxContextReference
	 *     DmxUnaryOperation returns DmxContextReference
	 *     DmxCastExpression returns DmxContextReference
	 *     DmxCastExpression.DmxCastExpression_1_0_0_0 returns DmxContextReference
	 *     DmxPrimaryExpression returns DmxContextReference
	 *     DmxParenthesizedExpression returns DmxContextReference
	 *     DmxContextReference returns DmxContextReference
	 *
	 * Constraint:
	 *     (target=[DNamedElement|ID] (before?='@before' | all?='all')?)
	 */
	protected void sequence_DmxContextReference(ISerializationContext context, DmxContextReference semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DmxCorrelationVariable returns DmxCorrelationVariable
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_DmxCorrelationVariable(ISerializationContext context, DmxCorrelationVariable semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BasePackage.Literals.DNAMED_ELEMENT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BasePackage.Literals.DNAMED_ELEMENT__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDmxCorrelationVariableAccess().getNameIDTerminalRuleCall_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     DExpression returns DmxDecimalLiteral
	 *     DmxNavigableMemberReference returns DmxDecimalLiteral
	 *     DmxNavigableMemberReference.DmxAssignment_1_0_0_0_0 returns DmxDecimalLiteral
	 *     DmxNavigableMemberReference.DmxMemberNavigation_1_1_0_0_0 returns DmxDecimalLiteral
	 *     DmxPredicateWithCorrelationVariable returns DmxDecimalLiteral
	 *     DmxOrExpression returns DmxDecimalLiteral
	 *     DmxOrExpression.DmxBinaryOperation_1_0_0_0 returns DmxDecimalLiteral
	 *     DmxAndExpression returns DmxDecimalLiteral
	 *     DmxAndExpression.DmxBinaryOperation_1_0_0_0 returns DmxDecimalLiteral
	 *     DmxEqualityExpression returns DmxDecimalLiteral
	 *     DmxEqualityExpression.DmxBinaryOperation_1_0_0_0 returns DmxDecimalLiteral
	 *     DmxRelationalExpression returns DmxDecimalLiteral
	 *     DmxRelationalExpression.DmxInstanceOfExpression_1_0_0_0_0 returns DmxDecimalLiteral
	 *     DmxRelationalExpression.DmxBinaryOperation_1_1_0_0_0 returns DmxDecimalLiteral
	 *     DmxOtherOperatorExpression returns DmxDecimalLiteral
	 *     DmxOtherOperatorExpression.DmxBinaryOperation_1_0_0_0 returns DmxDecimalLiteral
	 *     DmxAdditiveExpression returns DmxDecimalLiteral
	 *     DmxAdditiveExpression.DmxBinaryOperation_1_0_0_0 returns DmxDecimalLiteral
	 *     DmxMultiplicativeExpression returns DmxDecimalLiteral
	 *     DmxMultiplicativeExpression.DmxBinaryOperation_1_0_0_0 returns DmxDecimalLiteral
	 *     DmxUnaryOperation returns DmxDecimalLiteral
	 *     DmxCastExpression returns DmxDecimalLiteral
	 *     DmxCastExpression.DmxCastExpression_1_0_0_0 returns DmxDecimalLiteral
	 *     DmxPrimaryExpression returns DmxDecimalLiteral
	 *     DmxLiteralExpression returns DmxDecimalLiteral
	 *     DmxParenthesizedExpression returns DmxDecimalLiteral
	 *     DmxDecimalLiteral returns DmxDecimalLiteral
	 *
	 * Constraint:
	 *     value=DECIMAL
	 */
	protected void sequence_DmxDecimalLiteral(ISerializationContext context, DmxDecimalLiteral semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DmxPackage.Literals.DMX_DECIMAL_LITERAL__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DmxPackage.Literals.DMX_DECIMAL_LITERAL__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDmxDecimalLiteralAccess().getValueDECIMALParserRuleCall_1_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     DmxField returns DmxField
	 *
	 * Constraint:
	 *     (feature=[DFeature|ID] value=DExpression)
	 */
	protected void sequence_DmxField(ISerializationContext context, DmxField semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DmxPackage.Literals.DMX_FIELD__FEATURE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DmxPackage.Literals.DMX_FIELD__FEATURE));
			if (transientValues.isValueTransient(semanticObject, DmxPackage.Literals.DMX_FIELD__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DmxPackage.Literals.DMX_FIELD__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDmxFieldAccess().getFeatureDFeatureIDTerminalRuleCall_0_0_1(), semanticObject.eGet(DmxPackage.Literals.DMX_FIELD__FEATURE, false));
		feeder.accept(grammarAccess.getDmxFieldAccess().getValueDExpressionParserRuleCall_2_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     DmxFilterParameter returns DmxFilterParameter
	 *
	 * Constraint:
	 *     (name=ID typeDesc=DmxFilterTypeDescriptor)
	 */
	protected void sequence_DmxFilterParameter(ISerializationContext context, DmxFilterParameter semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DmxPackage.Literals.DMX_FILTER_PARAMETER__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DmxPackage.Literals.DMX_FILTER_PARAMETER__NAME));
			if (transientValues.isValueTransient(semanticObject, DmxPackage.Literals.DMX_FILTER_PARAMETER__TYPE_DESC) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DmxPackage.Literals.DMX_FILTER_PARAMETER__TYPE_DESC));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDmxFilterParameterAccess().getNameIDTerminalRuleCall_0_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getDmxFilterParameterAccess().getTypeDescDmxFilterTypeDescriptorParserRuleCall_2_0(), semanticObject.getTypeDesc());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     DmxFilterTypeDescriptor returns DmxFilterTypeDescriptor
	 *
	 * Constraint:
	 *     ((single=DmxBaseType | multiple=[DmxBaseTypeSet|ID]) collection?='*'?)
	 */
	protected void sequence_DmxFilterTypeDescriptor(ISerializationContext context, DmxFilterTypeDescriptor semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DmxFilter returns DmxFilter
	 *
	 * Constraint:
	 *     (name=ID (parameters+=DmxFilterParameter parameters+=DmxFilterParameter*)? typeDesc=DmxFilterTypeDescriptor withTypeSet=DmxBaseTypeSet?)
	 */
	protected void sequence_DmxFilter(ISerializationContext context, DmxFilter semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DmxFunctionCallArguments returns DmxCallArguments
	 *
	 * Constraint:
	 *     (arguments+=DExpression arguments+=DExpression*)?
	 */
	protected void sequence_DmxFunctionCallArguments(ISerializationContext context, DmxCallArguments semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DExpression returns DmxFunctionCall
	 *     DmxNavigableMemberReference returns DmxFunctionCall
	 *     DmxNavigableMemberReference.DmxAssignment_1_0_0_0_0 returns DmxFunctionCall
	 *     DmxNavigableMemberReference.DmxMemberNavigation_1_1_0_0_0 returns DmxFunctionCall
	 *     DmxPredicateWithCorrelationVariable returns DmxFunctionCall
	 *     DmxOrExpression returns DmxFunctionCall
	 *     DmxOrExpression.DmxBinaryOperation_1_0_0_0 returns DmxFunctionCall
	 *     DmxAndExpression returns DmxFunctionCall
	 *     DmxAndExpression.DmxBinaryOperation_1_0_0_0 returns DmxFunctionCall
	 *     DmxEqualityExpression returns DmxFunctionCall
	 *     DmxEqualityExpression.DmxBinaryOperation_1_0_0_0 returns DmxFunctionCall
	 *     DmxRelationalExpression returns DmxFunctionCall
	 *     DmxRelationalExpression.DmxInstanceOfExpression_1_0_0_0_0 returns DmxFunctionCall
	 *     DmxRelationalExpression.DmxBinaryOperation_1_1_0_0_0 returns DmxFunctionCall
	 *     DmxOtherOperatorExpression returns DmxFunctionCall
	 *     DmxOtherOperatorExpression.DmxBinaryOperation_1_0_0_0 returns DmxFunctionCall
	 *     DmxAdditiveExpression returns DmxFunctionCall
	 *     DmxAdditiveExpression.DmxBinaryOperation_1_0_0_0 returns DmxFunctionCall
	 *     DmxMultiplicativeExpression returns DmxFunctionCall
	 *     DmxMultiplicativeExpression.DmxBinaryOperation_1_0_0_0 returns DmxFunctionCall
	 *     DmxUnaryOperation returns DmxFunctionCall
	 *     DmxCastExpression returns DmxFunctionCall
	 *     DmxCastExpression.DmxCastExpression_1_0_0_0 returns DmxFunctionCall
	 *     DmxPrimaryExpression returns DmxFunctionCall
	 *     DmxParenthesizedExpression returns DmxFunctionCall
	 *     DmxFunctionCall returns DmxFunctionCall
	 *
	 * Constraint:
	 *     (function=[DmxFilter|ID] callArguments=DmxFunctionCallArguments)
	 */
	protected void sequence_DmxFunctionCall(ISerializationContext context, DmxFunctionCall semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DmxPackage.Literals.DMX_FUNCTION_CALL__FUNCTION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DmxPackage.Literals.DMX_FUNCTION_CALL__FUNCTION));
			if (transientValues.isValueTransient(semanticObject, DmxPackage.Literals.DMX_FUNCTION_CALL__CALL_ARGUMENTS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DmxPackage.Literals.DMX_FUNCTION_CALL__CALL_ARGUMENTS));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDmxFunctionCallAccess().getFunctionDmxFilterIDTerminalRuleCall_1_0_1(), semanticObject.eGet(DmxPackage.Literals.DMX_FUNCTION_CALL__FUNCTION, false));
		feeder.accept(grammarAccess.getDmxFunctionCallAccess().getCallArgumentsDmxFunctionCallArgumentsParserRuleCall_3_0(), semanticObject.getCallArguments());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     DExpression returns DmxIfExpression
	 *     DmxNavigableMemberReference returns DmxIfExpression
	 *     DmxNavigableMemberReference.DmxAssignment_1_0_0_0_0 returns DmxIfExpression
	 *     DmxNavigableMemberReference.DmxMemberNavigation_1_1_0_0_0 returns DmxIfExpression
	 *     DmxPredicateWithCorrelationVariable returns DmxIfExpression
	 *     DmxOrExpression returns DmxIfExpression
	 *     DmxOrExpression.DmxBinaryOperation_1_0_0_0 returns DmxIfExpression
	 *     DmxAndExpression returns DmxIfExpression
	 *     DmxAndExpression.DmxBinaryOperation_1_0_0_0 returns DmxIfExpression
	 *     DmxEqualityExpression returns DmxIfExpression
	 *     DmxEqualityExpression.DmxBinaryOperation_1_0_0_0 returns DmxIfExpression
	 *     DmxRelationalExpression returns DmxIfExpression
	 *     DmxRelationalExpression.DmxInstanceOfExpression_1_0_0_0_0 returns DmxIfExpression
	 *     DmxRelationalExpression.DmxBinaryOperation_1_1_0_0_0 returns DmxIfExpression
	 *     DmxOtherOperatorExpression returns DmxIfExpression
	 *     DmxOtherOperatorExpression.DmxBinaryOperation_1_0_0_0 returns DmxIfExpression
	 *     DmxAdditiveExpression returns DmxIfExpression
	 *     DmxAdditiveExpression.DmxBinaryOperation_1_0_0_0 returns DmxIfExpression
	 *     DmxMultiplicativeExpression returns DmxIfExpression
	 *     DmxMultiplicativeExpression.DmxBinaryOperation_1_0_0_0 returns DmxIfExpression
	 *     DmxUnaryOperation returns DmxIfExpression
	 *     DmxCastExpression returns DmxIfExpression
	 *     DmxCastExpression.DmxCastExpression_1_0_0_0 returns DmxIfExpression
	 *     DmxPrimaryExpression returns DmxIfExpression
	 *     DmxParenthesizedExpression returns DmxIfExpression
	 *     DmxIfExpression returns DmxIfExpression
	 *
	 * Constraint:
	 *     (if=DExpression then=DExpression else=DExpression?)
	 */
	protected void sequence_DmxIfExpression(ISerializationContext context, DmxIfExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DExpression returns DmxListExpression
	 *     DmxNavigableMemberReference returns DmxListExpression
	 *     DmxNavigableMemberReference.DmxAssignment_1_0_0_0_0 returns DmxListExpression
	 *     DmxNavigableMemberReference.DmxMemberNavigation_1_1_0_0_0 returns DmxListExpression
	 *     DmxPredicateWithCorrelationVariable returns DmxListExpression
	 *     DmxOrExpression returns DmxListExpression
	 *     DmxOrExpression.DmxBinaryOperation_1_0_0_0 returns DmxListExpression
	 *     DmxAndExpression returns DmxListExpression
	 *     DmxAndExpression.DmxBinaryOperation_1_0_0_0 returns DmxListExpression
	 *     DmxEqualityExpression returns DmxListExpression
	 *     DmxEqualityExpression.DmxBinaryOperation_1_0_0_0 returns DmxListExpression
	 *     DmxRelationalExpression returns DmxListExpression
	 *     DmxRelationalExpression.DmxInstanceOfExpression_1_0_0_0_0 returns DmxListExpression
	 *     DmxRelationalExpression.DmxBinaryOperation_1_1_0_0_0 returns DmxListExpression
	 *     DmxOtherOperatorExpression returns DmxListExpression
	 *     DmxOtherOperatorExpression.DmxBinaryOperation_1_0_0_0 returns DmxListExpression
	 *     DmxAdditiveExpression returns DmxListExpression
	 *     DmxAdditiveExpression.DmxBinaryOperation_1_0_0_0 returns DmxListExpression
	 *     DmxMultiplicativeExpression returns DmxListExpression
	 *     DmxMultiplicativeExpression.DmxBinaryOperation_1_0_0_0 returns DmxListExpression
	 *     DmxUnaryOperation returns DmxListExpression
	 *     DmxCastExpression returns DmxListExpression
	 *     DmxCastExpression.DmxCastExpression_1_0_0_0 returns DmxListExpression
	 *     DmxPrimaryExpression returns DmxListExpression
	 *     DmxParenthesizedExpression returns DmxListExpression
	 *     DmxListExpression returns DmxListExpression
	 *
	 * Constraint:
	 *     (elements+=DExpression elements+=DExpression*)?
	 */
	protected void sequence_DmxListExpression(ISerializationContext context, DmxListExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DmxLiteralListExpression returns DmxListExpression
	 *
	 * Constraint:
	 *     (elements+=DmxLiteralExpression elements+=DmxLiteralExpression*)?
	 */
	protected void sequence_DmxLiteralListExpression(ISerializationContext context, DmxListExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DmxNamespace returns DmxNamespace
	 *
	 * Constraint:
	 *     (imports+=DImport* name=DQualifiedName types+=DmxArchetype* filters+=DmxFilter* tests+=DmxTest*)
	 */
	protected void sequence_DmxNamespace(ISerializationContext context, DmxNamespace semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DExpression returns DmxNaturalLiteral
	 *     DmxNavigableMemberReference returns DmxNaturalLiteral
	 *     DmxNavigableMemberReference.DmxAssignment_1_0_0_0_0 returns DmxNaturalLiteral
	 *     DmxNavigableMemberReference.DmxMemberNavigation_1_1_0_0_0 returns DmxNaturalLiteral
	 *     DmxPredicateWithCorrelationVariable returns DmxNaturalLiteral
	 *     DmxOrExpression returns DmxNaturalLiteral
	 *     DmxOrExpression.DmxBinaryOperation_1_0_0_0 returns DmxNaturalLiteral
	 *     DmxAndExpression returns DmxNaturalLiteral
	 *     DmxAndExpression.DmxBinaryOperation_1_0_0_0 returns DmxNaturalLiteral
	 *     DmxEqualityExpression returns DmxNaturalLiteral
	 *     DmxEqualityExpression.DmxBinaryOperation_1_0_0_0 returns DmxNaturalLiteral
	 *     DmxRelationalExpression returns DmxNaturalLiteral
	 *     DmxRelationalExpression.DmxInstanceOfExpression_1_0_0_0_0 returns DmxNaturalLiteral
	 *     DmxRelationalExpression.DmxBinaryOperation_1_1_0_0_0 returns DmxNaturalLiteral
	 *     DmxOtherOperatorExpression returns DmxNaturalLiteral
	 *     DmxOtherOperatorExpression.DmxBinaryOperation_1_0_0_0 returns DmxNaturalLiteral
	 *     DmxAdditiveExpression returns DmxNaturalLiteral
	 *     DmxAdditiveExpression.DmxBinaryOperation_1_0_0_0 returns DmxNaturalLiteral
	 *     DmxMultiplicativeExpression returns DmxNaturalLiteral
	 *     DmxMultiplicativeExpression.DmxBinaryOperation_1_0_0_0 returns DmxNaturalLiteral
	 *     DmxUnaryOperation returns DmxNaturalLiteral
	 *     DmxCastExpression returns DmxNaturalLiteral
	 *     DmxCastExpression.DmxCastExpression_1_0_0_0 returns DmxNaturalLiteral
	 *     DmxPrimaryExpression returns DmxNaturalLiteral
	 *     DmxLiteralExpression returns DmxNaturalLiteral
	 *     DmxParenthesizedExpression returns DmxNaturalLiteral
	 *     DmxNaturalLiteral returns DmxNaturalLiteral
	 *
	 * Constraint:
	 *     value=NATURAL
	 */
	protected void sequence_DmxNaturalLiteral(ISerializationContext context, DmxNaturalLiteral semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DmxPackage.Literals.DMX_NATURAL_LITERAL__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DmxPackage.Literals.DMX_NATURAL_LITERAL__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDmxNaturalLiteralAccess().getValueNATURALTerminalRuleCall_1_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     DExpression returns DmxMemberNavigation
	 *     DmxNavigableMemberReference returns DmxMemberNavigation
	 *     DmxNavigableMemberReference.DmxAssignment_1_0_0_0_0 returns DmxMemberNavigation
	 *     DmxNavigableMemberReference.DmxMemberNavigation_1_1_0_0_0 returns DmxMemberNavigation
	 *     DmxPredicateWithCorrelationVariable returns DmxMemberNavigation
	 *     DmxOrExpression returns DmxMemberNavigation
	 *     DmxOrExpression.DmxBinaryOperation_1_0_0_0 returns DmxMemberNavigation
	 *     DmxAndExpression returns DmxMemberNavigation
	 *     DmxAndExpression.DmxBinaryOperation_1_0_0_0 returns DmxMemberNavigation
	 *     DmxEqualityExpression returns DmxMemberNavigation
	 *     DmxEqualityExpression.DmxBinaryOperation_1_0_0_0 returns DmxMemberNavigation
	 *     DmxRelationalExpression returns DmxMemberNavigation
	 *     DmxRelationalExpression.DmxInstanceOfExpression_1_0_0_0_0 returns DmxMemberNavigation
	 *     DmxRelationalExpression.DmxBinaryOperation_1_1_0_0_0 returns DmxMemberNavigation
	 *     DmxOtherOperatorExpression returns DmxMemberNavigation
	 *     DmxOtherOperatorExpression.DmxBinaryOperation_1_0_0_0 returns DmxMemberNavigation
	 *     DmxAdditiveExpression returns DmxMemberNavigation
	 *     DmxAdditiveExpression.DmxBinaryOperation_1_0_0_0 returns DmxMemberNavigation
	 *     DmxMultiplicativeExpression returns DmxMemberNavigation
	 *     DmxMultiplicativeExpression.DmxBinaryOperation_1_0_0_0 returns DmxMemberNavigation
	 *     DmxUnaryOperation returns DmxMemberNavigation
	 *     DmxCastExpression returns DmxMemberNavigation
	 *     DmxCastExpression.DmxCastExpression_1_0_0_0 returns DmxMemberNavigation
	 *     DmxPrimaryExpression returns DmxMemberNavigation
	 *     DmxParenthesizedExpression returns DmxMemberNavigation
	 *
	 * Constraint:
	 *     (
	 *         precedingNavigationSegment=DmxNavigableMemberReference_DmxMemberNavigation_1_1_0_0_0 
	 *         member=[DNavigableMember|ID] 
	 *         ((explicitOperationCall?='(' callArguments=DmxCallArguments) | before?='@before')?
	 *     )
	 */
	protected void sequence_DmxNavigableMemberReference(ISerializationContext context, DmxMemberNavigation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DExpression returns DmxPredicateWithCorrelationVariable
	 *     DmxNavigableMemberReference returns DmxPredicateWithCorrelationVariable
	 *     DmxNavigableMemberReference.DmxAssignment_1_0_0_0_0 returns DmxPredicateWithCorrelationVariable
	 *     DmxNavigableMemberReference.DmxMemberNavigation_1_1_0_0_0 returns DmxPredicateWithCorrelationVariable
	 *     DmxPredicateWithCorrelationVariable returns DmxPredicateWithCorrelationVariable
	 *     DmxOrExpression returns DmxPredicateWithCorrelationVariable
	 *     DmxOrExpression.DmxBinaryOperation_1_0_0_0 returns DmxPredicateWithCorrelationVariable
	 *     DmxAndExpression returns DmxPredicateWithCorrelationVariable
	 *     DmxAndExpression.DmxBinaryOperation_1_0_0_0 returns DmxPredicateWithCorrelationVariable
	 *     DmxEqualityExpression returns DmxPredicateWithCorrelationVariable
	 *     DmxEqualityExpression.DmxBinaryOperation_1_0_0_0 returns DmxPredicateWithCorrelationVariable
	 *     DmxRelationalExpression returns DmxPredicateWithCorrelationVariable
	 *     DmxRelationalExpression.DmxInstanceOfExpression_1_0_0_0_0 returns DmxPredicateWithCorrelationVariable
	 *     DmxRelationalExpression.DmxBinaryOperation_1_1_0_0_0 returns DmxPredicateWithCorrelationVariable
	 *     DmxOtherOperatorExpression returns DmxPredicateWithCorrelationVariable
	 *     DmxOtherOperatorExpression.DmxBinaryOperation_1_0_0_0 returns DmxPredicateWithCorrelationVariable
	 *     DmxAdditiveExpression returns DmxPredicateWithCorrelationVariable
	 *     DmxAdditiveExpression.DmxBinaryOperation_1_0_0_0 returns DmxPredicateWithCorrelationVariable
	 *     DmxMultiplicativeExpression returns DmxPredicateWithCorrelationVariable
	 *     DmxMultiplicativeExpression.DmxBinaryOperation_1_0_0_0 returns DmxPredicateWithCorrelationVariable
	 *     DmxUnaryOperation returns DmxPredicateWithCorrelationVariable
	 *     DmxCastExpression returns DmxPredicateWithCorrelationVariable
	 *     DmxCastExpression.DmxCastExpression_1_0_0_0 returns DmxPredicateWithCorrelationVariable
	 *     DmxPrimaryExpression returns DmxPredicateWithCorrelationVariable
	 *     DmxParenthesizedExpression returns DmxPredicateWithCorrelationVariable
	 *
	 * Constraint:
	 *     (correlationVariable=DmxCorrelationVariable predicate=DmxOrExpression)
	 */
	protected void sequence_DmxPredicateWithCorrelationVariable(ISerializationContext context, DmxPredicateWithCorrelationVariable semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DmxPackage.Literals.DMX_PREDICATE_WITH_CORRELATION_VARIABLE__CORRELATION_VARIABLE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DmxPackage.Literals.DMX_PREDICATE_WITH_CORRELATION_VARIABLE__CORRELATION_VARIABLE));
			if (transientValues.isValueTransient(semanticObject, DmxPackage.Literals.DMX_PREDICATE_WITH_CORRELATION_VARIABLE__PREDICATE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DmxPackage.Literals.DMX_PREDICATE_WITH_CORRELATION_VARIABLE__PREDICATE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDmxPredicateWithCorrelationVariableAccess().getCorrelationVariableDmxCorrelationVariableParserRuleCall_0_1_0(), semanticObject.getCorrelationVariable());
		feeder.accept(grammarAccess.getDmxPredicateWithCorrelationVariableAccess().getPredicateDmxOrExpressionParserRuleCall_0_3_0(), semanticObject.getPredicate());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     DExpression returns DmxInstanceOfExpression
	 *     DmxNavigableMemberReference returns DmxInstanceOfExpression
	 *     DmxNavigableMemberReference.DmxAssignment_1_0_0_0_0 returns DmxInstanceOfExpression
	 *     DmxNavigableMemberReference.DmxMemberNavigation_1_1_0_0_0 returns DmxInstanceOfExpression
	 *     DmxPredicateWithCorrelationVariable returns DmxInstanceOfExpression
	 *     DmxOrExpression returns DmxInstanceOfExpression
	 *     DmxOrExpression.DmxBinaryOperation_1_0_0_0 returns DmxInstanceOfExpression
	 *     DmxAndExpression returns DmxInstanceOfExpression
	 *     DmxAndExpression.DmxBinaryOperation_1_0_0_0 returns DmxInstanceOfExpression
	 *     DmxEqualityExpression returns DmxInstanceOfExpression
	 *     DmxEqualityExpression.DmxBinaryOperation_1_0_0_0 returns DmxInstanceOfExpression
	 *     DmxRelationalExpression returns DmxInstanceOfExpression
	 *     DmxRelationalExpression.DmxInstanceOfExpression_1_0_0_0_0 returns DmxInstanceOfExpression
	 *     DmxRelationalExpression.DmxBinaryOperation_1_1_0_0_0 returns DmxInstanceOfExpression
	 *     DmxOtherOperatorExpression returns DmxInstanceOfExpression
	 *     DmxOtherOperatorExpression.DmxBinaryOperation_1_0_0_0 returns DmxInstanceOfExpression
	 *     DmxAdditiveExpression returns DmxInstanceOfExpression
	 *     DmxAdditiveExpression.DmxBinaryOperation_1_0_0_0 returns DmxInstanceOfExpression
	 *     DmxMultiplicativeExpression returns DmxInstanceOfExpression
	 *     DmxMultiplicativeExpression.DmxBinaryOperation_1_0_0_0 returns DmxInstanceOfExpression
	 *     DmxUnaryOperation returns DmxInstanceOfExpression
	 *     DmxCastExpression returns DmxInstanceOfExpression
	 *     DmxCastExpression.DmxCastExpression_1_0_0_0 returns DmxInstanceOfExpression
	 *     DmxPrimaryExpression returns DmxInstanceOfExpression
	 *     DmxParenthesizedExpression returns DmxInstanceOfExpression
	 *
	 * Constraint:
	 *     (expression=DmxRelationalExpression_DmxInstanceOfExpression_1_0_0_0_0 type=[DType|ID])
	 */
	protected void sequence_DmxRelationalExpression(ISerializationContext context, DmxInstanceOfExpression semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DmxPackage.Literals.DMX_INSTANCE_OF_EXPRESSION__EXPRESSION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DmxPackage.Literals.DMX_INSTANCE_OF_EXPRESSION__EXPRESSION));
			if (transientValues.isValueTransient(semanticObject, DmxPackage.Literals.DMX_INSTANCE_OF_EXPRESSION__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DmxPackage.Literals.DMX_INSTANCE_OF_EXPRESSION__TYPE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDmxRelationalExpressionAccess().getDmxInstanceOfExpressionExpressionAction_1_0_0_0_0(), semanticObject.getExpression());
		feeder.accept(grammarAccess.getDmxRelationalExpressionAccess().getTypeDTypeIDTerminalRuleCall_1_0_1_0_1(), semanticObject.eGet(DmxPackage.Literals.DMX_INSTANCE_OF_EXPRESSION__TYPE, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     DExpression returns DmxStaticReference
	 *     DmxNavigableMemberReference returns DmxStaticReference
	 *     DmxNavigableMemberReference.DmxAssignment_1_0_0_0_0 returns DmxStaticReference
	 *     DmxNavigableMemberReference.DmxMemberNavigation_1_1_0_0_0 returns DmxStaticReference
	 *     DmxPredicateWithCorrelationVariable returns DmxStaticReference
	 *     DmxOrExpression returns DmxStaticReference
	 *     DmxOrExpression.DmxBinaryOperation_1_0_0_0 returns DmxStaticReference
	 *     DmxAndExpression returns DmxStaticReference
	 *     DmxAndExpression.DmxBinaryOperation_1_0_0_0 returns DmxStaticReference
	 *     DmxEqualityExpression returns DmxStaticReference
	 *     DmxEqualityExpression.DmxBinaryOperation_1_0_0_0 returns DmxStaticReference
	 *     DmxRelationalExpression returns DmxStaticReference
	 *     DmxRelationalExpression.DmxInstanceOfExpression_1_0_0_0_0 returns DmxStaticReference
	 *     DmxRelationalExpression.DmxBinaryOperation_1_1_0_0_0 returns DmxStaticReference
	 *     DmxOtherOperatorExpression returns DmxStaticReference
	 *     DmxOtherOperatorExpression.DmxBinaryOperation_1_0_0_0 returns DmxStaticReference
	 *     DmxAdditiveExpression returns DmxStaticReference
	 *     DmxAdditiveExpression.DmxBinaryOperation_1_0_0_0 returns DmxStaticReference
	 *     DmxMultiplicativeExpression returns DmxStaticReference
	 *     DmxMultiplicativeExpression.DmxBinaryOperation_1_0_0_0 returns DmxStaticReference
	 *     DmxUnaryOperation returns DmxStaticReference
	 *     DmxCastExpression returns DmxStaticReference
	 *     DmxCastExpression.DmxCastExpression_1_0_0_0 returns DmxStaticReference
	 *     DmxPrimaryExpression returns DmxStaticReference
	 *     DmxParenthesizedExpression returns DmxStaticReference
	 *     DmxStaticReference returns DmxStaticReference
	 *
	 * Constraint:
	 *     (target=[IStaticReferenceTarget|DQualifiedName] member=[DNavigableMember|ID]? (displayName=ID | plural?='*')?)
	 */
	protected void sequence_DmxStaticReference(ISerializationContext context, DmxStaticReference semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DExpression returns DmxStringLiteral
	 *     DmxNavigableMemberReference returns DmxStringLiteral
	 *     DmxNavigableMemberReference.DmxAssignment_1_0_0_0_0 returns DmxStringLiteral
	 *     DmxNavigableMemberReference.DmxMemberNavigation_1_1_0_0_0 returns DmxStringLiteral
	 *     DmxPredicateWithCorrelationVariable returns DmxStringLiteral
	 *     DmxOrExpression returns DmxStringLiteral
	 *     DmxOrExpression.DmxBinaryOperation_1_0_0_0 returns DmxStringLiteral
	 *     DmxAndExpression returns DmxStringLiteral
	 *     DmxAndExpression.DmxBinaryOperation_1_0_0_0 returns DmxStringLiteral
	 *     DmxEqualityExpression returns DmxStringLiteral
	 *     DmxEqualityExpression.DmxBinaryOperation_1_0_0_0 returns DmxStringLiteral
	 *     DmxRelationalExpression returns DmxStringLiteral
	 *     DmxRelationalExpression.DmxInstanceOfExpression_1_0_0_0_0 returns DmxStringLiteral
	 *     DmxRelationalExpression.DmxBinaryOperation_1_1_0_0_0 returns DmxStringLiteral
	 *     DmxOtherOperatorExpression returns DmxStringLiteral
	 *     DmxOtherOperatorExpression.DmxBinaryOperation_1_0_0_0 returns DmxStringLiteral
	 *     DmxAdditiveExpression returns DmxStringLiteral
	 *     DmxAdditiveExpression.DmxBinaryOperation_1_0_0_0 returns DmxStringLiteral
	 *     DmxMultiplicativeExpression returns DmxStringLiteral
	 *     DmxMultiplicativeExpression.DmxBinaryOperation_1_0_0_0 returns DmxStringLiteral
	 *     DmxUnaryOperation returns DmxStringLiteral
	 *     DmxCastExpression returns DmxStringLiteral
	 *     DmxCastExpression.DmxCastExpression_1_0_0_0 returns DmxStringLiteral
	 *     DmxPrimaryExpression returns DmxStringLiteral
	 *     DmxLiteralExpression returns DmxStringLiteral
	 *     DmxParenthesizedExpression returns DmxStringLiteral
	 *     DmxStringLiteral returns DmxStringLiteral
	 *
	 * Constraint:
	 *     value=STRING
	 */
	protected void sequence_DmxStringLiteral(ISerializationContext context, DmxStringLiteral semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DmxPackage.Literals.DMX_STRING_LITERAL__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DmxPackage.Literals.DMX_STRING_LITERAL__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDmxStringLiteralAccess().getValueSTRINGTerminalRuleCall_1_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     DmxTestContext returns DmxTestContext
	 *
	 * Constraint:
	 *     (name=ID type=[DType|ID] multiplicity=DMultiplicity? (value=DmxLiteralExpression | value=DmxLiteralListExpression)?)
	 */
	protected void sequence_DmxTestContext(ISerializationContext context, DmxTestContext semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DmxTest returns DmxTest
	 *
	 * Constraint:
	 *     (name=ID (context+=DmxTestContext context+=DmxTestContext*)? expr=DExpression)
	 */
	protected void sequence_DmxTest(ISerializationContext context, DmxTest semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DmxTextEnd returns DTextSegment
	 *
	 * Constraint:
	 *     value=PLAIN_TEXT_END
	 */
	protected void sequence_DmxTextEnd(ISerializationContext context, DTextSegment semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BasePackage.Literals.DTEXT_SEGMENT__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BasePackage.Literals.DTEXT_SEGMENT__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDmxTextEndAccess().getValuePLAIN_TEXT_ENDTerminalRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     DmxTextMiddle returns DTextSegment
	 *
	 * Constraint:
	 *     value=PLAIN_TEXT_MIDDLE
	 */
	protected void sequence_DmxTextMiddle(ISerializationContext context, DTextSegment semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BasePackage.Literals.DTEXT_SEGMENT__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BasePackage.Literals.DTEXT_SEGMENT__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDmxTextMiddleAccess().getValuePLAIN_TEXT_MIDDLETerminalRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     DmxTextOnly returns DTextSegment
	 *
	 * Constraint:
	 *     value=PLAIN_TEXT_ONLY
	 */
	protected void sequence_DmxTextOnly(ISerializationContext context, DTextSegment semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BasePackage.Literals.DTEXT_SEGMENT__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BasePackage.Literals.DTEXT_SEGMENT__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDmxTextOnlyAccess().getValuePLAIN_TEXT_ONLYTerminalRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     DmxTextStart returns DTextSegment
	 *
	 * Constraint:
	 *     value=PLAIN_TEXT_START
	 */
	protected void sequence_DmxTextStart(ISerializationContext context, DTextSegment semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BasePackage.Literals.DTEXT_SEGMENT__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BasePackage.Literals.DTEXT_SEGMENT__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDmxTextStartAccess().getValuePLAIN_TEXT_STARTTerminalRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     DExpression returns DmxUnaryOperation
	 *     DmxNavigableMemberReference returns DmxUnaryOperation
	 *     DmxNavigableMemberReference.DmxAssignment_1_0_0_0_0 returns DmxUnaryOperation
	 *     DmxNavigableMemberReference.DmxMemberNavigation_1_1_0_0_0 returns DmxUnaryOperation
	 *     DmxPredicateWithCorrelationVariable returns DmxUnaryOperation
	 *     DmxOrExpression returns DmxUnaryOperation
	 *     DmxOrExpression.DmxBinaryOperation_1_0_0_0 returns DmxUnaryOperation
	 *     DmxAndExpression returns DmxUnaryOperation
	 *     DmxAndExpression.DmxBinaryOperation_1_0_0_0 returns DmxUnaryOperation
	 *     DmxEqualityExpression returns DmxUnaryOperation
	 *     DmxEqualityExpression.DmxBinaryOperation_1_0_0_0 returns DmxUnaryOperation
	 *     DmxRelationalExpression returns DmxUnaryOperation
	 *     DmxRelationalExpression.DmxInstanceOfExpression_1_0_0_0_0 returns DmxUnaryOperation
	 *     DmxRelationalExpression.DmxBinaryOperation_1_1_0_0_0 returns DmxUnaryOperation
	 *     DmxOtherOperatorExpression returns DmxUnaryOperation
	 *     DmxOtherOperatorExpression.DmxBinaryOperation_1_0_0_0 returns DmxUnaryOperation
	 *     DmxAdditiveExpression returns DmxUnaryOperation
	 *     DmxAdditiveExpression.DmxBinaryOperation_1_0_0_0 returns DmxUnaryOperation
	 *     DmxMultiplicativeExpression returns DmxUnaryOperation
	 *     DmxMultiplicativeExpression.DmxBinaryOperation_1_0_0_0 returns DmxUnaryOperation
	 *     DmxUnaryOperation returns DmxUnaryOperation
	 *     DmxCastExpression returns DmxUnaryOperation
	 *     DmxCastExpression.DmxCastExpression_1_0_0_0 returns DmxUnaryOperation
	 *     DmxPrimaryExpression returns DmxUnaryOperation
	 *     DmxParenthesizedExpression returns DmxUnaryOperation
	 *
	 * Constraint:
	 *     (operator=OpUnary operand=DmxUnaryOperation)
	 */
	protected void sequence_DmxUnaryOperation(ISerializationContext context, DmxUnaryOperation semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DmxPackage.Literals.DMX_UNARY_OPERATION__OPERATOR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DmxPackage.Literals.DMX_UNARY_OPERATION__OPERATOR));
			if (transientValues.isValueTransient(semanticObject, DmxPackage.Literals.DMX_UNARY_OPERATION__OPERAND) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DmxPackage.Literals.DMX_UNARY_OPERATION__OPERAND));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDmxUnaryOperationAccess().getOperatorOpUnaryEnumRuleCall_0_1_0(), semanticObject.getOperator());
		feeder.accept(grammarAccess.getDmxUnaryOperationAccess().getOperandDmxUnaryOperationParserRuleCall_0_2_0(), semanticObject.getOperand());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     DExpression returns DmxUndefinedLiteral
	 *     DmxNavigableMemberReference returns DmxUndefinedLiteral
	 *     DmxNavigableMemberReference.DmxAssignment_1_0_0_0_0 returns DmxUndefinedLiteral
	 *     DmxNavigableMemberReference.DmxMemberNavigation_1_1_0_0_0 returns DmxUndefinedLiteral
	 *     DmxPredicateWithCorrelationVariable returns DmxUndefinedLiteral
	 *     DmxOrExpression returns DmxUndefinedLiteral
	 *     DmxOrExpression.DmxBinaryOperation_1_0_0_0 returns DmxUndefinedLiteral
	 *     DmxAndExpression returns DmxUndefinedLiteral
	 *     DmxAndExpression.DmxBinaryOperation_1_0_0_0 returns DmxUndefinedLiteral
	 *     DmxEqualityExpression returns DmxUndefinedLiteral
	 *     DmxEqualityExpression.DmxBinaryOperation_1_0_0_0 returns DmxUndefinedLiteral
	 *     DmxRelationalExpression returns DmxUndefinedLiteral
	 *     DmxRelationalExpression.DmxInstanceOfExpression_1_0_0_0_0 returns DmxUndefinedLiteral
	 *     DmxRelationalExpression.DmxBinaryOperation_1_1_0_0_0 returns DmxUndefinedLiteral
	 *     DmxOtherOperatorExpression returns DmxUndefinedLiteral
	 *     DmxOtherOperatorExpression.DmxBinaryOperation_1_0_0_0 returns DmxUndefinedLiteral
	 *     DmxAdditiveExpression returns DmxUndefinedLiteral
	 *     DmxAdditiveExpression.DmxBinaryOperation_1_0_0_0 returns DmxUndefinedLiteral
	 *     DmxMultiplicativeExpression returns DmxUndefinedLiteral
	 *     DmxMultiplicativeExpression.DmxBinaryOperation_1_0_0_0 returns DmxUndefinedLiteral
	 *     DmxUnaryOperation returns DmxUndefinedLiteral
	 *     DmxCastExpression returns DmxUndefinedLiteral
	 *     DmxCastExpression.DmxCastExpression_1_0_0_0 returns DmxUndefinedLiteral
	 *     DmxPrimaryExpression returns DmxUndefinedLiteral
	 *     DmxLiteralExpression returns DmxUndefinedLiteral
	 *     DmxParenthesizedExpression returns DmxUndefinedLiteral
	 *     DmxUndefinedLiteral returns DmxUndefinedLiteral
	 *
	 * Constraint:
	 *     {DmxUndefinedLiteral}
	 */
	protected void sequence_DmxUndefinedLiteral(ISerializationContext context, DmxUndefinedLiteral semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
