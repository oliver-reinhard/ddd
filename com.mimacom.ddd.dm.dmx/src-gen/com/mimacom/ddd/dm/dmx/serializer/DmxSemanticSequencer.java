/*
 * generated by Xtext 2.16.0
 */
package com.mimacom.ddd.dm.dmx.serializer;

import com.google.inject.Inject;
import com.mimacom.ddd.dm.base.BasePackage;
import com.mimacom.ddd.dm.base.DMultiplicity;
import com.mimacom.ddd.dm.base.DRichText;
import com.mimacom.ddd.dm.base.DText;
import com.mimacom.ddd.dm.dmx.DAssignment;
import com.mimacom.ddd.dm.dmx.DBinaryOperation;
import com.mimacom.ddd.dm.dmx.DBooleanLiteral;
import com.mimacom.ddd.dm.dmx.DCastExpression;
import com.mimacom.ddd.dm.dmx.DConstructorCall;
import com.mimacom.ddd.dm.dmx.DContextReference;
import com.mimacom.ddd.dm.dmx.DDecimalLiteral;
import com.mimacom.ddd.dm.dmx.DForLoopExpression;
import com.mimacom.ddd.dm.dmx.DFunctionCall;
import com.mimacom.ddd.dm.dmx.DIfExpression;
import com.mimacom.ddd.dm.dmx.DInstanceOfExpression;
import com.mimacom.ddd.dm.dmx.DNaturalLiteral;
import com.mimacom.ddd.dm.dmx.DNilLiteral;
import com.mimacom.ddd.dm.dmx.DRaiseExpression;
import com.mimacom.ddd.dm.dmx.DReturnExpression;
import com.mimacom.ddd.dm.dmx.DSelfExpression;
import com.mimacom.ddd.dm.dmx.DStringLiteral;
import com.mimacom.ddd.dm.dmx.DTypedMemberReference;
import com.mimacom.ddd.dm.dmx.DUnaryOperation;
import com.mimacom.ddd.dm.dmx.DmxModel;
import com.mimacom.ddd.dm.dmx.DmxPackage;
import com.mimacom.ddd.dm.dmx.services.DmxGrammarAccess;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class DmxSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private DmxGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == BasePackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case BasePackage.DMULTIPLICITY:
				sequence_DMultiplicity(context, (DMultiplicity) semanticObject); 
				return; 
			case BasePackage.DRICH_TEXT:
				sequence_DRichText(context, (DRichText) semanticObject); 
				return; 
			case BasePackage.DTEXT:
				if (rule == grammarAccess.getDTextEndRule()) {
					sequence_DTextEnd(context, (DText) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getDTextMiddleRule()) {
					sequence_DTextMiddle(context, (DText) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getDTextOnlyRule()) {
					sequence_DTextOnly(context, (DText) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getDTextStartRule()) {
					sequence_DTextStart(context, (DText) semanticObject); 
					return; 
				}
				else break;
			}
		else if (epackage == DmxPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case DmxPackage.DASSIGNMENT:
				sequence_DAssignment_DTypedMemberReference(context, (DAssignment) semanticObject); 
				return; 
			case DmxPackage.DBINARY_OPERATION:
				sequence_DAdditiveExpression_DAndExpression_DEqualityExpression_DMultiplicativeExpression_DOrExpression_DOtherOperatorExpression_DRelationalExpression(context, (DBinaryOperation) semanticObject); 
				return; 
			case DmxPackage.DBOOLEAN_LITERAL:
				sequence_DBooleanLiteral(context, (DBooleanLiteral) semanticObject); 
				return; 
			case DmxPackage.DCAST_EXPRESSION:
				sequence_DCastExpression(context, (DCastExpression) semanticObject); 
				return; 
			case DmxPackage.DCONSTRUCTOR_CALL:
				sequence_DConstructorCall(context, (DConstructorCall) semanticObject); 
				return; 
			case DmxPackage.DCONTEXT_REFERENCE:
				sequence_DContextReference(context, (DContextReference) semanticObject); 
				return; 
			case DmxPackage.DDECIMAL_LITERAL:
				sequence_DDecimalLiteral(context, (DDecimalLiteral) semanticObject); 
				return; 
			case DmxPackage.DFOR_LOOP_EXPRESSION:
				sequence_DForLoopExpression(context, (DForLoopExpression) semanticObject); 
				return; 
			case DmxPackage.DFUNCTION_CALL:
				sequence_DFunctionCall(context, (DFunctionCall) semanticObject); 
				return; 
			case DmxPackage.DIF_EXPRESSION:
				sequence_DIfExpression(context, (DIfExpression) semanticObject); 
				return; 
			case DmxPackage.DINSTANCE_OF_EXPRESSION:
				sequence_DRelationalExpression(context, (DInstanceOfExpression) semanticObject); 
				return; 
			case DmxPackage.DNATURAL_LITERAL:
				sequence_DNaturalLiteral(context, (DNaturalLiteral) semanticObject); 
				return; 
			case DmxPackage.DNIL_LITERAL:
				sequence_DNilLiteral(context, (DNilLiteral) semanticObject); 
				return; 
			case DmxPackage.DRAISE_EXPRESSION:
				sequence_DRaiseExpression(context, (DRaiseExpression) semanticObject); 
				return; 
			case DmxPackage.DRETURN_EXPRESSION:
				sequence_DReturnExpression(context, (DReturnExpression) semanticObject); 
				return; 
			case DmxPackage.DSELF_EXPRESSION:
				sequence_DSelfExpression(context, (DSelfExpression) semanticObject); 
				return; 
			case DmxPackage.DSTRING_LITERAL:
				sequence_DStringLiteral(context, (DStringLiteral) semanticObject); 
				return; 
			case DmxPackage.DTYPED_MEMBER_REFERENCE:
				sequence_DTypedMemberReference(context, (DTypedMemberReference) semanticObject); 
				return; 
			case DmxPackage.DUNARY_OPERATION:
				sequence_DUnaryOperation(context, (DUnaryOperation) semanticObject); 
				return; 
			case DmxPackage.DMX_MODEL:
				sequence_DmxModel(context, (DmxModel) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     DExpression returns DBinaryOperation
	 *     DAssignment returns DBinaryOperation
	 *     DOrExpression returns DBinaryOperation
	 *     DOrExpression.DBinaryOperation_1_0_0_0 returns DBinaryOperation
	 *     DAndExpression returns DBinaryOperation
	 *     DAndExpression.DBinaryOperation_1_0_0_0 returns DBinaryOperation
	 *     DEqualityExpression returns DBinaryOperation
	 *     DEqualityExpression.DBinaryOperation_1_0_0_0 returns DBinaryOperation
	 *     DRelationalExpression returns DBinaryOperation
	 *     DRelationalExpression.DInstanceOfExpression_1_0_0_0_0 returns DBinaryOperation
	 *     DRelationalExpression.DBinaryOperation_1_1_0_0_0 returns DBinaryOperation
	 *     DOtherOperatorExpression returns DBinaryOperation
	 *     DOtherOperatorExpression.DBinaryOperation_1_0_0_0 returns DBinaryOperation
	 *     DAdditiveExpression returns DBinaryOperation
	 *     DAdditiveExpression.DBinaryOperation_1_0_0_0 returns DBinaryOperation
	 *     DMultiplicativeExpression returns DBinaryOperation
	 *     DMultiplicativeExpression.DBinaryOperation_1_0_0_0 returns DBinaryOperation
	 *     DUnaryOperation returns DBinaryOperation
	 *     DCastExpression returns DBinaryOperation
	 *     DCastExpression.DCastExpression_1_0_0_0 returns DBinaryOperation
	 *     DTypedMemberReference returns DBinaryOperation
	 *     DTypedMemberReference.DAssignment_1_0_0_0_0 returns DBinaryOperation
	 *     DTypedMemberReference.DTypedMemberReference_1_1_0_0_0 returns DBinaryOperation
	 *     DPrimaryExpression returns DBinaryOperation
	 *     DParenthesizedExpression returns DBinaryOperation
	 *
	 * Constraint:
	 *     (
	 *         (leftOperand=DOrExpression_DBinaryOperation_1_0_0_0 operator=OpOr rightOperand=DAndExpression) | 
	 *         (leftOperand=DAndExpression_DBinaryOperation_1_0_0_0 operator=OpAnd rightOperand=DEqualityExpression) | 
	 *         (leftOperand=DEqualityExpression_DBinaryOperation_1_0_0_0 operator=OpEquality rightOperand=DRelationalExpression) | 
	 *         (leftOperand=DRelationalExpression_DBinaryOperation_1_1_0_0_0 operator=OpCompare rightOperand=DOtherOperatorExpression) | 
	 *         (leftOperand=DOtherOperatorExpression_DBinaryOperation_1_0_0_0 operator=OpOther rightOperand=DAdditiveExpression) | 
	 *         (leftOperand=DAdditiveExpression_DBinaryOperation_1_0_0_0 operator=OpAdd rightOperand=DMultiplicativeExpression) | 
	 *         (leftOperand=DMultiplicativeExpression_DBinaryOperation_1_0_0_0 operator=OpMulti rightOperand=DUnaryOperation)
	 *     )
	 */
	protected void sequence_DAdditiveExpression_DAndExpression_DEqualityExpression_DMultiplicativeExpression_DOrExpression_DOtherOperatorExpression_DRelationalExpression(ISerializationContext context, DBinaryOperation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DExpression returns DAssignment
	 *     DAssignment returns DAssignment
	 *     DOrExpression returns DAssignment
	 *     DOrExpression.DBinaryOperation_1_0_0_0 returns DAssignment
	 *     DAndExpression returns DAssignment
	 *     DAndExpression.DBinaryOperation_1_0_0_0 returns DAssignment
	 *     DEqualityExpression returns DAssignment
	 *     DEqualityExpression.DBinaryOperation_1_0_0_0 returns DAssignment
	 *     DRelationalExpression returns DAssignment
	 *     DRelationalExpression.DInstanceOfExpression_1_0_0_0_0 returns DAssignment
	 *     DRelationalExpression.DBinaryOperation_1_1_0_0_0 returns DAssignment
	 *     DOtherOperatorExpression returns DAssignment
	 *     DOtherOperatorExpression.DBinaryOperation_1_0_0_0 returns DAssignment
	 *     DAdditiveExpression returns DAssignment
	 *     DAdditiveExpression.DBinaryOperation_1_0_0_0 returns DAssignment
	 *     DMultiplicativeExpression returns DAssignment
	 *     DMultiplicativeExpression.DBinaryOperation_1_0_0_0 returns DAssignment
	 *     DUnaryOperation returns DAssignment
	 *     DCastExpression returns DAssignment
	 *     DCastExpression.DCastExpression_1_0_0_0 returns DAssignment
	 *     DTypedMemberReference returns DAssignment
	 *     DTypedMemberReference.DAssignment_1_0_0_0_0 returns DAssignment
	 *     DTypedMemberReference.DTypedMemberReference_1_1_0_0_0 returns DAssignment
	 *     DPrimaryExpression returns DAssignment
	 *     DParenthesizedExpression returns DAssignment
	 *
	 * Constraint:
	 *     (
	 *         (member=[DTypedMember|ID] value=DAssignment) | 
	 *         (memberContainer=DTypedMemberReference_DAssignment_1_0_0_0_0 member=[DTypedMember|ID] value=DAssignment)
	 *     )
	 */
	protected void sequence_DAssignment_DTypedMemberReference(ISerializationContext context, DAssignment semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DExpression returns DBooleanLiteral
	 *     DAssignment returns DBooleanLiteral
	 *     DOrExpression returns DBooleanLiteral
	 *     DOrExpression.DBinaryOperation_1_0_0_0 returns DBooleanLiteral
	 *     DAndExpression returns DBooleanLiteral
	 *     DAndExpression.DBinaryOperation_1_0_0_0 returns DBooleanLiteral
	 *     DEqualityExpression returns DBooleanLiteral
	 *     DEqualityExpression.DBinaryOperation_1_0_0_0 returns DBooleanLiteral
	 *     DRelationalExpression returns DBooleanLiteral
	 *     DRelationalExpression.DInstanceOfExpression_1_0_0_0_0 returns DBooleanLiteral
	 *     DRelationalExpression.DBinaryOperation_1_1_0_0_0 returns DBooleanLiteral
	 *     DOtherOperatorExpression returns DBooleanLiteral
	 *     DOtherOperatorExpression.DBinaryOperation_1_0_0_0 returns DBooleanLiteral
	 *     DAdditiveExpression returns DBooleanLiteral
	 *     DAdditiveExpression.DBinaryOperation_1_0_0_0 returns DBooleanLiteral
	 *     DMultiplicativeExpression returns DBooleanLiteral
	 *     DMultiplicativeExpression.DBinaryOperation_1_0_0_0 returns DBooleanLiteral
	 *     DUnaryOperation returns DBooleanLiteral
	 *     DCastExpression returns DBooleanLiteral
	 *     DCastExpression.DCastExpression_1_0_0_0 returns DBooleanLiteral
	 *     DTypedMemberReference returns DBooleanLiteral
	 *     DTypedMemberReference.DAssignment_1_0_0_0_0 returns DBooleanLiteral
	 *     DTypedMemberReference.DTypedMemberReference_1_1_0_0_0 returns DBooleanLiteral
	 *     DPrimaryExpression returns DBooleanLiteral
	 *     DLiteralExpression returns DBooleanLiteral
	 *     DParenthesizedExpression returns DBooleanLiteral
	 *     DBooleanLiteral returns DBooleanLiteral
	 *
	 * Constraint:
	 *     (value?='TRUE' | value?='true')?
	 */
	protected void sequence_DBooleanLiteral(ISerializationContext context, DBooleanLiteral semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DExpression returns DCastExpression
	 *     DAssignment returns DCastExpression
	 *     DOrExpression returns DCastExpression
	 *     DOrExpression.DBinaryOperation_1_0_0_0 returns DCastExpression
	 *     DAndExpression returns DCastExpression
	 *     DAndExpression.DBinaryOperation_1_0_0_0 returns DCastExpression
	 *     DEqualityExpression returns DCastExpression
	 *     DEqualityExpression.DBinaryOperation_1_0_0_0 returns DCastExpression
	 *     DRelationalExpression returns DCastExpression
	 *     DRelationalExpression.DInstanceOfExpression_1_0_0_0_0 returns DCastExpression
	 *     DRelationalExpression.DBinaryOperation_1_1_0_0_0 returns DCastExpression
	 *     DOtherOperatorExpression returns DCastExpression
	 *     DOtherOperatorExpression.DBinaryOperation_1_0_0_0 returns DCastExpression
	 *     DAdditiveExpression returns DCastExpression
	 *     DAdditiveExpression.DBinaryOperation_1_0_0_0 returns DCastExpression
	 *     DMultiplicativeExpression returns DCastExpression
	 *     DMultiplicativeExpression.DBinaryOperation_1_0_0_0 returns DCastExpression
	 *     DUnaryOperation returns DCastExpression
	 *     DCastExpression returns DCastExpression
	 *     DCastExpression.DCastExpression_1_0_0_0 returns DCastExpression
	 *     DTypedMemberReference returns DCastExpression
	 *     DTypedMemberReference.DAssignment_1_0_0_0_0 returns DCastExpression
	 *     DTypedMemberReference.DTypedMemberReference_1_1_0_0_0 returns DCastExpression
	 *     DPrimaryExpression returns DCastExpression
	 *     DParenthesizedExpression returns DCastExpression
	 *
	 * Constraint:
	 *     (target=DCastExpression_DCastExpression_1_0_0_0 type=[DType|ID])
	 */
	protected void sequence_DCastExpression(ISerializationContext context, DCastExpression semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DmxPackage.Literals.DCAST_EXPRESSION__TARGET) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DmxPackage.Literals.DCAST_EXPRESSION__TARGET));
			if (transientValues.isValueTransient(semanticObject, DmxPackage.Literals.DCAST_EXPRESSION__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DmxPackage.Literals.DCAST_EXPRESSION__TYPE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDCastExpressionAccess().getDCastExpressionTargetAction_1_0_0_0(), semanticObject.getTarget());
		feeder.accept(grammarAccess.getDCastExpressionAccess().getTypeDTypeIDTerminalRuleCall_1_1_0_1(), semanticObject.eGet(DmxPackage.Literals.DCAST_EXPRESSION__TYPE, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     DExpression returns DConstructorCall
	 *     DAssignment returns DConstructorCall
	 *     DOrExpression returns DConstructorCall
	 *     DOrExpression.DBinaryOperation_1_0_0_0 returns DConstructorCall
	 *     DAndExpression returns DConstructorCall
	 *     DAndExpression.DBinaryOperation_1_0_0_0 returns DConstructorCall
	 *     DEqualityExpression returns DConstructorCall
	 *     DEqualityExpression.DBinaryOperation_1_0_0_0 returns DConstructorCall
	 *     DRelationalExpression returns DConstructorCall
	 *     DRelationalExpression.DInstanceOfExpression_1_0_0_0_0 returns DConstructorCall
	 *     DRelationalExpression.DBinaryOperation_1_1_0_0_0 returns DConstructorCall
	 *     DOtherOperatorExpression returns DConstructorCall
	 *     DOtherOperatorExpression.DBinaryOperation_1_0_0_0 returns DConstructorCall
	 *     DAdditiveExpression returns DConstructorCall
	 *     DAdditiveExpression.DBinaryOperation_1_0_0_0 returns DConstructorCall
	 *     DMultiplicativeExpression returns DConstructorCall
	 *     DMultiplicativeExpression.DBinaryOperation_1_0_0_0 returns DConstructorCall
	 *     DUnaryOperation returns DConstructorCall
	 *     DCastExpression returns DConstructorCall
	 *     DCastExpression.DCastExpression_1_0_0_0 returns DConstructorCall
	 *     DTypedMemberReference returns DConstructorCall
	 *     DTypedMemberReference.DAssignment_1_0_0_0_0 returns DConstructorCall
	 *     DTypedMemberReference.DTypedMemberReference_1_1_0_0_0 returns DConstructorCall
	 *     DPrimaryExpression returns DConstructorCall
	 *     DParenthesizedExpression returns DConstructorCall
	 *     DConstructorCall returns DConstructorCall
	 *
	 * Constraint:
	 *     (constructor=[DIdentityType|ID] (explicitConstructorCall?='(' (arguments+=DExpression arguments+=DExpression*)?)?)
	 */
	protected void sequence_DConstructorCall(ISerializationContext context, DConstructorCall semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DExpression returns DContextReference
	 *     DAssignment returns DContextReference
	 *     DOrExpression returns DContextReference
	 *     DOrExpression.DBinaryOperation_1_0_0_0 returns DContextReference
	 *     DAndExpression returns DContextReference
	 *     DAndExpression.DBinaryOperation_1_0_0_0 returns DContextReference
	 *     DEqualityExpression returns DContextReference
	 *     DEqualityExpression.DBinaryOperation_1_0_0_0 returns DContextReference
	 *     DRelationalExpression returns DContextReference
	 *     DRelationalExpression.DInstanceOfExpression_1_0_0_0_0 returns DContextReference
	 *     DRelationalExpression.DBinaryOperation_1_1_0_0_0 returns DContextReference
	 *     DOtherOperatorExpression returns DContextReference
	 *     DOtherOperatorExpression.DBinaryOperation_1_0_0_0 returns DContextReference
	 *     DAdditiveExpression returns DContextReference
	 *     DAdditiveExpression.DBinaryOperation_1_0_0_0 returns DContextReference
	 *     DMultiplicativeExpression returns DContextReference
	 *     DMultiplicativeExpression.DBinaryOperation_1_0_0_0 returns DContextReference
	 *     DUnaryOperation returns DContextReference
	 *     DCastExpression returns DContextReference
	 *     DCastExpression.DCastExpression_1_0_0_0 returns DContextReference
	 *     DTypedMemberReference returns DContextReference
	 *     DTypedMemberReference.DAssignment_1_0_0_0_0 returns DContextReference
	 *     DTypedMemberReference.DTypedMemberReference_1_1_0_0_0 returns DContextReference
	 *     DPrimaryExpression returns DContextReference
	 *     DParenthesizedExpression returns DContextReference
	 *     DContextReference returns DContextReference
	 *
	 * Constraint:
	 *     (target=[DNamedElement|ID] before?='@before'?)
	 */
	protected void sequence_DContextReference(ISerializationContext context, DContextReference semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DExpression returns DDecimalLiteral
	 *     DAssignment returns DDecimalLiteral
	 *     DOrExpression returns DDecimalLiteral
	 *     DOrExpression.DBinaryOperation_1_0_0_0 returns DDecimalLiteral
	 *     DAndExpression returns DDecimalLiteral
	 *     DAndExpression.DBinaryOperation_1_0_0_0 returns DDecimalLiteral
	 *     DEqualityExpression returns DDecimalLiteral
	 *     DEqualityExpression.DBinaryOperation_1_0_0_0 returns DDecimalLiteral
	 *     DRelationalExpression returns DDecimalLiteral
	 *     DRelationalExpression.DInstanceOfExpression_1_0_0_0_0 returns DDecimalLiteral
	 *     DRelationalExpression.DBinaryOperation_1_1_0_0_0 returns DDecimalLiteral
	 *     DOtherOperatorExpression returns DDecimalLiteral
	 *     DOtherOperatorExpression.DBinaryOperation_1_0_0_0 returns DDecimalLiteral
	 *     DAdditiveExpression returns DDecimalLiteral
	 *     DAdditiveExpression.DBinaryOperation_1_0_0_0 returns DDecimalLiteral
	 *     DMultiplicativeExpression returns DDecimalLiteral
	 *     DMultiplicativeExpression.DBinaryOperation_1_0_0_0 returns DDecimalLiteral
	 *     DUnaryOperation returns DDecimalLiteral
	 *     DCastExpression returns DDecimalLiteral
	 *     DCastExpression.DCastExpression_1_0_0_0 returns DDecimalLiteral
	 *     DTypedMemberReference returns DDecimalLiteral
	 *     DTypedMemberReference.DAssignment_1_0_0_0_0 returns DDecimalLiteral
	 *     DTypedMemberReference.DTypedMemberReference_1_1_0_0_0 returns DDecimalLiteral
	 *     DPrimaryExpression returns DDecimalLiteral
	 *     DLiteralExpression returns DDecimalLiteral
	 *     DParenthesizedExpression returns DDecimalLiteral
	 *     DDecimalLiteral returns DDecimalLiteral
	 *
	 * Constraint:
	 *     value=DECIMAL
	 */
	protected void sequence_DDecimalLiteral(ISerializationContext context, DDecimalLiteral semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DmxPackage.Literals.DDECIMAL_LITERAL__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DmxPackage.Literals.DDECIMAL_LITERAL__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDDecimalLiteralAccess().getValueDECIMALParserRuleCall_1_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     DExpression returns DForLoopExpression
	 *     DAssignment returns DForLoopExpression
	 *     DOrExpression returns DForLoopExpression
	 *     DOrExpression.DBinaryOperation_1_0_0_0 returns DForLoopExpression
	 *     DAndExpression returns DForLoopExpression
	 *     DAndExpression.DBinaryOperation_1_0_0_0 returns DForLoopExpression
	 *     DEqualityExpression returns DForLoopExpression
	 *     DEqualityExpression.DBinaryOperation_1_0_0_0 returns DForLoopExpression
	 *     DRelationalExpression returns DForLoopExpression
	 *     DRelationalExpression.DInstanceOfExpression_1_0_0_0_0 returns DForLoopExpression
	 *     DRelationalExpression.DBinaryOperation_1_1_0_0_0 returns DForLoopExpression
	 *     DOtherOperatorExpression returns DForLoopExpression
	 *     DOtherOperatorExpression.DBinaryOperation_1_0_0_0 returns DForLoopExpression
	 *     DAdditiveExpression returns DForLoopExpression
	 *     DAdditiveExpression.DBinaryOperation_1_0_0_0 returns DForLoopExpression
	 *     DMultiplicativeExpression returns DForLoopExpression
	 *     DMultiplicativeExpression.DBinaryOperation_1_0_0_0 returns DForLoopExpression
	 *     DUnaryOperation returns DForLoopExpression
	 *     DCastExpression returns DForLoopExpression
	 *     DCastExpression.DCastExpression_1_0_0_0 returns DForLoopExpression
	 *     DTypedMemberReference returns DForLoopExpression
	 *     DTypedMemberReference.DAssignment_1_0_0_0_0 returns DForLoopExpression
	 *     DTypedMemberReference.DTypedMemberReference_1_1_0_0_0 returns DForLoopExpression
	 *     DPrimaryExpression returns DForLoopExpression
	 *     DParenthesizedExpression returns DForLoopExpression
	 *     DForLoopExpression returns DForLoopExpression
	 *
	 * Constraint:
	 *     (declaredParam=ID forExpression=DExpression eachExpression=DExpression)
	 */
	protected void sequence_DForLoopExpression(ISerializationContext context, DForLoopExpression semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DmxPackage.Literals.DFOR_LOOP_EXPRESSION__DECLARED_PARAM) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DmxPackage.Literals.DFOR_LOOP_EXPRESSION__DECLARED_PARAM));
			if (transientValues.isValueTransient(semanticObject, DmxPackage.Literals.DFOR_LOOP_EXPRESSION__FOR_EXPRESSION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DmxPackage.Literals.DFOR_LOOP_EXPRESSION__FOR_EXPRESSION));
			if (transientValues.isValueTransient(semanticObject, DmxPackage.Literals.DFOR_LOOP_EXPRESSION__EACH_EXPRESSION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DmxPackage.Literals.DFOR_LOOP_EXPRESSION__EACH_EXPRESSION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDForLoopExpressionAccess().getDeclaredParamIDTerminalRuleCall_0_0_2_0(), semanticObject.getDeclaredParam());
		feeder.accept(grammarAccess.getDForLoopExpressionAccess().getForExpressionDExpressionParserRuleCall_1_0(), semanticObject.getForExpression());
		feeder.accept(grammarAccess.getDForLoopExpressionAccess().getEachExpressionDExpressionParserRuleCall_3_0(), semanticObject.getEachExpression());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     DExpression returns DFunctionCall
	 *     DAssignment returns DFunctionCall
	 *     DOrExpression returns DFunctionCall
	 *     DOrExpression.DBinaryOperation_1_0_0_0 returns DFunctionCall
	 *     DAndExpression returns DFunctionCall
	 *     DAndExpression.DBinaryOperation_1_0_0_0 returns DFunctionCall
	 *     DEqualityExpression returns DFunctionCall
	 *     DEqualityExpression.DBinaryOperation_1_0_0_0 returns DFunctionCall
	 *     DRelationalExpression returns DFunctionCall
	 *     DRelationalExpression.DInstanceOfExpression_1_0_0_0_0 returns DFunctionCall
	 *     DRelationalExpression.DBinaryOperation_1_1_0_0_0 returns DFunctionCall
	 *     DOtherOperatorExpression returns DFunctionCall
	 *     DOtherOperatorExpression.DBinaryOperation_1_0_0_0 returns DFunctionCall
	 *     DAdditiveExpression returns DFunctionCall
	 *     DAdditiveExpression.DBinaryOperation_1_0_0_0 returns DFunctionCall
	 *     DMultiplicativeExpression returns DFunctionCall
	 *     DMultiplicativeExpression.DBinaryOperation_1_0_0_0 returns DFunctionCall
	 *     DUnaryOperation returns DFunctionCall
	 *     DCastExpression returns DFunctionCall
	 *     DCastExpression.DCastExpression_1_0_0_0 returns DFunctionCall
	 *     DTypedMemberReference returns DFunctionCall
	 *     DTypedMemberReference.DAssignment_1_0_0_0_0 returns DFunctionCall
	 *     DTypedMemberReference.DTypedMemberReference_1_1_0_0_0 returns DFunctionCall
	 *     DPrimaryExpression returns DFunctionCall
	 *     DParenthesizedExpression returns DFunctionCall
	 *     DFunctionCall returns DFunctionCall
	 *
	 * Constraint:
	 *     (function=[DFunction|ID] (functionCallArguments+=DExpression functionCallArguments+=DExpression*)?)
	 */
	protected void sequence_DFunctionCall(ISerializationContext context, DFunctionCall semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DExpression returns DIfExpression
	 *     DAssignment returns DIfExpression
	 *     DOrExpression returns DIfExpression
	 *     DOrExpression.DBinaryOperation_1_0_0_0 returns DIfExpression
	 *     DAndExpression returns DIfExpression
	 *     DAndExpression.DBinaryOperation_1_0_0_0 returns DIfExpression
	 *     DEqualityExpression returns DIfExpression
	 *     DEqualityExpression.DBinaryOperation_1_0_0_0 returns DIfExpression
	 *     DRelationalExpression returns DIfExpression
	 *     DRelationalExpression.DInstanceOfExpression_1_0_0_0_0 returns DIfExpression
	 *     DRelationalExpression.DBinaryOperation_1_1_0_0_0 returns DIfExpression
	 *     DOtherOperatorExpression returns DIfExpression
	 *     DOtherOperatorExpression.DBinaryOperation_1_0_0_0 returns DIfExpression
	 *     DAdditiveExpression returns DIfExpression
	 *     DAdditiveExpression.DBinaryOperation_1_0_0_0 returns DIfExpression
	 *     DMultiplicativeExpression returns DIfExpression
	 *     DMultiplicativeExpression.DBinaryOperation_1_0_0_0 returns DIfExpression
	 *     DUnaryOperation returns DIfExpression
	 *     DCastExpression returns DIfExpression
	 *     DCastExpression.DCastExpression_1_0_0_0 returns DIfExpression
	 *     DTypedMemberReference returns DIfExpression
	 *     DTypedMemberReference.DAssignment_1_0_0_0_0 returns DIfExpression
	 *     DTypedMemberReference.DTypedMemberReference_1_1_0_0_0 returns DIfExpression
	 *     DPrimaryExpression returns DIfExpression
	 *     DParenthesizedExpression returns DIfExpression
	 *     DIfExpression returns DIfExpression
	 *
	 * Constraint:
	 *     (if=DExpression then=DExpression else=DExpression?)
	 */
	protected void sequence_DIfExpression(ISerializationContext context, DIfExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DMultiplicity returns DMultiplicity
	 *
	 * Constraint:
	 *     (minOccurs=NATURAL maxOccurs=MULTIPLICITY)
	 */
	protected void sequence_DMultiplicity(ISerializationContext context, DMultiplicity semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BasePackage.Literals.DMULTIPLICITY__MIN_OCCURS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BasePackage.Literals.DMULTIPLICITY__MIN_OCCURS));
			if (transientValues.isValueTransient(semanticObject, BasePackage.Literals.DMULTIPLICITY__MAX_OCCURS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BasePackage.Literals.DMULTIPLICITY__MAX_OCCURS));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDMultiplicityAccess().getMinOccursNATURALTerminalRuleCall_1_0(), semanticObject.getMinOccurs());
		feeder.accept(grammarAccess.getDMultiplicityAccess().getMaxOccursMULTIPLICITYParserRuleCall_3_0(), semanticObject.getMaxOccurs());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     DExpression returns DNaturalLiteral
	 *     DAssignment returns DNaturalLiteral
	 *     DOrExpression returns DNaturalLiteral
	 *     DOrExpression.DBinaryOperation_1_0_0_0 returns DNaturalLiteral
	 *     DAndExpression returns DNaturalLiteral
	 *     DAndExpression.DBinaryOperation_1_0_0_0 returns DNaturalLiteral
	 *     DEqualityExpression returns DNaturalLiteral
	 *     DEqualityExpression.DBinaryOperation_1_0_0_0 returns DNaturalLiteral
	 *     DRelationalExpression returns DNaturalLiteral
	 *     DRelationalExpression.DInstanceOfExpression_1_0_0_0_0 returns DNaturalLiteral
	 *     DRelationalExpression.DBinaryOperation_1_1_0_0_0 returns DNaturalLiteral
	 *     DOtherOperatorExpression returns DNaturalLiteral
	 *     DOtherOperatorExpression.DBinaryOperation_1_0_0_0 returns DNaturalLiteral
	 *     DAdditiveExpression returns DNaturalLiteral
	 *     DAdditiveExpression.DBinaryOperation_1_0_0_0 returns DNaturalLiteral
	 *     DMultiplicativeExpression returns DNaturalLiteral
	 *     DMultiplicativeExpression.DBinaryOperation_1_0_0_0 returns DNaturalLiteral
	 *     DUnaryOperation returns DNaturalLiteral
	 *     DCastExpression returns DNaturalLiteral
	 *     DCastExpression.DCastExpression_1_0_0_0 returns DNaturalLiteral
	 *     DTypedMemberReference returns DNaturalLiteral
	 *     DTypedMemberReference.DAssignment_1_0_0_0_0 returns DNaturalLiteral
	 *     DTypedMemberReference.DTypedMemberReference_1_1_0_0_0 returns DNaturalLiteral
	 *     DPrimaryExpression returns DNaturalLiteral
	 *     DLiteralExpression returns DNaturalLiteral
	 *     DParenthesizedExpression returns DNaturalLiteral
	 *     DNaturalLiteral returns DNaturalLiteral
	 *
	 * Constraint:
	 *     value=NATURAL
	 */
	protected void sequence_DNaturalLiteral(ISerializationContext context, DNaturalLiteral semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DmxPackage.Literals.DNATURAL_LITERAL__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DmxPackage.Literals.DNATURAL_LITERAL__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDNaturalLiteralAccess().getValueNATURALTerminalRuleCall_1_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     DExpression returns DNilLiteral
	 *     DAssignment returns DNilLiteral
	 *     DOrExpression returns DNilLiteral
	 *     DOrExpression.DBinaryOperation_1_0_0_0 returns DNilLiteral
	 *     DAndExpression returns DNilLiteral
	 *     DAndExpression.DBinaryOperation_1_0_0_0 returns DNilLiteral
	 *     DEqualityExpression returns DNilLiteral
	 *     DEqualityExpression.DBinaryOperation_1_0_0_0 returns DNilLiteral
	 *     DRelationalExpression returns DNilLiteral
	 *     DRelationalExpression.DInstanceOfExpression_1_0_0_0_0 returns DNilLiteral
	 *     DRelationalExpression.DBinaryOperation_1_1_0_0_0 returns DNilLiteral
	 *     DOtherOperatorExpression returns DNilLiteral
	 *     DOtherOperatorExpression.DBinaryOperation_1_0_0_0 returns DNilLiteral
	 *     DAdditiveExpression returns DNilLiteral
	 *     DAdditiveExpression.DBinaryOperation_1_0_0_0 returns DNilLiteral
	 *     DMultiplicativeExpression returns DNilLiteral
	 *     DMultiplicativeExpression.DBinaryOperation_1_0_0_0 returns DNilLiteral
	 *     DUnaryOperation returns DNilLiteral
	 *     DCastExpression returns DNilLiteral
	 *     DCastExpression.DCastExpression_1_0_0_0 returns DNilLiteral
	 *     DTypedMemberReference returns DNilLiteral
	 *     DTypedMemberReference.DAssignment_1_0_0_0_0 returns DNilLiteral
	 *     DTypedMemberReference.DTypedMemberReference_1_1_0_0_0 returns DNilLiteral
	 *     DPrimaryExpression returns DNilLiteral
	 *     DLiteralExpression returns DNilLiteral
	 *     DParenthesizedExpression returns DNilLiteral
	 *     DNilLiteral returns DNilLiteral
	 *
	 * Constraint:
	 *     {DNilLiteral}
	 */
	protected void sequence_DNilLiteral(ISerializationContext context, DNilLiteral semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DExpression returns DRaiseExpression
	 *     DAssignment returns DRaiseExpression
	 *     DOrExpression returns DRaiseExpression
	 *     DOrExpression.DBinaryOperation_1_0_0_0 returns DRaiseExpression
	 *     DAndExpression returns DRaiseExpression
	 *     DAndExpression.DBinaryOperation_1_0_0_0 returns DRaiseExpression
	 *     DEqualityExpression returns DRaiseExpression
	 *     DEqualityExpression.DBinaryOperation_1_0_0_0 returns DRaiseExpression
	 *     DRelationalExpression returns DRaiseExpression
	 *     DRelationalExpression.DInstanceOfExpression_1_0_0_0_0 returns DRaiseExpression
	 *     DRelationalExpression.DBinaryOperation_1_1_0_0_0 returns DRaiseExpression
	 *     DOtherOperatorExpression returns DRaiseExpression
	 *     DOtherOperatorExpression.DBinaryOperation_1_0_0_0 returns DRaiseExpression
	 *     DAdditiveExpression returns DRaiseExpression
	 *     DAdditiveExpression.DBinaryOperation_1_0_0_0 returns DRaiseExpression
	 *     DMultiplicativeExpression returns DRaiseExpression
	 *     DMultiplicativeExpression.DBinaryOperation_1_0_0_0 returns DRaiseExpression
	 *     DUnaryOperation returns DRaiseExpression
	 *     DCastExpression returns DRaiseExpression
	 *     DCastExpression.DCastExpression_1_0_0_0 returns DRaiseExpression
	 *     DTypedMemberReference returns DRaiseExpression
	 *     DTypedMemberReference.DAssignment_1_0_0_0_0 returns DRaiseExpression
	 *     DTypedMemberReference.DTypedMemberReference_1_1_0_0_0 returns DRaiseExpression
	 *     DPrimaryExpression returns DRaiseExpression
	 *     DRaiseExpression returns DRaiseExpression
	 *     DParenthesizedExpression returns DRaiseExpression
	 *
	 * Constraint:
	 *     expression=DExpression
	 */
	protected void sequence_DRaiseExpression(ISerializationContext context, DRaiseExpression semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DmxPackage.Literals.DRAISE_EXPRESSION__EXPRESSION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DmxPackage.Literals.DRAISE_EXPRESSION__EXPRESSION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDRaiseExpressionAccess().getExpressionDExpressionParserRuleCall_2_0(), semanticObject.getExpression());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     DExpression returns DInstanceOfExpression
	 *     DAssignment returns DInstanceOfExpression
	 *     DOrExpression returns DInstanceOfExpression
	 *     DOrExpression.DBinaryOperation_1_0_0_0 returns DInstanceOfExpression
	 *     DAndExpression returns DInstanceOfExpression
	 *     DAndExpression.DBinaryOperation_1_0_0_0 returns DInstanceOfExpression
	 *     DEqualityExpression returns DInstanceOfExpression
	 *     DEqualityExpression.DBinaryOperation_1_0_0_0 returns DInstanceOfExpression
	 *     DRelationalExpression returns DInstanceOfExpression
	 *     DRelationalExpression.DInstanceOfExpression_1_0_0_0_0 returns DInstanceOfExpression
	 *     DRelationalExpression.DBinaryOperation_1_1_0_0_0 returns DInstanceOfExpression
	 *     DOtherOperatorExpression returns DInstanceOfExpression
	 *     DOtherOperatorExpression.DBinaryOperation_1_0_0_0 returns DInstanceOfExpression
	 *     DAdditiveExpression returns DInstanceOfExpression
	 *     DAdditiveExpression.DBinaryOperation_1_0_0_0 returns DInstanceOfExpression
	 *     DMultiplicativeExpression returns DInstanceOfExpression
	 *     DMultiplicativeExpression.DBinaryOperation_1_0_0_0 returns DInstanceOfExpression
	 *     DUnaryOperation returns DInstanceOfExpression
	 *     DCastExpression returns DInstanceOfExpression
	 *     DCastExpression.DCastExpression_1_0_0_0 returns DInstanceOfExpression
	 *     DTypedMemberReference returns DInstanceOfExpression
	 *     DTypedMemberReference.DAssignment_1_0_0_0_0 returns DInstanceOfExpression
	 *     DTypedMemberReference.DTypedMemberReference_1_1_0_0_0 returns DInstanceOfExpression
	 *     DPrimaryExpression returns DInstanceOfExpression
	 *     DParenthesizedExpression returns DInstanceOfExpression
	 *
	 * Constraint:
	 *     (expression=DRelationalExpression_DInstanceOfExpression_1_0_0_0_0 type=[DType|ID])
	 */
	protected void sequence_DRelationalExpression(ISerializationContext context, DInstanceOfExpression semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DmxPackage.Literals.DINSTANCE_OF_EXPRESSION__EXPRESSION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DmxPackage.Literals.DINSTANCE_OF_EXPRESSION__EXPRESSION));
			if (transientValues.isValueTransient(semanticObject, DmxPackage.Literals.DINSTANCE_OF_EXPRESSION__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DmxPackage.Literals.DINSTANCE_OF_EXPRESSION__TYPE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDRelationalExpressionAccess().getDInstanceOfExpressionExpressionAction_1_0_0_0_0(), semanticObject.getExpression());
		feeder.accept(grammarAccess.getDRelationalExpressionAccess().getTypeDTypeIDTerminalRuleCall_1_0_1_0_1(), semanticObject.eGet(DmxPackage.Literals.DINSTANCE_OF_EXPRESSION__TYPE, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     DExpression returns DReturnExpression
	 *     DAssignment returns DReturnExpression
	 *     DOrExpression returns DReturnExpression
	 *     DOrExpression.DBinaryOperation_1_0_0_0 returns DReturnExpression
	 *     DAndExpression returns DReturnExpression
	 *     DAndExpression.DBinaryOperation_1_0_0_0 returns DReturnExpression
	 *     DEqualityExpression returns DReturnExpression
	 *     DEqualityExpression.DBinaryOperation_1_0_0_0 returns DReturnExpression
	 *     DRelationalExpression returns DReturnExpression
	 *     DRelationalExpression.DInstanceOfExpression_1_0_0_0_0 returns DReturnExpression
	 *     DRelationalExpression.DBinaryOperation_1_1_0_0_0 returns DReturnExpression
	 *     DOtherOperatorExpression returns DReturnExpression
	 *     DOtherOperatorExpression.DBinaryOperation_1_0_0_0 returns DReturnExpression
	 *     DAdditiveExpression returns DReturnExpression
	 *     DAdditiveExpression.DBinaryOperation_1_0_0_0 returns DReturnExpression
	 *     DMultiplicativeExpression returns DReturnExpression
	 *     DMultiplicativeExpression.DBinaryOperation_1_0_0_0 returns DReturnExpression
	 *     DUnaryOperation returns DReturnExpression
	 *     DCastExpression returns DReturnExpression
	 *     DCastExpression.DCastExpression_1_0_0_0 returns DReturnExpression
	 *     DTypedMemberReference returns DReturnExpression
	 *     DTypedMemberReference.DAssignment_1_0_0_0_0 returns DReturnExpression
	 *     DTypedMemberReference.DTypedMemberReference_1_1_0_0_0 returns DReturnExpression
	 *     DPrimaryExpression returns DReturnExpression
	 *     DReturnExpression returns DReturnExpression
	 *     DParenthesizedExpression returns DReturnExpression
	 *
	 * Constraint:
	 *     expression=DExpression?
	 */
	protected void sequence_DReturnExpression(ISerializationContext context, DReturnExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DRichText returns DRichText
	 *
	 * Constraint:
	 *     (elements+=DTextOnly | (elements+=DTextStart elements+=DExpression (elements+=DTextMiddle elements+=DExpression)* elements+=DTextEnd))
	 */
	protected void sequence_DRichText(ISerializationContext context, DRichText semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DExpression returns DSelfExpression
	 *     DAssignment returns DSelfExpression
	 *     DOrExpression returns DSelfExpression
	 *     DOrExpression.DBinaryOperation_1_0_0_0 returns DSelfExpression
	 *     DAndExpression returns DSelfExpression
	 *     DAndExpression.DBinaryOperation_1_0_0_0 returns DSelfExpression
	 *     DEqualityExpression returns DSelfExpression
	 *     DEqualityExpression.DBinaryOperation_1_0_0_0 returns DSelfExpression
	 *     DRelationalExpression returns DSelfExpression
	 *     DRelationalExpression.DInstanceOfExpression_1_0_0_0_0 returns DSelfExpression
	 *     DRelationalExpression.DBinaryOperation_1_1_0_0_0 returns DSelfExpression
	 *     DOtherOperatorExpression returns DSelfExpression
	 *     DOtherOperatorExpression.DBinaryOperation_1_0_0_0 returns DSelfExpression
	 *     DAdditiveExpression returns DSelfExpression
	 *     DAdditiveExpression.DBinaryOperation_1_0_0_0 returns DSelfExpression
	 *     DMultiplicativeExpression returns DSelfExpression
	 *     DMultiplicativeExpression.DBinaryOperation_1_0_0_0 returns DSelfExpression
	 *     DUnaryOperation returns DSelfExpression
	 *     DCastExpression returns DSelfExpression
	 *     DCastExpression.DCastExpression_1_0_0_0 returns DSelfExpression
	 *     DTypedMemberReference returns DSelfExpression
	 *     DTypedMemberReference.DAssignment_1_0_0_0_0 returns DSelfExpression
	 *     DTypedMemberReference.DTypedMemberReference_1_1_0_0_0 returns DSelfExpression
	 *     DPrimaryExpression returns DSelfExpression
	 *     DSelfExpression returns DSelfExpression
	 *     DParenthesizedExpression returns DSelfExpression
	 *
	 * Constraint:
	 *     {DSelfExpression}
	 */
	protected void sequence_DSelfExpression(ISerializationContext context, DSelfExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DExpression returns DStringLiteral
	 *     DAssignment returns DStringLiteral
	 *     DOrExpression returns DStringLiteral
	 *     DOrExpression.DBinaryOperation_1_0_0_0 returns DStringLiteral
	 *     DAndExpression returns DStringLiteral
	 *     DAndExpression.DBinaryOperation_1_0_0_0 returns DStringLiteral
	 *     DEqualityExpression returns DStringLiteral
	 *     DEqualityExpression.DBinaryOperation_1_0_0_0 returns DStringLiteral
	 *     DRelationalExpression returns DStringLiteral
	 *     DRelationalExpression.DInstanceOfExpression_1_0_0_0_0 returns DStringLiteral
	 *     DRelationalExpression.DBinaryOperation_1_1_0_0_0 returns DStringLiteral
	 *     DOtherOperatorExpression returns DStringLiteral
	 *     DOtherOperatorExpression.DBinaryOperation_1_0_0_0 returns DStringLiteral
	 *     DAdditiveExpression returns DStringLiteral
	 *     DAdditiveExpression.DBinaryOperation_1_0_0_0 returns DStringLiteral
	 *     DMultiplicativeExpression returns DStringLiteral
	 *     DMultiplicativeExpression.DBinaryOperation_1_0_0_0 returns DStringLiteral
	 *     DUnaryOperation returns DStringLiteral
	 *     DCastExpression returns DStringLiteral
	 *     DCastExpression.DCastExpression_1_0_0_0 returns DStringLiteral
	 *     DTypedMemberReference returns DStringLiteral
	 *     DTypedMemberReference.DAssignment_1_0_0_0_0 returns DStringLiteral
	 *     DTypedMemberReference.DTypedMemberReference_1_1_0_0_0 returns DStringLiteral
	 *     DPrimaryExpression returns DStringLiteral
	 *     DLiteralExpression returns DStringLiteral
	 *     DParenthesizedExpression returns DStringLiteral
	 *     DStringLiteral returns DStringLiteral
	 *
	 * Constraint:
	 *     value=STRING
	 */
	protected void sequence_DStringLiteral(ISerializationContext context, DStringLiteral semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DmxPackage.Literals.DSTRING_LITERAL__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DmxPackage.Literals.DSTRING_LITERAL__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDStringLiteralAccess().getValueSTRINGTerminalRuleCall_1_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     DTextEnd returns DText
	 *
	 * Constraint:
	 *     value=PLAIN_TEXT_END
	 */
	protected void sequence_DTextEnd(ISerializationContext context, DText semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BasePackage.Literals.DTEXT__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BasePackage.Literals.DTEXT__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDTextEndAccess().getValuePLAIN_TEXT_ENDTerminalRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     DTextMiddle returns DText
	 *
	 * Constraint:
	 *     value=PLAIN_TEXT_MIDDLE
	 */
	protected void sequence_DTextMiddle(ISerializationContext context, DText semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BasePackage.Literals.DTEXT__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BasePackage.Literals.DTEXT__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDTextMiddleAccess().getValuePLAIN_TEXT_MIDDLETerminalRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     DTextOnly returns DText
	 *
	 * Constraint:
	 *     value=PLAIN_TEXT_ONLY
	 */
	protected void sequence_DTextOnly(ISerializationContext context, DText semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BasePackage.Literals.DTEXT__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BasePackage.Literals.DTEXT__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDTextOnlyAccess().getValuePLAIN_TEXT_ONLYTerminalRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     DTextStart returns DText
	 *
	 * Constraint:
	 *     value=PLAIN_TEXT_START
	 */
	protected void sequence_DTextStart(ISerializationContext context, DText semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BasePackage.Literals.DTEXT__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BasePackage.Literals.DTEXT__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDTextStartAccess().getValuePLAIN_TEXT_STARTTerminalRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     DExpression returns DTypedMemberReference
	 *     DAssignment returns DTypedMemberReference
	 *     DOrExpression returns DTypedMemberReference
	 *     DOrExpression.DBinaryOperation_1_0_0_0 returns DTypedMemberReference
	 *     DAndExpression returns DTypedMemberReference
	 *     DAndExpression.DBinaryOperation_1_0_0_0 returns DTypedMemberReference
	 *     DEqualityExpression returns DTypedMemberReference
	 *     DEqualityExpression.DBinaryOperation_1_0_0_0 returns DTypedMemberReference
	 *     DRelationalExpression returns DTypedMemberReference
	 *     DRelationalExpression.DInstanceOfExpression_1_0_0_0_0 returns DTypedMemberReference
	 *     DRelationalExpression.DBinaryOperation_1_1_0_0_0 returns DTypedMemberReference
	 *     DOtherOperatorExpression returns DTypedMemberReference
	 *     DOtherOperatorExpression.DBinaryOperation_1_0_0_0 returns DTypedMemberReference
	 *     DAdditiveExpression returns DTypedMemberReference
	 *     DAdditiveExpression.DBinaryOperation_1_0_0_0 returns DTypedMemberReference
	 *     DMultiplicativeExpression returns DTypedMemberReference
	 *     DMultiplicativeExpression.DBinaryOperation_1_0_0_0 returns DTypedMemberReference
	 *     DUnaryOperation returns DTypedMemberReference
	 *     DCastExpression returns DTypedMemberReference
	 *     DCastExpression.DCastExpression_1_0_0_0 returns DTypedMemberReference
	 *     DTypedMemberReference returns DTypedMemberReference
	 *     DTypedMemberReference.DAssignment_1_0_0_0_0 returns DTypedMemberReference
	 *     DTypedMemberReference.DTypedMemberReference_1_1_0_0_0 returns DTypedMemberReference
	 *     DPrimaryExpression returns DTypedMemberReference
	 *     DParenthesizedExpression returns DTypedMemberReference
	 *
	 * Constraint:
	 *     (
	 *         memberContainerReference=DTypedMemberReference_DTypedMemberReference_1_1_0_0_0 
	 *         member=[DTypedMember|ID] 
	 *         ((explicitOperationCall?='(' (memberCallArguments+=DExpression memberCallArguments+=DExpression*)?) | before?='@before')?
	 *     )
	 */
	protected void sequence_DTypedMemberReference(ISerializationContext context, DTypedMemberReference semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DExpression returns DUnaryOperation
	 *     DAssignment returns DUnaryOperation
	 *     DOrExpression returns DUnaryOperation
	 *     DOrExpression.DBinaryOperation_1_0_0_0 returns DUnaryOperation
	 *     DAndExpression returns DUnaryOperation
	 *     DAndExpression.DBinaryOperation_1_0_0_0 returns DUnaryOperation
	 *     DEqualityExpression returns DUnaryOperation
	 *     DEqualityExpression.DBinaryOperation_1_0_0_0 returns DUnaryOperation
	 *     DRelationalExpression returns DUnaryOperation
	 *     DRelationalExpression.DInstanceOfExpression_1_0_0_0_0 returns DUnaryOperation
	 *     DRelationalExpression.DBinaryOperation_1_1_0_0_0 returns DUnaryOperation
	 *     DOtherOperatorExpression returns DUnaryOperation
	 *     DOtherOperatorExpression.DBinaryOperation_1_0_0_0 returns DUnaryOperation
	 *     DAdditiveExpression returns DUnaryOperation
	 *     DAdditiveExpression.DBinaryOperation_1_0_0_0 returns DUnaryOperation
	 *     DMultiplicativeExpression returns DUnaryOperation
	 *     DMultiplicativeExpression.DBinaryOperation_1_0_0_0 returns DUnaryOperation
	 *     DUnaryOperation returns DUnaryOperation
	 *     DCastExpression returns DUnaryOperation
	 *     DCastExpression.DCastExpression_1_0_0_0 returns DUnaryOperation
	 *     DTypedMemberReference returns DUnaryOperation
	 *     DTypedMemberReference.DAssignment_1_0_0_0_0 returns DUnaryOperation
	 *     DTypedMemberReference.DTypedMemberReference_1_1_0_0_0 returns DUnaryOperation
	 *     DPrimaryExpression returns DUnaryOperation
	 *     DParenthesizedExpression returns DUnaryOperation
	 *
	 * Constraint:
	 *     (operator=OpUnary operand=DUnaryOperation)
	 */
	protected void sequence_DUnaryOperation(ISerializationContext context, DUnaryOperation semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DmxPackage.Literals.DUNARY_OPERATION__OPERATOR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DmxPackage.Literals.DUNARY_OPERATION__OPERATOR));
			if (transientValues.isValueTransient(semanticObject, DmxPackage.Literals.DUNARY_OPERATION__OPERAND) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DmxPackage.Literals.DUNARY_OPERATION__OPERAND));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDUnaryOperationAccess().getOperatorOpUnaryEnumRuleCall_0_1_0(), semanticObject.getOperator());
		feeder.accept(grammarAccess.getDUnaryOperationAccess().getOperandDUnaryOperationParserRuleCall_0_2_0(), semanticObject.getOperand());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     DmxModel returns DmxModel
	 *
	 * Constraint:
	 *     (texts+=DRichText* expressions+=DExpression*)
	 */
	protected void sequence_DmxModel(ISerializationContext context, DmxModel semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
