/**
 * generated by Xtext 2.16.0
 */
package com.mimacom.ddd.sm.sms.generator;

import com.google.common.base.Objects;
import com.google.common.collect.Iterators;
import com.google.inject.Inject;
import com.mimacom.ddd.sm.sms.SComplexType;
import com.mimacom.ddd.sm.sms.SDeducibleElement;
import com.mimacom.ddd.sm.sms.SDeducibleMemberElement;
import com.mimacom.ddd.sm.sms.SElementNature;
import com.mimacom.ddd.sm.sms.SFeature;
import java.io.CharArrayWriter;
import java.util.Iterator;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.EcoreUtil2;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.resource.SaveOptions;
import org.eclipse.xtext.resource.XtextResourceSet;
import org.eclipse.xtext.serializer.ISerializer;
import org.eclipse.xtext.xbase.lib.Exceptions;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.eclipse.xtext.xbase.lib.StringExtensions;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class SmsGenerator extends AbstractGenerator {
  @Inject
  private ISerializer serializer;
  
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    try {
      final XtextResourceSet targetRS = new XtextResourceSet();
      EcoreUtil2.<XtextResourceSet>clone(targetRS, resource.getResourceSet());
      final Resource resourceCopy = targetRS.getResource(resource.getURI(), false);
      boolean _removeTransformationItems = this.removeTransformationItems(resourceCopy);
      if (_removeTransformationItems) {
        final CharArrayWriter writer = new CharArrayWriter(1000);
        final SaveOptions saveOptions = SaveOptions.getOptions(null);
        this.serializer.serialize(IterableExtensions.<EObject>head(resourceCopy.getContents()), writer, saveOptions);
        String _firstUpper = StringExtensions.toFirstUpper(resource.getURI().lastSegment());
        String _plus = ("Deduced" + _firstUpper);
        fsa.generateFile(_plus, writer.toString());
      }
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  public boolean removeTransformationItems(final Resource resource) {
    boolean hadSyntheticItems = false;
    final Iterator<SDeducibleElement> elements = Iterators.<SDeducibleElement>filter(resource.getAllContents(), SDeducibleElement.class);
    while (elements.hasNext()) {
      {
        final SDeducibleElement e = elements.next();
        e.setDeductionRule(null);
        hadSyntheticItems = (hadSyntheticItems || ((e.getSynthetic() != null) && (e.getSynthetic()).booleanValue()));
        e.unsetSynthetic();
      }
    }
    final Iterator<SDeducibleMemberElement> members = Iterators.<SDeducibleMemberElement>filter(resource.getAllContents(), SDeducibleMemberElement.class);
    while (members.hasNext()) {
      {
        final SDeducibleMemberElement m = members.next();
        m.setDeductionRule(null);
        hadSyntheticItems = (hadSyntheticItems || ((m.getSynthetic() != null) && (m.getSynthetic()).booleanValue()));
        m.unsetSynthetic();
      }
    }
    return hadSyntheticItems;
  }
  
  public CharSequence generate(final SComplexType type) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("type ");
    {
      SElementNature _nature = type.getNature();
      boolean _equals = Objects.equal(_nature, SElementNature.DEDUCTION_RULE);
      if (_equals) {
        String _name = type.getDeductionRule().getSource().getName();
        _builder.append(_name);
      } else {
        String _name_1 = type.getName();
        _builder.append(_name_1);
        _builder.append("j");
      }
    }
    _builder.append(" {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    {
      EList<SFeature> _features = type.getFeatures();
      for(final SFeature f : _features) {
        {
          SElementNature _nature_1 = f.getNature();
          boolean _equals_1 = Objects.equal(_nature_1, SElementNature.DEDUCTION_RULE);
          if (_equals_1) {
            String _name_2 = f.getDeductionRule().getSource().getName();
            _builder.append(_name_2, "\t");
          } else {
            String _name_3 = f.getName();
            _builder.append(_name_3, "\t");
          }
        }
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
}
