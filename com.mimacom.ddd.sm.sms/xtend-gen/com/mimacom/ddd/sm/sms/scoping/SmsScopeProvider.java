/**
 * generated by Xtext 2.16.0
 */
package com.mimacom.ddd.sm.sms.scoping;

import com.google.common.base.Objects;
import com.mimacom.ddd.dm.base.DComplexType;
import com.mimacom.ddd.dm.base.DNamedElement;
import com.mimacom.ddd.sm.sms.SComplexType;
import com.mimacom.ddd.sm.sms.SmsPackage;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.scoping.Scopes;
import org.eclipse.xtext.scoping.impl.ImportedNamespaceAwareLocalScopeProvider;

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
@SuppressWarnings("all")
public class SmsScopeProvider extends ImportedNamespaceAwareLocalScopeProvider {
  private static final SmsPackage epackage = SmsPackage.eINSTANCE;
  
  @Override
  public IScope getScope(final EObject context, final EReference reference) {
    IScope _xblockexpression = null;
    {
      EReference _sMemberDeductionRule_Source = SmsScopeProvider.epackage.getSMemberDeductionRule_Source();
      boolean _equals = Objects.equal(reference, _sMemberDeductionRule_Source);
      if (_equals) {
        final EObject container = context.eContainer();
        if ((container instanceof SComplexType)) {
          final DNamedElement sourceType = ((SComplexType)container).getDeductionRule().getSource();
          if ((sourceType instanceof DComplexType)) {
            return this.getInheritedFeaturesScope(((DComplexType)sourceType), IScope.NULLSCOPE);
          }
        }
      }
      _xblockexpression = super.getScope(context, reference);
    }
    return _xblockexpression;
  }
  
  protected IScope getInheritedFeaturesScope(final DComplexType type, final IScope outerScope) {
    DComplexType _superType = type.getSuperType();
    boolean _tripleNotEquals = (_superType != null);
    if (_tripleNotEquals) {
      return Scopes.scopeFor(type.getFeatures(), this.getInheritedFeaturesScope(type.getSuperType(), outerScope));
    } else {
      return Scopes.scopeFor(type.getFeatures(), outerScope);
    }
  }
}
