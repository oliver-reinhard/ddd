/*
 * generated by Xtext 2.16.0
 */
grammar InternalSms;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package com.mimacom.ddd.sm.sms.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package com.mimacom.ddd.sm.sms.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import com.mimacom.ddd.sm.sms.services.SmsGrammarAccess;

}

@parser::members {

 	private SmsGrammarAccess grammarAccess;

    public InternalSmsParser(TokenStream input, SmsGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "SDomain";
   	}

   	@Override
   	protected SmsGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleSDomain
entryRuleSDomain returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSDomainRule()); }
	iv_ruleSDomain=ruleSDomain
	{ $current=$iv_ruleSDomain.current; }
	EOF;

// Rule SDomain
ruleSDomain returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='domain'
		{
			newLeafNode(otherlv_0, grammarAccess.getSDomainAccess().getDomainKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSDomainAccess().getNameSQualifiedNameParserRuleCall_1_0());
				}
				lv_name_1_0=ruleSQualifiedName
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSDomainRule());
					}
					set(
						$current,
						"name",
						lv_name_1_0,
						"com.mimacom.ddd.sm.sms.Sms.SQualifiedName");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getSDomainAccess().getImportsSImportParserRuleCall_2_0());
				}
				lv_imports_2_0=ruleSImport
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSDomainRule());
					}
					add(
						$current,
						"imports",
						lv_imports_2_0,
						"com.mimacom.ddd.sm.sms.Sms.SImport");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getSDomainAccess().getTypesSTypeParserRuleCall_3_0_0());
					}
					lv_types_3_0=ruleSType
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSDomainRule());
						}
						add(
							$current,
							"types",
							lv_types_3_0,
							"com.mimacom.ddd.sm.sms.Sms.SType");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getSDomainAccess().getAggregatesSAggregateParserRuleCall_3_1_0());
					}
					lv_aggregates_4_0=ruleSAggregate
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSDomainRule());
						}
						add(
							$current,
							"aggregates",
							lv_aggregates_4_0,
							"com.mimacom.ddd.sm.sms.Sms.SAggregate");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleSImport
entryRuleSImport returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSImportRule()); }
	iv_ruleSImport=ruleSImport
	{ $current=$iv_ruleSImport.current; }
	EOF;

// Rule SImport
ruleSImport returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='import'
		{
			newLeafNode(otherlv_0, grammarAccess.getSImportAccess().getImportKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSImportAccess().getImportedNamespaceSQualifiedNameWithWildcardParserRuleCall_1_0());
				}
				lv_importedNamespace_1_0=ruleSQualifiedNameWithWildcard
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSImportRule());
					}
					set(
						$current,
						"importedNamespace",
						lv_importedNamespace_1_0,
						"com.mimacom.ddd.sm.sms.Sms.SQualifiedNameWithWildcard");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleSDeductionRule
entryRuleSDeductionRule returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSDeductionRuleRule()); }
	iv_ruleSDeductionRule=ruleSDeductionRule
	{ $current=$iv_ruleSDeductionRule.current; }
	EOF;

// Rule SDeductionRule
ruleSDeductionRule returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSDeductionRuleRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getSDeductionRuleAccess().getSourceDNamedElementCrossReference_0_0());
				}
				ruleSQualifiedName
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getSDeductionRuleAccess().getTransformSTransformParserRuleCall_1_0());
				}
				lv_transform_1_0=ruleSTransform
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSDeductionRuleRule());
					}
					set(
						$current,
						"transform",
						lv_transform_1_0,
						"com.mimacom.ddd.sm.sms.Sms.STransform");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleSMemberDeductionRule
entryRuleSMemberDeductionRule returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSMemberDeductionRuleRule()); }
	iv_ruleSMemberDeductionRule=ruleSMemberDeductionRule
	{ $current=$iv_ruleSMemberDeductionRule.current; }
	EOF;

// Rule SMemberDeductionRule
ruleSMemberDeductionRule returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSMemberDeductionRuleRule());
					}
				}
				otherlv_0=RULE_ID
				{
					newLeafNode(otherlv_0, grammarAccess.getSMemberDeductionRuleAccess().getSourceDNamedElementCrossReference_0_0());
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getSMemberDeductionRuleAccess().getTransformSTransformParserRuleCall_1_0());
				}
				lv_transform_1_0=ruleSTransform
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSMemberDeductionRuleRule());
					}
					set(
						$current,
						"transform",
						lv_transform_1_0,
						"com.mimacom.ddd.sm.sms.Sms.STransform");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleSTransform
entryRuleSTransform returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSTransformRule()); }
	iv_ruleSTransform=ruleSTransform
	{ $current=$iv_ruleSTransform.current; }
	EOF;

// Rule STransform
ruleSTransform returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getSTransformAccess().getSSpoofTransformParserRuleCall_0());
		}
		this_SSpoofTransform_0=ruleSSpoofTransform
		{
			$current = $this_SSpoofTransform_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getSTransformAccess().getSMorphTransformParserRuleCall_1());
		}
		this_SMorphTransform_1=ruleSMorphTransform
		{
			$current = $this_SMorphTransform_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleSSpoofTransform
entryRuleSSpoofTransform returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSSpoofTransformRule()); }
	iv_ruleSSpoofTransform=ruleSSpoofTransform
	{ $current=$iv_ruleSSpoofTransform.current; }
	EOF;

// Rule SSpoofTransform
ruleSSpoofTransform returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getSSpoofTransformAccess().getSSpoofTransformAction_0(),
					$current);
			}
		)
		otherlv_1='spoof'
		{
			newLeafNode(otherlv_1, grammarAccess.getSSpoofTransformAccess().getSpoofKeyword_1());
		}
	)
;

// Entry rule entryRuleSMorphTransform
entryRuleSMorphTransform returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSMorphTransformRule()); }
	iv_ruleSMorphTransform=ruleSMorphTransform
	{ $current=$iv_ruleSMorphTransform.current; }
	EOF;

// Rule SMorphTransform
ruleSMorphTransform returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getSMorphTransformAccess().getSMorphTransformAction_0(),
					$current);
			}
		)
		otherlv_1='morph'
		{
			newLeafNode(otherlv_1, grammarAccess.getSMorphTransformAccess().getMorphKeyword_1());
		}
		(
			otherlv_2='name'
			{
				newLeafNode(otherlv_2, grammarAccess.getSMorphTransformAccess().getNameKeyword_2_0());
			}
			otherlv_3='='
			{
				newLeafNode(otherlv_3, grammarAccess.getSMorphTransformAccess().getEqualsSignKeyword_2_1());
			}
			(
				(
					lv_renameTo_4_0=RULE_ID
					{
						newLeafNode(lv_renameTo_4_0, grammarAccess.getSMorphTransformAccess().getRenameToIDTerminalRuleCall_2_2_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getSMorphTransformRule());
						}
						setWithLastConsumed(
							$current,
							"renameTo",
							lv_renameTo_4_0,
							"org.eclipse.xtext.common.Terminals.ID");
					}
				)
			)
		)?
		(
			otherlv_5='type'
			{
				newLeafNode(otherlv_5, grammarAccess.getSMorphTransformAccess().getTypeKeyword_3_0());
			}
			otherlv_6='='
			{
				newLeafNode(otherlv_6, grammarAccess.getSMorphTransformAccess().getEqualsSignKeyword_3_1());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getSMorphTransformRule());
						}
					}
					otherlv_7=RULE_ID
					{
						newLeafNode(otherlv_7, grammarAccess.getSMorphTransformAccess().getRetypeToSTypeCrossReference_3_2_0());
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getSMorphTransformAccess().getRemultiplyToSMultiplicityParserRuleCall_3_3_0());
					}
					lv_remultiplyTo_8_0=ruleSMultiplicity
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSMorphTransformRule());
						}
						set(
							$current,
							"remultiplyTo",
							lv_remultiplyTo_8_0,
							"com.mimacom.ddd.sm.sms.Sms.SMultiplicity");
						afterParserOrEnumRuleCall();
					}
				)
			)?
		)?
	)
;

// Entry rule entryRuleSAggregate
entryRuleSAggregate returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSAggregateRule()); }
	iv_ruleSAggregate=ruleSAggregate
	{ $current=$iv_ruleSAggregate.current; }
	EOF;

// Rule SAggregate
ruleSAggregate returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getSAggregateAccess().getSAggregateAction_0(),
					$current);
			}
		)
		otherlv_1='aggregate'
		{
			newLeafNode(otherlv_1, grammarAccess.getSAggregateAccess().getAggregateKeyword_1());
		}
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getSAggregateAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSAggregateAccess().getTypesSTypeParserRuleCall_3_0());
				}
				lv_types_3_0=ruleSType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSAggregateRule());
					}
					add(
						$current,
						"types",
						lv_types_3_0,
						"com.mimacom.ddd.sm.sms.Sms.SType");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_4='}'
		{
			newLeafNode(otherlv_4, grammarAccess.getSAggregateAccess().getRightCurlyBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleSType
entryRuleSType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSTypeRule()); }
	iv_ruleSType=ruleSType
	{ $current=$iv_ruleSType.current; }
	EOF;

// Rule SType
ruleSType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getSTypeAccess().getSPrimitiveParserRuleCall_0());
		}
		this_SPrimitive_0=ruleSPrimitive
		{
			$current = $this_SPrimitive_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getSTypeAccess().getSEnumerationParserRuleCall_1());
		}
		this_SEnumeration_1=ruleSEnumeration
		{
			$current = $this_SEnumeration_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getSTypeAccess().getSRootTypeParserRuleCall_2());
		}
		this_SRootType_2=ruleSRootType
		{
			$current = $this_SRootType_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getSTypeAccess().getSDetailTypeParserRuleCall_3());
		}
		this_SDetailType_3=ruleSDetailType
		{
			$current = $this_SDetailType_3.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleSConstraint
entryRuleSConstraint returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSConstraintRule()); }
	iv_ruleSConstraint=ruleSConstraint
	{ $current=$iv_ruleSConstraint.current; }
	EOF;

// Rule SConstraint
ruleSConstraint returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='constraint'
		{
			newLeafNode(otherlv_0, grammarAccess.getSConstraintAccess().getConstraintKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getSConstraintAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSConstraintRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2=':'
		{
			newLeafNode(otherlv_2, grammarAccess.getSConstraintAccess().getColonKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSConstraintAccess().getConditionSExpressionParserRuleCall_3_0());
				}
				lv_condition_3_0=ruleSExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSConstraintRule());
					}
					set(
						$current,
						"condition",
						lv_condition_3_0,
						"com.mimacom.ddd.sm.sms.Sms.SExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleSPrimitive
entryRuleSPrimitive returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSPrimitiveRule()); }
	iv_ruleSPrimitive=ruleSPrimitive
	{ $current=$iv_ruleSPrimitive.current; }
	EOF;

// Rule SPrimitive
ruleSPrimitive returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='deduced'
			{
				newLeafNode(otherlv_0, grammarAccess.getSPrimitiveAccess().getDeducedKeyword_0_0());
			}
			otherlv_1='primitive'
			{
				newLeafNode(otherlv_1, grammarAccess.getSPrimitiveAccess().getPrimitiveKeyword_0_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getSPrimitiveAccess().getDeductionRuleSDeductionRuleParserRuleCall_0_2_0());
					}
					lv_deductionRule_2_0=ruleSDeductionRule
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSPrimitiveRule());
						}
						set(
							$current,
							"deductionRule",
							lv_deductionRule_2_0,
							"com.mimacom.ddd.sm.sms.Sms.SDeductionRule");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			otherlv_3='primitive'
			{
				newLeafNode(otherlv_3, grammarAccess.getSPrimitiveAccess().getPrimitiveKeyword_1_0());
			}
			(
				(
					lv_name_4_0=RULE_ID
					{
						newLeafNode(lv_name_4_0, grammarAccess.getSPrimitiveAccess().getNameIDTerminalRuleCall_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getSPrimitiveRule());
						}
						setWithLastConsumed(
							$current,
							"name",
							lv_name_4_0,
							"org.eclipse.xtext.common.Terminals.ID");
					}
				)
			)
			otherlv_5='{'
			{
				newLeafNode(otherlv_5, grammarAccess.getSPrimitiveAccess().getLeftCurlyBracketKeyword_1_2());
			}
			(
				(
					{ 
					  getUnorderedGroupHelper().enter(grammarAccess.getSPrimitiveAccess().getUnorderedGroup_1_3());
					}
					(
						(
				(
					{getUnorderedGroupHelper().canSelect(grammarAccess.getSPrimitiveAccess().getUnorderedGroup_1_3(), 0)}?=>(
						{
							getUnorderedGroupHelper().select(grammarAccess.getSPrimitiveAccess().getUnorderedGroup_1_3(), 0);
						}
									({true}?=>(otherlv_7='redefines'
									{
										newLeafNode(otherlv_7, grammarAccess.getSPrimitiveAccess().getRedefinesKeyword_1_3_0_0());
									}
									(
										(
											{
												if ($current==null) {
													$current = createModelElement(grammarAccess.getSPrimitiveRule());
												}
											}
											otherlv_8=RULE_ID
											{
												newLeafNode(otherlv_8, grammarAccess.getSPrimitiveAccess().getRedefinesSPrimitiveCrossReference_1_3_0_1_0());
											}
										)
									)
									))
						{ 
							getUnorderedGroupHelper().returnFromSelection(grammarAccess.getSPrimitiveAccess().getUnorderedGroup_1_3());
						}
					)
				)|
				(
					{getUnorderedGroupHelper().canSelect(grammarAccess.getSPrimitiveAccess().getUnorderedGroup_1_3(), 1)}?=>(
						{
							getUnorderedGroupHelper().select(grammarAccess.getSPrimitiveAccess().getUnorderedGroup_1_3(), 1);
						}
									({true}?=>(otherlv_9='realizes'
									{
										newLeafNode(otherlv_9, grammarAccess.getSPrimitiveAccess().getRealizesKeyword_1_3_1_0());
									}
									(
										(
											{
												if ($current==null) {
													$current = createModelElement(grammarAccess.getSPrimitiveRule());
												}
											}
											{
												newCompositeNode(grammarAccess.getSPrimitiveAccess().getRealizesDPrimitiveCrossReference_1_3_1_1_0());
											}
											ruleSQualifiedName
											{
												afterParserOrEnumRuleCall();
											}
										)
									)
									))
						{ 
							getUnorderedGroupHelper().returnFromSelection(grammarAccess.getSPrimitiveAccess().getUnorderedGroup_1_3());
						}
					)
				)
						)*
					)
				)
					{ 
					  getUnorderedGroupHelper().leave(grammarAccess.getSPrimitiveAccess().getUnorderedGroup_1_3());
					}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getSPrimitiveAccess().getConstraintsSConstraintParserRuleCall_1_4_0());
					}
					lv_constraints_11_0=ruleSConstraint
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSPrimitiveRule());
						}
						add(
							$current,
							"constraints",
							lv_constraints_11_0,
							"com.mimacom.ddd.sm.sms.Sms.SConstraint");
						afterParserOrEnumRuleCall();
					}
				)
			)*
			otherlv_12='}'
			{
				newLeafNode(otherlv_12, grammarAccess.getSPrimitiveAccess().getRightCurlyBracketKeyword_1_5());
			}
		)
	)
;

// Entry rule entryRuleSEnumeration
entryRuleSEnumeration returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSEnumerationRule()); }
	iv_ruleSEnumeration=ruleSEnumeration
	{ $current=$iv_ruleSEnumeration.current; }
	EOF;

// Rule SEnumeration
ruleSEnumeration returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='enumeration'
		{
			newLeafNode(otherlv_0, grammarAccess.getSEnumerationAccess().getEnumerationKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getSEnumerationAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSEnumerationRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getSEnumerationAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getSEnumerationAccess().getLiteralsSLiteralParserRuleCall_3_0_0());
					}
					lv_literals_3_0=ruleSLiteral
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSEnumerationRule());
						}
						add(
							$current,
							"literals",
							lv_literals_3_0,
							"com.mimacom.ddd.sm.sms.Sms.SLiteral");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_4=','
				{
					newLeafNode(otherlv_4, grammarAccess.getSEnumerationAccess().getCommaKeyword_3_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getSEnumerationAccess().getLiteralsSLiteralParserRuleCall_3_1_1_0());
						}
						lv_literals_5_0=ruleSLiteral
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getSEnumerationRule());
							}
							add(
								$current,
								"literals",
								lv_literals_5_0,
								"com.mimacom.ddd.sm.sms.Sms.SLiteral");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getSEnumerationAccess().getConstraintsSConstraintParserRuleCall_4_0());
				}
				lv_constraints_6_0=ruleSConstraint
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSEnumerationRule());
					}
					add(
						$current,
						"constraints",
						lv_constraints_6_0,
						"com.mimacom.ddd.sm.sms.Sms.SConstraint");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_7='}'
		{
			newLeafNode(otherlv_7, grammarAccess.getSEnumerationAccess().getRightCurlyBracketKeyword_5());
		}
	)
;

// Entry rule entryRuleSLiteral
entryRuleSLiteral returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSLiteralRule()); }
	iv_ruleSLiteral=ruleSLiteral
	{ $current=$iv_ruleSLiteral.current; }
	EOF;

// Rule SLiteral
ruleSLiteral returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_name_0_0=RULE_ID
			{
				newLeafNode(lv_name_0_0, grammarAccess.getSLiteralAccess().getNameIDTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getSLiteralRule());
				}
				setWithLastConsumed(
					$current,
					"name",
					lv_name_0_0,
					"org.eclipse.xtext.common.Terminals.ID");
			}
		)
	)
;

// Entry rule entryRuleSRootType
entryRuleSRootType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSRootTypeRule()); }
	iv_ruleSRootType=ruleSRootType
	{ $current=$iv_ruleSRootType.current; }
	EOF;

// Rule SRootType
ruleSRootType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				otherlv_0='deduced'
				{
					newLeafNode(otherlv_0, grammarAccess.getSRootTypeAccess().getDeducedKeyword_0_0_0());
				}
				(
					(
						lv_abstract_1_0='abstract'
						{
							newLeafNode(lv_abstract_1_0, grammarAccess.getSRootTypeAccess().getAbstractAbstractKeyword_0_0_1_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getSRootTypeRule());
							}
							setWithLastConsumed($current, "abstract", true, "abstract");
						}
					)
				)?
				otherlv_2='root'
				{
					newLeafNode(otherlv_2, grammarAccess.getSRootTypeAccess().getRootKeyword_0_0_2());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getSRootTypeAccess().getDeductionRuleSDeductionRuleParserRuleCall_0_0_3_0());
						}
						lv_deductionRule_3_0=ruleSDeductionRule
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getSRootTypeRule());
							}
							set(
								$current,
								"deductionRule",
								lv_deductionRule_3_0,
								"com.mimacom.ddd.sm.sms.Sms.SDeductionRule");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
			    |
			(
				(
					(
						lv_abstract_4_0='abstract'
						{
							newLeafNode(lv_abstract_4_0, grammarAccess.getSRootTypeAccess().getAbstractAbstractKeyword_0_1_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getSRootTypeRule());
							}
							setWithLastConsumed($current, "abstract", true, "abstract");
						}
					)
				)?
				otherlv_5='root'
				{
					newLeafNode(otherlv_5, grammarAccess.getSRootTypeAccess().getRootKeyword_0_1_1());
				}
				(
					(
						lv_name_6_0=RULE_ID
						{
							newLeafNode(lv_name_6_0, grammarAccess.getSRootTypeAccess().getNameIDTerminalRuleCall_0_1_2_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getSRootTypeRule());
							}
							setWithLastConsumed(
								$current,
								"name",
								lv_name_6_0,
								"org.eclipse.xtext.common.Terminals.ID");
						}
					)
				)
			)
		)
		{
			if ($current==null) {
				$current = createModelElement(grammarAccess.getSRootTypeRule());
			}
			newCompositeNode(grammarAccess.getSRootTypeAccess().getSComplexTypeParserRuleCall_1());
		}
		this_SComplexType_7=ruleSComplexType[$current]
		{
			$current = $this_SComplexType_7.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleSDetailType
entryRuleSDetailType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSDetailTypeRule()); }
	iv_ruleSDetailType=ruleSDetailType
	{ $current=$iv_ruleSDetailType.current; }
	EOF;

// Rule SDetailType
ruleSDetailType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				otherlv_0='deduced'
				{
					newLeafNode(otherlv_0, grammarAccess.getSDetailTypeAccess().getDeducedKeyword_0_0_0());
				}
				(
					(
						lv_abstract_1_0='abstract'
						{
							newLeafNode(lv_abstract_1_0, grammarAccess.getSDetailTypeAccess().getAbstractAbstractKeyword_0_0_1_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getSDetailTypeRule());
							}
							setWithLastConsumed($current, "abstract", true, "abstract");
						}
					)
				)?
				otherlv_2='detail'
				{
					newLeafNode(otherlv_2, grammarAccess.getSDetailTypeAccess().getDetailKeyword_0_0_2());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getSDetailTypeAccess().getDeductionRuleSDeductionRuleParserRuleCall_0_0_3_0());
						}
						lv_deductionRule_3_0=ruleSDeductionRule
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getSDetailTypeRule());
							}
							set(
								$current,
								"deductionRule",
								lv_deductionRule_3_0,
								"com.mimacom.ddd.sm.sms.Sms.SDeductionRule");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
			    |
			(
				(
					(
						lv_abstract_4_0='abstract'
						{
							newLeafNode(lv_abstract_4_0, grammarAccess.getSDetailTypeAccess().getAbstractAbstractKeyword_0_1_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getSDetailTypeRule());
							}
							setWithLastConsumed($current, "abstract", true, "abstract");
						}
					)
				)?
				otherlv_5='detail'
				{
					newLeafNode(otherlv_5, grammarAccess.getSDetailTypeAccess().getDetailKeyword_0_1_1());
				}
				(
					(
						lv_name_6_0=RULE_ID
						{
							newLeafNode(lv_name_6_0, grammarAccess.getSDetailTypeAccess().getNameIDTerminalRuleCall_0_1_2_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getSDetailTypeRule());
							}
							setWithLastConsumed(
								$current,
								"name",
								lv_name_6_0,
								"org.eclipse.xtext.common.Terminals.ID");
						}
					)
				)
			)
		)
		{
			if ($current==null) {
				$current = createModelElement(grammarAccess.getSDetailTypeRule());
			}
			newCompositeNode(grammarAccess.getSDetailTypeAccess().getSComplexTypeParserRuleCall_1());
		}
		this_SComplexType_7=ruleSComplexType[$current]
		{
			$current = $this_SComplexType_7.current;
			afterParserOrEnumRuleCall();
		}
	)
;


// Rule SComplexType
ruleSComplexType[EObject in_current]  returns [EObject current=in_current]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='extends'
			{
				newLeafNode(otherlv_0, grammarAccess.getSComplexTypeAccess().getExtendsKeyword_0_0());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getSComplexTypeRule());
						}
					}
					otherlv_1=RULE_ID
					{
						newLeafNode(otherlv_1, grammarAccess.getSComplexTypeAccess().getSuperTypeSComplexTypeCrossReference_0_1_0());
					}
				)
			)
		)?
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getSComplexTypeAccess().getLeftCurlyBracketKeyword_1());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getSComplexTypeAccess().getFeaturesSFeatureParserRuleCall_2_0_0());
					}
					lv_features_3_0=ruleSFeature
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSComplexTypeRule());
						}
						add(
							$current,
							"features",
							lv_features_3_0,
							"com.mimacom.ddd.sm.sms.Sms.SFeature");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getSComplexTypeAccess().getConstraintsSConstraintParserRuleCall_2_1_0());
					}
					lv_constraints_4_0=ruleSConstraint
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSComplexTypeRule());
						}
						add(
							$current,
							"constraints",
							lv_constraints_4_0,
							"com.mimacom.ddd.sm.sms.Sms.SConstraint");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_5='}'
		{
			newLeafNode(otherlv_5, grammarAccess.getSComplexTypeAccess().getRightCurlyBracketKeyword_3());
		}
	)
;

// Entry rule entryRuleSFeature
entryRuleSFeature returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSFeatureRule()); }
	iv_ruleSFeature=ruleSFeature
	{ $current=$iv_ruleSFeature.current; }
	EOF;

// Rule SFeature
ruleSFeature returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getSFeatureAccess().getSAssociationParserRuleCall_0());
		}
		this_SAssociation_0=ruleSAssociation
		{
			$current = $this_SAssociation_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getSFeatureAccess().getSAttributeParserRuleCall_1());
		}
		this_SAttribute_1=ruleSAttribute
		{
			$current = $this_SAttribute_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getSFeatureAccess().getSQueryParserRuleCall_2());
		}
		this_SQuery_2=ruleSQuery
		{
			$current = $this_SQuery_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleSAssociation
entryRuleSAssociation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSAssociationRule()); }
	iv_ruleSAssociation=ruleSAssociation
	{ $current=$iv_ruleSAssociation.current; }
	EOF;

// Rule SAssociation
ruleSAssociation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_derived_0_0='derived'
				{
					newLeafNode(lv_derived_0_0, grammarAccess.getSAssociationAccess().getDerivedDerivedKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSAssociationRule());
					}
					setWithLastConsumed($current, "derived", true, "derived");
				}
			)
		)?
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getSAssociationAccess().getKindSAssociationKindEnumRuleCall_1_0_0());
					}
					lv_kind_1_0=ruleSAssociationKind
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSAssociationRule());
						}
						set(
							$current,
							"kind",
							lv_kind_1_0,
							"com.mimacom.ddd.sm.sms.Sms.SAssociationKind");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getSAssociationAccess().getKindSAssociationKindInverseEnumRuleCall_1_1_0_0());
						}
						lv_kind_2_0=ruleSAssociationKindInverse
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getSAssociationRule());
							}
							set(
								$current,
								"kind",
								lv_kind_2_0,
								"com.mimacom.ddd.sm.sms.Sms.SAssociationKindInverse");
							afterParserOrEnumRuleCall();
						}
					)
				)
				otherlv_3='composite'
				{
					newLeafNode(otherlv_3, grammarAccess.getSAssociationAccess().getCompositeKeyword_1_1_1());
				}
			)
		)
		(
			(
				lv_name_4_0=RULE_ID
				{
					newLeafNode(lv_name_4_0, grammarAccess.getSAssociationAccess().getNameIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSAssociationRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_4_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_5=':'
		{
			newLeafNode(otherlv_5, grammarAccess.getSAssociationAccess().getColonKeyword_3());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSAssociationRule());
					}
				}
				otherlv_6=RULE_ID
				{
					newLeafNode(otherlv_6, grammarAccess.getSAssociationAccess().getTypeSRootTypeCrossReference_4_0());
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getSAssociationAccess().getMultiplicitySMultiplicityParserRuleCall_5_0());
				}
				lv_multiplicity_7_0=ruleSMultiplicity
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSAssociationRule());
					}
					set(
						$current,
						"multiplicity",
						lv_multiplicity_7_0,
						"com.mimacom.ddd.sm.sms.Sms.SMultiplicity");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleSAttribute
entryRuleSAttribute returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSAttributeRule()); }
	iv_ruleSAttribute=ruleSAttribute
	{ $current=$iv_ruleSAttribute.current; }
	EOF;

// Rule SAttribute
ruleSAttribute returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='deduced'
			{
				newLeafNode(otherlv_0, grammarAccess.getSAttributeAccess().getDeducedKeyword_0_0());
			}
			(
				(
					lv_detail_1_0='detail'
					{
						newLeafNode(lv_detail_1_0, grammarAccess.getSAttributeAccess().getDetailDetailKeyword_0_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getSAttributeRule());
						}
						setWithLastConsumed($current, "detail", true, "detail");
					}
				)
			)?
			(
				(
					{
						newCompositeNode(grammarAccess.getSAttributeAccess().getDeductionRuleSMemberDeductionRuleParserRuleCall_0_2_0());
					}
					lv_deductionRule_2_0=ruleSMemberDeductionRule
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSAttributeRule());
						}
						set(
							$current,
							"deductionRule",
							lv_deductionRule_2_0,
							"com.mimacom.ddd.sm.sms.Sms.SMemberDeductionRule");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			(
				(
					lv_detail_3_0='detail'
					{
						newLeafNode(lv_detail_3_0, grammarAccess.getSAttributeAccess().getDetailDetailKeyword_1_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getSAttributeRule());
						}
						setWithLastConsumed($current, "detail", true, "detail");
					}
				)
			)?
			(
				(
					lv_name_4_0=RULE_ID
					{
						newLeafNode(lv_name_4_0, grammarAccess.getSAttributeAccess().getNameIDTerminalRuleCall_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getSAttributeRule());
						}
						setWithLastConsumed(
							$current,
							"name",
							lv_name_4_0,
							"org.eclipse.xtext.common.Terminals.ID");
					}
				)
			)
			otherlv_5=':'
			{
				newLeafNode(otherlv_5, grammarAccess.getSAttributeAccess().getColonKeyword_1_2());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getSAttributeRule());
						}
					}
					otherlv_6=RULE_ID
					{
						newLeafNode(otherlv_6, grammarAccess.getSAttributeAccess().getTypeSSimpleTypeCrossReference_1_3_0());
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getSAttributeAccess().getMultiplicitySMultiplicityParserRuleCall_1_4_0());
					}
					lv_multiplicity_7_0=ruleSMultiplicity
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSAttributeRule());
						}
						set(
							$current,
							"multiplicity",
							lv_multiplicity_7_0,
							"com.mimacom.ddd.sm.sms.Sms.SMultiplicity");
						afterParserOrEnumRuleCall();
					}
				)
			)?
			(
				(
					lv_key_8_0='key'
					{
						newLeafNode(lv_key_8_0, grammarAccess.getSAttributeAccess().getKeyKeyKeyword_1_5_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getSAttributeRule());
						}
						setWithLastConsumed($current, "key", true, "key");
					}
				)
			)?
		)
	)
;

// Entry rule entryRuleSQuery
entryRuleSQuery returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSQueryRule()); }
	iv_ruleSQuery=ruleSQuery
	{ $current=$iv_ruleSQuery.current; }
	EOF;

// Rule SQuery
ruleSQuery returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_ID
				{
					newLeafNode(lv_name_0_0, grammarAccess.getSQueryAccess().getNameIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSQueryRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getSQueryAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getSQueryAccess().getParametersSQueryParameterParserRuleCall_2_0_0());
					}
					lv_parameters_2_0=ruleSQueryParameter
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSQueryRule());
						}
						add(
							$current,
							"parameters",
							lv_parameters_2_0,
							"com.mimacom.ddd.sm.sms.Sms.SQueryParameter");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_3=','
				{
					newLeafNode(otherlv_3, grammarAccess.getSQueryAccess().getCommaKeyword_2_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getSQueryAccess().getParametersSQueryParameterParserRuleCall_2_1_1_0());
						}
						lv_parameters_4_0=ruleSQueryParameter
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getSQueryRule());
							}
							add(
								$current,
								"parameters",
								lv_parameters_4_0,
								"com.mimacom.ddd.sm.sms.Sms.SQueryParameter");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		otherlv_5=')'
		{
			newLeafNode(otherlv_5, grammarAccess.getSQueryAccess().getRightParenthesisKeyword_3());
		}
		otherlv_6=':'
		{
			newLeafNode(otherlv_6, grammarAccess.getSQueryAccess().getColonKeyword_4());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSQueryRule());
					}
				}
				otherlv_7=RULE_ID
				{
					newLeafNode(otherlv_7, grammarAccess.getSQueryAccess().getTypeSTypeCrossReference_5_0());
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getSQueryAccess().getMultiplicitySMultiplicityParserRuleCall_6_0());
				}
				lv_multiplicity_8_0=ruleSMultiplicity
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSQueryRule());
					}
					set(
						$current,
						"multiplicity",
						lv_multiplicity_8_0,
						"com.mimacom.ddd.sm.sms.Sms.SMultiplicity");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			otherlv_9='returns'
			{
				newLeafNode(otherlv_9, grammarAccess.getSQueryAccess().getReturnsKeyword_7_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getSQueryAccess().getReturnsSExpressionParserRuleCall_7_1_0());
					}
					lv_returns_10_0=ruleSExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSQueryRule());
						}
						set(
							$current,
							"returns",
							lv_returns_10_0,
							"com.mimacom.ddd.sm.sms.Sms.SExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleSQueryParameter
entryRuleSQueryParameter returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSQueryParameterRule()); }
	iv_ruleSQueryParameter=ruleSQueryParameter
	{ $current=$iv_ruleSQueryParameter.current; }
	EOF;

// Rule SQueryParameter
ruleSQueryParameter returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_ID
				{
					newLeafNode(lv_name_0_0, grammarAccess.getSQueryParameterAccess().getNameIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSQueryParameterRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_1=':'
		{
			newLeafNode(otherlv_1, grammarAccess.getSQueryParameterAccess().getColonKeyword_1());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSQueryParameterRule());
					}
				}
				otherlv_2=RULE_ID
				{
					newLeafNode(otherlv_2, grammarAccess.getSQueryParameterAccess().getTypeSTypeCrossReference_2_0());
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getSQueryParameterAccess().getMultiplicitySMultiplicityParserRuleCall_3_0());
				}
				lv_multiplicity_3_0=ruleSMultiplicity
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSQueryParameterRule());
					}
					set(
						$current,
						"multiplicity",
						lv_multiplicity_3_0,
						"com.mimacom.ddd.sm.sms.Sms.SMultiplicity");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleSExpression
entryRuleSExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSExpressionRule()); }
	iv_ruleSExpression=ruleSExpression
	{ $current=$iv_ruleSExpression.current; }
	EOF;

// Rule SExpression
ruleSExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_expr_0_0=RULE_STRING
			{
				newLeafNode(lv_expr_0_0, grammarAccess.getSExpressionAccess().getExprSTRINGTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getSExpressionRule());
				}
				setWithLastConsumed(
					$current,
					"expr",
					lv_expr_0_0,
					"org.eclipse.xtext.common.Terminals.STRING");
			}
		)
	)
;

// Entry rule entryRuleSQualifiedNameWithWildcard
entryRuleSQualifiedNameWithWildcard returns [String current=null]:
	{ newCompositeNode(grammarAccess.getSQualifiedNameWithWildcardRule()); }
	iv_ruleSQualifiedNameWithWildcard=ruleSQualifiedNameWithWildcard
	{ $current=$iv_ruleSQualifiedNameWithWildcard.current.getText(); }
	EOF;

// Rule SQualifiedNameWithWildcard
ruleSQualifiedNameWithWildcard returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getSQualifiedNameWithWildcardAccess().getSQualifiedNameParserRuleCall_0());
		}
		this_SQualifiedName_0=ruleSQualifiedName
		{
			$current.merge(this_SQualifiedName_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		(
			kw='.*'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getSQualifiedNameWithWildcardAccess().getFullStopAsteriskKeyword_1());
			}
		)?
	)
;

// Entry rule entryRuleSQualifiedName
entryRuleSQualifiedName returns [String current=null]:
	{ newCompositeNode(grammarAccess.getSQualifiedNameRule()); }
	iv_ruleSQualifiedName=ruleSQualifiedName
	{ $current=$iv_ruleSQualifiedName.current.getText(); }
	EOF;

// Rule SQualifiedName
ruleSQualifiedName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_ID_0=RULE_ID
		{
			$current.merge(this_ID_0);
		}
		{
			newLeafNode(this_ID_0, grammarAccess.getSQualifiedNameAccess().getIDTerminalRuleCall_0());
		}
		(
			kw='.'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getSQualifiedNameAccess().getFullStopKeyword_1_0());
			}
			this_ID_2=RULE_ID
			{
				$current.merge(this_ID_2);
			}
			{
				newLeafNode(this_ID_2, grammarAccess.getSQualifiedNameAccess().getIDTerminalRuleCall_1_1());
			}
		)*
	)
;

// Entry rule entryRuleSMultiplicity
entryRuleSMultiplicity returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSMultiplicityRule()); }
	iv_ruleSMultiplicity=ruleSMultiplicity
	{ $current=$iv_ruleSMultiplicity.current; }
	EOF;

// Rule SMultiplicity
ruleSMultiplicity returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='('
		{
			newLeafNode(otherlv_0, grammarAccess.getSMultiplicityAccess().getLeftParenthesisKeyword_0());
		}
		(
			(
				lv_minOccurs_1_0=RULE_INT
				{
					newLeafNode(lv_minOccurs_1_0, grammarAccess.getSMultiplicityAccess().getMinOccursINTTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSMultiplicityRule());
					}
					setWithLastConsumed(
						$current,
						"minOccurs",
						lv_minOccurs_1_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		otherlv_2='..'
		{
			newLeafNode(otherlv_2, grammarAccess.getSMultiplicityAccess().getFullStopFullStopKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSMultiplicityAccess().getMaxOccursMULTIPLICITYParserRuleCall_3_0());
				}
				lv_maxOccurs_3_0=ruleMULTIPLICITY
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSMultiplicityRule());
					}
					set(
						$current,
						"maxOccurs",
						lv_maxOccurs_3_0,
						"com.mimacom.ddd.sm.sms.Sms.MULTIPLICITY");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4=')'
		{
			newLeafNode(otherlv_4, grammarAccess.getSMultiplicityAccess().getRightParenthesisKeyword_4());
		}
	)
;

// Entry rule entryRuleMULTIPLICITY
entryRuleMULTIPLICITY returns [String current=null]:
	{ newCompositeNode(grammarAccess.getMULTIPLICITYRule()); }
	iv_ruleMULTIPLICITY=ruleMULTIPLICITY
	{ $current=$iv_ruleMULTIPLICITY.current.getText(); }
	EOF;

// Rule MULTIPLICITY
ruleMULTIPLICITY returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_INT_0=RULE_INT
		{
			$current.merge(this_INT_0);
		}
		{
			newLeafNode(this_INT_0, grammarAccess.getMULTIPLICITYAccess().getINTTerminalRuleCall_0());
		}
		    |
		kw='*'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getMULTIPLICITYAccess().getAsteriskKeyword_1());
		}
	)
;

// Rule SAssociationKind
ruleSAssociationKind returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='reference'
			{
				$current = grammarAccess.getSAssociationKindAccess().getREFERENCEEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getSAssociationKindAccess().getREFERENCEEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='composite'
			{
				$current = grammarAccess.getSAssociationKindAccess().getCOMPOSITEEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getSAssociationKindAccess().getCOMPOSITEEnumLiteralDeclaration_1());
			}
		)
	)
;

// Rule SAssociationKindInverse
ruleSAssociationKindInverse returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		enumLiteral_0='inverse'
		{
			$current = grammarAccess.getSAssociationKindInverseAccess().getINVERSE_COMPOSITEEnumLiteralDeclaration().getEnumLiteral().getInstance();
			newLeafNode(enumLiteral_0, grammarAccess.getSAssociationKindInverseAccess().getINVERSE_COMPOSITEEnumLiteralDeclaration());
		}
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
