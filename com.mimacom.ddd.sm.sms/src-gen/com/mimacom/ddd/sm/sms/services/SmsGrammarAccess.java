/*
 * generated by Xtext 2.16.0
 */
package com.mimacom.ddd.sm.sms.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.UnorderedGroup;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class SmsGrammarAccess extends AbstractGrammarElementFinder {
	
	public class SDomainElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.sm.sms.Sms.SDomain");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDomainKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cImportsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cImportsSImportParserRuleCall_2_0 = (RuleCall)cImportsAssignment_2.eContents().get(0);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Assignment cTypesAssignment_3_0 = (Assignment)cAlternatives_3.eContents().get(0);
		private final RuleCall cTypesSTypeParserRuleCall_3_0_0 = (RuleCall)cTypesAssignment_3_0.eContents().get(0);
		private final Assignment cAggregatesAssignment_3_1 = (Assignment)cAlternatives_3.eContents().get(1);
		private final RuleCall cAggregatesSAggregateParserRuleCall_3_1_0 = (RuleCall)cAggregatesAssignment_3_1.eContents().get(0);
		
		//SDomain:
		//	'domain'
		//	name=SQualifiedName
		//	//	(description=DRichText)?
		//	imports+=SImport* (types+=SType | aggregates+=SAggregate)*;
		@Override public ParserRule getRule() { return rule; }
		
		//'domain' name=SQualifiedName //	(description=DRichText)?
		//imports+=SImport* (types+=SType | aggregates+=SAggregate)*
		public Group getGroup() { return cGroup; }
		
		//'domain'
		public Keyword getDomainKeyword_0() { return cDomainKeyword_0; }
		
		//name=SQualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//SQualifiedName
		public RuleCall getNameSQualifiedNameParserRuleCall_1_0() { return cNameSQualifiedNameParserRuleCall_1_0; }
		
		////	(description=DRichText)?
		//imports+=SImport*
		public Assignment getImportsAssignment_2() { return cImportsAssignment_2; }
		
		//SImport
		public RuleCall getImportsSImportParserRuleCall_2_0() { return cImportsSImportParserRuleCall_2_0; }
		
		//(types+=SType | aggregates+=SAggregate)*
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//types+=SType
		public Assignment getTypesAssignment_3_0() { return cTypesAssignment_3_0; }
		
		//SType
		public RuleCall getTypesSTypeParserRuleCall_3_0_0() { return cTypesSTypeParserRuleCall_3_0_0; }
		
		//aggregates+=SAggregate
		public Assignment getAggregatesAssignment_3_1() { return cAggregatesAssignment_3_1; }
		
		//SAggregate
		public RuleCall getAggregatesSAggregateParserRuleCall_3_1_0() { return cAggregatesSAggregateParserRuleCall_3_1_0; }
	}
	public class SImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.sm.sms.Sms.SImport");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImportedNamespaceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportedNamespaceSQualifiedNameWithWildcardParserRuleCall_1_0 = (RuleCall)cImportedNamespaceAssignment_1.eContents().get(0);
		
		//SImport:
		//	'import' importedNamespace=SQualifiedNameWithWildcard;
		@Override public ParserRule getRule() { return rule; }
		
		//'import' importedNamespace=SQualifiedNameWithWildcard
		public Group getGroup() { return cGroup; }
		
		//'import'
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }
		
		//importedNamespace=SQualifiedNameWithWildcard
		public Assignment getImportedNamespaceAssignment_1() { return cImportedNamespaceAssignment_1; }
		
		//SQualifiedNameWithWildcard
		public RuleCall getImportedNamespaceSQualifiedNameWithWildcardParserRuleCall_1_0() { return cImportedNamespaceSQualifiedNameWithWildcardParserRuleCall_1_0; }
	}
	public class SDeductionRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.sm.sms.Sms.SDeductionRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSourceAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cSourceDNamedElementCrossReference_0_0 = (CrossReference)cSourceAssignment_0.eContents().get(0);
		private final RuleCall cSourceDNamedElementSQualifiedNameParserRuleCall_0_0_1 = (RuleCall)cSourceDNamedElementCrossReference_0_0.eContents().get(1);
		private final Assignment cTransformAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTransformSTransformParserRuleCall_1_0 = (RuleCall)cTransformAssignment_1.eContents().get(0);
		
		//SDeductionRule:
		//	source=[DNamedElement|SQualifiedName] transform=STransform;
		@Override public ParserRule getRule() { return rule; }
		
		//source=[DNamedElement|SQualifiedName] transform=STransform
		public Group getGroup() { return cGroup; }
		
		//source=[DNamedElement|SQualifiedName]
		public Assignment getSourceAssignment_0() { return cSourceAssignment_0; }
		
		//[DNamedElement|SQualifiedName]
		public CrossReference getSourceDNamedElementCrossReference_0_0() { return cSourceDNamedElementCrossReference_0_0; }
		
		//SQualifiedName
		public RuleCall getSourceDNamedElementSQualifiedNameParserRuleCall_0_0_1() { return cSourceDNamedElementSQualifiedNameParserRuleCall_0_0_1; }
		
		//transform=STransform
		public Assignment getTransformAssignment_1() { return cTransformAssignment_1; }
		
		//STransform
		public RuleCall getTransformSTransformParserRuleCall_1_0() { return cTransformSTransformParserRuleCall_1_0; }
	}
	public class SMemberDeductionRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.sm.sms.Sms.SMemberDeductionRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSourceAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cSourceDNamedElementCrossReference_0_0 = (CrossReference)cSourceAssignment_0.eContents().get(0);
		private final RuleCall cSourceDNamedElementIDTerminalRuleCall_0_0_1 = (RuleCall)cSourceDNamedElementCrossReference_0_0.eContents().get(1);
		private final Assignment cTransformAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTransformSTransformParserRuleCall_1_0 = (RuleCall)cTransformAssignment_1.eContents().get(0);
		
		//SMemberDeductionRule:
		//	source=[DNamedElement] transform=STransform;
		@Override public ParserRule getRule() { return rule; }
		
		//source=[DNamedElement] transform=STransform
		public Group getGroup() { return cGroup; }
		
		//source=[DNamedElement]
		public Assignment getSourceAssignment_0() { return cSourceAssignment_0; }
		
		//[DNamedElement]
		public CrossReference getSourceDNamedElementCrossReference_0_0() { return cSourceDNamedElementCrossReference_0_0; }
		
		//ID
		public RuleCall getSourceDNamedElementIDTerminalRuleCall_0_0_1() { return cSourceDNamedElementIDTerminalRuleCall_0_0_1; }
		
		////SQualifiedName]
		//transform=STransform
		public Assignment getTransformAssignment_1() { return cTransformAssignment_1; }
		
		//STransform
		public RuleCall getTransformSTransformParserRuleCall_1_0() { return cTransformSTransformParserRuleCall_1_0; }
	}
	public class STransformElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.sm.sms.Sms.STransform");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSSpoofTransformParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSMorphTransformParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//STransform:
		//	SSpoofTransform | SMorphTransform;
		@Override public ParserRule getRule() { return rule; }
		
		//SSpoofTransform | SMorphTransform
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//SSpoofTransform
		public RuleCall getSSpoofTransformParserRuleCall_0() { return cSSpoofTransformParserRuleCall_0; }
		
		//SMorphTransform
		public RuleCall getSMorphTransformParserRuleCall_1() { return cSMorphTransformParserRuleCall_1; }
	}
	public class SSpoofTransformElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.sm.sms.Sms.SSpoofTransform");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSSpoofTransformAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSpoofKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//SSpoofTransform:
		//	{SSpoofTransform}
		//	'spoof';
		@Override public ParserRule getRule() { return rule; }
		
		//{SSpoofTransform} 'spoof'
		public Group getGroup() { return cGroup; }
		
		//{SSpoofTransform}
		public Action getSSpoofTransformAction_0() { return cSSpoofTransformAction_0; }
		
		//'spoof'
		public Keyword getSpoofKeyword_1() { return cSpoofKeyword_1; }
	}
	public class SMorphTransformElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.sm.sms.Sms.SMorphTransform");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSMorphTransformAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cMorphKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cNameKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cRenameToAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cRenameToIDTerminalRuleCall_2_2_0 = (RuleCall)cRenameToAssignment_2_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cTypeKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cEqualsSignKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cRetypeToAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final CrossReference cRetypeToSTypeCrossReference_3_2_0 = (CrossReference)cRetypeToAssignment_3_2.eContents().get(0);
		private final RuleCall cRetypeToSTypeIDTerminalRuleCall_3_2_0_1 = (RuleCall)cRetypeToSTypeCrossReference_3_2_0.eContents().get(1);
		private final Assignment cRemultiplyToAssignment_3_3 = (Assignment)cGroup_3.eContents().get(3);
		private final RuleCall cRemultiplyToSMultiplicityParserRuleCall_3_3_0 = (RuleCall)cRemultiplyToAssignment_3_3.eContents().get(0);
		
		//SMorphTransform:
		//	{SMorphTransform}
		//	'morph' ('name' '=' renameTo=ID)? ('type' '=' retypeTo=[SType] remultiplyTo=SMultiplicity?)?;
		@Override public ParserRule getRule() { return rule; }
		
		//{SMorphTransform} 'morph' ('name' '=' renameTo=ID)? ('type' '=' retypeTo=[SType] remultiplyTo=SMultiplicity?)?
		public Group getGroup() { return cGroup; }
		
		//{SMorphTransform}
		public Action getSMorphTransformAction_0() { return cSMorphTransformAction_0; }
		
		//'morph'
		public Keyword getMorphKeyword_1() { return cMorphKeyword_1; }
		
		//('name' '=' renameTo=ID)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'name'
		public Keyword getNameKeyword_2_0() { return cNameKeyword_2_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_2_1() { return cEqualsSignKeyword_2_1; }
		
		//renameTo=ID
		public Assignment getRenameToAssignment_2_2() { return cRenameToAssignment_2_2; }
		
		//ID
		public RuleCall getRenameToIDTerminalRuleCall_2_2_0() { return cRenameToIDTerminalRuleCall_2_2_0; }
		
		//('type' '=' retypeTo=[SType] remultiplyTo=SMultiplicity?)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'type'
		public Keyword getTypeKeyword_3_0() { return cTypeKeyword_3_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_3_1() { return cEqualsSignKeyword_3_1; }
		
		//retypeTo=[SType]
		public Assignment getRetypeToAssignment_3_2() { return cRetypeToAssignment_3_2; }
		
		//[SType]
		public CrossReference getRetypeToSTypeCrossReference_3_2_0() { return cRetypeToSTypeCrossReference_3_2_0; }
		
		//ID
		public RuleCall getRetypeToSTypeIDTerminalRuleCall_3_2_0_1() { return cRetypeToSTypeIDTerminalRuleCall_3_2_0_1; }
		
		//remultiplyTo=SMultiplicity?
		public Assignment getRemultiplyToAssignment_3_3() { return cRemultiplyToAssignment_3_3; }
		
		//SMultiplicity
		public RuleCall getRemultiplyToSMultiplicityParserRuleCall_3_3_0() { return cRemultiplyToSMultiplicityParserRuleCall_3_3_0; }
	}
	public class SAggregateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.sm.sms.Sms.SAggregate");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSAggregateAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cAggregateKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypesSTypeParserRuleCall_3_0 = (RuleCall)cTypesAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//SAggregate:
		//	{SAggregate}
		//	'aggregate'
		//	//	(description=DRichText)?
		//	'{'
		//	types+=SType*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{SAggregate} 'aggregate' //	(description=DRichText)?
		//'{' types+=SType* '}'
		public Group getGroup() { return cGroup; }
		
		//{SAggregate}
		public Action getSAggregateAction_0() { return cSAggregateAction_0; }
		
		//'aggregate'
		public Keyword getAggregateKeyword_1() { return cAggregateKeyword_1; }
		
		////	(description=DRichText)?
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//types+=SType*
		public Assignment getTypesAssignment_3() { return cTypesAssignment_3; }
		
		//SType
		public RuleCall getTypesSTypeParserRuleCall_3_0() { return cTypesSTypeParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class STypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.sm.sms.Sms.SType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSPrimitiveParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSEnumerationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cSRootTypeParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cSDetailTypeParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		///*
		// * TYPES
		// */ SType:
		//	SPrimitive | SEnumeration | SRootType | SDetailType;
		@Override public ParserRule getRule() { return rule; }
		
		//SPrimitive | SEnumeration | SRootType | SDetailType
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//SPrimitive
		public RuleCall getSPrimitiveParserRuleCall_0() { return cSPrimitiveParserRuleCall_0; }
		
		//SEnumeration
		public RuleCall getSEnumerationParserRuleCall_1() { return cSEnumerationParserRuleCall_1; }
		
		//SRootType
		public RuleCall getSRootTypeParserRuleCall_2() { return cSRootTypeParserRuleCall_2; }
		
		//SDetailType
		public RuleCall getSDetailTypeParserRuleCall_3() { return cSDetailTypeParserRuleCall_3; }
	}
	public class SConstraintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.sm.sms.Sms.SConstraint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cConstraintKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cConditionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cConditionSExpressionParserRuleCall_3_0 = (RuleCall)cConditionAssignment_3.eContents().get(0);
		
		//SConstraint SCondition:
		//	'constraint'
		//	name=ID
		//	':'
		//	condition=SExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//'constraint' name=ID ':' condition=SExpression
		public Group getGroup() { return cGroup; }
		
		//'constraint'
		public Keyword getConstraintKeyword_0() { return cConstraintKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//condition=SExpression
		public Assignment getConditionAssignment_3() { return cConditionAssignment_3; }
		
		//SExpression
		public RuleCall getConditionSExpressionParserRuleCall_3_0() { return cConditionSExpressionParserRuleCall_3_0; }
	}
	public class SPrimitiveElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.sm.sms.Sms.SPrimitive");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cDeducedKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Keyword cPrimitiveKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cDeductionRuleAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cDeductionRuleSDeductionRuleParserRuleCall_0_2_0 = (RuleCall)cDeductionRuleAssignment_0_2.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cPrimitiveKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cNameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_1_0 = (RuleCall)cNameAssignment_1_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final UnorderedGroup cUnorderedGroup_1_3 = (UnorderedGroup)cGroup_1.eContents().get(3);
		private final Group cGroup_1_3_0 = (Group)cUnorderedGroup_1_3.eContents().get(0);
		private final Keyword cRedefinesKeyword_1_3_0_0 = (Keyword)cGroup_1_3_0.eContents().get(0);
		private final Assignment cRedefinesAssignment_1_3_0_1 = (Assignment)cGroup_1_3_0.eContents().get(1);
		private final CrossReference cRedefinesSPrimitiveCrossReference_1_3_0_1_0 = (CrossReference)cRedefinesAssignment_1_3_0_1.eContents().get(0);
		private final RuleCall cRedefinesSPrimitiveIDTerminalRuleCall_1_3_0_1_0_1 = (RuleCall)cRedefinesSPrimitiveCrossReference_1_3_0_1_0.eContents().get(1);
		private final Group cGroup_1_3_1 = (Group)cUnorderedGroup_1_3.eContents().get(1);
		private final Keyword cRealizesKeyword_1_3_1_0 = (Keyword)cGroup_1_3_1.eContents().get(0);
		private final Assignment cRealizesAssignment_1_3_1_1 = (Assignment)cGroup_1_3_1.eContents().get(1);
		private final CrossReference cRealizesDPrimitiveCrossReference_1_3_1_1_0 = (CrossReference)cRealizesAssignment_1_3_1_1.eContents().get(0);
		private final RuleCall cRealizesDPrimitiveSQualifiedNameParserRuleCall_1_3_1_1_0_1 = (RuleCall)cRealizesDPrimitiveCrossReference_1_3_1_1_0.eContents().get(1);
		private final Assignment cConstraintsAssignment_1_4 = (Assignment)cGroup_1.eContents().get(4);
		private final RuleCall cConstraintsSConstraintParserRuleCall_1_4_0 = (RuleCall)cConstraintsAssignment_1_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_5 = (Keyword)cGroup_1.eContents().get(5);
		
		////	(description=DRichText)?;
		//SPrimitive:
		//	'deduced' 'primitive'
		//	deductionRule=SDeductionRule
		//	| 'primitive'
		//	name=ID
		//	//(description=DRichText)?
		//	'{' (('redefines' redefines=[SPrimitive])? & ('realizes' realizes=[DPrimitive|SQualifiedName])?)
		//	constraints+=SConstraint*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'deduced' 'primitive' deductionRule=SDeductionRule | 'primitive' name=ID //(description=DRichText)?
		//'{' (('redefines' redefines=[SPrimitive])? & ('realizes' realizes=[DPrimitive|SQualifiedName])?)
		//constraints+=SConstraint* '}'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'deduced' 'primitive' deductionRule=SDeductionRule
		public Group getGroup_0() { return cGroup_0; }
		
		//'deduced'
		public Keyword getDeducedKeyword_0_0() { return cDeducedKeyword_0_0; }
		
		//'primitive'
		public Keyword getPrimitiveKeyword_0_1() { return cPrimitiveKeyword_0_1; }
		
		//deductionRule=SDeductionRule
		public Assignment getDeductionRuleAssignment_0_2() { return cDeductionRuleAssignment_0_2; }
		
		//SDeductionRule
		public RuleCall getDeductionRuleSDeductionRuleParserRuleCall_0_2_0() { return cDeductionRuleSDeductionRuleParserRuleCall_0_2_0; }
		
		//'primitive' name=ID //(description=DRichText)?
		//'{' (('redefines' redefines=[SPrimitive])? & ('realizes' realizes=[DPrimitive|SQualifiedName])?)
		//constraints+=SConstraint* '}'
		public Group getGroup_1() { return cGroup_1; }
		
		//'primitive'
		public Keyword getPrimitiveKeyword_1_0() { return cPrimitiveKeyword_1_0; }
		
		//name=ID
		public Assignment getNameAssignment_1_1() { return cNameAssignment_1_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_1_0() { return cNameIDTerminalRuleCall_1_1_0; }
		
		////(description=DRichText)?
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1_2() { return cLeftCurlyBracketKeyword_1_2; }
		
		//('redefines' redefines=[SPrimitive])? & ('realizes' realizes=[DPrimitive|SQualifiedName])?
		public UnorderedGroup getUnorderedGroup_1_3() { return cUnorderedGroup_1_3; }
		
		//('redefines' redefines=[SPrimitive])?
		public Group getGroup_1_3_0() { return cGroup_1_3_0; }
		
		//'redefines'
		public Keyword getRedefinesKeyword_1_3_0_0() { return cRedefinesKeyword_1_3_0_0; }
		
		//redefines=[SPrimitive]
		public Assignment getRedefinesAssignment_1_3_0_1() { return cRedefinesAssignment_1_3_0_1; }
		
		//[SPrimitive]
		public CrossReference getRedefinesSPrimitiveCrossReference_1_3_0_1_0() { return cRedefinesSPrimitiveCrossReference_1_3_0_1_0; }
		
		//ID
		public RuleCall getRedefinesSPrimitiveIDTerminalRuleCall_1_3_0_1_0_1() { return cRedefinesSPrimitiveIDTerminalRuleCall_1_3_0_1_0_1; }
		
		//('realizes' realizes=[DPrimitive|SQualifiedName])?
		public Group getGroup_1_3_1() { return cGroup_1_3_1; }
		
		//'realizes'
		public Keyword getRealizesKeyword_1_3_1_0() { return cRealizesKeyword_1_3_1_0; }
		
		//realizes=[DPrimitive|SQualifiedName]
		public Assignment getRealizesAssignment_1_3_1_1() { return cRealizesAssignment_1_3_1_1; }
		
		//[DPrimitive|SQualifiedName]
		public CrossReference getRealizesDPrimitiveCrossReference_1_3_1_1_0() { return cRealizesDPrimitiveCrossReference_1_3_1_1_0; }
		
		//SQualifiedName
		public RuleCall getRealizesDPrimitiveSQualifiedNameParserRuleCall_1_3_1_1_0_1() { return cRealizesDPrimitiveSQualifiedNameParserRuleCall_1_3_1_1_0_1; }
		
		//constraints+=SConstraint*
		public Assignment getConstraintsAssignment_1_4() { return cConstraintsAssignment_1_4; }
		
		//SConstraint
		public RuleCall getConstraintsSConstraintParserRuleCall_1_4_0() { return cConstraintsSConstraintParserRuleCall_1_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_1_5() { return cRightCurlyBracketKeyword_1_5; }
	}
	public class SEnumerationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.sm.sms.Sms.SEnumeration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEnumerationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cLiteralsAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cLiteralsSLiteralParserRuleCall_3_0_0 = (RuleCall)cLiteralsAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cLiteralsAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cLiteralsSLiteralParserRuleCall_3_1_1_0 = (RuleCall)cLiteralsAssignment_3_1_1.eContents().get(0);
		private final Assignment cConstraintsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cConstraintsSConstraintParserRuleCall_4_0 = (RuleCall)cConstraintsAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//SEnumeration:
		//	'enumeration'
		//	name=ID
		//	//	(description=DRichText)?
		//	'{' (literals+=SLiteral (',' literals+=SLiteral)*)?
		//	constraints+=SConstraint*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'enumeration' name=ID //	(description=DRichText)?
		//'{' (literals+=SLiteral (',' literals+=SLiteral)*)? constraints+=SConstraint* '}'
		public Group getGroup() { return cGroup; }
		
		//'enumeration'
		public Keyword getEnumerationKeyword_0() { return cEnumerationKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		////	(description=DRichText)?
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//(literals+=SLiteral (',' literals+=SLiteral)*)?
		public Group getGroup_3() { return cGroup_3; }
		
		//literals+=SLiteral
		public Assignment getLiteralsAssignment_3_0() { return cLiteralsAssignment_3_0; }
		
		//SLiteral
		public RuleCall getLiteralsSLiteralParserRuleCall_3_0_0() { return cLiteralsSLiteralParserRuleCall_3_0_0; }
		
		//(',' literals+=SLiteral)*
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//','
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }
		
		//literals+=SLiteral
		public Assignment getLiteralsAssignment_3_1_1() { return cLiteralsAssignment_3_1_1; }
		
		//SLiteral
		public RuleCall getLiteralsSLiteralParserRuleCall_3_1_1_0() { return cLiteralsSLiteralParserRuleCall_3_1_1_0; }
		
		//constraints+=SConstraint*
		public Assignment getConstraintsAssignment_4() { return cConstraintsAssignment_4; }
		
		//SConstraint
		public RuleCall getConstraintsSConstraintParserRuleCall_4_0() { return cConstraintsSConstraintParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class SLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.sm.sms.Sms.SLiteral");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//SLiteral:
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class SRootTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.sm.sms.Sms.SRootType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cAlternatives_0.eContents().get(0);
		private final Keyword cDeducedKeyword_0_0_0 = (Keyword)cGroup_0_0.eContents().get(0);
		private final Assignment cAbstractAssignment_0_0_1 = (Assignment)cGroup_0_0.eContents().get(1);
		private final Keyword cAbstractAbstractKeyword_0_0_1_0 = (Keyword)cAbstractAssignment_0_0_1.eContents().get(0);
		private final Keyword cRootKeyword_0_0_2 = (Keyword)cGroup_0_0.eContents().get(2);
		private final Assignment cDeductionRuleAssignment_0_0_3 = (Assignment)cGroup_0_0.eContents().get(3);
		private final RuleCall cDeductionRuleSDeductionRuleParserRuleCall_0_0_3_0 = (RuleCall)cDeductionRuleAssignment_0_0_3.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cAlternatives_0.eContents().get(1);
		private final Assignment cAbstractAssignment_0_1_0 = (Assignment)cGroup_0_1.eContents().get(0);
		private final Keyword cAbstractAbstractKeyword_0_1_0_0 = (Keyword)cAbstractAssignment_0_1_0.eContents().get(0);
		private final Keyword cRootKeyword_0_1_1 = (Keyword)cGroup_0_1.eContents().get(1);
		private final Assignment cNameAssignment_0_1_2 = (Assignment)cGroup_0_1.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_0_1_2_0 = (RuleCall)cNameAssignment_0_1_2.eContents().get(0);
		private final RuleCall cSComplexTypeParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		////	(description=DRichText)?;
		//SRootType:
		//	('deduced' abstract?='abstract'? 'root'
		//	deductionRule=SDeductionRule
		//	| abstract?='abstract'? 'root'
		//	name=ID) SComplexType;
		@Override public ParserRule getRule() { return rule; }
		
		//('deduced' abstract?='abstract'? 'root' deductionRule=SDeductionRule | abstract?='abstract'? 'root' name=ID)
		//SComplexType
		public Group getGroup() { return cGroup; }
		
		//'deduced' abstract?='abstract'? 'root' deductionRule=SDeductionRule | abstract?='abstract'? 'root' name=ID
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//'deduced' abstract?='abstract'? 'root' deductionRule=SDeductionRule
		public Group getGroup_0_0() { return cGroup_0_0; }
		
		//'deduced'
		public Keyword getDeducedKeyword_0_0_0() { return cDeducedKeyword_0_0_0; }
		
		//abstract?='abstract'?
		public Assignment getAbstractAssignment_0_0_1() { return cAbstractAssignment_0_0_1; }
		
		//'abstract'
		public Keyword getAbstractAbstractKeyword_0_0_1_0() { return cAbstractAbstractKeyword_0_0_1_0; }
		
		//'root'
		public Keyword getRootKeyword_0_0_2() { return cRootKeyword_0_0_2; }
		
		//deductionRule=SDeductionRule
		public Assignment getDeductionRuleAssignment_0_0_3() { return cDeductionRuleAssignment_0_0_3; }
		
		//SDeductionRule
		public RuleCall getDeductionRuleSDeductionRuleParserRuleCall_0_0_3_0() { return cDeductionRuleSDeductionRuleParserRuleCall_0_0_3_0; }
		
		//abstract?='abstract'? 'root' name=ID
		public Group getGroup_0_1() { return cGroup_0_1; }
		
		//abstract?='abstract'?
		public Assignment getAbstractAssignment_0_1_0() { return cAbstractAssignment_0_1_0; }
		
		//'abstract'
		public Keyword getAbstractAbstractKeyword_0_1_0_0() { return cAbstractAbstractKeyword_0_1_0_0; }
		
		//'root'
		public Keyword getRootKeyword_0_1_1() { return cRootKeyword_0_1_1; }
		
		//name=ID
		public Assignment getNameAssignment_0_1_2() { return cNameAssignment_0_1_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_1_2_0() { return cNameIDTerminalRuleCall_0_1_2_0; }
		
		//SComplexType
		public RuleCall getSComplexTypeParserRuleCall_1() { return cSComplexTypeParserRuleCall_1; }
	}
	public class SDetailTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.sm.sms.Sms.SDetailType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cAlternatives_0.eContents().get(0);
		private final Keyword cDeducedKeyword_0_0_0 = (Keyword)cGroup_0_0.eContents().get(0);
		private final Assignment cAbstractAssignment_0_0_1 = (Assignment)cGroup_0_0.eContents().get(1);
		private final Keyword cAbstractAbstractKeyword_0_0_1_0 = (Keyword)cAbstractAssignment_0_0_1.eContents().get(0);
		private final Keyword cDetailKeyword_0_0_2 = (Keyword)cGroup_0_0.eContents().get(2);
		private final Assignment cDeductionRuleAssignment_0_0_3 = (Assignment)cGroup_0_0.eContents().get(3);
		private final RuleCall cDeductionRuleSDeductionRuleParserRuleCall_0_0_3_0 = (RuleCall)cDeductionRuleAssignment_0_0_3.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cAlternatives_0.eContents().get(1);
		private final Assignment cAbstractAssignment_0_1_0 = (Assignment)cGroup_0_1.eContents().get(0);
		private final Keyword cAbstractAbstractKeyword_0_1_0_0 = (Keyword)cAbstractAssignment_0_1_0.eContents().get(0);
		private final Keyword cDetailKeyword_0_1_1 = (Keyword)cGroup_0_1.eContents().get(1);
		private final Assignment cNameAssignment_0_1_2 = (Assignment)cGroup_0_1.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_0_1_2_0 = (RuleCall)cNameAssignment_0_1_2.eContents().get(0);
		private final RuleCall cSComplexTypeParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//SDetailType:
		//	('deduced' abstract?='abstract'? 'detail'
		//	deductionRule=SDeductionRule
		//	| abstract?='abstract'? 'detail'
		//	name=ID) SComplexType;
		@Override public ParserRule getRule() { return rule; }
		
		//('deduced' abstract?='abstract'? 'detail' deductionRule=SDeductionRule | abstract?='abstract'? 'detail' name=ID)
		//SComplexType
		public Group getGroup() { return cGroup; }
		
		//'deduced' abstract?='abstract'? 'detail' deductionRule=SDeductionRule | abstract?='abstract'? 'detail' name=ID
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//'deduced' abstract?='abstract'? 'detail' deductionRule=SDeductionRule
		public Group getGroup_0_0() { return cGroup_0_0; }
		
		//'deduced'
		public Keyword getDeducedKeyword_0_0_0() { return cDeducedKeyword_0_0_0; }
		
		//abstract?='abstract'?
		public Assignment getAbstractAssignment_0_0_1() { return cAbstractAssignment_0_0_1; }
		
		//'abstract'
		public Keyword getAbstractAbstractKeyword_0_0_1_0() { return cAbstractAbstractKeyword_0_0_1_0; }
		
		//'detail'
		public Keyword getDetailKeyword_0_0_2() { return cDetailKeyword_0_0_2; }
		
		//deductionRule=SDeductionRule
		public Assignment getDeductionRuleAssignment_0_0_3() { return cDeductionRuleAssignment_0_0_3; }
		
		//SDeductionRule
		public RuleCall getDeductionRuleSDeductionRuleParserRuleCall_0_0_3_0() { return cDeductionRuleSDeductionRuleParserRuleCall_0_0_3_0; }
		
		//abstract?='abstract'? 'detail' name=ID
		public Group getGroup_0_1() { return cGroup_0_1; }
		
		//abstract?='abstract'?
		public Assignment getAbstractAssignment_0_1_0() { return cAbstractAssignment_0_1_0; }
		
		//'abstract'
		public Keyword getAbstractAbstractKeyword_0_1_0_0() { return cAbstractAbstractKeyword_0_1_0_0; }
		
		//'detail'
		public Keyword getDetailKeyword_0_1_1() { return cDetailKeyword_0_1_1; }
		
		//name=ID
		public Assignment getNameAssignment_0_1_2() { return cNameAssignment_0_1_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_1_2_0() { return cNameIDTerminalRuleCall_0_1_2_0; }
		
		//SComplexType
		public RuleCall getSComplexTypeParserRuleCall_1() { return cSComplexTypeParserRuleCall_1; }
	}
	public class SComplexTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.sm.sms.Sms.SComplexType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Keyword cExtendsKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cSuperTypeAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final CrossReference cSuperTypeSComplexTypeCrossReference_0_1_0 = (CrossReference)cSuperTypeAssignment_0_1.eContents().get(0);
		private final RuleCall cSuperTypeSComplexTypeIDTerminalRuleCall_0_1_0_1 = (RuleCall)cSuperTypeSComplexTypeCrossReference_0_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cFeaturesAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cFeaturesSFeatureParserRuleCall_2_0_0 = (RuleCall)cFeaturesAssignment_2_0.eContents().get(0);
		private final Assignment cConstraintsAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cConstraintsSConstraintParserRuleCall_2_1_0 = (RuleCall)cConstraintsAssignment_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//fragment SComplexType:
		//	('extends' superType=[SComplexType])?
		//	//	(description=DRichText)?
		//	'{' (features+=SFeature | constraints+=SConstraint)*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//('extends' superType=[SComplexType])? //	(description=DRichText)?
		//'{' (features+=SFeature | constraints+=SConstraint)* '}'
		public Group getGroup() { return cGroup; }
		
		//('extends' superType=[SComplexType])?
		public Group getGroup_0() { return cGroup_0; }
		
		//'extends'
		public Keyword getExtendsKeyword_0_0() { return cExtendsKeyword_0_0; }
		
		//superType=[SComplexType]
		public Assignment getSuperTypeAssignment_0_1() { return cSuperTypeAssignment_0_1; }
		
		//[SComplexType]
		public CrossReference getSuperTypeSComplexTypeCrossReference_0_1_0() { return cSuperTypeSComplexTypeCrossReference_0_1_0; }
		
		//ID
		public RuleCall getSuperTypeSComplexTypeIDTerminalRuleCall_0_1_0_1() { return cSuperTypeSComplexTypeIDTerminalRuleCall_0_1_0_1; }
		
		////	(description=DRichText)?
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//(features+=SFeature | constraints+=SConstraint)*
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//features+=SFeature
		public Assignment getFeaturesAssignment_2_0() { return cFeaturesAssignment_2_0; }
		
		//SFeature
		public RuleCall getFeaturesSFeatureParserRuleCall_2_0_0() { return cFeaturesSFeatureParserRuleCall_2_0_0; }
		
		//constraints+=SConstraint
		public Assignment getConstraintsAssignment_2_1() { return cConstraintsAssignment_2_1; }
		
		//SConstraint
		public RuleCall getConstraintsSConstraintParserRuleCall_2_1_0() { return cConstraintsSConstraintParserRuleCall_2_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class SFeatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.sm.sms.Sms.SFeature");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSAssociationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSAttributeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cSQueryParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//SFeature:
		//	SAssociation | SAttribute | SQuery;
		@Override public ParserRule getRule() { return rule; }
		
		//SAssociation | SAttribute | SQuery
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//SAssociation
		public RuleCall getSAssociationParserRuleCall_0() { return cSAssociationParserRuleCall_0; }
		
		//SAttribute
		public RuleCall getSAttributeParserRuleCall_1() { return cSAttributeParserRuleCall_1; }
		
		//SQuery
		public RuleCall getSQueryParserRuleCall_2() { return cSQueryParserRuleCall_2; }
	}
	public class SAssociationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.sm.sms.Sms.SAssociation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDerivedAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cDerivedDerivedKeyword_0_0 = (Keyword)cDerivedAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cKindAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cKindSAssociationKindEnumRuleCall_1_0_0 = (RuleCall)cKindAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Assignment cKindAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final RuleCall cKindSAssociationKindInverseEnumRuleCall_1_1_0_0 = (RuleCall)cKindAssignment_1_1_0.eContents().get(0);
		private final Keyword cCompositeKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTypeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cTypeSRootTypeCrossReference_4_0 = (CrossReference)cTypeAssignment_4.eContents().get(0);
		private final RuleCall cTypeSRootTypeIDTerminalRuleCall_4_0_1 = (RuleCall)cTypeSRootTypeCrossReference_4_0.eContents().get(1);
		private final Assignment cMultiplicityAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cMultiplicitySMultiplicityParserRuleCall_5_0 = (RuleCall)cMultiplicityAssignment_5.eContents().get(0);
		
		//SAssociation:
		//	derived?='derived'? (kind=SAssociationKind | kind=SAssociationKindInverse "composite") name=ID
		//	':'
		//	type=[SRootType] multiplicity=SMultiplicity?;
		@Override public ParserRule getRule() { return rule; }
		
		//derived?='derived'? (kind=SAssociationKind | kind=SAssociationKindInverse "composite") name=ID ':' type=[SRootType]
		//multiplicity=SMultiplicity?
		public Group getGroup() { return cGroup; }
		
		//derived?='derived'?
		public Assignment getDerivedAssignment_0() { return cDerivedAssignment_0; }
		
		//'derived'
		public Keyword getDerivedDerivedKeyword_0_0() { return cDerivedDerivedKeyword_0_0; }
		
		//kind=SAssociationKind | kind=SAssociationKindInverse "composite"
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//kind=SAssociationKind
		public Assignment getKindAssignment_1_0() { return cKindAssignment_1_0; }
		
		//SAssociationKind
		public RuleCall getKindSAssociationKindEnumRuleCall_1_0_0() { return cKindSAssociationKindEnumRuleCall_1_0_0; }
		
		//kind=SAssociationKindInverse "composite"
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//kind=SAssociationKindInverse
		public Assignment getKindAssignment_1_1_0() { return cKindAssignment_1_1_0; }
		
		//SAssociationKindInverse
		public RuleCall getKindSAssociationKindInverseEnumRuleCall_1_1_0_0() { return cKindSAssociationKindInverseEnumRuleCall_1_1_0_0; }
		
		//"composite"
		public Keyword getCompositeKeyword_1_1_1() { return cCompositeKeyword_1_1_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//':'
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }
		
		//type=[SRootType]
		public Assignment getTypeAssignment_4() { return cTypeAssignment_4; }
		
		//[SRootType]
		public CrossReference getTypeSRootTypeCrossReference_4_0() { return cTypeSRootTypeCrossReference_4_0; }
		
		//ID
		public RuleCall getTypeSRootTypeIDTerminalRuleCall_4_0_1() { return cTypeSRootTypeIDTerminalRuleCall_4_0_1; }
		
		//multiplicity=SMultiplicity?
		public Assignment getMultiplicityAssignment_5() { return cMultiplicityAssignment_5; }
		
		//SMultiplicity
		public RuleCall getMultiplicitySMultiplicityParserRuleCall_5_0() { return cMultiplicitySMultiplicityParserRuleCall_5_0; }
	}
	public class SAttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.sm.sms.Sms.SAttribute");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cDeducedKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cDetailAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final Keyword cDetailDetailKeyword_0_1_0 = (Keyword)cDetailAssignment_0_1.eContents().get(0);
		private final Assignment cDeductionRuleAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cDeductionRuleSMemberDeductionRuleParserRuleCall_0_2_0 = (RuleCall)cDeductionRuleAssignment_0_2.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cDetailAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Keyword cDetailDetailKeyword_1_0_0 = (Keyword)cDetailAssignment_1_0.eContents().get(0);
		private final Assignment cNameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_1_0 = (RuleCall)cNameAssignment_1_1.eContents().get(0);
		private final Keyword cColonKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cTypeAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final CrossReference cTypeSSimpleTypeCrossReference_1_3_0 = (CrossReference)cTypeAssignment_1_3.eContents().get(0);
		private final RuleCall cTypeSSimpleTypeIDTerminalRuleCall_1_3_0_1 = (RuleCall)cTypeSSimpleTypeCrossReference_1_3_0.eContents().get(1);
		private final Assignment cMultiplicityAssignment_1_4 = (Assignment)cGroup_1.eContents().get(4);
		private final RuleCall cMultiplicitySMultiplicityParserRuleCall_1_4_0 = (RuleCall)cMultiplicityAssignment_1_4.eContents().get(0);
		private final Assignment cKeyAssignment_1_5 = (Assignment)cGroup_1.eContents().get(5);
		private final Keyword cKeyKeyKeyword_1_5_0 = (Keyword)cKeyAssignment_1_5.eContents().get(0);
		
		//SAttribute:
		//	'deduced' detail?='detail'?
		//	deductionRule=SMemberDeductionRule
		//	| detail?='detail'?
		//	name=ID
		//	':'
		//	type=[SSimpleType] multiplicity=SMultiplicity?
		//	key?='key'?;
		@Override public ParserRule getRule() { return rule; }
		
		//'deduced' detail?='detail'? deductionRule=SMemberDeductionRule | detail?='detail'? name=ID ':' type=[SSimpleType]
		//multiplicity=SMultiplicity? key?='key'?
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'deduced' detail?='detail'? deductionRule=SMemberDeductionRule
		public Group getGroup_0() { return cGroup_0; }
		
		//'deduced'
		public Keyword getDeducedKeyword_0_0() { return cDeducedKeyword_0_0; }
		
		//detail?='detail'?
		public Assignment getDetailAssignment_0_1() { return cDetailAssignment_0_1; }
		
		//'detail'
		public Keyword getDetailDetailKeyword_0_1_0() { return cDetailDetailKeyword_0_1_0; }
		
		//deductionRule=SMemberDeductionRule
		public Assignment getDeductionRuleAssignment_0_2() { return cDeductionRuleAssignment_0_2; }
		
		//SMemberDeductionRule
		public RuleCall getDeductionRuleSMemberDeductionRuleParserRuleCall_0_2_0() { return cDeductionRuleSMemberDeductionRuleParserRuleCall_0_2_0; }
		
		//detail?='detail'? name=ID ':' type=[SSimpleType] multiplicity=SMultiplicity? key?='key'?
		public Group getGroup_1() { return cGroup_1; }
		
		//detail?='detail'?
		public Assignment getDetailAssignment_1_0() { return cDetailAssignment_1_0; }
		
		//'detail'
		public Keyword getDetailDetailKeyword_1_0_0() { return cDetailDetailKeyword_1_0_0; }
		
		//name=ID
		public Assignment getNameAssignment_1_1() { return cNameAssignment_1_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_1_0() { return cNameIDTerminalRuleCall_1_1_0; }
		
		//':'
		public Keyword getColonKeyword_1_2() { return cColonKeyword_1_2; }
		
		//type=[SSimpleType]
		public Assignment getTypeAssignment_1_3() { return cTypeAssignment_1_3; }
		
		//[SSimpleType]
		public CrossReference getTypeSSimpleTypeCrossReference_1_3_0() { return cTypeSSimpleTypeCrossReference_1_3_0; }
		
		//ID
		public RuleCall getTypeSSimpleTypeIDTerminalRuleCall_1_3_0_1() { return cTypeSSimpleTypeIDTerminalRuleCall_1_3_0_1; }
		
		//multiplicity=SMultiplicity?
		public Assignment getMultiplicityAssignment_1_4() { return cMultiplicityAssignment_1_4; }
		
		//SMultiplicity
		public RuleCall getMultiplicitySMultiplicityParserRuleCall_1_4_0() { return cMultiplicitySMultiplicityParserRuleCall_1_4_0; }
		
		//key?='key'?
		public Assignment getKeyAssignment_1_5() { return cKeyAssignment_1_5; }
		
		//'key'
		public Keyword getKeyKeyKeyword_1_5_0() { return cKeyKeyKeyword_1_5_0; }
	}
	public class SQueryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.sm.sms.Sms.SQuery");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cParametersAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cParametersSQueryParameterParserRuleCall_2_0_0 = (RuleCall)cParametersAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cParametersAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cParametersSQueryParameterParserRuleCall_2_1_1_0 = (RuleCall)cParametersAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cColonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cTypeAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cTypeSTypeCrossReference_5_0 = (CrossReference)cTypeAssignment_5.eContents().get(0);
		private final RuleCall cTypeSTypeIDTerminalRuleCall_5_0_1 = (RuleCall)cTypeSTypeCrossReference_5_0.eContents().get(1);
		private final Assignment cMultiplicityAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cMultiplicitySMultiplicityParserRuleCall_6_0 = (RuleCall)cMultiplicityAssignment_6.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cReturnsKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cReturnsAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cReturnsSExpressionParserRuleCall_7_1_0 = (RuleCall)cReturnsAssignment_7_1.eContents().get(0);
		
		////	(description=DRichText)?;
		//SQuery:
		//	name=ID
		//	'(' (parameters+=SQueryParameter ("," parameters+=SQueryParameter)*)? ')'
		//	':'
		//	type=[SType] multiplicity=SMultiplicity? ('returns' ^returns=SExpression)?;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID '(' (parameters+=SQueryParameter ("," parameters+=SQueryParameter)*)? ')' ':' type=[SType]
		//multiplicity=SMultiplicity? ('returns' ^returns=SExpression)?
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//(parameters+=SQueryParameter ("," parameters+=SQueryParameter)*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//parameters+=SQueryParameter
		public Assignment getParametersAssignment_2_0() { return cParametersAssignment_2_0; }
		
		//SQueryParameter
		public RuleCall getParametersSQueryParameterParserRuleCall_2_0_0() { return cParametersSQueryParameterParserRuleCall_2_0_0; }
		
		//("," parameters+=SQueryParameter)*
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//","
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }
		
		//parameters+=SQueryParameter
		public Assignment getParametersAssignment_2_1_1() { return cParametersAssignment_2_1_1; }
		
		//SQueryParameter
		public RuleCall getParametersSQueryParameterParserRuleCall_2_1_1_0() { return cParametersSQueryParameterParserRuleCall_2_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//':'
		public Keyword getColonKeyword_4() { return cColonKeyword_4; }
		
		//type=[SType]
		public Assignment getTypeAssignment_5() { return cTypeAssignment_5; }
		
		//[SType]
		public CrossReference getTypeSTypeCrossReference_5_0() { return cTypeSTypeCrossReference_5_0; }
		
		//ID
		public RuleCall getTypeSTypeIDTerminalRuleCall_5_0_1() { return cTypeSTypeIDTerminalRuleCall_5_0_1; }
		
		//multiplicity=SMultiplicity?
		public Assignment getMultiplicityAssignment_6() { return cMultiplicityAssignment_6; }
		
		//SMultiplicity
		public RuleCall getMultiplicitySMultiplicityParserRuleCall_6_0() { return cMultiplicitySMultiplicityParserRuleCall_6_0; }
		
		//('returns' ^returns=SExpression)?
		public Group getGroup_7() { return cGroup_7; }
		
		//'returns'
		public Keyword getReturnsKeyword_7_0() { return cReturnsKeyword_7_0; }
		
		//^returns=SExpression
		public Assignment getReturnsAssignment_7_1() { return cReturnsAssignment_7_1; }
		
		//SExpression
		public RuleCall getReturnsSExpressionParserRuleCall_7_1_0() { return cReturnsSExpressionParserRuleCall_7_1_0; }
	}
	public class SQueryParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.sm.sms.Sms.SQueryParameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cTypeSTypeCrossReference_2_0 = (CrossReference)cTypeAssignment_2.eContents().get(0);
		private final RuleCall cTypeSTypeIDTerminalRuleCall_2_0_1 = (RuleCall)cTypeSTypeCrossReference_2_0.eContents().get(1);
		private final Assignment cMultiplicityAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cMultiplicitySMultiplicityParserRuleCall_3_0 = (RuleCall)cMultiplicityAssignment_3.eContents().get(0);
		
		////	(description=DRichText)?;
		//SQueryParameter:
		//	name=ID
		//	':'
		//	type=[SType] multiplicity=SMultiplicity?;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID ':' type=[SType] multiplicity=SMultiplicity?
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//type=[SType]
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//[SType]
		public CrossReference getTypeSTypeCrossReference_2_0() { return cTypeSTypeCrossReference_2_0; }
		
		//ID
		public RuleCall getTypeSTypeIDTerminalRuleCall_2_0_1() { return cTypeSTypeIDTerminalRuleCall_2_0_1; }
		
		//multiplicity=SMultiplicity?
		public Assignment getMultiplicityAssignment_3() { return cMultiplicityAssignment_3; }
		
		//SMultiplicity
		public RuleCall getMultiplicitySMultiplicityParserRuleCall_3_0() { return cMultiplicitySMultiplicityParserRuleCall_3_0; }
	}
	public class SExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.sm.sms.Sms.SExpression");
		private final Assignment cExprAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cExprSTRINGTerminalRuleCall_0 = (RuleCall)cExprAssignment.eContents().get(0);
		
		////	(description=SRichText)?;
		//SExpression:
		//	expr=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//expr=STRING
		public Assignment getExprAssignment() { return cExprAssignment; }
		
		//STRING
		public RuleCall getExprSTRINGTerminalRuleCall_0() { return cExprSTRINGTerminalRuleCall_0; }
	}
	public class SQualifiedNameWithWildcardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.sm.sms.Sms.SQualifiedNameWithWildcard");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cSQualifiedNameParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopAsteriskKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//SQualifiedNameWithWildcard:
		//	SQualifiedName '.*'?;
		@Override public ParserRule getRule() { return rule; }
		
		//SQualifiedName '.*'?
		public Group getGroup() { return cGroup; }
		
		//SQualifiedName
		public RuleCall getSQualifiedNameParserRuleCall_0() { return cSQualifiedNameParserRuleCall_0; }
		
		//'.*'?
		public Keyword getFullStopAsteriskKeyword_1() { return cFullStopAsteriskKeyword_1; }
	}
	public class SQualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.sm.sms.Sms.SQualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//SQualifiedName:
		//	ID ('.' ID)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ID ('.' ID)*
		public Group getGroup() { return cGroup; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//('.' ID)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	public class SMultiplicityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.sm.sms.Sms.SMultiplicity");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cMinOccursAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cMinOccursINTTerminalRuleCall_1_0 = (RuleCall)cMinOccursAssignment_1.eContents().get(0);
		private final Keyword cFullStopFullStopKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cMaxOccursAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cMaxOccursMULTIPLICITYParserRuleCall_3_0 = (RuleCall)cMaxOccursAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//SMultiplicity:
		//	'(' minOccurs=INT '..' maxOccurs=MULTIPLICITY ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'(' minOccurs=INT '..' maxOccurs=MULTIPLICITY ')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//minOccurs=INT
		public Assignment getMinOccursAssignment_1() { return cMinOccursAssignment_1; }
		
		//INT
		public RuleCall getMinOccursINTTerminalRuleCall_1_0() { return cMinOccursINTTerminalRuleCall_1_0; }
		
		//'..'
		public Keyword getFullStopFullStopKeyword_2() { return cFullStopFullStopKeyword_2; }
		
		//maxOccurs=MULTIPLICITY
		public Assignment getMaxOccursAssignment_3() { return cMaxOccursAssignment_3; }
		
		//MULTIPLICITY
		public RuleCall getMaxOccursMULTIPLICITYParserRuleCall_3_0() { return cMaxOccursMULTIPLICITYParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class MULTIPLICITYElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.sm.sms.Sms.MULTIPLICITY");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Keyword cAsteriskKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//MULTIPLICITY ecore::EInt:
		//	INT | '*';
		@Override public ParserRule getRule() { return rule; }
		
		//INT | '*'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }
		
		//'*'
		public Keyword getAsteriskKeyword_1() { return cAsteriskKeyword_1; }
	}
	
	public class SAssociationKindElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.sm.sms.Sms.SAssociationKind");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cREFERENCEEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cREFERENCEReferenceKeyword_0_0 = (Keyword)cREFERENCEEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cCOMPOSITEEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cCOMPOSITECompositeKeyword_1_0 = (Keyword)cCOMPOSITEEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum SAssociationKind:
		//	REFERENCE="reference" | COMPOSITE="composite";
		public EnumRule getRule() { return rule; }
		
		//REFERENCE="reference" | COMPOSITE="composite"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//REFERENCE="reference"
		public EnumLiteralDeclaration getREFERENCEEnumLiteralDeclaration_0() { return cREFERENCEEnumLiteralDeclaration_0; }
		
		//"reference"
		public Keyword getREFERENCEReferenceKeyword_0_0() { return cREFERENCEReferenceKeyword_0_0; }
		
		//COMPOSITE="composite"
		public EnumLiteralDeclaration getCOMPOSITEEnumLiteralDeclaration_1() { return cCOMPOSITEEnumLiteralDeclaration_1; }
		
		//"composite"
		public Keyword getCOMPOSITECompositeKeyword_1_0() { return cCOMPOSITECompositeKeyword_1_0; }
	}
	public class SAssociationKindInverseElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.sm.sms.Sms.SAssociationKindInverse");
		private final EnumLiteralDeclaration cINVERSE_COMPOSITEEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cINVERSE_COMPOSITEInverseKeyword_0 = (Keyword)cINVERSE_COMPOSITEEnumLiteralDeclaration.eContents().get(0);
		
		//enum SAssociationKindInverse returns SAssociationKind:
		//	INVERSE_COMPOSITE="inverse";
		public EnumRule getRule() { return rule; }
		
		//INVERSE_COMPOSITE="inverse"
		public EnumLiteralDeclaration getINVERSE_COMPOSITEEnumLiteralDeclaration() { return cINVERSE_COMPOSITEEnumLiteralDeclaration; }
		
		//"inverse"
		public Keyword getINVERSE_COMPOSITEInverseKeyword_0() { return cINVERSE_COMPOSITEInverseKeyword_0; }
	}
	
	private final SDomainElements pSDomain;
	private final SImportElements pSImport;
	private final SDeductionRuleElements pSDeductionRule;
	private final SMemberDeductionRuleElements pSMemberDeductionRule;
	private final STransformElements pSTransform;
	private final SSpoofTransformElements pSSpoofTransform;
	private final SMorphTransformElements pSMorphTransform;
	private final SAggregateElements pSAggregate;
	private final STypeElements pSType;
	private final SConstraintElements pSConstraint;
	private final SPrimitiveElements pSPrimitive;
	private final SEnumerationElements pSEnumeration;
	private final SLiteralElements pSLiteral;
	private final SRootTypeElements pSRootType;
	private final SDetailTypeElements pSDetailType;
	private final SComplexTypeElements pSComplexType;
	private final SFeatureElements pSFeature;
	private final SAssociationElements pSAssociation;
	private final SAssociationKindElements eSAssociationKind;
	private final SAssociationKindInverseElements eSAssociationKindInverse;
	private final SAttributeElements pSAttribute;
	private final SQueryElements pSQuery;
	private final SQueryParameterElements pSQueryParameter;
	private final SExpressionElements pSExpression;
	private final SQualifiedNameWithWildcardElements pSQualifiedNameWithWildcard;
	private final SQualifiedNameElements pSQualifiedName;
	private final SMultiplicityElements pSMultiplicity;
	private final MULTIPLICITYElements pMULTIPLICITY;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public SmsGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pSDomain = new SDomainElements();
		this.pSImport = new SImportElements();
		this.pSDeductionRule = new SDeductionRuleElements();
		this.pSMemberDeductionRule = new SMemberDeductionRuleElements();
		this.pSTransform = new STransformElements();
		this.pSSpoofTransform = new SSpoofTransformElements();
		this.pSMorphTransform = new SMorphTransformElements();
		this.pSAggregate = new SAggregateElements();
		this.pSType = new STypeElements();
		this.pSConstraint = new SConstraintElements();
		this.pSPrimitive = new SPrimitiveElements();
		this.pSEnumeration = new SEnumerationElements();
		this.pSLiteral = new SLiteralElements();
		this.pSRootType = new SRootTypeElements();
		this.pSDetailType = new SDetailTypeElements();
		this.pSComplexType = new SComplexTypeElements();
		this.pSFeature = new SFeatureElements();
		this.pSAssociation = new SAssociationElements();
		this.eSAssociationKind = new SAssociationKindElements();
		this.eSAssociationKindInverse = new SAssociationKindInverseElements();
		this.pSAttribute = new SAttributeElements();
		this.pSQuery = new SQueryElements();
		this.pSQueryParameter = new SQueryParameterElements();
		this.pSExpression = new SExpressionElements();
		this.pSQualifiedNameWithWildcard = new SQualifiedNameWithWildcardElements();
		this.pSQualifiedName = new SQualifiedNameElements();
		this.pSMultiplicity = new SMultiplicityElements();
		this.pMULTIPLICITY = new MULTIPLICITYElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("com.mimacom.ddd.sm.sms.Sms".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//SDomain:
	//	'domain'
	//	name=SQualifiedName
	//	//	(description=DRichText)?
	//	imports+=SImport* (types+=SType | aggregates+=SAggregate)*;
	public SDomainElements getSDomainAccess() {
		return pSDomain;
	}
	
	public ParserRule getSDomainRule() {
		return getSDomainAccess().getRule();
	}
	
	//SImport:
	//	'import' importedNamespace=SQualifiedNameWithWildcard;
	public SImportElements getSImportAccess() {
		return pSImport;
	}
	
	public ParserRule getSImportRule() {
		return getSImportAccess().getRule();
	}
	
	//SDeductionRule:
	//	source=[DNamedElement|SQualifiedName] transform=STransform;
	public SDeductionRuleElements getSDeductionRuleAccess() {
		return pSDeductionRule;
	}
	
	public ParserRule getSDeductionRuleRule() {
		return getSDeductionRuleAccess().getRule();
	}
	
	//SMemberDeductionRule:
	//	source=[DNamedElement] transform=STransform;
	public SMemberDeductionRuleElements getSMemberDeductionRuleAccess() {
		return pSMemberDeductionRule;
	}
	
	public ParserRule getSMemberDeductionRuleRule() {
		return getSMemberDeductionRuleAccess().getRule();
	}
	
	//STransform:
	//	SSpoofTransform | SMorphTransform;
	public STransformElements getSTransformAccess() {
		return pSTransform;
	}
	
	public ParserRule getSTransformRule() {
		return getSTransformAccess().getRule();
	}
	
	//SSpoofTransform:
	//	{SSpoofTransform}
	//	'spoof';
	public SSpoofTransformElements getSSpoofTransformAccess() {
		return pSSpoofTransform;
	}
	
	public ParserRule getSSpoofTransformRule() {
		return getSSpoofTransformAccess().getRule();
	}
	
	//SMorphTransform:
	//	{SMorphTransform}
	//	'morph' ('name' '=' renameTo=ID)? ('type' '=' retypeTo=[SType] remultiplyTo=SMultiplicity?)?;
	public SMorphTransformElements getSMorphTransformAccess() {
		return pSMorphTransform;
	}
	
	public ParserRule getSMorphTransformRule() {
		return getSMorphTransformAccess().getRule();
	}
	
	//SAggregate:
	//	{SAggregate}
	//	'aggregate'
	//	//	(description=DRichText)?
	//	'{'
	//	types+=SType*
	//	'}';
	public SAggregateElements getSAggregateAccess() {
		return pSAggregate;
	}
	
	public ParserRule getSAggregateRule() {
		return getSAggregateAccess().getRule();
	}
	
	///*
	// * TYPES
	// */ SType:
	//	SPrimitive | SEnumeration | SRootType | SDetailType;
	public STypeElements getSTypeAccess() {
		return pSType;
	}
	
	public ParserRule getSTypeRule() {
		return getSTypeAccess().getRule();
	}
	
	//SConstraint SCondition:
	//	'constraint'
	//	name=ID
	//	':'
	//	condition=SExpression;
	public SConstraintElements getSConstraintAccess() {
		return pSConstraint;
	}
	
	public ParserRule getSConstraintRule() {
		return getSConstraintAccess().getRule();
	}
	
	////	(description=DRichText)?;
	//SPrimitive:
	//	'deduced' 'primitive'
	//	deductionRule=SDeductionRule
	//	| 'primitive'
	//	name=ID
	//	//(description=DRichText)?
	//	'{' (('redefines' redefines=[SPrimitive])? & ('realizes' realizes=[DPrimitive|SQualifiedName])?)
	//	constraints+=SConstraint*
	//	'}';
	public SPrimitiveElements getSPrimitiveAccess() {
		return pSPrimitive;
	}
	
	public ParserRule getSPrimitiveRule() {
		return getSPrimitiveAccess().getRule();
	}
	
	//SEnumeration:
	//	'enumeration'
	//	name=ID
	//	//	(description=DRichText)?
	//	'{' (literals+=SLiteral (',' literals+=SLiteral)*)?
	//	constraints+=SConstraint*
	//	'}';
	public SEnumerationElements getSEnumerationAccess() {
		return pSEnumeration;
	}
	
	public ParserRule getSEnumerationRule() {
		return getSEnumerationAccess().getRule();
	}
	
	//SLiteral:
	//	name=ID;
	public SLiteralElements getSLiteralAccess() {
		return pSLiteral;
	}
	
	public ParserRule getSLiteralRule() {
		return getSLiteralAccess().getRule();
	}
	
	////	(description=DRichText)?;
	//SRootType:
	//	('deduced' abstract?='abstract'? 'root'
	//	deductionRule=SDeductionRule
	//	| abstract?='abstract'? 'root'
	//	name=ID) SComplexType;
	public SRootTypeElements getSRootTypeAccess() {
		return pSRootType;
	}
	
	public ParserRule getSRootTypeRule() {
		return getSRootTypeAccess().getRule();
	}
	
	//SDetailType:
	//	('deduced' abstract?='abstract'? 'detail'
	//	deductionRule=SDeductionRule
	//	| abstract?='abstract'? 'detail'
	//	name=ID) SComplexType;
	public SDetailTypeElements getSDetailTypeAccess() {
		return pSDetailType;
	}
	
	public ParserRule getSDetailTypeRule() {
		return getSDetailTypeAccess().getRule();
	}
	
	//fragment SComplexType:
	//	('extends' superType=[SComplexType])?
	//	//	(description=DRichText)?
	//	'{' (features+=SFeature | constraints+=SConstraint)*
	//	'}';
	public SComplexTypeElements getSComplexTypeAccess() {
		return pSComplexType;
	}
	
	public ParserRule getSComplexTypeRule() {
		return getSComplexTypeAccess().getRule();
	}
	
	//SFeature:
	//	SAssociation | SAttribute | SQuery;
	public SFeatureElements getSFeatureAccess() {
		return pSFeature;
	}
	
	public ParserRule getSFeatureRule() {
		return getSFeatureAccess().getRule();
	}
	
	//SAssociation:
	//	derived?='derived'? (kind=SAssociationKind | kind=SAssociationKindInverse "composite") name=ID
	//	':'
	//	type=[SRootType] multiplicity=SMultiplicity?;
	public SAssociationElements getSAssociationAccess() {
		return pSAssociation;
	}
	
	public ParserRule getSAssociationRule() {
		return getSAssociationAccess().getRule();
	}
	
	//enum SAssociationKind:
	//	REFERENCE="reference" | COMPOSITE="composite";
	public SAssociationKindElements getSAssociationKindAccess() {
		return eSAssociationKind;
	}
	
	public EnumRule getSAssociationKindRule() {
		return getSAssociationKindAccess().getRule();
	}
	
	//enum SAssociationKindInverse returns SAssociationKind:
	//	INVERSE_COMPOSITE="inverse";
	public SAssociationKindInverseElements getSAssociationKindInverseAccess() {
		return eSAssociationKindInverse;
	}
	
	public EnumRule getSAssociationKindInverseRule() {
		return getSAssociationKindInverseAccess().getRule();
	}
	
	//SAttribute:
	//	'deduced' detail?='detail'?
	//	deductionRule=SMemberDeductionRule
	//	| detail?='detail'?
	//	name=ID
	//	':'
	//	type=[SSimpleType] multiplicity=SMultiplicity?
	//	key?='key'?;
	public SAttributeElements getSAttributeAccess() {
		return pSAttribute;
	}
	
	public ParserRule getSAttributeRule() {
		return getSAttributeAccess().getRule();
	}
	
	////	(description=DRichText)?;
	//SQuery:
	//	name=ID
	//	'(' (parameters+=SQueryParameter ("," parameters+=SQueryParameter)*)? ')'
	//	':'
	//	type=[SType] multiplicity=SMultiplicity? ('returns' ^returns=SExpression)?;
	public SQueryElements getSQueryAccess() {
		return pSQuery;
	}
	
	public ParserRule getSQueryRule() {
		return getSQueryAccess().getRule();
	}
	
	////	(description=DRichText)?;
	//SQueryParameter:
	//	name=ID
	//	':'
	//	type=[SType] multiplicity=SMultiplicity?;
	public SQueryParameterElements getSQueryParameterAccess() {
		return pSQueryParameter;
	}
	
	public ParserRule getSQueryParameterRule() {
		return getSQueryParameterAccess().getRule();
	}
	
	////	(description=SRichText)?;
	//SExpression:
	//	expr=STRING;
	public SExpressionElements getSExpressionAccess() {
		return pSExpression;
	}
	
	public ParserRule getSExpressionRule() {
		return getSExpressionAccess().getRule();
	}
	
	//SQualifiedNameWithWildcard:
	//	SQualifiedName '.*'?;
	public SQualifiedNameWithWildcardElements getSQualifiedNameWithWildcardAccess() {
		return pSQualifiedNameWithWildcard;
	}
	
	public ParserRule getSQualifiedNameWithWildcardRule() {
		return getSQualifiedNameWithWildcardAccess().getRule();
	}
	
	//SQualifiedName:
	//	ID ('.' ID)*;
	public SQualifiedNameElements getSQualifiedNameAccess() {
		return pSQualifiedName;
	}
	
	public ParserRule getSQualifiedNameRule() {
		return getSQualifiedNameAccess().getRule();
	}
	
	//SMultiplicity:
	//	'(' minOccurs=INT '..' maxOccurs=MULTIPLICITY ')';
	public SMultiplicityElements getSMultiplicityAccess() {
		return pSMultiplicity;
	}
	
	public ParserRule getSMultiplicityRule() {
		return getSMultiplicityAccess().getRule();
	}
	
	//MULTIPLICITY ecore::EInt:
	//	INT | '*';
	public MULTIPLICITYElements getMULTIPLICITYAccess() {
		return pMULTIPLICITY;
	}
	
	public ParserRule getMULTIPLICITYRule() {
		return getMULTIPLICITYAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
