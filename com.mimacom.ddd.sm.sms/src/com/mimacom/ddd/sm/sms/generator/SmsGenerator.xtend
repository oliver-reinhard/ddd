/*
 * generated by Xtext 2.16.0
 */
package com.mimacom.ddd.sm.sms.generator

import com.google.inject.Inject
import com.mimacom.ddd.sm.sms.SDeducibleElement
import java.io.CharArrayWriter
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.EcoreUtil2
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import org.eclipse.xtext.resource.SaveOptions
import org.eclipse.xtext.resource.XtextResourceSet
import org.eclipse.xtext.serializer.ISerializer
import com.mimacom.ddd.sm.sms.SLiteral
import com.mimacom.ddd.sm.sms.SFeature
import org.eclipse.emf.ecore.util.EcoreUtil
import com.google.common.collect.Lists

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class SmsGenerator extends AbstractGenerator {

	@Inject ISerializer serializer;
	
	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		val targetRS = new XtextResourceSet
		EcoreUtil2.clone(targetRS, resource.resourceSet)
		val resourceCopy = targetRS.getResource(resource.URI, false)
		if (resourceCopy.removeTransformationItems) {
			// if no synthetic members were present, then resource is already a generated file.
			val writer = new CharArrayWriter(1000)
			val  saveOptions = SaveOptions.getOptions(null)
			serializer.serialize(resourceCopy.contents.head, writer, saveOptions)
			fsa.generateFile("Deduced" + resource.URI.lastSegment.toFirstUpper, writer.toString)
		}
	}
	
	def boolean removeTransformationItems(Resource resource) {
		var hadSyntheticItems = false
		val elements = resource.allContents.filter(SDeducibleElement)
		val elementsToRemove = Lists.newArrayList
		while (elements.hasNext) {
			val e = elements.next
			if (e.deductionRule !== null && (e instanceof SLiteral || e instanceof SFeature)) {
				elementsToRemove.add(e)
			} else {
				e.deductionRule = null
				hadSyntheticItems = hadSyntheticItems || (e.synthetic !== null && e.synthetic)
				e.unsetSynthetic
			}
		}
		for (e : elementsToRemove) {
			EcoreUtil.remove(e)
		}
		return hadSyntheticItems
	}
}
