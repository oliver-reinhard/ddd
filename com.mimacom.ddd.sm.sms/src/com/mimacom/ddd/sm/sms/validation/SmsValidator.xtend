/*
 * generated by Xtext 2.16.0
 */
package com.mimacom.ddd.sm.sms.validation

import com.mimacom.ddd.sm.sms.SComplexType
import com.mimacom.ddd.sm.sms.SDitchTransform
import static com.mimacom.ddd.sm.sms.SElementNature.*
import com.mimacom.ddd.sm.sms.SSpoofTransform
import com.mimacom.ddd.sm.sms.SmsPackage
import org.eclipse.xtext.validation.Check

/**
 * This class contains custom validation rules. 
 *
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
class SmsValidator extends AbstractSmsValidator {

	@Check
	def checkDeducedFeatures(SComplexType type) {
		if (type.nature == DEDUCTION_RULE) {
			if (type.deductionRule.transform instanceof SSpoofTransform) {
				val hasDitchElements= type.features.exists[nature == DEDUCTION_RULE && deductionRule.transform instanceof SDitchTransform]
				val hasOtherElements= type.features.exists[nature == DEDUCTION_RULE && deductionRule.transform instanceof SDitchTransform]
				if ( hasDitchElements && hasOtherElements) {
					error("Cannot declare \"ditch\" transformations with other kinds of transformations", SmsPackage.Literals.SNAMED_ELEMENT__NAME)
				}
			}
		}
	}
	
}
