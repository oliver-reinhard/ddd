/**
 * generated by Xtext 2.16.0
 */
package com.mimacom.ddd.sm.sms.util;

import com.mimacom.ddd.sm.sms.*;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see com.mimacom.ddd.sm.sms.SmsPackage
 * @generated
 */
public class SmsAdapterFactory extends AdapterFactoryImpl
{
	/**
	 * The cached model package.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected static SmsPackage modelPackage;

	/**
	 * Creates an instance of the adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public SmsAdapterFactory()
	{
		if (modelPackage == null)
		{
			modelPackage = SmsPackage.eINSTANCE;
		}
	}

	/**
	 * Returns whether this factory is applicable for the type of the object.
	 * <!-- begin-user-doc -->
	 * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
	 * <!-- end-user-doc -->
	 * @return whether this factory is applicable for the type of the object.
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object object)
	{
		if (object == modelPackage)
		{
			return true;
		}
		if (object instanceof EObject)
		{
			return ((EObject)object).eClass().getEPackage() == modelPackage;
		}
		return false;
	}

	/**
	 * The switch that delegates to the <code>createXXX</code> methods.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SmsSwitch<Adapter> modelSwitch =
		new SmsSwitch<Adapter>()
		{
			@Override
			public Adapter caseSDomain(SDomain object)
			{
				return createSDomainAdapter();
			}
			@Override
			public Adapter caseSNamedElement(SNamedElement object)
			{
				return createSNamedElementAdapter();
			}
			@Override
			public Adapter caseSDeducibleElement(SDeducibleElement object)
			{
				return createSDeducibleElementAdapter();
			}
			@Override
			public Adapter caseSDeducibleMemberElement(SDeducibleMemberElement object)
			{
				return createSDeducibleMemberElementAdapter();
			}
			@Override
			public Adapter caseSImport(SImport object)
			{
				return createSImportAdapter();
			}
			@Override
			public Adapter caseSAggregate(SAggregate object)
			{
				return createSAggregateAdapter();
			}
			@Override
			public Adapter caseSType(SType object)
			{
				return createSTypeAdapter();
			}
			@Override
			public Adapter caseSSimpleType(SSimpleType object)
			{
				return createSSimpleTypeAdapter();
			}
			@Override
			public Adapter caseSComplexType(SComplexType object)
			{
				return createSComplexTypeAdapter();
			}
			@Override
			public Adapter caseSCondition(SCondition object)
			{
				return createSConditionAdapter();
			}
			@Override
			public Adapter caseSPrimitive(SPrimitive object)
			{
				return createSPrimitiveAdapter();
			}
			@Override
			public Adapter caseSEnumeration(SEnumeration object)
			{
				return createSEnumerationAdapter();
			}
			@Override
			public Adapter caseSLiteral(SLiteral object)
			{
				return createSLiteralAdapter();
			}
			@Override
			public Adapter caseSRootType(SRootType object)
			{
				return createSRootTypeAdapter();
			}
			@Override
			public Adapter caseSDetailType(SDetailType object)
			{
				return createSDetailTypeAdapter();
			}
			@Override
			public Adapter caseSFeature(SFeature object)
			{
				return createSFeatureAdapter();
			}
			@Override
			public Adapter caseSAssociation(SAssociation object)
			{
				return createSAssociationAdapter();
			}
			@Override
			public Adapter caseSAttribute(SAttribute object)
			{
				return createSAttributeAdapter();
			}
			@Override
			public Adapter caseSQuery(SQuery object)
			{
				return createSQueryAdapter();
			}
			@Override
			public Adapter caseSQueryParameter(SQueryParameter object)
			{
				return createSQueryParameterAdapter();
			}
			@Override
			public Adapter caseSExpression(SExpression object)
			{
				return createSExpressionAdapter();
			}
			@Override
			public Adapter caseSMultiplicity(SMultiplicity object)
			{
				return createSMultiplicityAdapter();
			}
			@Override
			public Adapter caseSDeductionRule(SDeductionRule object)
			{
				return createSDeductionRuleAdapter();
			}
			@Override
			public Adapter caseSMemberDeductionRule(SMemberDeductionRule object)
			{
				return createSMemberDeductionRuleAdapter();
			}
			@Override
			public Adapter caseSTransform(STransform object)
			{
				return createSTransformAdapter();
			}
			@Override
			public Adapter caseSSpoofTransform(SSpoofTransform object)
			{
				return createSSpoofTransformAdapter();
			}
			@Override
			public Adapter caseSMorphTransform(SMorphTransform object)
			{
				return createSMorphTransformAdapter();
			}
			@Override
			public Adapter caseSDitchTransform(SDitchTransform object)
			{
				return createSDitchTransformAdapter();
			}
			@Override
			public Adapter caseSFuseTransform(SFuseTransform object)
			{
				return createSFuseTransformAdapter();
			}
			@Override
			public Adapter caseSChopTransform(SChopTransform object)
			{
				return createSChopTransformAdapter();
			}
			@Override
			public Adapter defaultCase(EObject object)
			{
				return createEObjectAdapter();
			}
		};

	/**
	 * Creates an adapter for the <code>target</code>.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @param target the object to adapt.
	 * @return the adapter for the <code>target</code>.
	 * @generated
	 */
	@Override
	public Adapter createAdapter(Notifier target)
	{
		return modelSwitch.doSwitch((EObject)target);
	}


	/**
	 * Creates a new adapter for an object of class '{@link com.mimacom.ddd.sm.sms.SDomain <em>SDomain</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see com.mimacom.ddd.sm.sms.SDomain
	 * @generated
	 */
	public Adapter createSDomainAdapter()
	{
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link com.mimacom.ddd.sm.sms.SNamedElement <em>SNamed Element</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see com.mimacom.ddd.sm.sms.SNamedElement
	 * @generated
	 */
	public Adapter createSNamedElementAdapter()
	{
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link com.mimacom.ddd.sm.sms.SDeducibleElement <em>SDeducible Element</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see com.mimacom.ddd.sm.sms.SDeducibleElement
	 * @generated
	 */
	public Adapter createSDeducibleElementAdapter()
	{
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link com.mimacom.ddd.sm.sms.SDeducibleMemberElement <em>SDeducible Member Element</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see com.mimacom.ddd.sm.sms.SDeducibleMemberElement
	 * @generated
	 */
	public Adapter createSDeducibleMemberElementAdapter()
	{
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link com.mimacom.ddd.sm.sms.SImport <em>SImport</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see com.mimacom.ddd.sm.sms.SImport
	 * @generated
	 */
	public Adapter createSImportAdapter()
	{
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link com.mimacom.ddd.sm.sms.SAggregate <em>SAggregate</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see com.mimacom.ddd.sm.sms.SAggregate
	 * @generated
	 */
	public Adapter createSAggregateAdapter()
	{
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link com.mimacom.ddd.sm.sms.SType <em>SType</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see com.mimacom.ddd.sm.sms.SType
	 * @generated
	 */
	public Adapter createSTypeAdapter()
	{
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link com.mimacom.ddd.sm.sms.SSimpleType <em>SSimple Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see com.mimacom.ddd.sm.sms.SSimpleType
	 * @generated
	 */
	public Adapter createSSimpleTypeAdapter()
	{
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link com.mimacom.ddd.sm.sms.SComplexType <em>SComplex Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see com.mimacom.ddd.sm.sms.SComplexType
	 * @generated
	 */
	public Adapter createSComplexTypeAdapter()
	{
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link com.mimacom.ddd.sm.sms.SCondition <em>SCondition</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see com.mimacom.ddd.sm.sms.SCondition
	 * @generated
	 */
	public Adapter createSConditionAdapter()
	{
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link com.mimacom.ddd.sm.sms.SPrimitive <em>SPrimitive</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see com.mimacom.ddd.sm.sms.SPrimitive
	 * @generated
	 */
	public Adapter createSPrimitiveAdapter()
	{
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link com.mimacom.ddd.sm.sms.SEnumeration <em>SEnumeration</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see com.mimacom.ddd.sm.sms.SEnumeration
	 * @generated
	 */
	public Adapter createSEnumerationAdapter()
	{
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link com.mimacom.ddd.sm.sms.SLiteral <em>SLiteral</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see com.mimacom.ddd.sm.sms.SLiteral
	 * @generated
	 */
	public Adapter createSLiteralAdapter()
	{
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link com.mimacom.ddd.sm.sms.SRootType <em>SRoot Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see com.mimacom.ddd.sm.sms.SRootType
	 * @generated
	 */
	public Adapter createSRootTypeAdapter()
	{
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link com.mimacom.ddd.sm.sms.SDetailType <em>SDetail Type</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see com.mimacom.ddd.sm.sms.SDetailType
	 * @generated
	 */
	public Adapter createSDetailTypeAdapter()
	{
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link com.mimacom.ddd.sm.sms.SFeature <em>SFeature</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see com.mimacom.ddd.sm.sms.SFeature
	 * @generated
	 */
	public Adapter createSFeatureAdapter()
	{
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link com.mimacom.ddd.sm.sms.SAssociation <em>SAssociation</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see com.mimacom.ddd.sm.sms.SAssociation
	 * @generated
	 */
	public Adapter createSAssociationAdapter()
	{
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link com.mimacom.ddd.sm.sms.SAttribute <em>SAttribute</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see com.mimacom.ddd.sm.sms.SAttribute
	 * @generated
	 */
	public Adapter createSAttributeAdapter()
	{
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link com.mimacom.ddd.sm.sms.SQuery <em>SQuery</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see com.mimacom.ddd.sm.sms.SQuery
	 * @generated
	 */
	public Adapter createSQueryAdapter()
	{
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link com.mimacom.ddd.sm.sms.SQueryParameter <em>SQuery Parameter</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see com.mimacom.ddd.sm.sms.SQueryParameter
	 * @generated
	 */
	public Adapter createSQueryParameterAdapter()
	{
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link com.mimacom.ddd.sm.sms.SExpression <em>SExpression</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see com.mimacom.ddd.sm.sms.SExpression
	 * @generated
	 */
	public Adapter createSExpressionAdapter()
	{
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link com.mimacom.ddd.sm.sms.SMultiplicity <em>SMultiplicity</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see com.mimacom.ddd.sm.sms.SMultiplicity
	 * @generated
	 */
	public Adapter createSMultiplicityAdapter()
	{
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link com.mimacom.ddd.sm.sms.SDeductionRule <em>SDeduction Rule</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see com.mimacom.ddd.sm.sms.SDeductionRule
	 * @generated
	 */
	public Adapter createSDeductionRuleAdapter()
	{
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link com.mimacom.ddd.sm.sms.SMemberDeductionRule <em>SMember Deduction Rule</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see com.mimacom.ddd.sm.sms.SMemberDeductionRule
	 * @generated
	 */
	public Adapter createSMemberDeductionRuleAdapter()
	{
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link com.mimacom.ddd.sm.sms.STransform <em>STransform</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see com.mimacom.ddd.sm.sms.STransform
	 * @generated
	 */
	public Adapter createSTransformAdapter()
	{
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link com.mimacom.ddd.sm.sms.SSpoofTransform <em>SSpoof Transform</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see com.mimacom.ddd.sm.sms.SSpoofTransform
	 * @generated
	 */
	public Adapter createSSpoofTransformAdapter()
	{
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link com.mimacom.ddd.sm.sms.SMorphTransform <em>SMorph Transform</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see com.mimacom.ddd.sm.sms.SMorphTransform
	 * @generated
	 */
	public Adapter createSMorphTransformAdapter()
	{
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link com.mimacom.ddd.sm.sms.SDitchTransform <em>SDitch Transform</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see com.mimacom.ddd.sm.sms.SDitchTransform
	 * @generated
	 */
	public Adapter createSDitchTransformAdapter()
	{
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link com.mimacom.ddd.sm.sms.SFuseTransform <em>SFuse Transform</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see com.mimacom.ddd.sm.sms.SFuseTransform
	 * @generated
	 */
	public Adapter createSFuseTransformAdapter()
	{
		return null;
	}

	/**
	 * Creates a new adapter for an object of class '{@link com.mimacom.ddd.sm.sms.SChopTransform <em>SChop Transform</em>}'.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null so that we can easily ignore cases;
	 * it's useful to ignore a case when inheritance will catch all the cases anyway.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see com.mimacom.ddd.sm.sms.SChopTransform
	 * @generated
	 */
	public Adapter createSChopTransformAdapter()
	{
		return null;
	}

	/**
	 * Creates a new adapter for the default case.
	 * <!-- begin-user-doc -->
	 * This default implementation returns null.
	 * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @generated
	 */
	public Adapter createEObjectAdapter()
	{
		return null;
	}

} //SmsAdapterFactory
