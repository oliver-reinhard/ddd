/**
 * generated by Xtext 2.16.0
 */
package com.mimacom.ddd.sm.sms.util;

import com.mimacom.ddd.sm.sms.*;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.util.Switch;

/**
 * <!-- begin-user-doc -->
 * The <b>Switch</b> for the model's inheritance hierarchy.
 * It supports the call {@link #doSwitch(EObject) doSwitch(object)}
 * to invoke the <code>caseXXX</code> method for each class of the model,
 * starting with the actual class of the object
 * and proceeding up the inheritance hierarchy
 * until a non-null result is returned,
 * which is the result of the switch.
 * <!-- end-user-doc -->
 * @see com.mimacom.ddd.sm.sms.SmsPackage
 * @generated
 */
public class SmsSwitch<T> extends Switch<T>
{
	/**
	 * The cached model package
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected static SmsPackage modelPackage;

	/**
	 * Creates an instance of the switch.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public SmsSwitch()
	{
		if (modelPackage == null)
		{
			modelPackage = SmsPackage.eINSTANCE;
		}
	}

	/**
	 * Checks whether this is a switch for the given package.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @param ePackage the package in question.
	 * @return whether this is a switch for the given package.
	 * @generated
	 */
	@Override
	protected boolean isSwitchFor(EPackage ePackage)
	{
		return ePackage == modelPackage;
	}

	/**
	 * Calls <code>caseXXX</code> for each class of the model until one returns a non null result; it yields that result.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @return the first non-null result returned by a <code>caseXXX</code> call.
	 * @generated
	 */
	@Override
	protected T doSwitch(int classifierID, EObject theEObject)
	{
		switch (classifierID)
		{
			case SmsPackage.SDOMAIN:
			{
				SDomain sDomain = (SDomain)theEObject;
				T result = caseSDomain(sDomain);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case SmsPackage.SNAMED_ELEMENT:
			{
				SNamedElement sNamedElement = (SNamedElement)theEObject;
				T result = caseSNamedElement(sNamedElement);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case SmsPackage.SDEDUCIBLE_ELEMENT:
			{
				SDeducibleElement sDeducibleElement = (SDeducibleElement)theEObject;
				T result = caseSDeducibleElement(sDeducibleElement);
				if (result == null) result = caseSNamedElement(sDeducibleElement);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case SmsPackage.SDEDUCIBLE_MEMBER_ELEMENT:
			{
				SDeducibleMemberElement sDeducibleMemberElement = (SDeducibleMemberElement)theEObject;
				T result = caseSDeducibleMemberElement(sDeducibleMemberElement);
				if (result == null) result = caseSNamedElement(sDeducibleMemberElement);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case SmsPackage.SIMPORT:
			{
				SImport sImport = (SImport)theEObject;
				T result = caseSImport(sImport);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case SmsPackage.SAGGREGATE:
			{
				SAggregate sAggregate = (SAggregate)theEObject;
				T result = caseSAggregate(sAggregate);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case SmsPackage.STYPE:
			{
				SType sType = (SType)theEObject;
				T result = caseSType(sType);
				if (result == null) result = caseSDeducibleElement(sType);
				if (result == null) result = caseSNamedElement(sType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case SmsPackage.SSIMPLE_TYPE:
			{
				SSimpleType sSimpleType = (SSimpleType)theEObject;
				T result = caseSSimpleType(sSimpleType);
				if (result == null) result = caseSType(sSimpleType);
				if (result == null) result = caseSDeducibleElement(sSimpleType);
				if (result == null) result = caseSNamedElement(sSimpleType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case SmsPackage.SCOMPLEX_TYPE:
			{
				SComplexType sComplexType = (SComplexType)theEObject;
				T result = caseSComplexType(sComplexType);
				if (result == null) result = caseSType(sComplexType);
				if (result == null) result = caseSDeducibleElement(sComplexType);
				if (result == null) result = caseSNamedElement(sComplexType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case SmsPackage.SCONDITION:
			{
				SCondition sCondition = (SCondition)theEObject;
				T result = caseSCondition(sCondition);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case SmsPackage.SPRIMITIVE:
			{
				SPrimitive sPrimitive = (SPrimitive)theEObject;
				T result = caseSPrimitive(sPrimitive);
				if (result == null) result = caseSSimpleType(sPrimitive);
				if (result == null) result = caseSType(sPrimitive);
				if (result == null) result = caseSDeducibleElement(sPrimitive);
				if (result == null) result = caseSNamedElement(sPrimitive);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case SmsPackage.SENUMERATION:
			{
				SEnumeration sEnumeration = (SEnumeration)theEObject;
				T result = caseSEnumeration(sEnumeration);
				if (result == null) result = caseSSimpleType(sEnumeration);
				if (result == null) result = caseSType(sEnumeration);
				if (result == null) result = caseSDeducibleElement(sEnumeration);
				if (result == null) result = caseSNamedElement(sEnumeration);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case SmsPackage.SLITERAL:
			{
				SLiteral sLiteral = (SLiteral)theEObject;
				T result = caseSLiteral(sLiteral);
				if (result == null) result = caseSDeducibleElement(sLiteral);
				if (result == null) result = caseSNamedElement(sLiteral);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case SmsPackage.SROOT_TYPE:
			{
				SRootType sRootType = (SRootType)theEObject;
				T result = caseSRootType(sRootType);
				if (result == null) result = caseSComplexType(sRootType);
				if (result == null) result = caseSType(sRootType);
				if (result == null) result = caseSDeducibleElement(sRootType);
				if (result == null) result = caseSNamedElement(sRootType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case SmsPackage.SDETAIL_TYPE:
			{
				SDetailType sDetailType = (SDetailType)theEObject;
				T result = caseSDetailType(sDetailType);
				if (result == null) result = caseSComplexType(sDetailType);
				if (result == null) result = caseSType(sDetailType);
				if (result == null) result = caseSDeducibleElement(sDetailType);
				if (result == null) result = caseSNamedElement(sDetailType);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case SmsPackage.SFEATURE:
			{
				SFeature sFeature = (SFeature)theEObject;
				T result = caseSFeature(sFeature);
				if (result == null) result = caseSDeducibleMemberElement(sFeature);
				if (result == null) result = caseSNamedElement(sFeature);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case SmsPackage.SASSOCIATION:
			{
				SAssociation sAssociation = (SAssociation)theEObject;
				T result = caseSAssociation(sAssociation);
				if (result == null) result = caseSFeature(sAssociation);
				if (result == null) result = caseSDeducibleMemberElement(sAssociation);
				if (result == null) result = caseSNamedElement(sAssociation);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case SmsPackage.SATTRIBUTE:
			{
				SAttribute sAttribute = (SAttribute)theEObject;
				T result = caseSAttribute(sAttribute);
				if (result == null) result = caseSFeature(sAttribute);
				if (result == null) result = caseSDeducibleMemberElement(sAttribute);
				if (result == null) result = caseSNamedElement(sAttribute);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case SmsPackage.SQUERY:
			{
				SQuery sQuery = (SQuery)theEObject;
				T result = caseSQuery(sQuery);
				if (result == null) result = caseSFeature(sQuery);
				if (result == null) result = caseSDeducibleMemberElement(sQuery);
				if (result == null) result = caseSNamedElement(sQuery);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case SmsPackage.SQUERY_PARAMETER:
			{
				SQueryParameter sQueryParameter = (SQueryParameter)theEObject;
				T result = caseSQueryParameter(sQueryParameter);
				if (result == null) result = caseSDeducibleMemberElement(sQueryParameter);
				if (result == null) result = caseSNamedElement(sQueryParameter);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case SmsPackage.SEXPRESSION:
			{
				SExpression sExpression = (SExpression)theEObject;
				T result = caseSExpression(sExpression);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case SmsPackage.SMULTIPLICITY:
			{
				SMultiplicity sMultiplicity = (SMultiplicity)theEObject;
				T result = caseSMultiplicity(sMultiplicity);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case SmsPackage.SDEDUCTION_RULE:
			{
				SDeductionRule sDeductionRule = (SDeductionRule)theEObject;
				T result = caseSDeductionRule(sDeductionRule);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case SmsPackage.SMEMBER_DEDUCTION_RULE:
			{
				SMemberDeductionRule sMemberDeductionRule = (SMemberDeductionRule)theEObject;
				T result = caseSMemberDeductionRule(sMemberDeductionRule);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case SmsPackage.STRANSFORM:
			{
				STransform sTransform = (STransform)theEObject;
				T result = caseSTransform(sTransform);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case SmsPackage.SSPOOF_TRANSFORM:
			{
				SSpoofTransform sSpoofTransform = (SSpoofTransform)theEObject;
				T result = caseSSpoofTransform(sSpoofTransform);
				if (result == null) result = caseSTransform(sSpoofTransform);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case SmsPackage.SMORPH_TRANSFORM:
			{
				SMorphTransform sMorphTransform = (SMorphTransform)theEObject;
				T result = caseSMorphTransform(sMorphTransform);
				if (result == null) result = caseSTransform(sMorphTransform);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case SmsPackage.SDITCH_TRANSFORM:
			{
				SDitchTransform sDitchTransform = (SDitchTransform)theEObject;
				T result = caseSDitchTransform(sDitchTransform);
				if (result == null) result = caseSTransform(sDitchTransform);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case SmsPackage.SFUSE_TRANSFORM:
			{
				SFuseTransform sFuseTransform = (SFuseTransform)theEObject;
				T result = caseSFuseTransform(sFuseTransform);
				if (result == null) result = caseSTransform(sFuseTransform);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			case SmsPackage.SCHOP_TRANSFORM:
			{
				SChopTransform sChopTransform = (SChopTransform)theEObject;
				T result = caseSChopTransform(sChopTransform);
				if (result == null) result = caseSTransform(sChopTransform);
				if (result == null) result = defaultCase(theEObject);
				return result;
			}
			default: return defaultCase(theEObject);
		}
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>SDomain</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>SDomain</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseSDomain(SDomain object)
	{
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>SNamed Element</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>SNamed Element</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseSNamedElement(SNamedElement object)
	{
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>SDeducible Element</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>SDeducible Element</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseSDeducibleElement(SDeducibleElement object)
	{
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>SDeducible Member Element</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>SDeducible Member Element</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseSDeducibleMemberElement(SDeducibleMemberElement object)
	{
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>SImport</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>SImport</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseSImport(SImport object)
	{
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>SAggregate</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>SAggregate</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseSAggregate(SAggregate object)
	{
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>SType</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>SType</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseSType(SType object)
	{
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>SSimple Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>SSimple Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseSSimpleType(SSimpleType object)
	{
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>SComplex Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>SComplex Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseSComplexType(SComplexType object)
	{
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>SCondition</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>SCondition</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseSCondition(SCondition object)
	{
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>SPrimitive</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>SPrimitive</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseSPrimitive(SPrimitive object)
	{
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>SEnumeration</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>SEnumeration</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseSEnumeration(SEnumeration object)
	{
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>SLiteral</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>SLiteral</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseSLiteral(SLiteral object)
	{
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>SRoot Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>SRoot Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseSRootType(SRootType object)
	{
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>SDetail Type</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>SDetail Type</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseSDetailType(SDetailType object)
	{
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>SFeature</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>SFeature</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseSFeature(SFeature object)
	{
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>SAssociation</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>SAssociation</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseSAssociation(SAssociation object)
	{
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>SAttribute</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>SAttribute</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseSAttribute(SAttribute object)
	{
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>SQuery</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>SQuery</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseSQuery(SQuery object)
	{
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>SQuery Parameter</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>SQuery Parameter</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseSQueryParameter(SQueryParameter object)
	{
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>SExpression</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>SExpression</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseSExpression(SExpression object)
	{
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>SMultiplicity</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>SMultiplicity</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseSMultiplicity(SMultiplicity object)
	{
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>SDeduction Rule</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>SDeduction Rule</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseSDeductionRule(SDeductionRule object)
	{
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>SMember Deduction Rule</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>SMember Deduction Rule</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseSMemberDeductionRule(SMemberDeductionRule object)
	{
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>STransform</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>STransform</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseSTransform(STransform object)
	{
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>SSpoof Transform</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>SSpoof Transform</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseSSpoofTransform(SSpoofTransform object)
	{
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>SMorph Transform</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>SMorph Transform</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseSMorphTransform(SMorphTransform object)
	{
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>SDitch Transform</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>SDitch Transform</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseSDitchTransform(SDitchTransform object)
	{
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>SFuse Transform</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>SFuse Transform</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseSFuseTransform(SFuseTransform object)
	{
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>SChop Transform</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>SChop Transform</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
	 * @generated
	 */
	public T caseSChopTransform(SChopTransform object)
	{
		return null;
	}

	/**
	 * Returns the result of interpreting the object as an instance of '<em>EObject</em>'.
	 * <!-- begin-user-doc -->
	 * This implementation returns null;
	 * returning a non-null result will terminate the switch, but this is the last case anyway.
	 * <!-- end-user-doc -->
	 * @param object the target of the switch.
	 * @return the result of interpreting the object as an instance of '<em>EObject</em>'.
	 * @see #doSwitch(org.eclipse.emf.ecore.EObject)
	 * @generated
	 */
	@Override
	public T defaultCase(EObject object)
	{
		return null;
	}

} //SmsSwitch
