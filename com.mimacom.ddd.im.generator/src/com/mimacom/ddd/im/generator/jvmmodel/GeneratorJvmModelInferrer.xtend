/*
 * generated by Xtext 2.19.0
 */
package com.mimacom.ddd.im.generator.jvmmodel

import com.google.inject.Inject
import com.mimacom.ddd.dm.dmx.scoping.DmxQualifiedNameProvider
import com.mimacom.ddd.im.generator.generator.ExceptionMapping
import org.eclipse.xtext.common.types.JvmDeclaredType
import org.eclipse.xtext.common.types.JvmTypeReference
import org.eclipse.xtext.xbase.jvmmodel.AbstractModelInferrer
import org.eclipse.xtext.xbase.jvmmodel.IJvmDeclaredTypeAcceptor
import org.eclipse.xtext.xbase.jvmmodel.JvmTypesBuilder

/**
 * <p>Infers a JVM model from the source model.</p> 
 *
 * <p>The JVM model should contain all elements that would appear in the Java code 
 * which is generated from the source model. Other models link against the JVM model rather than the source model.</p>     
 */
class GeneratorJvmModelInferrer extends AbstractModelInferrer {

	/**
	 * convenience API to build and initialize JVM types and their members.
	 */
	@Inject extension JvmTypesBuilder
	
  	@Inject extension DmxQualifiedNameProvider
  	
	def dispatch void infer(ExceptionMapping element, IJvmDeclaredTypeAcceptor acceptor, boolean isPreIndexingPhase) {
		val qualifiedName = element.getQualifiedName
		if (qualifiedName !== null)
			acceptor.accept(element.toClass(qualifiedName)) [
				// documentation
				documentation = element.documentation
			
				// extends
				var JvmTypeReference parentException
				if (element.extends !== null)
					parentException = element.extends.typeRef
				else
					parentException = typeRef(RuntimeException)
				if (parentException !== null)
					superTypes += parentException
				
				// message
				members += element.toConstructor[
					if (element.message !== null)
						body = '''super("«element.message»");'''
				]
			]
	}
	
	private def dispatch getQualifiedName(ExceptionMapping mapping) {
		if (mapping.package !== null)
			return '''«mapping.package.toLowerCase».«mapping.name.name»'''
		val qualifiedName = mapping.name?.fullyQualifiedName
		if (qualifiedName !== null) {
			val packageName = qualifiedName.segments.take(qualifiedName.segmentCount - 1).map[toLowerCase].join('.')
			return '''«packageName».«qualifiedName.lastSegment.toString»'''
		}
		return null			
	}
}
