/*
 * generated by Xtext 2.17.1
 */
package com.mimacom.ddd.sm.sim.serializer;

import com.google.inject.Inject;
import com.mimacom.ddd.sm.sim.services.SimGrammarAccess;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AlternativeAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;

@SuppressWarnings("all")
public class SimSyntacticSequencer extends AbstractSyntacticSequencer {

	protected SimGrammarAccess grammarAccess;
	protected AbstractElementAlias match_ChangeComplexType_ToKeyword_0_q;
	protected AbstractElementAlias match_DmxBooleanLiteral_FALSEKeyword_1_2_or_FalseKeyword_1_3;
	protected AbstractElementAlias match_DmxParenthesizedExpression_LeftParenthesisKeyword_0_a;
	protected AbstractElementAlias match_DmxParenthesizedExpression_LeftParenthesisKeyword_0_p;
	protected AbstractElementAlias match_DmxUndefinedLiteral_UNDEFINEDKeyword_1_0_or_UndefinedKeyword_1_1;
	protected AbstractElementAlias match_SAssociationDeduction_CompositeKeyword_1_0_1_1_or_ReferenceKeyword_1_0_1_0;
	protected AbstractElementAlias match_SAssociationDeduction_CompositeKeyword_1_1_1_1_or_ReferenceKeyword_1_1_1_0;
	protected AbstractElementAlias match_SAssociationDeduction_CompositeKeyword_1_2_1_1_or_ReferenceKeyword_1_2_1_0;
	protected AbstractElementAlias match_SAttributeDeduction_AttributeKeyword_1_0_1_0_q;
	protected AbstractElementAlias match_SAttributeDeduction_AttributeKeyword_1_1_1_0_q;
	protected AbstractElementAlias match_SAttributeDeduction_AttributeKeyword_1_2_1_0_q;
	protected AbstractElementAlias match_SQueryDeduction_AsteriskKeyword_1_0_2_0_q;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (SimGrammarAccess) access;
		match_ChangeComplexType_ToKeyword_0_q = new TokenAlias(false, true, grammarAccess.getChangeComplexTypeAccess().getToKeyword_0());
		match_DmxBooleanLiteral_FALSEKeyword_1_2_or_FalseKeyword_1_3 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getDmxBooleanLiteralAccess().getFALSEKeyword_1_2()), new TokenAlias(false, false, grammarAccess.getDmxBooleanLiteralAccess().getFalseKeyword_1_3()));
		match_DmxParenthesizedExpression_LeftParenthesisKeyword_0_a = new TokenAlias(true, true, grammarAccess.getDmxParenthesizedExpressionAccess().getLeftParenthesisKeyword_0());
		match_DmxParenthesizedExpression_LeftParenthesisKeyword_0_p = new TokenAlias(true, false, grammarAccess.getDmxParenthesizedExpressionAccess().getLeftParenthesisKeyword_0());
		match_DmxUndefinedLiteral_UNDEFINEDKeyword_1_0_or_UndefinedKeyword_1_1 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getDmxUndefinedLiteralAccess().getUNDEFINEDKeyword_1_0()), new TokenAlias(false, false, grammarAccess.getDmxUndefinedLiteralAccess().getUndefinedKeyword_1_1()));
		match_SAssociationDeduction_CompositeKeyword_1_0_1_1_or_ReferenceKeyword_1_0_1_0 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getSAssociationDeductionAccess().getCompositeKeyword_1_0_1_1()), new TokenAlias(false, false, grammarAccess.getSAssociationDeductionAccess().getReferenceKeyword_1_0_1_0()));
		match_SAssociationDeduction_CompositeKeyword_1_1_1_1_or_ReferenceKeyword_1_1_1_0 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getSAssociationDeductionAccess().getCompositeKeyword_1_1_1_1()), new TokenAlias(false, false, grammarAccess.getSAssociationDeductionAccess().getReferenceKeyword_1_1_1_0()));
		match_SAssociationDeduction_CompositeKeyword_1_2_1_1_or_ReferenceKeyword_1_2_1_0 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getSAssociationDeductionAccess().getCompositeKeyword_1_2_1_1()), new TokenAlias(false, false, grammarAccess.getSAssociationDeductionAccess().getReferenceKeyword_1_2_1_0()));
		match_SAttributeDeduction_AttributeKeyword_1_0_1_0_q = new TokenAlias(false, true, grammarAccess.getSAttributeDeductionAccess().getAttributeKeyword_1_0_1_0());
		match_SAttributeDeduction_AttributeKeyword_1_1_1_0_q = new TokenAlias(false, true, grammarAccess.getSAttributeDeductionAccess().getAttributeKeyword_1_1_1_0());
		match_SAttributeDeduction_AttributeKeyword_1_2_1_0_q = new TokenAlias(false, true, grammarAccess.getSAttributeDeductionAccess().getAttributeKeyword_1_2_1_0());
		match_SQueryDeduction_AsteriskKeyword_1_0_2_0_q = new TokenAlias(false, true, grammarAccess.getSQueryDeductionAccess().getAsteriskKeyword_1_0_2_0());
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (ruleCall.getRule() == grammarAccess.getDmxOpCastRule())
			return getDmxOpCastToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getDmxOpConstructorRule())
			return getDmxOpConstructorToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getDmxOpInstanceOfRule())
			return getDmxOpInstanceOfToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getDmxOpSingleAssignRule())
			return getDmxOpSingleAssignToken(semanticObject, ruleCall, node);
		return "";
	}
	
	/**
	 * DmxOpCast:
	 * 	'AS' | 'as';
	 */
	protected String getDmxOpCastToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "AS";
	}
	
	/**
	 * DmxOpConstructor:
	 * 	'NEW' | 'new';
	 */
	protected String getDmxOpConstructorToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "NEW";
	}
	
	/**
	 * DmxOpInstanceOf:
	 * 	'ISA' | 'isa';
	 */
	protected String getDmxOpInstanceOfToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "ISA";
	}
	
	/**
	 * DmxOpSingleAssign:
	 * 	':=';
	 */
	protected String getDmxOpSingleAssignToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return ":=";
	}
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_ChangeComplexType_ToKeyword_0_q.equals(syntax))
				emit_ChangeComplexType_ToKeyword_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_DmxBooleanLiteral_FALSEKeyword_1_2_or_FalseKeyword_1_3.equals(syntax))
				emit_DmxBooleanLiteral_FALSEKeyword_1_2_or_FalseKeyword_1_3(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_DmxParenthesizedExpression_LeftParenthesisKeyword_0_a.equals(syntax))
				emit_DmxParenthesizedExpression_LeftParenthesisKeyword_0_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_DmxParenthesizedExpression_LeftParenthesisKeyword_0_p.equals(syntax))
				emit_DmxParenthesizedExpression_LeftParenthesisKeyword_0_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_DmxUndefinedLiteral_UNDEFINEDKeyword_1_0_or_UndefinedKeyword_1_1.equals(syntax))
				emit_DmxUndefinedLiteral_UNDEFINEDKeyword_1_0_or_UndefinedKeyword_1_1(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_SAssociationDeduction_CompositeKeyword_1_0_1_1_or_ReferenceKeyword_1_0_1_0.equals(syntax))
				emit_SAssociationDeduction_CompositeKeyword_1_0_1_1_or_ReferenceKeyword_1_0_1_0(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_SAssociationDeduction_CompositeKeyword_1_1_1_1_or_ReferenceKeyword_1_1_1_0.equals(syntax))
				emit_SAssociationDeduction_CompositeKeyword_1_1_1_1_or_ReferenceKeyword_1_1_1_0(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_SAssociationDeduction_CompositeKeyword_1_2_1_1_or_ReferenceKeyword_1_2_1_0.equals(syntax))
				emit_SAssociationDeduction_CompositeKeyword_1_2_1_1_or_ReferenceKeyword_1_2_1_0(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_SAttributeDeduction_AttributeKeyword_1_0_1_0_q.equals(syntax))
				emit_SAttributeDeduction_AttributeKeyword_1_0_1_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_SAttributeDeduction_AttributeKeyword_1_1_1_0_q.equals(syntax))
				emit_SAttributeDeduction_AttributeKeyword_1_1_1_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_SAttributeDeduction_AttributeKeyword_1_2_1_0_q.equals(syntax))
				emit_SAttributeDeduction_AttributeKeyword_1_2_1_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_SQueryDeduction_AsteriskKeyword_1_0_2_0_q.equals(syntax))
				emit_SQueryDeduction_AsteriskKeyword_1_0_2_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     'to'?
	 *
	 * This ambiguous syntax occurs at:
	 *     otherSources+=[DComplexType|DQualifiedName] (ambiguity) (rule end)
	 *     source=[DComplexType|DQualifiedName] (ambiguity) (rule end)
	 */
	protected void emit_ChangeComplexType_ToKeyword_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'FALSE' | 'false'
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) '('* (ambiguity) (rule start)
	 *     (rule start) '('+ (ambiguity) ')' (rule start)
	 *     (rule start) (ambiguity) (rule start)
	 */
	protected void emit_DmxBooleanLiteral_FALSEKeyword_1_2_or_FalseKeyword_1_3(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '('*
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) '[' target=[IStaticReferenceTarget|DQualifiedName]
	 *     (rule start) (ambiguity) 'if' if=DExpression
	 *     (rule start) (ambiguity) '{' '}' (rule start)
	 *     (rule start) (ambiguity) '{' elements+=DExpression
	 *     (rule start) (ambiguity) ('FALSE' | 'false') (rule start)
	 *     (rule start) (ambiguity) ('UNDEFINED' | 'undefined') (rule start)
	 *     (rule start) (ambiguity) DmxOpConstructor constructor=[DComplexType|ID]
	 *     (rule start) (ambiguity) assignToMember=[DNavigableMember|ID]
	 *     (rule start) (ambiguity) correlationVariable=DmxCorrelationVariable
	 *     (rule start) (ambiguity) function=[DmxFilter|ID]
	 *     (rule start) (ambiguity) operator=OpUnary
	 *     (rule start) (ambiguity) segments+=DmxTextOnly
	 *     (rule start) (ambiguity) segments+=DmxTextStart
	 *     (rule start) (ambiguity) target=[DNamedElement|ID]
	 *     (rule start) (ambiguity) value=DECIMAL
	 *     (rule start) (ambiguity) value=NATURAL
	 *     (rule start) (ambiguity) value=STRING
	 *     (rule start) (ambiguity) value?='TRUE'
	 *     (rule start) (ambiguity) value?='true'
	 *     (rule start) (ambiguity) {DmxAssignment.precedingNavigationSegment=}
	 *     (rule start) (ambiguity) {DmxBinaryOperation.leftOperand=}
	 *     (rule start) (ambiguity) {DmxCastExpression.target=}
	 *     (rule start) (ambiguity) {DmxInstanceOfExpression.expression=}
	 *     (rule start) (ambiguity) {DmxMemberNavigation.precedingNavigationSegment=}
	 */
	protected void emit_DmxParenthesizedExpression_LeftParenthesisKeyword_0_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '('+
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) '[' target=[IStaticReferenceTarget|DQualifiedName]
	 *     (rule start) (ambiguity) 'if' if=DExpression
	 *     (rule start) (ambiguity) '{' '}' ')' (rule start)
	 *     (rule start) (ambiguity) '{' elements+=DExpression
	 *     (rule start) (ambiguity) ('FALSE' | 'false') ')' (rule start)
	 *     (rule start) (ambiguity) ('UNDEFINED' | 'undefined') ')' (rule start)
	 *     (rule start) (ambiguity) DmxOpConstructor constructor=[DComplexType|ID]
	 *     (rule start) (ambiguity) assignToMember=[DNavigableMember|ID]
	 *     (rule start) (ambiguity) correlationVariable=DmxCorrelationVariable
	 *     (rule start) (ambiguity) function=[DmxFilter|ID]
	 *     (rule start) (ambiguity) operator=OpUnary
	 *     (rule start) (ambiguity) segments+=DmxTextOnly
	 *     (rule start) (ambiguity) segments+=DmxTextStart
	 *     (rule start) (ambiguity) target=[DNamedElement|ID]
	 *     (rule start) (ambiguity) value=DECIMAL
	 *     (rule start) (ambiguity) value=NATURAL
	 *     (rule start) (ambiguity) value=STRING
	 *     (rule start) (ambiguity) value?='TRUE'
	 *     (rule start) (ambiguity) value?='true'
	 *     (rule start) (ambiguity) {DmxAssignment.precedingNavigationSegment=}
	 *     (rule start) (ambiguity) {DmxBinaryOperation.leftOperand=}
	 *     (rule start) (ambiguity) {DmxCastExpression.target=}
	 *     (rule start) (ambiguity) {DmxInstanceOfExpression.expression=}
	 *     (rule start) (ambiguity) {DmxMemberNavigation.precedingNavigationSegment=}
	 */
	protected void emit_DmxParenthesizedExpression_LeftParenthesisKeyword_0_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'UNDEFINED' | 'undefined'
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) '('* (ambiguity) (rule start)
	 *     (rule start) '('+ (ambiguity) ')' (rule start)
	 *     (rule start) (ambiguity) (rule start)
	 */
	protected void emit_DmxUndefinedLiteral_UNDEFINEDKeyword_1_0_or_UndefinedKeyword_1_1(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'reference' | 'composite'
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'grab' (ambiguity) deductionRule=SGrabFeatureRule
	 */
	protected void emit_SAssociationDeduction_CompositeKeyword_1_0_1_1_or_ReferenceKeyword_1_0_1_0(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'reference' | 'composite'
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'morph' (ambiguity) deductionRule=SMorphFeatureRule
	 */
	protected void emit_SAssociationDeduction_CompositeKeyword_1_1_1_1_or_ReferenceKeyword_1_1_1_0(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'reference' | 'composite'
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'ditch' (ambiguity) deductionRule=SDitchFeatureRule
	 */
	protected void emit_SAssociationDeduction_CompositeKeyword_1_2_1_1_or_ReferenceKeyword_1_2_1_0(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'attribute'?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'grab' (ambiguity) deductionRule=SGrabFeatureRule
	 */
	protected void emit_SAttributeDeduction_AttributeKeyword_1_0_1_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'attribute'?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'morph' (ambiguity) deductionRule=SMorphFeatureRule
	 */
	protected void emit_SAttributeDeduction_AttributeKeyword_1_1_1_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'attribute'?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'ditch' (ambiguity) deductionRule=SDitchFeatureRule
	 */
	protected void emit_SAttributeDeduction_AttributeKeyword_1_2_1_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '*'?
	 *
	 * This ambiguous syntax occurs at:
	 *     deductionRule=SGrabFeatureRule '(' (ambiguity) ')' (rule end)
	 *     deductionRule=SGrabFeatureRule '(' (ambiguity) ')' description=DRichText
	 *     deductionRule=SMorphFeatureRule '(' (ambiguity) ')' (rule end)
	 *     deductionRule=SMorphFeatureRule '(' (ambiguity) ')' description=DRichText
	 */
	protected void emit_SQueryDeduction_AsteriskKeyword_1_0_2_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
