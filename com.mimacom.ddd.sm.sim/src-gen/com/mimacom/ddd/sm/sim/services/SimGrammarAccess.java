/*
 * generated by Xtext 2.19.0
 */
package com.mimacom.ddd.sm.sim.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import com.mimacom.ddd.dm.dim.services.DimGrammarAccess;
import com.mimacom.ddd.dm.dmx.services.DmxGrammarAccess;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class SimGrammarAccess extends AbstractGrammarElementFinder {
	
	public class DNamespaceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.sm.sim.Sim.DNamespace");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSystemKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameDQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cImportsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cImportsDImportParserRuleCall_2_0 = (RuleCall)cImportsAssignment_2.eContents().get(0);
		private final Assignment cModelAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cModelSystemInformationModelParserRuleCall_3_0 = (RuleCall)cModelAssignment_3.eContents().get(0);
		
		//@Override
		//DNamespace:
		//	'system'
		//	name=DQualifiedName
		//	imports+=DImport*
		//	model=SystemInformationModel;
		@Override public ParserRule getRule() { return rule; }
		
		//'system' name=DQualifiedName imports+=DImport* model=SystemInformationModel
		public Group getGroup() { return cGroup; }
		
		//'system'
		public Keyword getSystemKeyword_0() { return cSystemKeyword_0; }
		
		//name=DQualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//DQualifiedName
		public RuleCall getNameDQualifiedNameParserRuleCall_1_0() { return cNameDQualifiedNameParserRuleCall_1_0; }
		
		//imports+=DImport*
		public Assignment getImportsAssignment_2() { return cImportsAssignment_2; }
		
		//DImport
		public RuleCall getImportsDImportParserRuleCall_2_0() { return cImportsDImportParserRuleCall_2_0; }
		
		//model=SystemInformationModel
		public Assignment getModelAssignment_3() { return cModelAssignment_3; }
		
		//SystemInformationModel
		public RuleCall getModelSystemInformationModelParserRuleCall_3_0() { return cModelSystemInformationModelParserRuleCall_3_0; }
	}
	public class SystemInformationModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.sm.sim.Sim.SystemInformationModel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cAlternatives_0.eContents().get(0);
		private final Assignment cKindAssignment_0_0_0 = (Assignment)cGroup_0_0.eContents().get(0);
		private final RuleCall cKindSTypeModelKindEnumRuleCall_0_0_0_0 = (RuleCall)cKindAssignment_0_0_0.eContents().get(0);
		private final Keyword cTypeKeyword_0_0_1 = (Keyword)cGroup_0_0.eContents().get(1);
		private final Keyword cModelKeyword_0_0_2 = (Keyword)cGroup_0_0.eContents().get(2);
		private final Group cGroup_0_1 = (Group)cAlternatives_0.eContents().get(1);
		private final Assignment cKindAssignment_0_1_0 = (Assignment)cGroup_0_1.eContents().get(0);
		private final RuleCall cKindSystemInformationModelKindEnumRuleCall_0_1_0_0 = (RuleCall)cKindAssignment_0_1_0.eContents().get(0);
		private final Keyword cInformationKeyword_0_1_1 = (Keyword)cGroup_0_1.eContents().get(1);
		private final Keyword cModelKeyword_0_1_2 = (Keyword)cGroup_0_1.eContents().get(2);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cGenerateAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cGenerateGenerateKeyword_2_0 = (Keyword)cGenerateAssignment_2.eContents().get(0);
		private final Assignment cDescriptionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDescriptionDRichTextParserRuleCall_3_0 = (RuleCall)cDescriptionAssignment_3.eContents().get(0);
		private final Assignment cNotesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cNotesDNoteParserRuleCall_4_0 = (RuleCall)cNotesAssignment_4.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Alternatives cAlternatives_6 = (Alternatives)cGroup.eContents().get(6);
		private final Assignment cTypesAssignment_6_0 = (Assignment)cAlternatives_6.eContents().get(0);
		private final RuleCall cTypesSimTypeParserRuleCall_6_0_0 = (RuleCall)cTypesAssignment_6_0.eContents().get(0);
		private final Assignment cAggregatesAssignment_6_1 = (Assignment)cAlternatives_6.eContents().get(1);
		private final RuleCall cAggregatesSimAggregateParserRuleCall_6_1_0 = (RuleCall)cAggregatesAssignment_6_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//SystemInformationModel:
		//	(kind=STypeModelKind 'type' 'model'
		//	| kind=SystemInformationModelKind 'information' 'model') name=ID
		//	^generate?='generate'?
		//	description=DRichText?
		//	notes+=DNote*
		//	'{' (types+=SimType | aggregates+=SimAggregate)*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//(kind=STypeModelKind 'type' 'model' | kind=SystemInformationModelKind 'information' 'model') name=ID
		//^generate?='generate'? description=DRichText? notes+=DNote* '{' (types+=SimType | aggregates+=SimAggregate)* '}'
		public Group getGroup() { return cGroup; }
		
		//(kind=STypeModelKind 'type' 'model' | kind=SystemInformationModelKind 'information' 'model')
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//kind=STypeModelKind 'type' 'model'
		public Group getGroup_0_0() { return cGroup_0_0; }
		
		//kind=STypeModelKind
		public Assignment getKindAssignment_0_0_0() { return cKindAssignment_0_0_0; }
		
		//STypeModelKind
		public RuleCall getKindSTypeModelKindEnumRuleCall_0_0_0_0() { return cKindSTypeModelKindEnumRuleCall_0_0_0_0; }
		
		//'type'
		public Keyword getTypeKeyword_0_0_1() { return cTypeKeyword_0_0_1; }
		
		//'model'
		public Keyword getModelKeyword_0_0_2() { return cModelKeyword_0_0_2; }
		
		//kind=SystemInformationModelKind 'information' 'model'
		public Group getGroup_0_1() { return cGroup_0_1; }
		
		//kind=SystemInformationModelKind
		public Assignment getKindAssignment_0_1_0() { return cKindAssignment_0_1_0; }
		
		//SystemInformationModelKind
		public RuleCall getKindSystemInformationModelKindEnumRuleCall_0_1_0_0() { return cKindSystemInformationModelKindEnumRuleCall_0_1_0_0; }
		
		//'information'
		public Keyword getInformationKeyword_0_1_1() { return cInformationKeyword_0_1_1; }
		
		//'model'
		public Keyword getModelKeyword_0_1_2() { return cModelKeyword_0_1_2; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//^generate?='generate'?
		public Assignment getGenerateAssignment_2() { return cGenerateAssignment_2; }
		
		//'generate'
		public Keyword getGenerateGenerateKeyword_2_0() { return cGenerateGenerateKeyword_2_0; }
		
		//description=DRichText?
		public Assignment getDescriptionAssignment_3() { return cDescriptionAssignment_3; }
		
		//DRichText
		public RuleCall getDescriptionDRichTextParserRuleCall_3_0() { return cDescriptionDRichTextParserRuleCall_3_0; }
		
		//notes+=DNote*
		public Assignment getNotesAssignment_4() { return cNotesAssignment_4; }
		
		//DNote
		public RuleCall getNotesDNoteParserRuleCall_4_0() { return cNotesDNoteParserRuleCall_4_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }
		
		//(types+=SimType | aggregates+=SimAggregate)*
		public Alternatives getAlternatives_6() { return cAlternatives_6; }
		
		//types+=SimType
		public Assignment getTypesAssignment_6_0() { return cTypesAssignment_6_0; }
		
		//SimType
		public RuleCall getTypesSimTypeParserRuleCall_6_0_0() { return cTypesSimTypeParserRuleCall_6_0_0; }
		
		//aggregates+=SimAggregate
		public Assignment getAggregatesAssignment_6_1() { return cAggregatesAssignment_6_1; }
		
		//SimAggregate
		public RuleCall getAggregatesSimAggregateParserRuleCall_6_1_0() { return cAggregatesSimAggregateParserRuleCall_6_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	public class SimGrabAggregateRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.sm.sim.Sim.SimGrabAggregateRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSourceAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cSourceDimAggregateCrossReference_0_0 = (CrossReference)cSourceAssignment_0.eContents().get(0);
		private final RuleCall cSourceDimAggregateDQualifiedNameParserRuleCall_0_0_1 = (RuleCall)cSourceDimAggregateCrossReference_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cAsKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cRenameToAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRenameToIDTerminalRuleCall_1_1_0 = (RuleCall)cRenameToAssignment_1_1.eContents().get(0);
		
		///*
		// * RULEs
		// */ SimGrabAggregateRule TGrabAggregateRule:
		//	source=[DimAggregate|DQualifiedName] ('as' renameTo=ID)?;
		@Override public ParserRule getRule() { return rule; }
		
		//source=[DimAggregate|DQualifiedName] ('as' renameTo=ID)?
		public Group getGroup() { return cGroup; }
		
		//source=[DimAggregate|DQualifiedName]
		public Assignment getSourceAssignment_0() { return cSourceAssignment_0; }
		
		//[DimAggregate|DQualifiedName]
		public CrossReference getSourceDimAggregateCrossReference_0_0() { return cSourceDimAggregateCrossReference_0_0; }
		
		//DQualifiedName
		public RuleCall getSourceDimAggregateDQualifiedNameParserRuleCall_0_0_1() { return cSourceDimAggregateDQualifiedNameParserRuleCall_0_0_1; }
		
		//('as' renameTo=ID)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'as'
		public Keyword getAsKeyword_1_0() { return cAsKeyword_1_0; }
		
		//renameTo=ID
		public Assignment getRenameToAssignment_1_1() { return cRenameToAssignment_1_1; }
		
		//ID
		public RuleCall getRenameToIDTerminalRuleCall_1_1_0() { return cRenameToIDTerminalRuleCall_1_1_0; }
	}
	public class SimGrabPrimitiveRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.sm.sim.Sim.SimGrabPrimitiveRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSourceAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cSourceDimPrimitiveCrossReference_0_0 = (CrossReference)cSourceAssignment_0.eContents().get(0);
		private final RuleCall cSourceDimPrimitiveDQualifiedNameParserRuleCall_0_0_1 = (RuleCall)cSourceDimPrimitiveCrossReference_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cAsKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cRenameToAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRenameToIDTerminalRuleCall_1_1_0 = (RuleCall)cRenameToAssignment_1_1.eContents().get(0);
		
		//SimGrabPrimitiveRule TGrabRule:
		//	source=[DimPrimitive|DQualifiedName] ('as' renameTo=ID)?;
		@Override public ParserRule getRule() { return rule; }
		
		//source=[DimPrimitive|DQualifiedName] ('as' renameTo=ID)?
		public Group getGroup() { return cGroup; }
		
		//source=[DimPrimitive|DQualifiedName]
		public Assignment getSourceAssignment_0() { return cSourceAssignment_0; }
		
		//[DimPrimitive|DQualifiedName]
		public CrossReference getSourceDimPrimitiveCrossReference_0_0() { return cSourceDimPrimitiveCrossReference_0_0; }
		
		//DQualifiedName
		public RuleCall getSourceDimPrimitiveDQualifiedNameParserRuleCall_0_0_1() { return cSourceDimPrimitiveDQualifiedNameParserRuleCall_0_0_1; }
		
		//('as' renameTo=ID)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'as'
		public Keyword getAsKeyword_1_0() { return cAsKeyword_1_0; }
		
		//renameTo=ID
		public Assignment getRenameToAssignment_1_1() { return cRenameToAssignment_1_1; }
		
		//ID
		public RuleCall getRenameToIDTerminalRuleCall_1_1_0() { return cRenameToIDTerminalRuleCall_1_1_0; }
	}
	public class SimDitchPrimitiveRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.sm.sim.Sim.SimDitchPrimitiveRule");
		private final Assignment cSourceAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cSourceDimPrimitiveCrossReference_0 = (CrossReference)cSourceAssignment.eContents().get(0);
		private final RuleCall cSourceDimPrimitiveDQualifiedNameParserRuleCall_0_1 = (RuleCall)cSourceDimPrimitiveCrossReference_0.eContents().get(1);
		
		//SimDitchPrimitiveRule TDitchRule:
		//	source=[DimPrimitive|DQualifiedName];
		@Override public ParserRule getRule() { return rule; }
		
		//source=[DimPrimitive|DQualifiedName]
		public Assignment getSourceAssignment() { return cSourceAssignment; }
		
		//[DimPrimitive|DQualifiedName]
		public CrossReference getSourceDimPrimitiveCrossReference_0() { return cSourceDimPrimitiveCrossReference_0; }
		
		//DQualifiedName
		public RuleCall getSourceDimPrimitiveDQualifiedNameParserRuleCall_0_1() { return cSourceDimPrimitiveDQualifiedNameParserRuleCall_0_1; }
	}
	public class SimGrabEnumerationRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.sm.sim.Sim.SimGrabEnumerationRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSourceAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cSourceDimEnumerationCrossReference_0_0 = (CrossReference)cSourceAssignment_0.eContents().get(0);
		private final RuleCall cSourceDimEnumerationDQualifiedNameParserRuleCall_0_0_1 = (RuleCall)cSourceDimEnumerationCrossReference_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cAsKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cRenameToAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRenameToIDTerminalRuleCall_1_1_0 = (RuleCall)cRenameToAssignment_1_1.eContents().get(0);
		
		//SimGrabEnumerationRule TGrabRule:
		//	source=[DimEnumeration|DQualifiedName] ('as' renameTo=ID)?;
		@Override public ParserRule getRule() { return rule; }
		
		//source=[DimEnumeration|DQualifiedName] ('as' renameTo=ID)?
		public Group getGroup() { return cGroup; }
		
		//source=[DimEnumeration|DQualifiedName]
		public Assignment getSourceAssignment_0() { return cSourceAssignment_0; }
		
		//[DimEnumeration|DQualifiedName]
		public CrossReference getSourceDimEnumerationCrossReference_0_0() { return cSourceDimEnumerationCrossReference_0_0; }
		
		//DQualifiedName
		public RuleCall getSourceDimEnumerationDQualifiedNameParserRuleCall_0_0_1() { return cSourceDimEnumerationDQualifiedNameParserRuleCall_0_0_1; }
		
		//('as' renameTo=ID)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'as'
		public Keyword getAsKeyword_1_0() { return cAsKeyword_1_0; }
		
		//renameTo=ID
		public Assignment getRenameToAssignment_1_1() { return cRenameToAssignment_1_1; }
		
		//ID
		public RuleCall getRenameToIDTerminalRuleCall_1_1_0() { return cRenameToIDTerminalRuleCall_1_1_0; }
	}
	public class SimDitchEnumerationRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.sm.sim.Sim.SimDitchEnumerationRule");
		private final Assignment cSourceAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cSourceDimEnumerationCrossReference_0 = (CrossReference)cSourceAssignment.eContents().get(0);
		private final RuleCall cSourceDimEnumerationDQualifiedNameParserRuleCall_0_1 = (RuleCall)cSourceDimEnumerationCrossReference_0.eContents().get(1);
		
		//SimDitchEnumerationRule TDitchRule:
		//	source=[DimEnumeration|DQualifiedName];
		@Override public ParserRule getRule() { return rule; }
		
		//source=[DimEnumeration|DQualifiedName]
		public Assignment getSourceAssignment() { return cSourceAssignment; }
		
		//[DimEnumeration|DQualifiedName]
		public CrossReference getSourceDimEnumerationCrossReference_0() { return cSourceDimEnumerationCrossReference_0; }
		
		//DQualifiedName
		public RuleCall getSourceDimEnumerationDQualifiedNameParserRuleCall_0_1() { return cSourceDimEnumerationDQualifiedNameParserRuleCall_0_1; }
	}
	public class SimGrabEnumerationLiteralRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.sm.sim.Sim.SimGrabEnumerationLiteralRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSourceAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cSourceDimLiteralCrossReference_0_0 = (CrossReference)cSourceAssignment_0.eContents().get(0);
		private final RuleCall cSourceDimLiteralIDTerminalRuleCall_0_0_1 = (RuleCall)cSourceDimLiteralCrossReference_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cAsKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cRenameToAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRenameToIDTerminalRuleCall_1_1_0 = (RuleCall)cRenameToAssignment_1_1.eContents().get(0);
		
		//SimGrabEnumerationLiteralRule TGrabRule:
		//	source=[DimLiteral] ('as' renameTo=ID)?;
		@Override public ParserRule getRule() { return rule; }
		
		//source=[DimLiteral] ('as' renameTo=ID)?
		public Group getGroup() { return cGroup; }
		
		//source=[DimLiteral]
		public Assignment getSourceAssignment_0() { return cSourceAssignment_0; }
		
		//[DimLiteral]
		public CrossReference getSourceDimLiteralCrossReference_0_0() { return cSourceDimLiteralCrossReference_0_0; }
		
		//ID
		public RuleCall getSourceDimLiteralIDTerminalRuleCall_0_0_1() { return cSourceDimLiteralIDTerminalRuleCall_0_0_1; }
		
		//('as' renameTo=ID)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'as'
		public Keyword getAsKeyword_1_0() { return cAsKeyword_1_0; }
		
		//renameTo=ID
		public Assignment getRenameToAssignment_1_1() { return cRenameToAssignment_1_1; }
		
		//ID
		public RuleCall getRenameToIDTerminalRuleCall_1_1_0() { return cRenameToIDTerminalRuleCall_1_1_0; }
	}
	public class SimDitchEnumerationLiteralRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.sm.sim.Sim.SimDitchEnumerationLiteralRule");
		private final Assignment cSourceAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cSourceDimLiteralCrossReference_0 = (CrossReference)cSourceAssignment.eContents().get(0);
		private final RuleCall cSourceDimLiteralIDTerminalRuleCall_0_1 = (RuleCall)cSourceDimLiteralCrossReference_0.eContents().get(1);
		
		//SimDitchEnumerationLiteralRule TDitchRule:
		//	source=[DimLiteral];
		@Override public ParserRule getRule() { return rule; }
		
		//source=[DimLiteral]
		public Assignment getSourceAssignment() { return cSourceAssignment; }
		
		//[DimLiteral]
		public CrossReference getSourceDimLiteralCrossReference_0() { return cSourceDimLiteralCrossReference_0; }
		
		//ID
		public RuleCall getSourceDimLiteralIDTerminalRuleCall_0_1() { return cSourceDimLiteralIDTerminalRuleCall_0_1; }
	}
	public class SimGrabComplexTypeRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.sm.sim.Sim.SimGrabComplexTypeRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSourceAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cSourceDimComplexTypeCrossReference_0_0 = (CrossReference)cSourceAssignment_0.eContents().get(0);
		private final RuleCall cSourceDimComplexTypeDQualifiedNameParserRuleCall_0_0_1 = (RuleCall)cSourceDimComplexTypeCrossReference_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cAsKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cRenameToAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRenameToIDTerminalRuleCall_1_1_0 = (RuleCall)cRenameToAssignment_1_1.eContents().get(0);
		
		//SimGrabComplexTypeRule TGrabRule:
		//	source=[DimComplexType|DQualifiedName] ('as' renameTo=ID)?;
		@Override public ParserRule getRule() { return rule; }
		
		//source=[DimComplexType|DQualifiedName] ('as' renameTo=ID)?
		public Group getGroup() { return cGroup; }
		
		//source=[DimComplexType|DQualifiedName]
		public Assignment getSourceAssignment_0() { return cSourceAssignment_0; }
		
		//[DimComplexType|DQualifiedName]
		public CrossReference getSourceDimComplexTypeCrossReference_0_0() { return cSourceDimComplexTypeCrossReference_0_0; }
		
		//DQualifiedName
		public RuleCall getSourceDimComplexTypeDQualifiedNameParserRuleCall_0_0_1() { return cSourceDimComplexTypeDQualifiedNameParserRuleCall_0_0_1; }
		
		//('as' renameTo=ID)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'as'
		public Keyword getAsKeyword_1_0() { return cAsKeyword_1_0; }
		
		//renameTo=ID
		public Assignment getRenameToAssignment_1_1() { return cRenameToAssignment_1_1; }
		
		//ID
		public RuleCall getRenameToIDTerminalRuleCall_1_1_0() { return cRenameToIDTerminalRuleCall_1_1_0; }
	}
	public class SimDitchComplexTypeRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.sm.sim.Sim.SimDitchComplexTypeRule");
		private final Assignment cSourceAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cSourceDimComplexTypeCrossReference_0 = (CrossReference)cSourceAssignment.eContents().get(0);
		private final RuleCall cSourceDimComplexTypeDQualifiedNameParserRuleCall_0_1 = (RuleCall)cSourceDimComplexTypeCrossReference_0.eContents().get(1);
		
		//SimDitchComplexTypeRule TDitchRule:
		//	source=[DimComplexType|DQualifiedName];
		@Override public ParserRule getRule() { return rule; }
		
		//source=[DimComplexType|DQualifiedName]
		public Assignment getSourceAssignment() { return cSourceAssignment; }
		
		//[DimComplexType|DQualifiedName]
		public CrossReference getSourceDimComplexTypeCrossReference_0() { return cSourceDimComplexTypeCrossReference_0; }
		
		//DQualifiedName
		public RuleCall getSourceDimComplexTypeDQualifiedNameParserRuleCall_0_1() { return cSourceDimComplexTypeDQualifiedNameParserRuleCall_0_1; }
	}
	public class SimMorphComplexTypeRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.sm.sim.Sim.SimMorphComplexTypeRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSourceAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cSourceDimComplexTypeCrossReference_0_0 = (CrossReference)cSourceAssignment_0.eContents().get(0);
		private final RuleCall cSourceDimComplexTypeDQualifiedNameParserRuleCall_0_0_1 = (RuleCall)cSourceDimComplexTypeCrossReference_0_0.eContents().get(1);
		private final RuleCall cChangeComplexTypeParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//SimMorphComplexTypeRule TMorphRule:
		//	source=[DimComplexType|DQualifiedName] ChangeComplexType;
		@Override public ParserRule getRule() { return rule; }
		
		//source=[DimComplexType|DQualifiedName] ChangeComplexType
		public Group getGroup() { return cGroup; }
		
		//source=[DimComplexType|DQualifiedName]
		public Assignment getSourceAssignment_0() { return cSourceAssignment_0; }
		
		//[DimComplexType|DQualifiedName]
		public CrossReference getSourceDimComplexTypeCrossReference_0_0() { return cSourceDimComplexTypeCrossReference_0_0; }
		
		//DQualifiedName
		public RuleCall getSourceDimComplexTypeDQualifiedNameParserRuleCall_0_0_1() { return cSourceDimComplexTypeDQualifiedNameParserRuleCall_0_0_1; }
		
		//ChangeComplexType
		public RuleCall getChangeComplexTypeParserRuleCall_1() { return cChangeComplexTypeParserRuleCall_1; }
	}
	public class SimFuseComplexTypeRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.sm.sim.Sim.SimFuseComplexTypeRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSourceAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cSourceDimComplexTypeCrossReference_0_0 = (CrossReference)cSourceAssignment_0.eContents().get(0);
		private final RuleCall cSourceDimComplexTypeDQualifiedNameParserRuleCall_0_0_1 = (RuleCall)cSourceDimComplexTypeCrossReference_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cAndKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cOtherSourcesAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final CrossReference cOtherSourcesDComplexTypeCrossReference_1_1_0 = (CrossReference)cOtherSourcesAssignment_1_1.eContents().get(0);
		private final RuleCall cOtherSourcesDComplexTypeDQualifiedNameParserRuleCall_1_1_0_1 = (RuleCall)cOtherSourcesDComplexTypeCrossReference_1_1_0.eContents().get(1);
		private final RuleCall cChangeComplexTypeParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//SimFuseComplexTypeRule TFuseRule:
		//	source=[DimComplexType|DQualifiedName] ('and' otherSources+=[DComplexType|DQualifiedName])+
		//	ChangeComplexType;
		@Override public ParserRule getRule() { return rule; }
		
		//source=[DimComplexType|DQualifiedName] ('and' otherSources+=[DComplexType|DQualifiedName])+ ChangeComplexType
		public Group getGroup() { return cGroup; }
		
		//source=[DimComplexType|DQualifiedName]
		public Assignment getSourceAssignment_0() { return cSourceAssignment_0; }
		
		//[DimComplexType|DQualifiedName]
		public CrossReference getSourceDimComplexTypeCrossReference_0_0() { return cSourceDimComplexTypeCrossReference_0_0; }
		
		//DQualifiedName
		public RuleCall getSourceDimComplexTypeDQualifiedNameParserRuleCall_0_0_1() { return cSourceDimComplexTypeDQualifiedNameParserRuleCall_0_0_1; }
		
		//('and' otherSources+=[DComplexType|DQualifiedName])+
		public Group getGroup_1() { return cGroup_1; }
		
		//'and'
		public Keyword getAndKeyword_1_0() { return cAndKeyword_1_0; }
		
		//otherSources+=[DComplexType|DQualifiedName]
		public Assignment getOtherSourcesAssignment_1_1() { return cOtherSourcesAssignment_1_1; }
		
		//[DComplexType|DQualifiedName]
		public CrossReference getOtherSourcesDComplexTypeCrossReference_1_1_0() { return cOtherSourcesDComplexTypeCrossReference_1_1_0; }
		
		//DQualifiedName
		public RuleCall getOtherSourcesDComplexTypeDQualifiedNameParserRuleCall_1_1_0_1() { return cOtherSourcesDComplexTypeDQualifiedNameParserRuleCall_1_1_0_1; }
		
		//ChangeComplexType
		public RuleCall getChangeComplexTypeParserRuleCall_2() { return cChangeComplexTypeParserRuleCall_2; }
	}
	public class ChangeComplexTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.sm.sim.Sim.ChangeComplexType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cToKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cAbstractAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAbstractSimAbstractTypeEnumRuleCall_1_0 = (RuleCall)cAbstractAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cDetailAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cDetailSimDetailTypeEnumRuleCall_2_0_0 = (RuleCall)cDetailAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Assignment cRootEntityAssignment_2_1_0 = (Assignment)cGroup_2_1.eContents().get(0);
		private final RuleCall cRootEntitySimRootEntityEnumRuleCall_2_1_0_0 = (RuleCall)cRootEntityAssignment_2_1_0.eContents().get(0);
		private final Assignment cDetailAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cDetailSimEntityTypeEnumRuleCall_2_1_1_0 = (RuleCall)cDetailAssignment_2_1_1.eContents().get(0);
		private final Assignment cRenameToAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRenameToIDTerminalRuleCall_3_0 = (RuleCall)cRenameToAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cExtendsKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cExtendFromAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final CrossReference cExtendFromDComplexTypeCrossReference_4_1_0 = (CrossReference)cExtendFromAssignment_4_1.eContents().get(0);
		private final RuleCall cExtendFromDComplexTypeIDTerminalRuleCall_4_1_0_1 = (RuleCall)cExtendFromDComplexTypeCrossReference_4_1_0.eContents().get(1);
		
		//fragment ChangeComplexType returns TStructureChangingRule:
		//	'to'
		//	abstract=SimAbstractType? (detail=SimDetailType
		//	| rootEntity=SimRootEntity? detail=SimEntityType) renameTo=ID? ('extends' extendFrom=[DComplexType])?;
		@Override public ParserRule getRule() { return rule; }
		
		//'to' abstract=SimAbstractType? (detail=SimDetailType | rootEntity=SimRootEntity? detail=SimEntityType) renameTo=ID?
		//('extends' extendFrom=[DComplexType])?
		public Group getGroup() { return cGroup; }
		
		//'to'
		public Keyword getToKeyword_0() { return cToKeyword_0; }
		
		//abstract=SimAbstractType?
		public Assignment getAbstractAssignment_1() { return cAbstractAssignment_1; }
		
		//SimAbstractType
		public RuleCall getAbstractSimAbstractTypeEnumRuleCall_1_0() { return cAbstractSimAbstractTypeEnumRuleCall_1_0; }
		
		//(detail=SimDetailType | rootEntity=SimRootEntity? detail=SimEntityType)
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//detail=SimDetailType
		public Assignment getDetailAssignment_2_0() { return cDetailAssignment_2_0; }
		
		//SimDetailType
		public RuleCall getDetailSimDetailTypeEnumRuleCall_2_0_0() { return cDetailSimDetailTypeEnumRuleCall_2_0_0; }
		
		//rootEntity=SimRootEntity? detail=SimEntityType
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//rootEntity=SimRootEntity?
		public Assignment getRootEntityAssignment_2_1_0() { return cRootEntityAssignment_2_1_0; }
		
		//SimRootEntity
		public RuleCall getRootEntitySimRootEntityEnumRuleCall_2_1_0_0() { return cRootEntitySimRootEntityEnumRuleCall_2_1_0_0; }
		
		//detail=SimEntityType
		public Assignment getDetailAssignment_2_1_1() { return cDetailAssignment_2_1_1; }
		
		//SimEntityType
		public RuleCall getDetailSimEntityTypeEnumRuleCall_2_1_1_0() { return cDetailSimEntityTypeEnumRuleCall_2_1_1_0; }
		
		//renameTo=ID?
		public Assignment getRenameToAssignment_3() { return cRenameToAssignment_3; }
		
		//ID
		public RuleCall getRenameToIDTerminalRuleCall_3_0() { return cRenameToIDTerminalRuleCall_3_0; }
		
		//('extends' extendFrom=[DComplexType])?
		public Group getGroup_4() { return cGroup_4; }
		
		//'extends'
		public Keyword getExtendsKeyword_4_0() { return cExtendsKeyword_4_0; }
		
		//extendFrom=[DComplexType]
		public Assignment getExtendFromAssignment_4_1() { return cExtendFromAssignment_4_1; }
		
		//[DComplexType]
		public CrossReference getExtendFromDComplexTypeCrossReference_4_1_0() { return cExtendFromDComplexTypeCrossReference_4_1_0; }
		
		//ID
		public RuleCall getExtendFromDComplexTypeIDTerminalRuleCall_4_1_0_1() { return cExtendFromDComplexTypeIDTerminalRuleCall_4_1_0_1; }
	}
	public class SimGrabFeatureRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.sm.sim.Sim.SimGrabFeatureRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSourceAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cSourceDimFeatureCrossReference_0_0 = (CrossReference)cSourceAssignment_0.eContents().get(0);
		private final RuleCall cSourceDimFeatureIDTerminalRuleCall_0_0_1 = (RuleCall)cSourceDimFeatureCrossReference_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cAsKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cRenameToAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRenameToIDTerminalRuleCall_1_1_0 = (RuleCall)cRenameToAssignment_1_1.eContents().get(0);
		
		//SimGrabFeatureRule TGrabRule:
		//	source=[DimFeature] ('as' renameTo=ID)?;
		@Override public ParserRule getRule() { return rule; }
		
		//source=[DimFeature] ('as' renameTo=ID)?
		public Group getGroup() { return cGroup; }
		
		//source=[DimFeature]
		public Assignment getSourceAssignment_0() { return cSourceAssignment_0; }
		
		//[DimFeature]
		public CrossReference getSourceDimFeatureCrossReference_0_0() { return cSourceDimFeatureCrossReference_0_0; }
		
		//ID
		public RuleCall getSourceDimFeatureIDTerminalRuleCall_0_0_1() { return cSourceDimFeatureIDTerminalRuleCall_0_0_1; }
		
		//('as' renameTo=ID)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'as'
		public Keyword getAsKeyword_1_0() { return cAsKeyword_1_0; }
		
		//renameTo=ID
		public Assignment getRenameToAssignment_1_1() { return cRenameToAssignment_1_1; }
		
		//ID
		public RuleCall getRenameToIDTerminalRuleCall_1_1_0() { return cRenameToIDTerminalRuleCall_1_1_0; }
	}
	public class SimMorphFeatureRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.sm.sim.Sim.SimMorphFeatureRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSourceAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cSourceDimFeatureCrossReference_0_0 = (CrossReference)cSourceAssignment_0.eContents().get(0);
		private final RuleCall cSourceDimFeatureIDTerminalRuleCall_0_0_1 = (RuleCall)cSourceDimFeatureCrossReference_0_0.eContents().get(1);
		private final Keyword cToKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cRenameToAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cRenameToIDTerminalRuleCall_2_0_0 = (RuleCall)cRenameToAssignment_2_0.eContents().get(0);
		private final Keyword cColonKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cRetypeToAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cRetypeToDTypeCrossReference_3_0 = (CrossReference)cRetypeToAssignment_3.eContents().get(0);
		private final RuleCall cRetypeToDTypeIDTerminalRuleCall_3_0_1 = (RuleCall)cRetypeToDTypeCrossReference_3_0.eContents().get(1);
		private final Assignment cRemultiplyToAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cRemultiplyToDMultiplicityParserRuleCall_4_0 = (RuleCall)cRemultiplyToAssignment_4.eContents().get(0);
		
		//SimMorphFeatureRule TMorphRule:
		//	source=[DimFeature]
		//	'to' (renameTo=ID ':')?
		//	retypeTo=[DType] remultiplyTo=DMultiplicity?;
		@Override public ParserRule getRule() { return rule; }
		
		//source=[DimFeature] 'to' (renameTo=ID ':')? retypeTo=[DType] remultiplyTo=DMultiplicity?
		public Group getGroup() { return cGroup; }
		
		//source=[DimFeature]
		public Assignment getSourceAssignment_0() { return cSourceAssignment_0; }
		
		//[DimFeature]
		public CrossReference getSourceDimFeatureCrossReference_0_0() { return cSourceDimFeatureCrossReference_0_0; }
		
		//ID
		public RuleCall getSourceDimFeatureIDTerminalRuleCall_0_0_1() { return cSourceDimFeatureIDTerminalRuleCall_0_0_1; }
		
		//'to'
		public Keyword getToKeyword_1() { return cToKeyword_1; }
		
		//(renameTo=ID ':')?
		public Group getGroup_2() { return cGroup_2; }
		
		//renameTo=ID
		public Assignment getRenameToAssignment_2_0() { return cRenameToAssignment_2_0; }
		
		//ID
		public RuleCall getRenameToIDTerminalRuleCall_2_0_0() { return cRenameToIDTerminalRuleCall_2_0_0; }
		
		//':'
		public Keyword getColonKeyword_2_1() { return cColonKeyword_2_1; }
		
		//retypeTo=[DType]
		public Assignment getRetypeToAssignment_3() { return cRetypeToAssignment_3; }
		
		//[DType]
		public CrossReference getRetypeToDTypeCrossReference_3_0() { return cRetypeToDTypeCrossReference_3_0; }
		
		//ID
		public RuleCall getRetypeToDTypeIDTerminalRuleCall_3_0_1() { return cRetypeToDTypeIDTerminalRuleCall_3_0_1; }
		
		//remultiplyTo=DMultiplicity?
		public Assignment getRemultiplyToAssignment_4() { return cRemultiplyToAssignment_4; }
		
		//DMultiplicity
		public RuleCall getRemultiplyToDMultiplicityParserRuleCall_4_0() { return cRemultiplyToDMultiplicityParserRuleCall_4_0; }
	}
	public class SimDitchFeatureRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.sm.sim.Sim.SimDitchFeatureRule");
		private final Assignment cSourceAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cSourceDimFeatureCrossReference_0 = (CrossReference)cSourceAssignment.eContents().get(0);
		private final RuleCall cSourceDimFeatureIDTerminalRuleCall_0_1 = (RuleCall)cSourceDimFeatureCrossReference_0.eContents().get(1);
		
		//SimDitchFeatureRule TDitchRule:
		//	source=[DimFeature];
		@Override public ParserRule getRule() { return rule; }
		
		//source=[DimFeature]
		public Assignment getSourceAssignment() { return cSourceAssignment; }
		
		//[DimFeature]
		public CrossReference getSourceDimFeatureCrossReference_0() { return cSourceDimFeatureCrossReference_0; }
		
		//ID
		public RuleCall getSourceDimFeatureIDTerminalRuleCall_0_1() { return cSourceDimFeatureIDTerminalRuleCall_0_1; }
	}
	public class SimGrabQueryParameterRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.sm.sim.Sim.SimGrabQueryParameterRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSourceAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cSourceDimQueryParameterCrossReference_0_0 = (CrossReference)cSourceAssignment_0.eContents().get(0);
		private final RuleCall cSourceDimQueryParameterIDTerminalRuleCall_0_0_1 = (RuleCall)cSourceDimQueryParameterCrossReference_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cAsKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cRenameToAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRenameToIDTerminalRuleCall_1_1_0 = (RuleCall)cRenameToAssignment_1_1.eContents().get(0);
		
		//SimGrabQueryParameterRule TGrabRule:
		//	source=[DimQueryParameter] ('as' renameTo=ID)?;
		@Override public ParserRule getRule() { return rule; }
		
		//source=[DimQueryParameter] ('as' renameTo=ID)?
		public Group getGroup() { return cGroup; }
		
		//source=[DimQueryParameter]
		public Assignment getSourceAssignment_0() { return cSourceAssignment_0; }
		
		//[DimQueryParameter]
		public CrossReference getSourceDimQueryParameterCrossReference_0_0() { return cSourceDimQueryParameterCrossReference_0_0; }
		
		//ID
		public RuleCall getSourceDimQueryParameterIDTerminalRuleCall_0_0_1() { return cSourceDimQueryParameterIDTerminalRuleCall_0_0_1; }
		
		//('as' renameTo=ID)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'as'
		public Keyword getAsKeyword_1_0() { return cAsKeyword_1_0; }
		
		//renameTo=ID
		public Assignment getRenameToAssignment_1_1() { return cRenameToAssignment_1_1; }
		
		//ID
		public RuleCall getRenameToIDTerminalRuleCall_1_1_0() { return cRenameToIDTerminalRuleCall_1_1_0; }
	}
	public class SimMorphQueryParameterRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.sm.sim.Sim.SimMorphQueryParameterRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSourceAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cSourceDimQueryParameterCrossReference_0_0 = (CrossReference)cSourceAssignment_0.eContents().get(0);
		private final RuleCall cSourceDimQueryParameterIDTerminalRuleCall_0_0_1 = (RuleCall)cSourceDimQueryParameterCrossReference_0_0.eContents().get(1);
		private final Keyword cToKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cRenameToAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cRenameToIDTerminalRuleCall_2_0_0 = (RuleCall)cRenameToAssignment_2_0.eContents().get(0);
		private final Keyword cColonKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cRetypeToAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cRetypeToDTypeCrossReference_3_0 = (CrossReference)cRetypeToAssignment_3.eContents().get(0);
		private final RuleCall cRetypeToDTypeIDTerminalRuleCall_3_0_1 = (RuleCall)cRetypeToDTypeCrossReference_3_0.eContents().get(1);
		private final Assignment cRemultiplyToAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cRemultiplyToDMultiplicityParserRuleCall_4_0 = (RuleCall)cRemultiplyToAssignment_4.eContents().get(0);
		
		//SimMorphQueryParameterRule TMorphRule:
		//	source=[DimQueryParameter]
		//	'to' (renameTo=ID ':')?
		//	retypeTo=[DType] remultiplyTo=DMultiplicity?;
		@Override public ParserRule getRule() { return rule; }
		
		//source=[DimQueryParameter] 'to' (renameTo=ID ':')? retypeTo=[DType] remultiplyTo=DMultiplicity?
		public Group getGroup() { return cGroup; }
		
		//source=[DimQueryParameter]
		public Assignment getSourceAssignment_0() { return cSourceAssignment_0; }
		
		//[DimQueryParameter]
		public CrossReference getSourceDimQueryParameterCrossReference_0_0() { return cSourceDimQueryParameterCrossReference_0_0; }
		
		//ID
		public RuleCall getSourceDimQueryParameterIDTerminalRuleCall_0_0_1() { return cSourceDimQueryParameterIDTerminalRuleCall_0_0_1; }
		
		//'to'
		public Keyword getToKeyword_1() { return cToKeyword_1; }
		
		//(renameTo=ID ':')?
		public Group getGroup_2() { return cGroup_2; }
		
		//renameTo=ID
		public Assignment getRenameToAssignment_2_0() { return cRenameToAssignment_2_0; }
		
		//ID
		public RuleCall getRenameToIDTerminalRuleCall_2_0_0() { return cRenameToIDTerminalRuleCall_2_0_0; }
		
		//':'
		public Keyword getColonKeyword_2_1() { return cColonKeyword_2_1; }
		
		//retypeTo=[DType]
		public Assignment getRetypeToAssignment_3() { return cRetypeToAssignment_3; }
		
		//[DType]
		public CrossReference getRetypeToDTypeCrossReference_3_0() { return cRetypeToDTypeCrossReference_3_0; }
		
		//ID
		public RuleCall getRetypeToDTypeIDTerminalRuleCall_3_0_1() { return cRetypeToDTypeIDTerminalRuleCall_3_0_1; }
		
		//remultiplyTo=DMultiplicity?
		public Assignment getRemultiplyToAssignment_4() { return cRemultiplyToAssignment_4; }
		
		//DMultiplicity
		public RuleCall getRemultiplyToDMultiplicityParserRuleCall_4_0() { return cRemultiplyToDMultiplicityParserRuleCall_4_0; }
	}
	public class SimDitchQueryParameterRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.sm.sim.Sim.SimDitchQueryParameterRule");
		private final Assignment cSourceAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cSourceDimQueryParameterCrossReference_0 = (CrossReference)cSourceAssignment.eContents().get(0);
		private final RuleCall cSourceDimQueryParameterIDTerminalRuleCall_0_1 = (RuleCall)cSourceDimQueryParameterCrossReference_0.eContents().get(1);
		
		//SimDitchQueryParameterRule TDitchRule:
		//	source=[DimQueryParameter];
		@Override public ParserRule getRule() { return rule; }
		
		//source=[DimQueryParameter]
		public Assignment getSourceAssignment() { return cSourceAssignment; }
		
		//[DimQueryParameter]
		public CrossReference getSourceDimQueryParameterCrossReference_0() { return cSourceDimQueryParameterCrossReference_0; }
		
		//ID
		public RuleCall getSourceDimQueryParameterIDTerminalRuleCall_0_1() { return cSourceDimQueryParameterIDTerminalRuleCall_0_1; }
	}
	public class SimAggregateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.sm.sim.Sim.SimAggregate");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSimAggregateTranspositionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDimAggregateParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		///*
		// * AGGREGATES
		// */ SimAggregate DAggregate:
		//	SimAggregateTransposition | DimAggregate;
		@Override public ParserRule getRule() { return rule; }
		
		//SimAggregateTransposition | DimAggregate
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//SimAggregateTransposition
		public RuleCall getSimAggregateTranspositionParserRuleCall_0() { return cSimAggregateTranspositionParserRuleCall_0; }
		
		//DimAggregate
		public RuleCall getDimAggregateParserRuleCall_1() { return cDimAggregateParserRuleCall_1; }
	}
	public class SimAggregateTranspositionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.sm.sim.Sim.SimAggregateTransposition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTAggregateTranspositionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cGrabKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cAggregateKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRuleAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRuleSimGrabAggregateRuleParserRuleCall_3_0 = (RuleCall)cRuleAssignment_3.eContents().get(0);
		private final Assignment cDescriptionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cDescriptionDRichTextParserRuleCall_4_0 = (RuleCall)cDescriptionAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cLeftCurlyBracketKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Alternatives cAlternatives_5_1 = (Alternatives)cGroup_5.eContents().get(1);
		private final Assignment cFeaturesAssignment_5_1_0 = (Assignment)cAlternatives_5_1.eContents().get(0);
		private final RuleCall cFeaturesSimQueryTranspositionParserRuleCall_5_1_0_0 = (RuleCall)cFeaturesAssignment_5_1_0.eContents().get(0);
		private final Group cGroup_5_1_1 = (Group)cAlternatives_5_1.eContents().get(1);
		private final Keyword cAddKeyword_5_1_1_0 = (Keyword)cGroup_5_1_1.eContents().get(0);
		private final Keyword cQueryKeyword_5_1_1_1 = (Keyword)cGroup_5_1_1.eContents().get(1);
		private final Assignment cFeaturesAssignment_5_1_1_2 = (Assignment)cGroup_5_1_1.eContents().get(2);
		private final RuleCall cFeaturesDimQueryParserRuleCall_5_1_1_2_0 = (RuleCall)cFeaturesAssignment_5_1_1_2.eContents().get(0);
		private final Assignment cTypesAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cTypesSimTypeParserRuleCall_5_2_0 = (RuleCall)cTypesAssignment_5_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5_3 = (Keyword)cGroup_5.eContents().get(3);
		
		//SimAggregateTransposition TAggregateTransposition:
		//	{TAggregateTransposition}
		//	'grab' 'aggregate' rule=SimGrabAggregateRule
		//	description=DRichText? ('{' (features+=SimQueryTransposition | 'add' 'query' features+=DimQuery)*
		//	types+=SimType*
		//	'}')?;
		@Override public ParserRule getRule() { return rule; }
		
		//{TAggregateTransposition} 'grab' 'aggregate' rule=SimGrabAggregateRule description=DRichText? ('{'
		//(features+=SimQueryTransposition | 'add' 'query' features+=DimQuery)* types+=SimType* '}')?
		public Group getGroup() { return cGroup; }
		
		//{TAggregateTransposition}
		public Action getTAggregateTranspositionAction_0() { return cTAggregateTranspositionAction_0; }
		
		//'grab'
		public Keyword getGrabKeyword_1() { return cGrabKeyword_1; }
		
		//'aggregate'
		public Keyword getAggregateKeyword_2() { return cAggregateKeyword_2; }
		
		//rule=SimGrabAggregateRule
		public Assignment getRuleAssignment_3() { return cRuleAssignment_3; }
		
		//SimGrabAggregateRule
		public RuleCall getRuleSimGrabAggregateRuleParserRuleCall_3_0() { return cRuleSimGrabAggregateRuleParserRuleCall_3_0; }
		
		//description=DRichText?
		public Assignment getDescriptionAssignment_4() { return cDescriptionAssignment_4; }
		
		//DRichText
		public RuleCall getDescriptionDRichTextParserRuleCall_4_0() { return cDescriptionDRichTextParserRuleCall_4_0; }
		
		//('{' (features+=SimQueryTransposition | 'add' 'query' features+=DimQuery)* types+=SimType* '}')?
		public Group getGroup_5() { return cGroup_5; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_5_0() { return cLeftCurlyBracketKeyword_5_0; }
		
		//(features+=SimQueryTransposition | 'add' 'query' features+=DimQuery)*
		public Alternatives getAlternatives_5_1() { return cAlternatives_5_1; }
		
		//features+=SimQueryTransposition
		public Assignment getFeaturesAssignment_5_1_0() { return cFeaturesAssignment_5_1_0; }
		
		//SimQueryTransposition
		public RuleCall getFeaturesSimQueryTranspositionParserRuleCall_5_1_0_0() { return cFeaturesSimQueryTranspositionParserRuleCall_5_1_0_0; }
		
		//'add' 'query' features+=DimQuery
		public Group getGroup_5_1_1() { return cGroup_5_1_1; }
		
		//'add'
		public Keyword getAddKeyword_5_1_1_0() { return cAddKeyword_5_1_1_0; }
		
		//'query'
		public Keyword getQueryKeyword_5_1_1_1() { return cQueryKeyword_5_1_1_1; }
		
		//features+=DimQuery
		public Assignment getFeaturesAssignment_5_1_1_2() { return cFeaturesAssignment_5_1_1_2; }
		
		//DimQuery
		public RuleCall getFeaturesDimQueryParserRuleCall_5_1_1_2_0() { return cFeaturesDimQueryParserRuleCall_5_1_1_2_0; }
		
		//types+=SimType*
		public Assignment getTypesAssignment_5_2() { return cTypesAssignment_5_2; }
		
		//SimType
		public RuleCall getTypesSimTypeParserRuleCall_5_2_0() { return cTypesSimTypeParserRuleCall_5_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5_3() { return cRightCurlyBracketKeyword_5_3; }
	}
	public class DAggregateKeywordElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.sm.sim.Sim.DAggregateKeyword");
		private final Keyword cAggregateKeyword = (Keyword)rule.eContents().get(1);
		
		//@Override
		//DAggregateKeyword:
		//	'aggregate';
		@Override public ParserRule getRule() { return rule; }
		
		//'aggregate'
		public Keyword getAggregateKeyword() { return cAggregateKeyword; }
	}
	public class DimTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.sm.sim.Sim.DimType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSimPrimitiveTranspositionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDimPrimitiveParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cSimEnumerationTranspositionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cDimEnumerationParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cSimEntityTypeTranspositionParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cDimEntityTypeParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cSimDetailTypeTranspositionParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cDimDetailTypeParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		
		//@Override
		//DimType DType:
		//	SimPrimitiveTransposition | DimPrimitive
		//	| SimEnumerationTransposition | DimEnumeration
		//	| SimEntityTypeTransposition | DimEntityType
		//	| SimDetailTypeTransposition | DimDetailType;
		@Override public ParserRule getRule() { return rule; }
		
		//SimPrimitiveTransposition | DimPrimitive | SimEnumerationTransposition | DimEnumeration | SimEntityTypeTransposition |
		//DimEntityType | SimDetailTypeTransposition | DimDetailType
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//SimPrimitiveTransposition
		public RuleCall getSimPrimitiveTranspositionParserRuleCall_0() { return cSimPrimitiveTranspositionParserRuleCall_0; }
		
		//DimPrimitive
		public RuleCall getDimPrimitiveParserRuleCall_1() { return cDimPrimitiveParserRuleCall_1; }
		
		//SimEnumerationTransposition
		public RuleCall getSimEnumerationTranspositionParserRuleCall_2() { return cSimEnumerationTranspositionParserRuleCall_2; }
		
		//DimEnumeration
		public RuleCall getDimEnumerationParserRuleCall_3() { return cDimEnumerationParserRuleCall_3; }
		
		//SimEntityTypeTransposition
		public RuleCall getSimEntityTypeTranspositionParserRuleCall_4() { return cSimEntityTypeTranspositionParserRuleCall_4; }
		
		//DimEntityType
		public RuleCall getDimEntityTypeParserRuleCall_5() { return cDimEntityTypeParserRuleCall_5; }
		
		//SimDetailTypeTransposition
		public RuleCall getSimDetailTypeTranspositionParserRuleCall_6() { return cSimDetailTypeTranspositionParserRuleCall_6; }
		
		//DimDetailType
		public RuleCall getDimDetailTypeParserRuleCall_7() { return cDimDetailTypeParserRuleCall_7; }
	}
	public class SimTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.sm.sim.Sim.SimType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSimPrimitiveTranspositionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cAddKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cDimPrimitiveParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final RuleCall cSimEnumerationTranspositionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Keyword cAddKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final RuleCall cDimEnumerationParserRuleCall_3_1 = (RuleCall)cGroup_3.eContents().get(1);
		private final RuleCall cSimEntityTypeTranspositionParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Keyword cAddKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final RuleCall cDimEntityTypeParserRuleCall_5_1 = (RuleCall)cGroup_5.eContents().get(1);
		private final RuleCall cSimDetailTypeTranspositionParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final Group cGroup_7 = (Group)cAlternatives.eContents().get(7);
		private final Keyword cAddKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final RuleCall cDimDetailTypeParserRuleCall_7_1 = (RuleCall)cGroup_7.eContents().get(1);
		
		//SimType DType:
		//	SimPrimitiveTransposition | 'add' DimPrimitive
		//	| SimEnumerationTransposition | 'add' DimEnumeration
		//	| SimEntityTypeTransposition | 'add' DimEntityType
		//	| SimDetailTypeTransposition | 'add' DimDetailType;
		@Override public ParserRule getRule() { return rule; }
		
		//SimPrimitiveTransposition | 'add' DimPrimitive | SimEnumerationTransposition | 'add' DimEnumeration |
		//SimEntityTypeTransposition | 'add' DimEntityType | SimDetailTypeTransposition | 'add' DimDetailType
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//SimPrimitiveTransposition
		public RuleCall getSimPrimitiveTranspositionParserRuleCall_0() { return cSimPrimitiveTranspositionParserRuleCall_0; }
		
		//'add' DimPrimitive
		public Group getGroup_1() { return cGroup_1; }
		
		//'add'
		public Keyword getAddKeyword_1_0() { return cAddKeyword_1_0; }
		
		//DimPrimitive
		public RuleCall getDimPrimitiveParserRuleCall_1_1() { return cDimPrimitiveParserRuleCall_1_1; }
		
		//SimEnumerationTransposition
		public RuleCall getSimEnumerationTranspositionParserRuleCall_2() { return cSimEnumerationTranspositionParserRuleCall_2; }
		
		//'add' DimEnumeration
		public Group getGroup_3() { return cGroup_3; }
		
		//'add'
		public Keyword getAddKeyword_3_0() { return cAddKeyword_3_0; }
		
		//DimEnumeration
		public RuleCall getDimEnumerationParserRuleCall_3_1() { return cDimEnumerationParserRuleCall_3_1; }
		
		//SimEntityTypeTransposition
		public RuleCall getSimEntityTypeTranspositionParserRuleCall_4() { return cSimEntityTypeTranspositionParserRuleCall_4; }
		
		//'add' DimEntityType
		public Group getGroup_5() { return cGroup_5; }
		
		//'add'
		public Keyword getAddKeyword_5_0() { return cAddKeyword_5_0; }
		
		//DimEntityType
		public RuleCall getDimEntityTypeParserRuleCall_5_1() { return cDimEntityTypeParserRuleCall_5_1; }
		
		//SimDetailTypeTransposition
		public RuleCall getSimDetailTypeTranspositionParserRuleCall_6() { return cSimDetailTypeTranspositionParserRuleCall_6; }
		
		//'add' DimDetailType
		public Group getGroup_7() { return cGroup_7; }
		
		//'add'
		public Keyword getAddKeyword_7_0() { return cAddKeyword_7_0; }
		
		//DimDetailType
		public RuleCall getDimDetailTypeParserRuleCall_7_1() { return cDimDetailTypeParserRuleCall_7_1; }
	}
	public class SimPrimitiveTranspositionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.sm.sim.Sim.SimPrimitiveTransposition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTPrimitiveTranspositionAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cGrabKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Keyword cPrimitiveKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Assignment cRuleAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cRuleSimGrabPrimitiveRuleParserRuleCall_1_0_2_0 = (RuleCall)cRuleAssignment_1_0_2.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cDitchKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Keyword cPrimitiveKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		private final Assignment cRuleAssignment_1_1_2 = (Assignment)cGroup_1_1.eContents().get(2);
		private final RuleCall cRuleSimDitchPrimitiveRuleParserRuleCall_1_1_2_0 = (RuleCall)cRuleAssignment_1_1_2.eContents().get(0);
		private final Assignment cDescriptionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDescriptionDRichTextParserRuleCall_2_0 = (RuleCall)cDescriptionAssignment_2.eContents().get(0);
		private final Assignment cNotesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNotesDNoteParserRuleCall_3_0 = (RuleCall)cNotesAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cLeftCurlyBracketKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cGroup_4.eContents().get(1);
		private final Keyword cAddKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Assignment cConstraintsAssignment_4_1_1 = (Assignment)cGroup_4_1.eContents().get(1);
		private final RuleCall cConstraintsDConstraintParserRuleCall_4_1_1_0 = (RuleCall)cConstraintsAssignment_4_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		
		//SimPrimitiveTransposition TPrimitiveTransposition:
		//	{TPrimitiveTransposition} ('grab' 'primitive' rule=SimGrabPrimitiveRule
		//	| 'ditch' 'primitive' rule=SimDitchPrimitiveRule) description=DRichText?
		//	notes+=DNote* ('{' ('add' constraints+=DConstraint)*
		//	'}')?;
		@Override public ParserRule getRule() { return rule; }
		
		//{TPrimitiveTransposition} ('grab' 'primitive' rule=SimGrabPrimitiveRule | 'ditch' 'primitive'
		//rule=SimDitchPrimitiveRule) description=DRichText? notes+=DNote* ('{' ('add' constraints+=DConstraint)* '}')?
		public Group getGroup() { return cGroup; }
		
		//{TPrimitiveTransposition}
		public Action getTPrimitiveTranspositionAction_0() { return cTPrimitiveTranspositionAction_0; }
		
		//('grab' 'primitive' rule=SimGrabPrimitiveRule | 'ditch' 'primitive' rule=SimDitchPrimitiveRule)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'grab' 'primitive' rule=SimGrabPrimitiveRule
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//'grab'
		public Keyword getGrabKeyword_1_0_0() { return cGrabKeyword_1_0_0; }
		
		//'primitive'
		public Keyword getPrimitiveKeyword_1_0_1() { return cPrimitiveKeyword_1_0_1; }
		
		//rule=SimGrabPrimitiveRule
		public Assignment getRuleAssignment_1_0_2() { return cRuleAssignment_1_0_2; }
		
		//SimGrabPrimitiveRule
		public RuleCall getRuleSimGrabPrimitiveRuleParserRuleCall_1_0_2_0() { return cRuleSimGrabPrimitiveRuleParserRuleCall_1_0_2_0; }
		
		//'ditch' 'primitive' rule=SimDitchPrimitiveRule
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//'ditch'
		public Keyword getDitchKeyword_1_1_0() { return cDitchKeyword_1_1_0; }
		
		//'primitive'
		public Keyword getPrimitiveKeyword_1_1_1() { return cPrimitiveKeyword_1_1_1; }
		
		//rule=SimDitchPrimitiveRule
		public Assignment getRuleAssignment_1_1_2() { return cRuleAssignment_1_1_2; }
		
		//SimDitchPrimitiveRule
		public RuleCall getRuleSimDitchPrimitiveRuleParserRuleCall_1_1_2_0() { return cRuleSimDitchPrimitiveRuleParserRuleCall_1_1_2_0; }
		
		//description=DRichText?
		public Assignment getDescriptionAssignment_2() { return cDescriptionAssignment_2; }
		
		//DRichText
		public RuleCall getDescriptionDRichTextParserRuleCall_2_0() { return cDescriptionDRichTextParserRuleCall_2_0; }
		
		//notes+=DNote*
		public Assignment getNotesAssignment_3() { return cNotesAssignment_3; }
		
		//DNote
		public RuleCall getNotesDNoteParserRuleCall_3_0() { return cNotesDNoteParserRuleCall_3_0; }
		
		//('{' ('add' constraints+=DConstraint)* '}')?
		public Group getGroup_4() { return cGroup_4; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4_0() { return cLeftCurlyBracketKeyword_4_0; }
		
		//('add' constraints+=DConstraint)*
		public Group getGroup_4_1() { return cGroup_4_1; }
		
		//'add'
		public Keyword getAddKeyword_4_1_0() { return cAddKeyword_4_1_0; }
		
		//constraints+=DConstraint
		public Assignment getConstraintsAssignment_4_1_1() { return cConstraintsAssignment_4_1_1; }
		
		//DConstraint
		public RuleCall getConstraintsDConstraintParserRuleCall_4_1_1_0() { return cConstraintsDConstraintParserRuleCall_4_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4_2() { return cRightCurlyBracketKeyword_4_2; }
	}
	public class SimEnumerationTranspositionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.sm.sim.Sim.SimEnumerationTransposition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTEnumerationTranspositionAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cGrabKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Keyword cEnumerationKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Assignment cRuleAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cRuleSimGrabEnumerationRuleParserRuleCall_1_0_2_0 = (RuleCall)cRuleAssignment_1_0_2.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cDitchKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Keyword cEnumerationKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		private final Assignment cRuleAssignment_1_1_2 = (Assignment)cGroup_1_1.eContents().get(2);
		private final RuleCall cRuleSimDitchEnumerationRuleParserRuleCall_1_1_2_0 = (RuleCall)cRuleAssignment_1_1_2.eContents().get(0);
		private final Assignment cDescriptionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDescriptionDRichTextParserRuleCall_2_0 = (RuleCall)cDescriptionAssignment_2.eContents().get(0);
		private final Assignment cNotesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNotesDNoteParserRuleCall_3_0 = (RuleCall)cNotesAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cLeftCurlyBracketKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cGroup_4.eContents().get(1);
		private final Assignment cLiteralsAssignment_4_1_0 = (Assignment)cGroup_4_1.eContents().get(0);
		private final RuleCall cLiteralsSimLiteralParserRuleCall_4_1_0_0 = (RuleCall)cLiteralsAssignment_4_1_0.eContents().get(0);
		private final Group cGroup_4_1_1 = (Group)cGroup_4_1.eContents().get(1);
		private final Keyword cCommaKeyword_4_1_1_0 = (Keyword)cGroup_4_1_1.eContents().get(0);
		private final Assignment cLiteralsAssignment_4_1_1_1 = (Assignment)cGroup_4_1_1.eContents().get(1);
		private final RuleCall cLiteralsSimLiteralParserRuleCall_4_1_1_1_0 = (RuleCall)cLiteralsAssignment_4_1_1_1.eContents().get(0);
		private final Group cGroup_4_2 = (Group)cGroup_4.eContents().get(2);
		private final Keyword cAddKeyword_4_2_0 = (Keyword)cGroup_4_2.eContents().get(0);
		private final Assignment cConstraintsAssignment_4_2_1 = (Assignment)cGroup_4_2.eContents().get(1);
		private final RuleCall cConstraintsDConstraintParserRuleCall_4_2_1_0 = (RuleCall)cConstraintsAssignment_4_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4_3 = (Keyword)cGroup_4.eContents().get(3);
		
		//SimEnumerationTransposition TEnumerationTransposition:
		//	{TEnumerationTransposition} ('grab' 'enumeration' rule=SimGrabEnumerationRule
		//	| 'ditch' 'enumeration' rule=SimDitchEnumerationRule) description=DRichText?
		//	notes+=DNote* ('{' (literals+=SimLiteral (',' literals+=SimLiteral)*)? ('add' constraints+=DConstraint)*
		//	'}')?;
		@Override public ParserRule getRule() { return rule; }
		
		//{TEnumerationTransposition} ('grab' 'enumeration' rule=SimGrabEnumerationRule | 'ditch' 'enumeration'
		//rule=SimDitchEnumerationRule) description=DRichText? notes+=DNote* ('{' (literals+=SimLiteral (','
		//literals+=SimLiteral)*)? ('add' constraints+=DConstraint)* '}')?
		public Group getGroup() { return cGroup; }
		
		//{TEnumerationTransposition}
		public Action getTEnumerationTranspositionAction_0() { return cTEnumerationTranspositionAction_0; }
		
		//('grab' 'enumeration' rule=SimGrabEnumerationRule | 'ditch' 'enumeration' rule=SimDitchEnumerationRule)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'grab' 'enumeration' rule=SimGrabEnumerationRule
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//'grab'
		public Keyword getGrabKeyword_1_0_0() { return cGrabKeyword_1_0_0; }
		
		//'enumeration'
		public Keyword getEnumerationKeyword_1_0_1() { return cEnumerationKeyword_1_0_1; }
		
		//rule=SimGrabEnumerationRule
		public Assignment getRuleAssignment_1_0_2() { return cRuleAssignment_1_0_2; }
		
		//SimGrabEnumerationRule
		public RuleCall getRuleSimGrabEnumerationRuleParserRuleCall_1_0_2_0() { return cRuleSimGrabEnumerationRuleParserRuleCall_1_0_2_0; }
		
		//'ditch' 'enumeration' rule=SimDitchEnumerationRule
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//'ditch'
		public Keyword getDitchKeyword_1_1_0() { return cDitchKeyword_1_1_0; }
		
		//'enumeration'
		public Keyword getEnumerationKeyword_1_1_1() { return cEnumerationKeyword_1_1_1; }
		
		//rule=SimDitchEnumerationRule
		public Assignment getRuleAssignment_1_1_2() { return cRuleAssignment_1_1_2; }
		
		//SimDitchEnumerationRule
		public RuleCall getRuleSimDitchEnumerationRuleParserRuleCall_1_1_2_0() { return cRuleSimDitchEnumerationRuleParserRuleCall_1_1_2_0; }
		
		//description=DRichText?
		public Assignment getDescriptionAssignment_2() { return cDescriptionAssignment_2; }
		
		//DRichText
		public RuleCall getDescriptionDRichTextParserRuleCall_2_0() { return cDescriptionDRichTextParserRuleCall_2_0; }
		
		//notes+=DNote*
		public Assignment getNotesAssignment_3() { return cNotesAssignment_3; }
		
		//DNote
		public RuleCall getNotesDNoteParserRuleCall_3_0() { return cNotesDNoteParserRuleCall_3_0; }
		
		//('{' (literals+=SimLiteral (',' literals+=SimLiteral)*)? ('add' constraints+=DConstraint)* '}')?
		public Group getGroup_4() { return cGroup_4; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4_0() { return cLeftCurlyBracketKeyword_4_0; }
		
		//(literals+=SimLiteral (',' literals+=SimLiteral)*)?
		public Group getGroup_4_1() { return cGroup_4_1; }
		
		//literals+=SimLiteral
		public Assignment getLiteralsAssignment_4_1_0() { return cLiteralsAssignment_4_1_0; }
		
		//SimLiteral
		public RuleCall getLiteralsSimLiteralParserRuleCall_4_1_0_0() { return cLiteralsSimLiteralParserRuleCall_4_1_0_0; }
		
		//(',' literals+=SimLiteral)*
		public Group getGroup_4_1_1() { return cGroup_4_1_1; }
		
		//','
		public Keyword getCommaKeyword_4_1_1_0() { return cCommaKeyword_4_1_1_0; }
		
		//literals+=SimLiteral
		public Assignment getLiteralsAssignment_4_1_1_1() { return cLiteralsAssignment_4_1_1_1; }
		
		//SimLiteral
		public RuleCall getLiteralsSimLiteralParserRuleCall_4_1_1_1_0() { return cLiteralsSimLiteralParserRuleCall_4_1_1_1_0; }
		
		//('add' constraints+=DConstraint)*
		public Group getGroup_4_2() { return cGroup_4_2; }
		
		//'add'
		public Keyword getAddKeyword_4_2_0() { return cAddKeyword_4_2_0; }
		
		//constraints+=DConstraint
		public Assignment getConstraintsAssignment_4_2_1() { return cConstraintsAssignment_4_2_1; }
		
		//DConstraint
		public RuleCall getConstraintsDConstraintParserRuleCall_4_2_1_0() { return cConstraintsDConstraintParserRuleCall_4_2_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4_3() { return cRightCurlyBracketKeyword_4_3; }
	}
	public class SimLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.sm.sim.Sim.SimLiteral");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSimLiteralTranspositionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cAddKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cDimLiteralParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//SimLiteral DLiteral:
		//	SimLiteralTransposition | 'add' DimLiteral;
		@Override public ParserRule getRule() { return rule; }
		
		//SimLiteralTransposition | 'add' DimLiteral
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//SimLiteralTransposition
		public RuleCall getSimLiteralTranspositionParserRuleCall_0() { return cSimLiteralTranspositionParserRuleCall_0; }
		
		//'add' DimLiteral
		public Group getGroup_1() { return cGroup_1; }
		
		//'add'
		public Keyword getAddKeyword_1_0() { return cAddKeyword_1_0; }
		
		//DimLiteral
		public RuleCall getDimLiteralParserRuleCall_1_1() { return cDimLiteralParserRuleCall_1_1; }
	}
	public class SimLiteralTranspositionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.sm.sim.Sim.SimLiteralTransposition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTLiteralTranspositionAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cGrabKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Assignment cRuleAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cRuleSimGrabEnumerationLiteralRuleParserRuleCall_1_0_1_0 = (RuleCall)cRuleAssignment_1_0_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cDitchKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cRuleAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cRuleSimDitchEnumerationLiteralRuleParserRuleCall_1_1_1_0 = (RuleCall)cRuleAssignment_1_1_1.eContents().get(0);
		private final Assignment cDescriptionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDescriptionDRichTextParserRuleCall_2_0 = (RuleCall)cDescriptionAssignment_2.eContents().get(0);
		private final Assignment cNotesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNotesDNoteParserRuleCall_3_0 = (RuleCall)cNotesAssignment_3.eContents().get(0);
		
		//SimLiteralTransposition TLiteralTransposition:
		//	{TLiteralTransposition} ('grab' rule=SimGrabEnumerationLiteralRule
		//	| 'ditch' rule=SimDitchEnumerationLiteralRule) description=DRichText?
		//	notes+=DNote*;
		@Override public ParserRule getRule() { return rule; }
		
		//{TLiteralTransposition} ('grab' rule=SimGrabEnumerationLiteralRule | 'ditch' rule=SimDitchEnumerationLiteralRule)
		//description=DRichText? notes+=DNote*
		public Group getGroup() { return cGroup; }
		
		//{TLiteralTransposition}
		public Action getTLiteralTranspositionAction_0() { return cTLiteralTranspositionAction_0; }
		
		//('grab' rule=SimGrabEnumerationLiteralRule | 'ditch' rule=SimDitchEnumerationLiteralRule)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'grab' rule=SimGrabEnumerationLiteralRule
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//'grab'
		public Keyword getGrabKeyword_1_0_0() { return cGrabKeyword_1_0_0; }
		
		//rule=SimGrabEnumerationLiteralRule
		public Assignment getRuleAssignment_1_0_1() { return cRuleAssignment_1_0_1; }
		
		//SimGrabEnumerationLiteralRule
		public RuleCall getRuleSimGrabEnumerationLiteralRuleParserRuleCall_1_0_1_0() { return cRuleSimGrabEnumerationLiteralRuleParserRuleCall_1_0_1_0; }
		
		//'ditch' rule=SimDitchEnumerationLiteralRule
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//'ditch'
		public Keyword getDitchKeyword_1_1_0() { return cDitchKeyword_1_1_0; }
		
		//rule=SimDitchEnumerationLiteralRule
		public Assignment getRuleAssignment_1_1_1() { return cRuleAssignment_1_1_1; }
		
		//SimDitchEnumerationLiteralRule
		public RuleCall getRuleSimDitchEnumerationLiteralRuleParserRuleCall_1_1_1_0() { return cRuleSimDitchEnumerationLiteralRuleParserRuleCall_1_1_1_0; }
		
		//description=DRichText?
		public Assignment getDescriptionAssignment_2() { return cDescriptionAssignment_2; }
		
		//DRichText
		public RuleCall getDescriptionDRichTextParserRuleCall_2_0() { return cDescriptionDRichTextParserRuleCall_2_0; }
		
		//notes+=DNote*
		public Assignment getNotesAssignment_3() { return cNotesAssignment_3; }
		
		//DNote
		public RuleCall getNotesDNoteParserRuleCall_3_0() { return cNotesDNoteParserRuleCall_3_0; }
	}
	public class SimEntityTypeTranspositionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.sm.sim.Sim.SimEntityTypeTransposition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTEntityTypeTranspositionAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cGrabKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Assignment cRootAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final Keyword cRootRootKeyword_1_0_1_0 = (Keyword)cRootAssignment_1_0_1.eContents().get(0);
		private final Keyword cEntityKeyword_1_0_2 = (Keyword)cGroup_1_0.eContents().get(2);
		private final Assignment cRuleAssignment_1_0_3 = (Assignment)cGroup_1_0.eContents().get(3);
		private final RuleCall cRuleSimGrabComplexTypeRuleParserRuleCall_1_0_3_0 = (RuleCall)cRuleAssignment_1_0_3.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cDitchKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cRootAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final Keyword cRootRootKeyword_1_1_1_0 = (Keyword)cRootAssignment_1_1_1.eContents().get(0);
		private final Keyword cEntityKeyword_1_1_2 = (Keyword)cGroup_1_1.eContents().get(2);
		private final Assignment cRuleAssignment_1_1_3 = (Assignment)cGroup_1_1.eContents().get(3);
		private final RuleCall cRuleSimDitchComplexTypeRuleParserRuleCall_1_1_3_0 = (RuleCall)cRuleAssignment_1_1_3.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cAlternatives_1.eContents().get(2);
		private final Keyword cMorphKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cRootAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final Keyword cRootRootKeyword_1_2_1_0 = (Keyword)cRootAssignment_1_2_1.eContents().get(0);
		private final Keyword cEntityKeyword_1_2_2 = (Keyword)cGroup_1_2.eContents().get(2);
		private final Assignment cRuleAssignment_1_2_3 = (Assignment)cGroup_1_2.eContents().get(3);
		private final RuleCall cRuleSimMorphComplexTypeRuleParserRuleCall_1_2_3_0 = (RuleCall)cRuleAssignment_1_2_3.eContents().get(0);
		private final Group cGroup_1_3 = (Group)cAlternatives_1.eContents().get(3);
		private final Keyword cFuseKeyword_1_3_0 = (Keyword)cGroup_1_3.eContents().get(0);
		private final Assignment cRootAssignment_1_3_1 = (Assignment)cGroup_1_3.eContents().get(1);
		private final Keyword cRootRootKeyword_1_3_1_0 = (Keyword)cRootAssignment_1_3_1.eContents().get(0);
		private final Keyword cEntityKeyword_1_3_2 = (Keyword)cGroup_1_3.eContents().get(2);
		private final Assignment cRuleAssignment_1_3_3 = (Assignment)cGroup_1_3.eContents().get(3);
		private final RuleCall cRuleSimFuseComplexTypeRuleParserRuleCall_1_3_3_0 = (RuleCall)cRuleAssignment_1_3_3.eContents().get(0);
		private final Assignment cDescriptionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDescriptionDRichTextParserRuleCall_2_0 = (RuleCall)cDescriptionAssignment_2.eContents().get(0);
		private final Assignment cNotesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNotesDNoteParserRuleCall_3_0 = (RuleCall)cNotesAssignment_3.eContents().get(0);
		private final RuleCall cTComplexTypeFeaturesParserRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		
		//SimEntityTypeTransposition TEntityTypeTransposition:
		//	{TEntityTypeTransposition} ('grab' root?='root'? 'entity' rule=SimGrabComplexTypeRule
		//	| 'ditch' root?='root'? 'entity' rule=SimDitchComplexTypeRule
		//	| 'morph' root?='root'? 'entity' rule=SimMorphComplexTypeRule
		//	| 'fuse' root?='root'? 'entity' rule=SimFuseComplexTypeRule) description=DRichText?
		//	notes+=DNote*
		//	TComplexTypeFeatures?;
		@Override public ParserRule getRule() { return rule; }
		
		//{TEntityTypeTransposition} ('grab' root?='root'? 'entity' rule=SimGrabComplexTypeRule | 'ditch' root?='root'? 'entity'
		//rule=SimDitchComplexTypeRule | 'morph' root?='root'? 'entity' rule=SimMorphComplexTypeRule | 'fuse' root?='root'?
		//'entity' rule=SimFuseComplexTypeRule) description=DRichText? notes+=DNote* TComplexTypeFeatures?
		public Group getGroup() { return cGroup; }
		
		//{TEntityTypeTransposition}
		public Action getTEntityTypeTranspositionAction_0() { return cTEntityTypeTranspositionAction_0; }
		
		//('grab' root?='root'? 'entity' rule=SimGrabComplexTypeRule | 'ditch' root?='root'? 'entity' rule=SimDitchComplexTypeRule
		//| 'morph' root?='root'? 'entity' rule=SimMorphComplexTypeRule | 'fuse' root?='root'? 'entity'
		//rule=SimFuseComplexTypeRule)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'grab' root?='root'? 'entity' rule=SimGrabComplexTypeRule
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//'grab'
		public Keyword getGrabKeyword_1_0_0() { return cGrabKeyword_1_0_0; }
		
		//root?='root'?
		public Assignment getRootAssignment_1_0_1() { return cRootAssignment_1_0_1; }
		
		//'root'
		public Keyword getRootRootKeyword_1_0_1_0() { return cRootRootKeyword_1_0_1_0; }
		
		//'entity'
		public Keyword getEntityKeyword_1_0_2() { return cEntityKeyword_1_0_2; }
		
		//rule=SimGrabComplexTypeRule
		public Assignment getRuleAssignment_1_0_3() { return cRuleAssignment_1_0_3; }
		
		//SimGrabComplexTypeRule
		public RuleCall getRuleSimGrabComplexTypeRuleParserRuleCall_1_0_3_0() { return cRuleSimGrabComplexTypeRuleParserRuleCall_1_0_3_0; }
		
		//'ditch' root?='root'? 'entity' rule=SimDitchComplexTypeRule
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//'ditch'
		public Keyword getDitchKeyword_1_1_0() { return cDitchKeyword_1_1_0; }
		
		//root?='root'?
		public Assignment getRootAssignment_1_1_1() { return cRootAssignment_1_1_1; }
		
		//'root'
		public Keyword getRootRootKeyword_1_1_1_0() { return cRootRootKeyword_1_1_1_0; }
		
		//'entity'
		public Keyword getEntityKeyword_1_1_2() { return cEntityKeyword_1_1_2; }
		
		//rule=SimDitchComplexTypeRule
		public Assignment getRuleAssignment_1_1_3() { return cRuleAssignment_1_1_3; }
		
		//SimDitchComplexTypeRule
		public RuleCall getRuleSimDitchComplexTypeRuleParserRuleCall_1_1_3_0() { return cRuleSimDitchComplexTypeRuleParserRuleCall_1_1_3_0; }
		
		//'morph' root?='root'? 'entity' rule=SimMorphComplexTypeRule
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//'morph'
		public Keyword getMorphKeyword_1_2_0() { return cMorphKeyword_1_2_0; }
		
		//root?='root'?
		public Assignment getRootAssignment_1_2_1() { return cRootAssignment_1_2_1; }
		
		//'root'
		public Keyword getRootRootKeyword_1_2_1_0() { return cRootRootKeyword_1_2_1_0; }
		
		//'entity'
		public Keyword getEntityKeyword_1_2_2() { return cEntityKeyword_1_2_2; }
		
		//rule=SimMorphComplexTypeRule
		public Assignment getRuleAssignment_1_2_3() { return cRuleAssignment_1_2_3; }
		
		//SimMorphComplexTypeRule
		public RuleCall getRuleSimMorphComplexTypeRuleParserRuleCall_1_2_3_0() { return cRuleSimMorphComplexTypeRuleParserRuleCall_1_2_3_0; }
		
		//'fuse' root?='root'? 'entity' rule=SimFuseComplexTypeRule
		public Group getGroup_1_3() { return cGroup_1_3; }
		
		//'fuse'
		public Keyword getFuseKeyword_1_3_0() { return cFuseKeyword_1_3_0; }
		
		//root?='root'?
		public Assignment getRootAssignment_1_3_1() { return cRootAssignment_1_3_1; }
		
		//'root'
		public Keyword getRootRootKeyword_1_3_1_0() { return cRootRootKeyword_1_3_1_0; }
		
		//'entity'
		public Keyword getEntityKeyword_1_3_2() { return cEntityKeyword_1_3_2; }
		
		//rule=SimFuseComplexTypeRule
		public Assignment getRuleAssignment_1_3_3() { return cRuleAssignment_1_3_3; }
		
		//SimFuseComplexTypeRule
		public RuleCall getRuleSimFuseComplexTypeRuleParserRuleCall_1_3_3_0() { return cRuleSimFuseComplexTypeRuleParserRuleCall_1_3_3_0; }
		
		//description=DRichText?
		public Assignment getDescriptionAssignment_2() { return cDescriptionAssignment_2; }
		
		//DRichText
		public RuleCall getDescriptionDRichTextParserRuleCall_2_0() { return cDescriptionDRichTextParserRuleCall_2_0; }
		
		//notes+=DNote*
		public Assignment getNotesAssignment_3() { return cNotesAssignment_3; }
		
		//DNote
		public RuleCall getNotesDNoteParserRuleCall_3_0() { return cNotesDNoteParserRuleCall_3_0; }
		
		//TComplexTypeFeatures?
		public RuleCall getTComplexTypeFeaturesParserRuleCall_4() { return cTComplexTypeFeaturesParserRuleCall_4; }
	}
	public class SimDetailTypeTranspositionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.sm.sim.Sim.SimDetailTypeTransposition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTDetailTypeTranspositionAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cGrabKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Keyword cDetailKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Assignment cRuleAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cRuleSimGrabComplexTypeRuleParserRuleCall_1_0_2_0 = (RuleCall)cRuleAssignment_1_0_2.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cDitchKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Keyword cDetailKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		private final Assignment cRuleAssignment_1_1_2 = (Assignment)cGroup_1_1.eContents().get(2);
		private final RuleCall cRuleSimDitchComplexTypeRuleParserRuleCall_1_1_2_0 = (RuleCall)cRuleAssignment_1_1_2.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cAlternatives_1.eContents().get(2);
		private final Keyword cMorphKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Keyword cDetailKeyword_1_2_1 = (Keyword)cGroup_1_2.eContents().get(1);
		private final Assignment cRuleAssignment_1_2_2 = (Assignment)cGroup_1_2.eContents().get(2);
		private final RuleCall cRuleSimMorphComplexTypeRuleParserRuleCall_1_2_2_0 = (RuleCall)cRuleAssignment_1_2_2.eContents().get(0);
		private final Group cGroup_1_3 = (Group)cAlternatives_1.eContents().get(3);
		private final Keyword cFuseKeyword_1_3_0 = (Keyword)cGroup_1_3.eContents().get(0);
		private final Keyword cDetailKeyword_1_3_1 = (Keyword)cGroup_1_3.eContents().get(1);
		private final Assignment cRuleAssignment_1_3_2 = (Assignment)cGroup_1_3.eContents().get(2);
		private final RuleCall cRuleSimFuseComplexTypeRuleParserRuleCall_1_3_2_0 = (RuleCall)cRuleAssignment_1_3_2.eContents().get(0);
		private final Assignment cDescriptionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDescriptionDRichTextParserRuleCall_2_0 = (RuleCall)cDescriptionAssignment_2.eContents().get(0);
		private final Assignment cNotesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNotesDNoteParserRuleCall_3_0 = (RuleCall)cNotesAssignment_3.eContents().get(0);
		private final RuleCall cTComplexTypeFeaturesParserRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		
		//SimDetailTypeTransposition TDetailTypeTransposition:
		//	{TDetailTypeTransposition} ('grab' 'detail' rule=SimGrabComplexTypeRule
		//	| 'ditch' 'detail' rule=SimDitchComplexTypeRule
		//	| 'morph' 'detail' rule=SimMorphComplexTypeRule
		//	| 'fuse' 'detail' rule=SimFuseComplexTypeRule) description=DRichText?
		//	notes+=DNote*
		//	TComplexTypeFeatures?;
		@Override public ParserRule getRule() { return rule; }
		
		//{TDetailTypeTransposition} ('grab' 'detail' rule=SimGrabComplexTypeRule | 'ditch' 'detail' rule=SimDitchComplexTypeRule
		//| 'morph' 'detail' rule=SimMorphComplexTypeRule | 'fuse' 'detail' rule=SimFuseComplexTypeRule) description=DRichText?
		//notes+=DNote* TComplexTypeFeatures?
		public Group getGroup() { return cGroup; }
		
		//{TDetailTypeTransposition}
		public Action getTDetailTypeTranspositionAction_0() { return cTDetailTypeTranspositionAction_0; }
		
		//('grab' 'detail' rule=SimGrabComplexTypeRule | 'ditch' 'detail' rule=SimDitchComplexTypeRule | 'morph' 'detail'
		//rule=SimMorphComplexTypeRule | 'fuse' 'detail' rule=SimFuseComplexTypeRule)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'grab' 'detail' rule=SimGrabComplexTypeRule
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//'grab'
		public Keyword getGrabKeyword_1_0_0() { return cGrabKeyword_1_0_0; }
		
		//'detail'
		public Keyword getDetailKeyword_1_0_1() { return cDetailKeyword_1_0_1; }
		
		//rule=SimGrabComplexTypeRule
		public Assignment getRuleAssignment_1_0_2() { return cRuleAssignment_1_0_2; }
		
		//SimGrabComplexTypeRule
		public RuleCall getRuleSimGrabComplexTypeRuleParserRuleCall_1_0_2_0() { return cRuleSimGrabComplexTypeRuleParserRuleCall_1_0_2_0; }
		
		//'ditch' 'detail' rule=SimDitchComplexTypeRule
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//'ditch'
		public Keyword getDitchKeyword_1_1_0() { return cDitchKeyword_1_1_0; }
		
		//'detail'
		public Keyword getDetailKeyword_1_1_1() { return cDetailKeyword_1_1_1; }
		
		//rule=SimDitchComplexTypeRule
		public Assignment getRuleAssignment_1_1_2() { return cRuleAssignment_1_1_2; }
		
		//SimDitchComplexTypeRule
		public RuleCall getRuleSimDitchComplexTypeRuleParserRuleCall_1_1_2_0() { return cRuleSimDitchComplexTypeRuleParserRuleCall_1_1_2_0; }
		
		//'morph' 'detail' rule=SimMorphComplexTypeRule
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//'morph'
		public Keyword getMorphKeyword_1_2_0() { return cMorphKeyword_1_2_0; }
		
		//'detail'
		public Keyword getDetailKeyword_1_2_1() { return cDetailKeyword_1_2_1; }
		
		//rule=SimMorphComplexTypeRule
		public Assignment getRuleAssignment_1_2_2() { return cRuleAssignment_1_2_2; }
		
		//SimMorphComplexTypeRule
		public RuleCall getRuleSimMorphComplexTypeRuleParserRuleCall_1_2_2_0() { return cRuleSimMorphComplexTypeRuleParserRuleCall_1_2_2_0; }
		
		//'fuse' 'detail' rule=SimFuseComplexTypeRule
		public Group getGroup_1_3() { return cGroup_1_3; }
		
		//'fuse'
		public Keyword getFuseKeyword_1_3_0() { return cFuseKeyword_1_3_0; }
		
		//'detail'
		public Keyword getDetailKeyword_1_3_1() { return cDetailKeyword_1_3_1; }
		
		//rule=SimFuseComplexTypeRule
		public Assignment getRuleAssignment_1_3_2() { return cRuleAssignment_1_3_2; }
		
		//SimFuseComplexTypeRule
		public RuleCall getRuleSimFuseComplexTypeRuleParserRuleCall_1_3_2_0() { return cRuleSimFuseComplexTypeRuleParserRuleCall_1_3_2_0; }
		
		//description=DRichText?
		public Assignment getDescriptionAssignment_2() { return cDescriptionAssignment_2; }
		
		//DRichText
		public RuleCall getDescriptionDRichTextParserRuleCall_2_0() { return cDescriptionDRichTextParserRuleCall_2_0; }
		
		//notes+=DNote*
		public Assignment getNotesAssignment_3() { return cNotesAssignment_3; }
		
		//DNote
		public RuleCall getNotesDNoteParserRuleCall_3_0() { return cNotesDNoteParserRuleCall_3_0; }
		
		//TComplexTypeFeatures?
		public RuleCall getTComplexTypeFeaturesParserRuleCall_4() { return cTComplexTypeFeaturesParserRuleCall_4; }
	}
	public class TComplexTypeFeaturesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.sm.sim.Sim.TComplexTypeFeatures");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cFeaturesAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cFeaturesSimFeatureParserRuleCall_1_0_0 = (RuleCall)cFeaturesAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cAddKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cConstraintsAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cConstraintsDConstraintParserRuleCall_1_1_1_0 = (RuleCall)cConstraintsAssignment_1_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//fragment TComplexTypeFeatures returns DComplexType:
		//	'{' (features+=SimFeature | 'add' constraints+=DConstraint)*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'{' (features+=SimFeature | 'add' constraints+=DConstraint)* '}'
		public Group getGroup() { return cGroup; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }
		
		//(features+=SimFeature | 'add' constraints+=DConstraint)*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//features+=SimFeature
		public Assignment getFeaturesAssignment_1_0() { return cFeaturesAssignment_1_0; }
		
		//SimFeature
		public RuleCall getFeaturesSimFeatureParserRuleCall_1_0_0() { return cFeaturesSimFeatureParserRuleCall_1_0_0; }
		
		//'add' constraints+=DConstraint
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//'add'
		public Keyword getAddKeyword_1_1_0() { return cAddKeyword_1_1_0; }
		
		//constraints+=DConstraint
		public Assignment getConstraintsAssignment_1_1_1() { return cConstraintsAssignment_1_1_1; }
		
		//DConstraint
		public RuleCall getConstraintsDConstraintParserRuleCall_1_1_1_0() { return cConstraintsDConstraintParserRuleCall_1_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_2() { return cRightCurlyBracketKeyword_2; }
	}
	public class SimFeatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.sm.sim.Sim.SimFeature");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSimAssociationTranspositionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cAddKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cDimAssociationParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final RuleCall cSimAttributeTranspositionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Keyword cAddKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final RuleCall cDimAttributeParserRuleCall_3_1 = (RuleCall)cGroup_3.eContents().get(1);
		private final RuleCall cSimQueryTranspositionParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Keyword cAddKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final RuleCall cDimQueryParserRuleCall_5_1 = (RuleCall)cGroup_5.eContents().get(1);
		
		///*
		// * FEATURES
		// */ SimFeature DFeature:
		//	SimAssociationTransposition | 'add' DimAssociation
		//	| SimAttributeTransposition | 'add' DimAttribute
		//	| SimQueryTransposition | 'add' DimQuery;
		@Override public ParserRule getRule() { return rule; }
		
		//SimAssociationTransposition | 'add' DimAssociation | SimAttributeTransposition | 'add' DimAttribute |
		//SimQueryTransposition | 'add' DimQuery
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//SimAssociationTransposition
		public RuleCall getSimAssociationTranspositionParserRuleCall_0() { return cSimAssociationTranspositionParserRuleCall_0; }
		
		//'add' DimAssociation
		public Group getGroup_1() { return cGroup_1; }
		
		//'add'
		public Keyword getAddKeyword_1_0() { return cAddKeyword_1_0; }
		
		//DimAssociation
		public RuleCall getDimAssociationParserRuleCall_1_1() { return cDimAssociationParserRuleCall_1_1; }
		
		//SimAttributeTransposition
		public RuleCall getSimAttributeTranspositionParserRuleCall_2() { return cSimAttributeTranspositionParserRuleCall_2; }
		
		//'add' DimAttribute
		public Group getGroup_3() { return cGroup_3; }
		
		//'add'
		public Keyword getAddKeyword_3_0() { return cAddKeyword_3_0; }
		
		//DimAttribute
		public RuleCall getDimAttributeParserRuleCall_3_1() { return cDimAttributeParserRuleCall_3_1; }
		
		//SimQueryTransposition
		public RuleCall getSimQueryTranspositionParserRuleCall_4() { return cSimQueryTranspositionParserRuleCall_4; }
		
		//'add' DimQuery
		public Group getGroup_5() { return cGroup_5; }
		
		//'add'
		public Keyword getAddKeyword_5_0() { return cAddKeyword_5_0; }
		
		//DimQuery
		public RuleCall getDimQueryParserRuleCall_5_1() { return cDimQueryParserRuleCall_5_1; }
	}
	public class SimAssociationTranspositionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.sm.sim.Sim.SimAssociationTransposition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTAssociationTranspositionAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cGrabKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Alternatives cAlternatives_1_0_1 = (Alternatives)cGroup_1_0.eContents().get(1);
		private final Keyword cReferenceKeyword_1_0_1_0 = (Keyword)cAlternatives_1_0_1.eContents().get(0);
		private final Keyword cCompositeKeyword_1_0_1_1 = (Keyword)cAlternatives_1_0_1.eContents().get(1);
		private final Assignment cRuleAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cRuleSimGrabFeatureRuleParserRuleCall_1_0_2_0 = (RuleCall)cRuleAssignment_1_0_2.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cMorphKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1_1 = (Alternatives)cGroup_1_1.eContents().get(1);
		private final Keyword cReferenceKeyword_1_1_1_0 = (Keyword)cAlternatives_1_1_1.eContents().get(0);
		private final Keyword cCompositeKeyword_1_1_1_1 = (Keyword)cAlternatives_1_1_1.eContents().get(1);
		private final Assignment cRuleAssignment_1_1_2 = (Assignment)cGroup_1_1.eContents().get(2);
		private final RuleCall cRuleSimMorphFeatureRuleParserRuleCall_1_1_2_0 = (RuleCall)cRuleAssignment_1_1_2.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cAlternatives_1.eContents().get(2);
		private final Keyword cDitchKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Alternatives cAlternatives_1_2_1 = (Alternatives)cGroup_1_2.eContents().get(1);
		private final Keyword cReferenceKeyword_1_2_1_0 = (Keyword)cAlternatives_1_2_1.eContents().get(0);
		private final Keyword cCompositeKeyword_1_2_1_1 = (Keyword)cAlternatives_1_2_1.eContents().get(1);
		private final Assignment cRuleAssignment_1_2_2 = (Assignment)cGroup_1_2.eContents().get(2);
		private final RuleCall cRuleSimDitchFeatureRuleParserRuleCall_1_2_2_0 = (RuleCall)cRuleAssignment_1_2_2.eContents().get(0);
		private final Assignment cDescriptionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDescriptionDRichTextParserRuleCall_2_0 = (RuleCall)cDescriptionAssignment_2.eContents().get(0);
		
		//SimAssociationTransposition TAssociationTransposition:
		//	{TAssociationTransposition} ('grab' ('reference' | 'composite') rule=SimGrabFeatureRule
		//	| 'morph' ('reference' | 'composite') rule=SimMorphFeatureRule
		//	| 'ditch' ('reference' | 'composite') rule=SimDitchFeatureRule) description=DRichText?;
		@Override public ParserRule getRule() { return rule; }
		
		//{TAssociationTransposition} ('grab' ('reference' | 'composite') rule=SimGrabFeatureRule | 'morph' ('reference' |
		//'composite') rule=SimMorphFeatureRule | 'ditch' ('reference' | 'composite') rule=SimDitchFeatureRule)
		//description=DRichText?
		public Group getGroup() { return cGroup; }
		
		//{TAssociationTransposition}
		public Action getTAssociationTranspositionAction_0() { return cTAssociationTranspositionAction_0; }
		
		//('grab' ('reference' | 'composite') rule=SimGrabFeatureRule | 'morph' ('reference' | 'composite')
		//rule=SimMorphFeatureRule | 'ditch' ('reference' | 'composite') rule=SimDitchFeatureRule)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'grab' ('reference' | 'composite') rule=SimGrabFeatureRule
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//'grab'
		public Keyword getGrabKeyword_1_0_0() { return cGrabKeyword_1_0_0; }
		
		//('reference' | 'composite')
		public Alternatives getAlternatives_1_0_1() { return cAlternatives_1_0_1; }
		
		//'reference'
		public Keyword getReferenceKeyword_1_0_1_0() { return cReferenceKeyword_1_0_1_0; }
		
		//'composite'
		public Keyword getCompositeKeyword_1_0_1_1() { return cCompositeKeyword_1_0_1_1; }
		
		//rule=SimGrabFeatureRule
		public Assignment getRuleAssignment_1_0_2() { return cRuleAssignment_1_0_2; }
		
		//SimGrabFeatureRule
		public RuleCall getRuleSimGrabFeatureRuleParserRuleCall_1_0_2_0() { return cRuleSimGrabFeatureRuleParserRuleCall_1_0_2_0; }
		
		//'morph' ('reference' | 'composite') rule=SimMorphFeatureRule
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//'morph'
		public Keyword getMorphKeyword_1_1_0() { return cMorphKeyword_1_1_0; }
		
		//('reference' | 'composite')
		public Alternatives getAlternatives_1_1_1() { return cAlternatives_1_1_1; }
		
		//'reference'
		public Keyword getReferenceKeyword_1_1_1_0() { return cReferenceKeyword_1_1_1_0; }
		
		//'composite'
		public Keyword getCompositeKeyword_1_1_1_1() { return cCompositeKeyword_1_1_1_1; }
		
		//rule=SimMorphFeatureRule
		public Assignment getRuleAssignment_1_1_2() { return cRuleAssignment_1_1_2; }
		
		//SimMorphFeatureRule
		public RuleCall getRuleSimMorphFeatureRuleParserRuleCall_1_1_2_0() { return cRuleSimMorphFeatureRuleParserRuleCall_1_1_2_0; }
		
		//'ditch' ('reference' | 'composite') rule=SimDitchFeatureRule
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//'ditch'
		public Keyword getDitchKeyword_1_2_0() { return cDitchKeyword_1_2_0; }
		
		//('reference' | 'composite')
		public Alternatives getAlternatives_1_2_1() { return cAlternatives_1_2_1; }
		
		//'reference'
		public Keyword getReferenceKeyword_1_2_1_0() { return cReferenceKeyword_1_2_1_0; }
		
		//'composite'
		public Keyword getCompositeKeyword_1_2_1_1() { return cCompositeKeyword_1_2_1_1; }
		
		//rule=SimDitchFeatureRule
		public Assignment getRuleAssignment_1_2_2() { return cRuleAssignment_1_2_2; }
		
		//SimDitchFeatureRule
		public RuleCall getRuleSimDitchFeatureRuleParserRuleCall_1_2_2_0() { return cRuleSimDitchFeatureRuleParserRuleCall_1_2_2_0; }
		
		//description=DRichText?
		public Assignment getDescriptionAssignment_2() { return cDescriptionAssignment_2; }
		
		//DRichText
		public RuleCall getDescriptionDRichTextParserRuleCall_2_0() { return cDescriptionDRichTextParserRuleCall_2_0; }
	}
	public class SimAttributeTranspositionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.sm.sim.Sim.SimAttributeTransposition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTAttributeTranspositionAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cGrabKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Alternatives cAlternatives_1_0_1 = (Alternatives)cGroup_1_0.eContents().get(1);
		private final Keyword cAttributeKeyword_1_0_1_0 = (Keyword)cAlternatives_1_0_1.eContents().get(0);
		private final Assignment cDetailAssignment_1_0_1_1 = (Assignment)cAlternatives_1_0_1.eContents().get(1);
		private final Keyword cDetailDetailKeyword_1_0_1_1_0 = (Keyword)cDetailAssignment_1_0_1_1.eContents().get(0);
		private final Assignment cRuleAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cRuleSimGrabFeatureRuleParserRuleCall_1_0_2_0 = (RuleCall)cRuleAssignment_1_0_2.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cMorphKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1_1 = (Alternatives)cGroup_1_1.eContents().get(1);
		private final Keyword cAttributeKeyword_1_1_1_0 = (Keyword)cAlternatives_1_1_1.eContents().get(0);
		private final Assignment cDetailAssignment_1_1_1_1 = (Assignment)cAlternatives_1_1_1.eContents().get(1);
		private final Keyword cDetailDetailKeyword_1_1_1_1_0 = (Keyword)cDetailAssignment_1_1_1_1.eContents().get(0);
		private final Assignment cRuleAssignment_1_1_2 = (Assignment)cGroup_1_1.eContents().get(2);
		private final RuleCall cRuleSimMorphFeatureRuleParserRuleCall_1_1_2_0 = (RuleCall)cRuleAssignment_1_1_2.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cAlternatives_1.eContents().get(2);
		private final Keyword cDitchKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Alternatives cAlternatives_1_2_1 = (Alternatives)cGroup_1_2.eContents().get(1);
		private final Keyword cAttributeKeyword_1_2_1_0 = (Keyword)cAlternatives_1_2_1.eContents().get(0);
		private final Assignment cDetailAssignment_1_2_1_1 = (Assignment)cAlternatives_1_2_1.eContents().get(1);
		private final Keyword cDetailDetailKeyword_1_2_1_1_0 = (Keyword)cDetailAssignment_1_2_1_1.eContents().get(0);
		private final Assignment cRuleAssignment_1_2_2 = (Assignment)cGroup_1_2.eContents().get(2);
		private final RuleCall cRuleSimDitchFeatureRuleParserRuleCall_1_2_2_0 = (RuleCall)cRuleAssignment_1_2_2.eContents().get(0);
		private final Assignment cDescriptionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDescriptionDRichTextParserRuleCall_2_0 = (RuleCall)cDescriptionAssignment_2.eContents().get(0);
		
		//SimAttributeTransposition TAttributeTransposition:
		//	{TAttributeTransposition} ('grab' ('attribute' | detail?='detail')? rule=SimGrabFeatureRule
		//	| 'morph' ('attribute' | detail?='detail')? rule=SimMorphFeatureRule
		//	| 'ditch' ('attribute' | detail?='detail')? rule=SimDitchFeatureRule) description=DRichText?;
		@Override public ParserRule getRule() { return rule; }
		
		//{TAttributeTransposition} ('grab' ('attribute' | detail?='detail')? rule=SimGrabFeatureRule | 'morph' ('attribute' |
		//detail?='detail')? rule=SimMorphFeatureRule | 'ditch' ('attribute' | detail?='detail')? rule=SimDitchFeatureRule)
		//description=DRichText?
		public Group getGroup() { return cGroup; }
		
		//{TAttributeTransposition}
		public Action getTAttributeTranspositionAction_0() { return cTAttributeTranspositionAction_0; }
		
		//('grab' ('attribute' | detail?='detail')? rule=SimGrabFeatureRule | 'morph' ('attribute' | detail?='detail')?
		//rule=SimMorphFeatureRule | 'ditch' ('attribute' | detail?='detail')? rule=SimDitchFeatureRule)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'grab' ('attribute' | detail?='detail')? rule=SimGrabFeatureRule
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//'grab'
		public Keyword getGrabKeyword_1_0_0() { return cGrabKeyword_1_0_0; }
		
		//('attribute' | detail?='detail')?
		public Alternatives getAlternatives_1_0_1() { return cAlternatives_1_0_1; }
		
		//'attribute'
		public Keyword getAttributeKeyword_1_0_1_0() { return cAttributeKeyword_1_0_1_0; }
		
		//detail?='detail'
		public Assignment getDetailAssignment_1_0_1_1() { return cDetailAssignment_1_0_1_1; }
		
		//'detail'
		public Keyword getDetailDetailKeyword_1_0_1_1_0() { return cDetailDetailKeyword_1_0_1_1_0; }
		
		//rule=SimGrabFeatureRule
		public Assignment getRuleAssignment_1_0_2() { return cRuleAssignment_1_0_2; }
		
		//SimGrabFeatureRule
		public RuleCall getRuleSimGrabFeatureRuleParserRuleCall_1_0_2_0() { return cRuleSimGrabFeatureRuleParserRuleCall_1_0_2_0; }
		
		//'morph' ('attribute' | detail?='detail')? rule=SimMorphFeatureRule
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//'morph'
		public Keyword getMorphKeyword_1_1_0() { return cMorphKeyword_1_1_0; }
		
		//('attribute' | detail?='detail')?
		public Alternatives getAlternatives_1_1_1() { return cAlternatives_1_1_1; }
		
		//'attribute'
		public Keyword getAttributeKeyword_1_1_1_0() { return cAttributeKeyword_1_1_1_0; }
		
		//detail?='detail'
		public Assignment getDetailAssignment_1_1_1_1() { return cDetailAssignment_1_1_1_1; }
		
		//'detail'
		public Keyword getDetailDetailKeyword_1_1_1_1_0() { return cDetailDetailKeyword_1_1_1_1_0; }
		
		//rule=SimMorphFeatureRule
		public Assignment getRuleAssignment_1_1_2() { return cRuleAssignment_1_1_2; }
		
		//SimMorphFeatureRule
		public RuleCall getRuleSimMorphFeatureRuleParserRuleCall_1_1_2_0() { return cRuleSimMorphFeatureRuleParserRuleCall_1_1_2_0; }
		
		//'ditch' ('attribute' | detail?='detail')? rule=SimDitchFeatureRule
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//'ditch'
		public Keyword getDitchKeyword_1_2_0() { return cDitchKeyword_1_2_0; }
		
		//('attribute' | detail?='detail')?
		public Alternatives getAlternatives_1_2_1() { return cAlternatives_1_2_1; }
		
		//'attribute'
		public Keyword getAttributeKeyword_1_2_1_0() { return cAttributeKeyword_1_2_1_0; }
		
		//detail?='detail'
		public Assignment getDetailAssignment_1_2_1_1() { return cDetailAssignment_1_2_1_1; }
		
		//'detail'
		public Keyword getDetailDetailKeyword_1_2_1_1_0() { return cDetailDetailKeyword_1_2_1_1_0; }
		
		//rule=SimDitchFeatureRule
		public Assignment getRuleAssignment_1_2_2() { return cRuleAssignment_1_2_2; }
		
		//SimDitchFeatureRule
		public RuleCall getRuleSimDitchFeatureRuleParserRuleCall_1_2_2_0() { return cRuleSimDitchFeatureRuleParserRuleCall_1_2_2_0; }
		
		//description=DRichText?
		public Assignment getDescriptionAssignment_2() { return cDescriptionAssignment_2; }
		
		//DRichText
		public RuleCall getDescriptionDRichTextParserRuleCall_2_0() { return cDescriptionDRichTextParserRuleCall_2_0; }
	}
	public class SimQueryTranspositionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.sm.sim.Sim.SimQueryTransposition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTQueryTranspositionAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Alternatives cAlternatives_1_0_0 = (Alternatives)cGroup_1_0.eContents().get(0);
		private final Group cGroup_1_0_0_0 = (Group)cAlternatives_1_0_0.eContents().get(0);
		private final Keyword cGrabKeyword_1_0_0_0_0 = (Keyword)cGroup_1_0_0_0.eContents().get(0);
		private final Keyword cQueryKeyword_1_0_0_0_1 = (Keyword)cGroup_1_0_0_0.eContents().get(1);
		private final Assignment cRuleAssignment_1_0_0_0_2 = (Assignment)cGroup_1_0_0_0.eContents().get(2);
		private final RuleCall cRuleSimGrabFeatureRuleParserRuleCall_1_0_0_0_2_0 = (RuleCall)cRuleAssignment_1_0_0_0_2.eContents().get(0);
		private final Group cGroup_1_0_0_1 = (Group)cAlternatives_1_0_0.eContents().get(1);
		private final Keyword cMorphKeyword_1_0_0_1_0 = (Keyword)cGroup_1_0_0_1.eContents().get(0);
		private final Keyword cQueryKeyword_1_0_0_1_1 = (Keyword)cGroup_1_0_0_1.eContents().get(1);
		private final Assignment cRuleAssignment_1_0_0_1_2 = (Assignment)cGroup_1_0_0_1.eContents().get(2);
		private final RuleCall cRuleSimMorphFeatureRuleParserRuleCall_1_0_0_1_2_0 = (RuleCall)cRuleAssignment_1_0_0_1_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Alternatives cAlternatives_1_0_2 = (Alternatives)cGroup_1_0.eContents().get(2);
		private final Keyword cAsteriskKeyword_1_0_2_0 = (Keyword)cAlternatives_1_0_2.eContents().get(0);
		private final Group cGroup_1_0_2_1 = (Group)cAlternatives_1_0_2.eContents().get(1);
		private final Assignment cParametersAssignment_1_0_2_1_0 = (Assignment)cGroup_1_0_2_1.eContents().get(0);
		private final RuleCall cParametersSimQueryParameterParserRuleCall_1_0_2_1_0_0 = (RuleCall)cParametersAssignment_1_0_2_1_0.eContents().get(0);
		private final Group cGroup_1_0_2_1_1 = (Group)cGroup_1_0_2_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_0_2_1_1_0 = (Keyword)cGroup_1_0_2_1_1.eContents().get(0);
		private final Assignment cParametersAssignment_1_0_2_1_1_1 = (Assignment)cGroup_1_0_2_1_1.eContents().get(1);
		private final RuleCall cParametersSimQueryParameterParserRuleCall_1_0_2_1_1_1_0 = (RuleCall)cParametersAssignment_1_0_2_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_0_3 = (Keyword)cGroup_1_0.eContents().get(3);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cDitchKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Keyword cQueryKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		private final Assignment cRuleAssignment_1_1_2 = (Assignment)cGroup_1_1.eContents().get(2);
		private final RuleCall cRuleSimDitchFeatureRuleParserRuleCall_1_1_2_0 = (RuleCall)cRuleAssignment_1_1_2.eContents().get(0);
		private final Assignment cDescriptionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDescriptionDRichTextParserRuleCall_2_0 = (RuleCall)cDescriptionAssignment_2.eContents().get(0);
		private final Assignment cNotesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNotesDNoteParserRuleCall_3_0 = (RuleCall)cNotesAssignment_3.eContents().get(0);
		
		//SimQueryTransposition TQueryTransposition:
		//	{TQueryTransposition} (('grab' 'query' rule=SimGrabFeatureRule
		//	| 'morph' 'query' rule=SimMorphFeatureRule)
		//	'(' ('*'
		//	| parameters+=SimQueryParameter (',' parameters+=SimQueryParameter)*)
		//	')'
		//	| 'ditch' 'query' rule=SimDitchFeatureRule) description=DRichText?
		//	notes+=DNote*;
		@Override public ParserRule getRule() { return rule; }
		
		//{TQueryTransposition} (('grab' 'query' rule=SimGrabFeatureRule | 'morph' 'query' rule=SimMorphFeatureRule) '(' ('*' |
		//parameters+=SimQueryParameter (',' parameters+=SimQueryParameter)*) ')' | 'ditch' 'query' rule=SimDitchFeatureRule)
		//description=DRichText? notes+=DNote*
		public Group getGroup() { return cGroup; }
		
		//{TQueryTransposition}
		public Action getTQueryTranspositionAction_0() { return cTQueryTranspositionAction_0; }
		
		//(('grab' 'query' rule=SimGrabFeatureRule | 'morph' 'query' rule=SimMorphFeatureRule) '(' ('*' |
		//parameters+=SimQueryParameter (',' parameters+=SimQueryParameter)*) ')' | 'ditch' 'query' rule=SimDitchFeatureRule)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//('grab' 'query' rule=SimGrabFeatureRule | 'morph' 'query' rule=SimMorphFeatureRule) '(' ('*' |
		//parameters+=SimQueryParameter (',' parameters+=SimQueryParameter)*) ')'
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//('grab' 'query' rule=SimGrabFeatureRule | 'morph' 'query' rule=SimMorphFeatureRule)
		public Alternatives getAlternatives_1_0_0() { return cAlternatives_1_0_0; }
		
		//'grab' 'query' rule=SimGrabFeatureRule
		public Group getGroup_1_0_0_0() { return cGroup_1_0_0_0; }
		
		//'grab'
		public Keyword getGrabKeyword_1_0_0_0_0() { return cGrabKeyword_1_0_0_0_0; }
		
		//'query'
		public Keyword getQueryKeyword_1_0_0_0_1() { return cQueryKeyword_1_0_0_0_1; }
		
		//rule=SimGrabFeatureRule
		public Assignment getRuleAssignment_1_0_0_0_2() { return cRuleAssignment_1_0_0_0_2; }
		
		//SimGrabFeatureRule
		public RuleCall getRuleSimGrabFeatureRuleParserRuleCall_1_0_0_0_2_0() { return cRuleSimGrabFeatureRuleParserRuleCall_1_0_0_0_2_0; }
		
		//'morph' 'query' rule=SimMorphFeatureRule
		public Group getGroup_1_0_0_1() { return cGroup_1_0_0_1; }
		
		//'morph'
		public Keyword getMorphKeyword_1_0_0_1_0() { return cMorphKeyword_1_0_0_1_0; }
		
		//'query'
		public Keyword getQueryKeyword_1_0_0_1_1() { return cQueryKeyword_1_0_0_1_1; }
		
		//rule=SimMorphFeatureRule
		public Assignment getRuleAssignment_1_0_0_1_2() { return cRuleAssignment_1_0_0_1_2; }
		
		//SimMorphFeatureRule
		public RuleCall getRuleSimMorphFeatureRuleParserRuleCall_1_0_0_1_2_0() { return cRuleSimMorphFeatureRuleParserRuleCall_1_0_0_1_2_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_0_1() { return cLeftParenthesisKeyword_1_0_1; }
		
		//('*' | parameters+=SimQueryParameter (',' parameters+=SimQueryParameter)*)
		public Alternatives getAlternatives_1_0_2() { return cAlternatives_1_0_2; }
		
		//'*'
		public Keyword getAsteriskKeyword_1_0_2_0() { return cAsteriskKeyword_1_0_2_0; }
		
		//parameters+=SimQueryParameter (',' parameters+=SimQueryParameter)*
		public Group getGroup_1_0_2_1() { return cGroup_1_0_2_1; }
		
		//parameters+=SimQueryParameter
		public Assignment getParametersAssignment_1_0_2_1_0() { return cParametersAssignment_1_0_2_1_0; }
		
		//SimQueryParameter
		public RuleCall getParametersSimQueryParameterParserRuleCall_1_0_2_1_0_0() { return cParametersSimQueryParameterParserRuleCall_1_0_2_1_0_0; }
		
		//(',' parameters+=SimQueryParameter)*
		public Group getGroup_1_0_2_1_1() { return cGroup_1_0_2_1_1; }
		
		//','
		public Keyword getCommaKeyword_1_0_2_1_1_0() { return cCommaKeyword_1_0_2_1_1_0; }
		
		//parameters+=SimQueryParameter
		public Assignment getParametersAssignment_1_0_2_1_1_1() { return cParametersAssignment_1_0_2_1_1_1; }
		
		//SimQueryParameter
		public RuleCall getParametersSimQueryParameterParserRuleCall_1_0_2_1_1_1_0() { return cParametersSimQueryParameterParserRuleCall_1_0_2_1_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_0_3() { return cRightParenthesisKeyword_1_0_3; }
		
		//'ditch' 'query' rule=SimDitchFeatureRule
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//'ditch'
		public Keyword getDitchKeyword_1_1_0() { return cDitchKeyword_1_1_0; }
		
		//'query'
		public Keyword getQueryKeyword_1_1_1() { return cQueryKeyword_1_1_1; }
		
		//rule=SimDitchFeatureRule
		public Assignment getRuleAssignment_1_1_2() { return cRuleAssignment_1_1_2; }
		
		//SimDitchFeatureRule
		public RuleCall getRuleSimDitchFeatureRuleParserRuleCall_1_1_2_0() { return cRuleSimDitchFeatureRuleParserRuleCall_1_1_2_0; }
		
		//description=DRichText?
		public Assignment getDescriptionAssignment_2() { return cDescriptionAssignment_2; }
		
		//DRichText
		public RuleCall getDescriptionDRichTextParserRuleCall_2_0() { return cDescriptionDRichTextParserRuleCall_2_0; }
		
		//notes+=DNote*
		public Assignment getNotesAssignment_3() { return cNotesAssignment_3; }
		
		//DNote
		public RuleCall getNotesDNoteParserRuleCall_3_0() { return cNotesDNoteParserRuleCall_3_0; }
	}
	public class SimQueryParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.sm.sim.Sim.SimQueryParameter");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSimQueryParameterTranspositionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cAddKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cDimQueryParameterParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//SimQueryParameter DQueryParameter:
		//	SimQueryParameterTransposition | 'add' DimQueryParameter;
		@Override public ParserRule getRule() { return rule; }
		
		//SimQueryParameterTransposition | 'add' DimQueryParameter
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//SimQueryParameterTransposition
		public RuleCall getSimQueryParameterTranspositionParserRuleCall_0() { return cSimQueryParameterTranspositionParserRuleCall_0; }
		
		//'add' DimQueryParameter
		public Group getGroup_1() { return cGroup_1; }
		
		//'add'
		public Keyword getAddKeyword_1_0() { return cAddKeyword_1_0; }
		
		//DimQueryParameter
		public RuleCall getDimQueryParameterParserRuleCall_1_1() { return cDimQueryParameterParserRuleCall_1_1; }
	}
	public class SimQueryParameterTranspositionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.sm.sim.Sim.SimQueryParameterTransposition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTQueryParameterTranspositionAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cGrabKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Assignment cRuleAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cRuleSimGrabQueryParameterRuleParserRuleCall_1_0_1_0 = (RuleCall)cRuleAssignment_1_0_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cMorphKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cRuleAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cRuleSimMorphQueryParameterRuleParserRuleCall_1_1_1_0 = (RuleCall)cRuleAssignment_1_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cAlternatives_1.eContents().get(2);
		private final Keyword cDitchKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cRuleAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cRuleSimDitchQueryParameterRuleParserRuleCall_1_2_1_0 = (RuleCall)cRuleAssignment_1_2_1.eContents().get(0);
		private final Assignment cDescriptionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDescriptionDRichTextParserRuleCall_2_0 = (RuleCall)cDescriptionAssignment_2.eContents().get(0);
		private final Assignment cNotesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNotesDNoteParserRuleCall_3_0 = (RuleCall)cNotesAssignment_3.eContents().get(0);
		
		//SimQueryParameterTransposition TQueryParameterTransposition:
		//	{TQueryParameterTransposition} ('grab' rule=SimGrabQueryParameterRule
		//	| 'morph' rule=SimMorphQueryParameterRule
		//	| 'ditch' rule=SimDitchQueryParameterRule) description=DRichText?
		//	notes+=DNote*;
		@Override public ParserRule getRule() { return rule; }
		
		//{TQueryParameterTransposition} ('grab' rule=SimGrabQueryParameterRule | 'morph' rule=SimMorphQueryParameterRule |
		//'ditch' rule=SimDitchQueryParameterRule) description=DRichText? notes+=DNote*
		public Group getGroup() { return cGroup; }
		
		//{TQueryParameterTransposition}
		public Action getTQueryParameterTranspositionAction_0() { return cTQueryParameterTranspositionAction_0; }
		
		//('grab' rule=SimGrabQueryParameterRule | 'morph' rule=SimMorphQueryParameterRule | 'ditch'
		//rule=SimDitchQueryParameterRule)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'grab' rule=SimGrabQueryParameterRule
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//'grab'
		public Keyword getGrabKeyword_1_0_0() { return cGrabKeyword_1_0_0; }
		
		//rule=SimGrabQueryParameterRule
		public Assignment getRuleAssignment_1_0_1() { return cRuleAssignment_1_0_1; }
		
		//SimGrabQueryParameterRule
		public RuleCall getRuleSimGrabQueryParameterRuleParserRuleCall_1_0_1_0() { return cRuleSimGrabQueryParameterRuleParserRuleCall_1_0_1_0; }
		
		//'morph' rule=SimMorphQueryParameterRule
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//'morph'
		public Keyword getMorphKeyword_1_1_0() { return cMorphKeyword_1_1_0; }
		
		//rule=SimMorphQueryParameterRule
		public Assignment getRuleAssignment_1_1_1() { return cRuleAssignment_1_1_1; }
		
		//SimMorphQueryParameterRule
		public RuleCall getRuleSimMorphQueryParameterRuleParserRuleCall_1_1_1_0() { return cRuleSimMorphQueryParameterRuleParserRuleCall_1_1_1_0; }
		
		//'ditch' rule=SimDitchQueryParameterRule
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//'ditch'
		public Keyword getDitchKeyword_1_2_0() { return cDitchKeyword_1_2_0; }
		
		//rule=SimDitchQueryParameterRule
		public Assignment getRuleAssignment_1_2_1() { return cRuleAssignment_1_2_1; }
		
		//SimDitchQueryParameterRule
		public RuleCall getRuleSimDitchQueryParameterRuleParserRuleCall_1_2_1_0() { return cRuleSimDitchQueryParameterRuleParserRuleCall_1_2_1_0; }
		
		//description=DRichText?
		public Assignment getDescriptionAssignment_2() { return cDescriptionAssignment_2; }
		
		//DRichText
		public RuleCall getDescriptionDRichTextParserRuleCall_2_0() { return cDescriptionDRichTextParserRuleCall_2_0; }
		
		//notes+=DNote*
		public Assignment getNotesAssignment_3() { return cNotesAssignment_3; }
		
		//DNote
		public RuleCall getNotesDNoteParserRuleCall_3_0() { return cNotesDNoteParserRuleCall_3_0; }
	}
	
	public class STypeModelKindElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.sm.sim.Sim.STypeModelKind");
		private final EnumLiteralDeclaration cBASEEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cBASEBaseKeyword_0 = (Keyword)cBASEEnumLiteralDeclaration.eContents().get(0);
		
		//enum STypeModelKind returns SystemInformationModelKind:
		//	BASE='base';
		public EnumRule getRule() { return rule; }
		
		//BASE='base'
		public EnumLiteralDeclaration getBASEEnumLiteralDeclaration() { return cBASEEnumLiteralDeclaration; }
		
		//'base'
		public Keyword getBASEBaseKeyword_0() { return cBASEBaseKeyword_0; }
	}
	public class SystemInformationModelKindElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.sm.sim.Sim.SystemInformationModelKind");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cINTERFACEEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cINTERFACEInterfaceKeyword_0_0 = (Keyword)cINTERFACEEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cCOREEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cCORECoreKeyword_1_0 = (Keyword)cCOREEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum SystemInformationModelKind:
		//	INTERFACE='interface' | CORE='core';
		public EnumRule getRule() { return rule; }
		
		//INTERFACE='interface' | CORE='core'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//INTERFACE='interface'
		public EnumLiteralDeclaration getINTERFACEEnumLiteralDeclaration_0() { return cINTERFACEEnumLiteralDeclaration_0; }
		
		//'interface'
		public Keyword getINTERFACEInterfaceKeyword_0_0() { return cINTERFACEInterfaceKeyword_0_0; }
		
		//CORE='core'
		public EnumLiteralDeclaration getCOREEnumLiteralDeclaration_1() { return cCOREEnumLiteralDeclaration_1; }
		
		//'core'
		public Keyword getCORECoreKeyword_1_0() { return cCORECoreKeyword_1_0; }
	}
	public class SimAbstractTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.sm.sim.Sim.SimAbstractType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cFALSEEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cFALSENonabstractKeyword_0_0 = (Keyword)cFALSEEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cTRUEEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cTRUEAbstractKeyword_1_0 = (Keyword)cTRUEEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum SimAbstractType returns TTristate:
		//	FALSE='nonabstract' | TRUE='abstract';
		public EnumRule getRule() { return rule; }
		
		//FALSE='nonabstract' | TRUE='abstract'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//FALSE='nonabstract'
		public EnumLiteralDeclaration getFALSEEnumLiteralDeclaration_0() { return cFALSEEnumLiteralDeclaration_0; }
		
		//'nonabstract'
		public Keyword getFALSENonabstractKeyword_0_0() { return cFALSENonabstractKeyword_0_0; }
		
		//TRUE='abstract'
		public EnumLiteralDeclaration getTRUEEnumLiteralDeclaration_1() { return cTRUEEnumLiteralDeclaration_1; }
		
		//'abstract'
		public Keyword getTRUEAbstractKeyword_1_0() { return cTRUEAbstractKeyword_1_0; }
	}
	public class SimRootEntityElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.sm.sim.Sim.SimRootEntity");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cFALSEEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cFALSENonrootKeyword_0_0 = (Keyword)cFALSEEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cTRUEEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cTRUERootKeyword_1_0 = (Keyword)cTRUEEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum SimRootEntity returns TTristate:
		//	FALSE='nonroot' | TRUE='root';
		public EnumRule getRule() { return rule; }
		
		//FALSE='nonroot' | TRUE='root'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//FALSE='nonroot'
		public EnumLiteralDeclaration getFALSEEnumLiteralDeclaration_0() { return cFALSEEnumLiteralDeclaration_0; }
		
		//'nonroot'
		public Keyword getFALSENonrootKeyword_0_0() { return cFALSENonrootKeyword_0_0; }
		
		//TRUE='root'
		public EnumLiteralDeclaration getTRUEEnumLiteralDeclaration_1() { return cTRUEEnumLiteralDeclaration_1; }
		
		//'root'
		public Keyword getTRUERootKeyword_1_0() { return cTRUERootKeyword_1_0; }
	}
	public class SimDetailTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.sm.sim.Sim.SimDetailType");
		private final EnumLiteralDeclaration cTRUEEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cTRUEDetailKeyword_0 = (Keyword)cTRUEEnumLiteralDeclaration.eContents().get(0);
		
		//enum SimDetailType returns TTristate:
		//	TRUE='detail';
		public EnumRule getRule() { return rule; }
		
		//TRUE='detail'
		public EnumLiteralDeclaration getTRUEEnumLiteralDeclaration() { return cTRUEEnumLiteralDeclaration; }
		
		//'detail'
		public Keyword getTRUEDetailKeyword_0() { return cTRUEDetailKeyword_0; }
	}
	public class SimEntityTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.sm.sim.Sim.SimEntityType");
		private final EnumLiteralDeclaration cFALSEEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cFALSEEntityKeyword_0 = (Keyword)cFALSEEnumLiteralDeclaration.eContents().get(0);
		
		//enum SimEntityType returns TTristate:
		//	FALSE='entity';
		public EnumRule getRule() { return rule; }
		
		//FALSE='entity'
		public EnumLiteralDeclaration getFALSEEnumLiteralDeclaration() { return cFALSEEnumLiteralDeclaration; }
		
		//'entity'
		public Keyword getFALSEEntityKeyword_0() { return cFALSEEntityKeyword_0; }
	}
	
	private final DNamespaceElements pDNamespace;
	private final SystemInformationModelElements pSystemInformationModel;
	private final STypeModelKindElements eSTypeModelKind;
	private final SystemInformationModelKindElements eSystemInformationModelKind;
	private final SimGrabAggregateRuleElements pSimGrabAggregateRule;
	private final SimGrabPrimitiveRuleElements pSimGrabPrimitiveRule;
	private final SimDitchPrimitiveRuleElements pSimDitchPrimitiveRule;
	private final SimGrabEnumerationRuleElements pSimGrabEnumerationRule;
	private final SimDitchEnumerationRuleElements pSimDitchEnumerationRule;
	private final SimGrabEnumerationLiteralRuleElements pSimGrabEnumerationLiteralRule;
	private final SimDitchEnumerationLiteralRuleElements pSimDitchEnumerationLiteralRule;
	private final SimGrabComplexTypeRuleElements pSimGrabComplexTypeRule;
	private final SimDitchComplexTypeRuleElements pSimDitchComplexTypeRule;
	private final SimMorphComplexTypeRuleElements pSimMorphComplexTypeRule;
	private final SimFuseComplexTypeRuleElements pSimFuseComplexTypeRule;
	private final ChangeComplexTypeElements pChangeComplexType;
	private final SimGrabFeatureRuleElements pSimGrabFeatureRule;
	private final SimMorphFeatureRuleElements pSimMorphFeatureRule;
	private final SimDitchFeatureRuleElements pSimDitchFeatureRule;
	private final SimGrabQueryParameterRuleElements pSimGrabQueryParameterRule;
	private final SimMorphQueryParameterRuleElements pSimMorphQueryParameterRule;
	private final SimDitchQueryParameterRuleElements pSimDitchQueryParameterRule;
	private final SimAbstractTypeElements eSimAbstractType;
	private final SimRootEntityElements eSimRootEntity;
	private final SimDetailTypeElements eSimDetailType;
	private final SimEntityTypeElements eSimEntityType;
	private final SimAggregateElements pSimAggregate;
	private final SimAggregateTranspositionElements pSimAggregateTransposition;
	private final DAggregateKeywordElements pDAggregateKeyword;
	private final DimTypeElements pDimType;
	private final SimTypeElements pSimType;
	private final SimPrimitiveTranspositionElements pSimPrimitiveTransposition;
	private final SimEnumerationTranspositionElements pSimEnumerationTransposition;
	private final SimLiteralElements pSimLiteral;
	private final SimLiteralTranspositionElements pSimLiteralTransposition;
	private final SimEntityTypeTranspositionElements pSimEntityTypeTransposition;
	private final SimDetailTypeTranspositionElements pSimDetailTypeTransposition;
	private final TComplexTypeFeaturesElements pTComplexTypeFeatures;
	private final SimFeatureElements pSimFeature;
	private final SimAssociationTranspositionElements pSimAssociationTransposition;
	private final SimAttributeTranspositionElements pSimAttributeTransposition;
	private final SimQueryTranspositionElements pSimQueryTransposition;
	private final SimQueryParameterElements pSimQueryParameter;
	private final SimQueryParameterTranspositionElements pSimQueryParameterTransposition;
	
	private final Grammar grammar;
	
	private final DimGrammarAccess gaDim;
	
	private final DmxGrammarAccess gaDmx;

	@Inject
	public SimGrammarAccess(GrammarProvider grammarProvider,
			DimGrammarAccess gaDim,
			DmxGrammarAccess gaDmx) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaDim = gaDim;
		this.gaDmx = gaDmx;
		this.pDNamespace = new DNamespaceElements();
		this.pSystemInformationModel = new SystemInformationModelElements();
		this.eSTypeModelKind = new STypeModelKindElements();
		this.eSystemInformationModelKind = new SystemInformationModelKindElements();
		this.pSimGrabAggregateRule = new SimGrabAggregateRuleElements();
		this.pSimGrabPrimitiveRule = new SimGrabPrimitiveRuleElements();
		this.pSimDitchPrimitiveRule = new SimDitchPrimitiveRuleElements();
		this.pSimGrabEnumerationRule = new SimGrabEnumerationRuleElements();
		this.pSimDitchEnumerationRule = new SimDitchEnumerationRuleElements();
		this.pSimGrabEnumerationLiteralRule = new SimGrabEnumerationLiteralRuleElements();
		this.pSimDitchEnumerationLiteralRule = new SimDitchEnumerationLiteralRuleElements();
		this.pSimGrabComplexTypeRule = new SimGrabComplexTypeRuleElements();
		this.pSimDitchComplexTypeRule = new SimDitchComplexTypeRuleElements();
		this.pSimMorphComplexTypeRule = new SimMorphComplexTypeRuleElements();
		this.pSimFuseComplexTypeRule = new SimFuseComplexTypeRuleElements();
		this.pChangeComplexType = new ChangeComplexTypeElements();
		this.pSimGrabFeatureRule = new SimGrabFeatureRuleElements();
		this.pSimMorphFeatureRule = new SimMorphFeatureRuleElements();
		this.pSimDitchFeatureRule = new SimDitchFeatureRuleElements();
		this.pSimGrabQueryParameterRule = new SimGrabQueryParameterRuleElements();
		this.pSimMorphQueryParameterRule = new SimMorphQueryParameterRuleElements();
		this.pSimDitchQueryParameterRule = new SimDitchQueryParameterRuleElements();
		this.eSimAbstractType = new SimAbstractTypeElements();
		this.eSimRootEntity = new SimRootEntityElements();
		this.eSimDetailType = new SimDetailTypeElements();
		this.eSimEntityType = new SimEntityTypeElements();
		this.pSimAggregate = new SimAggregateElements();
		this.pSimAggregateTransposition = new SimAggregateTranspositionElements();
		this.pDAggregateKeyword = new DAggregateKeywordElements();
		this.pDimType = new DimTypeElements();
		this.pSimType = new SimTypeElements();
		this.pSimPrimitiveTransposition = new SimPrimitiveTranspositionElements();
		this.pSimEnumerationTransposition = new SimEnumerationTranspositionElements();
		this.pSimLiteral = new SimLiteralElements();
		this.pSimLiteralTransposition = new SimLiteralTranspositionElements();
		this.pSimEntityTypeTransposition = new SimEntityTypeTranspositionElements();
		this.pSimDetailTypeTransposition = new SimDetailTypeTranspositionElements();
		this.pTComplexTypeFeatures = new TComplexTypeFeaturesElements();
		this.pSimFeature = new SimFeatureElements();
		this.pSimAssociationTransposition = new SimAssociationTranspositionElements();
		this.pSimAttributeTransposition = new SimAttributeTranspositionElements();
		this.pSimQueryTransposition = new SimQueryTranspositionElements();
		this.pSimQueryParameter = new SimQueryParameterElements();
		this.pSimQueryParameterTransposition = new SimQueryParameterTranspositionElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("com.mimacom.ddd.sm.sim.Sim".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public DimGrammarAccess getDimGrammarAccess() {
		return gaDim;
	}
	
	public DmxGrammarAccess getDmxGrammarAccess() {
		return gaDmx;
	}

	
	//@Override
	//DNamespace:
	//	'system'
	//	name=DQualifiedName
	//	imports+=DImport*
	//	model=SystemInformationModel;
	public DNamespaceElements getDNamespaceAccess() {
		return pDNamespace;
	}
	
	public ParserRule getDNamespaceRule() {
		return getDNamespaceAccess().getRule();
	}
	
	//SystemInformationModel:
	//	(kind=STypeModelKind 'type' 'model'
	//	| kind=SystemInformationModelKind 'information' 'model') name=ID
	//	^generate?='generate'?
	//	description=DRichText?
	//	notes+=DNote*
	//	'{' (types+=SimType | aggregates+=SimAggregate)*
	//	'}';
	public SystemInformationModelElements getSystemInformationModelAccess() {
		return pSystemInformationModel;
	}
	
	public ParserRule getSystemInformationModelRule() {
		return getSystemInformationModelAccess().getRule();
	}
	
	//enum STypeModelKind returns SystemInformationModelKind:
	//	BASE='base';
	public STypeModelKindElements getSTypeModelKindAccess() {
		return eSTypeModelKind;
	}
	
	public EnumRule getSTypeModelKindRule() {
		return getSTypeModelKindAccess().getRule();
	}
	
	//enum SystemInformationModelKind:
	//	INTERFACE='interface' | CORE='core';
	public SystemInformationModelKindElements getSystemInformationModelKindAccess() {
		return eSystemInformationModelKind;
	}
	
	public EnumRule getSystemInformationModelKindRule() {
		return getSystemInformationModelKindAccess().getRule();
	}
	
	///*
	// * RULEs
	// */ SimGrabAggregateRule TGrabAggregateRule:
	//	source=[DimAggregate|DQualifiedName] ('as' renameTo=ID)?;
	public SimGrabAggregateRuleElements getSimGrabAggregateRuleAccess() {
		return pSimGrabAggregateRule;
	}
	
	public ParserRule getSimGrabAggregateRuleRule() {
		return getSimGrabAggregateRuleAccess().getRule();
	}
	
	//SimGrabPrimitiveRule TGrabRule:
	//	source=[DimPrimitive|DQualifiedName] ('as' renameTo=ID)?;
	public SimGrabPrimitiveRuleElements getSimGrabPrimitiveRuleAccess() {
		return pSimGrabPrimitiveRule;
	}
	
	public ParserRule getSimGrabPrimitiveRuleRule() {
		return getSimGrabPrimitiveRuleAccess().getRule();
	}
	
	//SimDitchPrimitiveRule TDitchRule:
	//	source=[DimPrimitive|DQualifiedName];
	public SimDitchPrimitiveRuleElements getSimDitchPrimitiveRuleAccess() {
		return pSimDitchPrimitiveRule;
	}
	
	public ParserRule getSimDitchPrimitiveRuleRule() {
		return getSimDitchPrimitiveRuleAccess().getRule();
	}
	
	//SimGrabEnumerationRule TGrabRule:
	//	source=[DimEnumeration|DQualifiedName] ('as' renameTo=ID)?;
	public SimGrabEnumerationRuleElements getSimGrabEnumerationRuleAccess() {
		return pSimGrabEnumerationRule;
	}
	
	public ParserRule getSimGrabEnumerationRuleRule() {
		return getSimGrabEnumerationRuleAccess().getRule();
	}
	
	//SimDitchEnumerationRule TDitchRule:
	//	source=[DimEnumeration|DQualifiedName];
	public SimDitchEnumerationRuleElements getSimDitchEnumerationRuleAccess() {
		return pSimDitchEnumerationRule;
	}
	
	public ParserRule getSimDitchEnumerationRuleRule() {
		return getSimDitchEnumerationRuleAccess().getRule();
	}
	
	//SimGrabEnumerationLiteralRule TGrabRule:
	//	source=[DimLiteral] ('as' renameTo=ID)?;
	public SimGrabEnumerationLiteralRuleElements getSimGrabEnumerationLiteralRuleAccess() {
		return pSimGrabEnumerationLiteralRule;
	}
	
	public ParserRule getSimGrabEnumerationLiteralRuleRule() {
		return getSimGrabEnumerationLiteralRuleAccess().getRule();
	}
	
	//SimDitchEnumerationLiteralRule TDitchRule:
	//	source=[DimLiteral];
	public SimDitchEnumerationLiteralRuleElements getSimDitchEnumerationLiteralRuleAccess() {
		return pSimDitchEnumerationLiteralRule;
	}
	
	public ParserRule getSimDitchEnumerationLiteralRuleRule() {
		return getSimDitchEnumerationLiteralRuleAccess().getRule();
	}
	
	//SimGrabComplexTypeRule TGrabRule:
	//	source=[DimComplexType|DQualifiedName] ('as' renameTo=ID)?;
	public SimGrabComplexTypeRuleElements getSimGrabComplexTypeRuleAccess() {
		return pSimGrabComplexTypeRule;
	}
	
	public ParserRule getSimGrabComplexTypeRuleRule() {
		return getSimGrabComplexTypeRuleAccess().getRule();
	}
	
	//SimDitchComplexTypeRule TDitchRule:
	//	source=[DimComplexType|DQualifiedName];
	public SimDitchComplexTypeRuleElements getSimDitchComplexTypeRuleAccess() {
		return pSimDitchComplexTypeRule;
	}
	
	public ParserRule getSimDitchComplexTypeRuleRule() {
		return getSimDitchComplexTypeRuleAccess().getRule();
	}
	
	//SimMorphComplexTypeRule TMorphRule:
	//	source=[DimComplexType|DQualifiedName] ChangeComplexType;
	public SimMorphComplexTypeRuleElements getSimMorphComplexTypeRuleAccess() {
		return pSimMorphComplexTypeRule;
	}
	
	public ParserRule getSimMorphComplexTypeRuleRule() {
		return getSimMorphComplexTypeRuleAccess().getRule();
	}
	
	//SimFuseComplexTypeRule TFuseRule:
	//	source=[DimComplexType|DQualifiedName] ('and' otherSources+=[DComplexType|DQualifiedName])+
	//	ChangeComplexType;
	public SimFuseComplexTypeRuleElements getSimFuseComplexTypeRuleAccess() {
		return pSimFuseComplexTypeRule;
	}
	
	public ParserRule getSimFuseComplexTypeRuleRule() {
		return getSimFuseComplexTypeRuleAccess().getRule();
	}
	
	//fragment ChangeComplexType returns TStructureChangingRule:
	//	'to'
	//	abstract=SimAbstractType? (detail=SimDetailType
	//	| rootEntity=SimRootEntity? detail=SimEntityType) renameTo=ID? ('extends' extendFrom=[DComplexType])?;
	public ChangeComplexTypeElements getChangeComplexTypeAccess() {
		return pChangeComplexType;
	}
	
	public ParserRule getChangeComplexTypeRule() {
		return getChangeComplexTypeAccess().getRule();
	}
	
	//SimGrabFeatureRule TGrabRule:
	//	source=[DimFeature] ('as' renameTo=ID)?;
	public SimGrabFeatureRuleElements getSimGrabFeatureRuleAccess() {
		return pSimGrabFeatureRule;
	}
	
	public ParserRule getSimGrabFeatureRuleRule() {
		return getSimGrabFeatureRuleAccess().getRule();
	}
	
	//SimMorphFeatureRule TMorphRule:
	//	source=[DimFeature]
	//	'to' (renameTo=ID ':')?
	//	retypeTo=[DType] remultiplyTo=DMultiplicity?;
	public SimMorphFeatureRuleElements getSimMorphFeatureRuleAccess() {
		return pSimMorphFeatureRule;
	}
	
	public ParserRule getSimMorphFeatureRuleRule() {
		return getSimMorphFeatureRuleAccess().getRule();
	}
	
	//SimDitchFeatureRule TDitchRule:
	//	source=[DimFeature];
	public SimDitchFeatureRuleElements getSimDitchFeatureRuleAccess() {
		return pSimDitchFeatureRule;
	}
	
	public ParserRule getSimDitchFeatureRuleRule() {
		return getSimDitchFeatureRuleAccess().getRule();
	}
	
	//SimGrabQueryParameterRule TGrabRule:
	//	source=[DimQueryParameter] ('as' renameTo=ID)?;
	public SimGrabQueryParameterRuleElements getSimGrabQueryParameterRuleAccess() {
		return pSimGrabQueryParameterRule;
	}
	
	public ParserRule getSimGrabQueryParameterRuleRule() {
		return getSimGrabQueryParameterRuleAccess().getRule();
	}
	
	//SimMorphQueryParameterRule TMorphRule:
	//	source=[DimQueryParameter]
	//	'to' (renameTo=ID ':')?
	//	retypeTo=[DType] remultiplyTo=DMultiplicity?;
	public SimMorphQueryParameterRuleElements getSimMorphQueryParameterRuleAccess() {
		return pSimMorphQueryParameterRule;
	}
	
	public ParserRule getSimMorphQueryParameterRuleRule() {
		return getSimMorphQueryParameterRuleAccess().getRule();
	}
	
	//SimDitchQueryParameterRule TDitchRule:
	//	source=[DimQueryParameter];
	public SimDitchQueryParameterRuleElements getSimDitchQueryParameterRuleAccess() {
		return pSimDitchQueryParameterRule;
	}
	
	public ParserRule getSimDitchQueryParameterRuleRule() {
		return getSimDitchQueryParameterRuleAccess().getRule();
	}
	
	//enum SimAbstractType returns TTristate:
	//	FALSE='nonabstract' | TRUE='abstract';
	public SimAbstractTypeElements getSimAbstractTypeAccess() {
		return eSimAbstractType;
	}
	
	public EnumRule getSimAbstractTypeRule() {
		return getSimAbstractTypeAccess().getRule();
	}
	
	//enum SimRootEntity returns TTristate:
	//	FALSE='nonroot' | TRUE='root';
	public SimRootEntityElements getSimRootEntityAccess() {
		return eSimRootEntity;
	}
	
	public EnumRule getSimRootEntityRule() {
		return getSimRootEntityAccess().getRule();
	}
	
	//enum SimDetailType returns TTristate:
	//	TRUE='detail';
	public SimDetailTypeElements getSimDetailTypeAccess() {
		return eSimDetailType;
	}
	
	public EnumRule getSimDetailTypeRule() {
		return getSimDetailTypeAccess().getRule();
	}
	
	//enum SimEntityType returns TTristate:
	//	FALSE='entity';
	public SimEntityTypeElements getSimEntityTypeAccess() {
		return eSimEntityType;
	}
	
	public EnumRule getSimEntityTypeRule() {
		return getSimEntityTypeAccess().getRule();
	}
	
	///*
	// * AGGREGATES
	// */ SimAggregate DAggregate:
	//	SimAggregateTransposition | DimAggregate;
	public SimAggregateElements getSimAggregateAccess() {
		return pSimAggregate;
	}
	
	public ParserRule getSimAggregateRule() {
		return getSimAggregateAccess().getRule();
	}
	
	//SimAggregateTransposition TAggregateTransposition:
	//	{TAggregateTransposition}
	//	'grab' 'aggregate' rule=SimGrabAggregateRule
	//	description=DRichText? ('{' (features+=SimQueryTransposition | 'add' 'query' features+=DimQuery)*
	//	types+=SimType*
	//	'}')?;
	public SimAggregateTranspositionElements getSimAggregateTranspositionAccess() {
		return pSimAggregateTransposition;
	}
	
	public ParserRule getSimAggregateTranspositionRule() {
		return getSimAggregateTranspositionAccess().getRule();
	}
	
	//@Override
	//DAggregateKeyword:
	//	'aggregate';
	public DAggregateKeywordElements getDAggregateKeywordAccess() {
		return pDAggregateKeyword;
	}
	
	public ParserRule getDAggregateKeywordRule() {
		return getDAggregateKeywordAccess().getRule();
	}
	
	//@Override
	//DimType DType:
	//	SimPrimitiveTransposition | DimPrimitive
	//	| SimEnumerationTransposition | DimEnumeration
	//	| SimEntityTypeTransposition | DimEntityType
	//	| SimDetailTypeTransposition | DimDetailType;
	public DimTypeElements getDimTypeAccess() {
		return pDimType;
	}
	
	public ParserRule getDimTypeRule() {
		return getDimTypeAccess().getRule();
	}
	
	//SimType DType:
	//	SimPrimitiveTransposition | 'add' DimPrimitive
	//	| SimEnumerationTransposition | 'add' DimEnumeration
	//	| SimEntityTypeTransposition | 'add' DimEntityType
	//	| SimDetailTypeTransposition | 'add' DimDetailType;
	public SimTypeElements getSimTypeAccess() {
		return pSimType;
	}
	
	public ParserRule getSimTypeRule() {
		return getSimTypeAccess().getRule();
	}
	
	//SimPrimitiveTransposition TPrimitiveTransposition:
	//	{TPrimitiveTransposition} ('grab' 'primitive' rule=SimGrabPrimitiveRule
	//	| 'ditch' 'primitive' rule=SimDitchPrimitiveRule) description=DRichText?
	//	notes+=DNote* ('{' ('add' constraints+=DConstraint)*
	//	'}')?;
	public SimPrimitiveTranspositionElements getSimPrimitiveTranspositionAccess() {
		return pSimPrimitiveTransposition;
	}
	
	public ParserRule getSimPrimitiveTranspositionRule() {
		return getSimPrimitiveTranspositionAccess().getRule();
	}
	
	//SimEnumerationTransposition TEnumerationTransposition:
	//	{TEnumerationTransposition} ('grab' 'enumeration' rule=SimGrabEnumerationRule
	//	| 'ditch' 'enumeration' rule=SimDitchEnumerationRule) description=DRichText?
	//	notes+=DNote* ('{' (literals+=SimLiteral (',' literals+=SimLiteral)*)? ('add' constraints+=DConstraint)*
	//	'}')?;
	public SimEnumerationTranspositionElements getSimEnumerationTranspositionAccess() {
		return pSimEnumerationTransposition;
	}
	
	public ParserRule getSimEnumerationTranspositionRule() {
		return getSimEnumerationTranspositionAccess().getRule();
	}
	
	//SimLiteral DLiteral:
	//	SimLiteralTransposition | 'add' DimLiteral;
	public SimLiteralElements getSimLiteralAccess() {
		return pSimLiteral;
	}
	
	public ParserRule getSimLiteralRule() {
		return getSimLiteralAccess().getRule();
	}
	
	//SimLiteralTransposition TLiteralTransposition:
	//	{TLiteralTransposition} ('grab' rule=SimGrabEnumerationLiteralRule
	//	| 'ditch' rule=SimDitchEnumerationLiteralRule) description=DRichText?
	//	notes+=DNote*;
	public SimLiteralTranspositionElements getSimLiteralTranspositionAccess() {
		return pSimLiteralTransposition;
	}
	
	public ParserRule getSimLiteralTranspositionRule() {
		return getSimLiteralTranspositionAccess().getRule();
	}
	
	//SimEntityTypeTransposition TEntityTypeTransposition:
	//	{TEntityTypeTransposition} ('grab' root?='root'? 'entity' rule=SimGrabComplexTypeRule
	//	| 'ditch' root?='root'? 'entity' rule=SimDitchComplexTypeRule
	//	| 'morph' root?='root'? 'entity' rule=SimMorphComplexTypeRule
	//	| 'fuse' root?='root'? 'entity' rule=SimFuseComplexTypeRule) description=DRichText?
	//	notes+=DNote*
	//	TComplexTypeFeatures?;
	public SimEntityTypeTranspositionElements getSimEntityTypeTranspositionAccess() {
		return pSimEntityTypeTransposition;
	}
	
	public ParserRule getSimEntityTypeTranspositionRule() {
		return getSimEntityTypeTranspositionAccess().getRule();
	}
	
	//SimDetailTypeTransposition TDetailTypeTransposition:
	//	{TDetailTypeTransposition} ('grab' 'detail' rule=SimGrabComplexTypeRule
	//	| 'ditch' 'detail' rule=SimDitchComplexTypeRule
	//	| 'morph' 'detail' rule=SimMorphComplexTypeRule
	//	| 'fuse' 'detail' rule=SimFuseComplexTypeRule) description=DRichText?
	//	notes+=DNote*
	//	TComplexTypeFeatures?;
	public SimDetailTypeTranspositionElements getSimDetailTypeTranspositionAccess() {
		return pSimDetailTypeTransposition;
	}
	
	public ParserRule getSimDetailTypeTranspositionRule() {
		return getSimDetailTypeTranspositionAccess().getRule();
	}
	
	//fragment TComplexTypeFeatures returns DComplexType:
	//	'{' (features+=SimFeature | 'add' constraints+=DConstraint)*
	//	'}';
	public TComplexTypeFeaturesElements getTComplexTypeFeaturesAccess() {
		return pTComplexTypeFeatures;
	}
	
	public ParserRule getTComplexTypeFeaturesRule() {
		return getTComplexTypeFeaturesAccess().getRule();
	}
	
	///*
	// * FEATURES
	// */ SimFeature DFeature:
	//	SimAssociationTransposition | 'add' DimAssociation
	//	| SimAttributeTransposition | 'add' DimAttribute
	//	| SimQueryTransposition | 'add' DimQuery;
	public SimFeatureElements getSimFeatureAccess() {
		return pSimFeature;
	}
	
	public ParserRule getSimFeatureRule() {
		return getSimFeatureAccess().getRule();
	}
	
	//SimAssociationTransposition TAssociationTransposition:
	//	{TAssociationTransposition} ('grab' ('reference' | 'composite') rule=SimGrabFeatureRule
	//	| 'morph' ('reference' | 'composite') rule=SimMorphFeatureRule
	//	| 'ditch' ('reference' | 'composite') rule=SimDitchFeatureRule) description=DRichText?;
	public SimAssociationTranspositionElements getSimAssociationTranspositionAccess() {
		return pSimAssociationTransposition;
	}
	
	public ParserRule getSimAssociationTranspositionRule() {
		return getSimAssociationTranspositionAccess().getRule();
	}
	
	//SimAttributeTransposition TAttributeTransposition:
	//	{TAttributeTransposition} ('grab' ('attribute' | detail?='detail')? rule=SimGrabFeatureRule
	//	| 'morph' ('attribute' | detail?='detail')? rule=SimMorphFeatureRule
	//	| 'ditch' ('attribute' | detail?='detail')? rule=SimDitchFeatureRule) description=DRichText?;
	public SimAttributeTranspositionElements getSimAttributeTranspositionAccess() {
		return pSimAttributeTransposition;
	}
	
	public ParserRule getSimAttributeTranspositionRule() {
		return getSimAttributeTranspositionAccess().getRule();
	}
	
	//SimQueryTransposition TQueryTransposition:
	//	{TQueryTransposition} (('grab' 'query' rule=SimGrabFeatureRule
	//	| 'morph' 'query' rule=SimMorphFeatureRule)
	//	'(' ('*'
	//	| parameters+=SimQueryParameter (',' parameters+=SimQueryParameter)*)
	//	')'
	//	| 'ditch' 'query' rule=SimDitchFeatureRule) description=DRichText?
	//	notes+=DNote*;
	public SimQueryTranspositionElements getSimQueryTranspositionAccess() {
		return pSimQueryTransposition;
	}
	
	public ParserRule getSimQueryTranspositionRule() {
		return getSimQueryTranspositionAccess().getRule();
	}
	
	//SimQueryParameter DQueryParameter:
	//	SimQueryParameterTransposition | 'add' DimQueryParameter;
	public SimQueryParameterElements getSimQueryParameterAccess() {
		return pSimQueryParameter;
	}
	
	public ParserRule getSimQueryParameterRule() {
		return getSimQueryParameterAccess().getRule();
	}
	
	//SimQueryParameterTransposition TQueryParameterTransposition:
	//	{TQueryParameterTransposition} ('grab' rule=SimGrabQueryParameterRule
	//	| 'morph' rule=SimMorphQueryParameterRule
	//	| 'ditch' rule=SimDitchQueryParameterRule) description=DRichText?
	//	notes+=DNote*;
	public SimQueryParameterTranspositionElements getSimQueryParameterTranspositionAccess() {
		return pSimQueryParameterTransposition;
	}
	
	public ParserRule getSimQueryParameterTranspositionRule() {
		return getSimQueryParameterTranspositionAccess().getRule();
	}
	
	//DomainInformationModel:
	//	'information' 'model'
	//	name=ID ('alias' aliases+=ID)*
	//	description=DRichText?
	//	notes+=DNote*
	//	'{' (types+=super::DimType | aggregates+=DimAggregate)*
	//	'}';
	public DimGrammarAccess.DomainInformationModelElements getDomainInformationModelAccess() {
		return gaDim.getDomainInformationModelAccess();
	}
	
	public ParserRule getDomainInformationModelRule() {
		return getDomainInformationModelAccess().getRule();
	}
	
	//DimAggregate DAggregate:
	//	super::DAggregateKeyword {DimAggregate} name=ID ('alias' aliases+=ID)*
	//	description=DRichText?
	//	notes+=DNote*
	//	'{' ('query' features+=DimQuery)*
	//	types+=super::DimType*
	//	'}';
	public DimGrammarAccess.DimAggregateElements getDimAggregateAccess() {
		return gaDim.getDimAggregateAccess();
	}
	
	public ParserRule getDimAggregateRule() {
		return getDimAggregateAccess().getRule();
	}
	
	//DConstraint DNamedPredicate:
	//	'constraint'
	//	name=ID ('alias' aliases+=ID)*
	//	':'
	//	predicate=DExpression
	//	description=DRichText?
	//	notes+=DNote*;
	public DimGrammarAccess.DConstraintElements getDConstraintAccess() {
		return gaDim.getDConstraintAccess();
	}
	
	public ParserRule getDConstraintRule() {
		return getDConstraintAccess().getRule();
	}
	
	//DimPrimitive DPrimitive:
	//	{DimPrimitive}
	//	'primitive'
	//	name=ID ('alias' aliases+=ID)*
	//	'redefines' redefines=[DmxArchetype] description=DRichText?
	//	notes+=DNote* ('{'
	//	constraints+=DConstraint+
	//	'}')?;
	public DimGrammarAccess.DimPrimitiveElements getDimPrimitiveAccess() {
		return gaDim.getDimPrimitiveAccess();
	}
	
	public ParserRule getDimPrimitiveRule() {
		return getDimPrimitiveAccess().getRule();
	}
	
	//DimEnumeration DEnumeration:
	//	{DimEnumeration}
	//	'enumeration'
	//	name=ID ('alias' aliases+=ID)*
	//	description=DRichText?
	//	notes+=DNote*
	//	'{' (literals+=DimLiteral (',' literals+=DimLiteral)*)?
	//	constraints+=DConstraint*
	//	'}';
	public DimGrammarAccess.DimEnumerationElements getDimEnumerationAccess() {
		return gaDim.getDimEnumerationAccess();
	}
	
	public ParserRule getDimEnumerationRule() {
		return getDimEnumerationAccess().getRule();
	}
	
	//DimLiteral DLiteral:
	//	{DimLiteral} name=ID ('alias' aliases+=ID)*
	//	description=DRichText?
	//	notes+=DNote*;
	public DimGrammarAccess.DimLiteralElements getDimLiteralAccess() {
		return gaDim.getDimLiteralAccess();
	}
	
	public ParserRule getDimLiteralRule() {
		return getDimLiteralAccess().getRule();
	}
	
	//DimEntityType DEntityType:
	//	{DimEntityType} abstract?='abstract'?
	//	root?='main'? ('entity'
	//	| nature=DEntityNatureAutonomous 'entity' // validation: cannot be abstract
	//	| nature=DEntityNatureRelationship) DimComplexType
	//	'{' ('states'
	//	'{'
	//	states+=DState (',' states+=DState)*
	//	'}' ('events'
	//	'{'
	//	events+=DStateEvent (',' events+=DStateEvent)*
	//	'}')?)? (features+=DimFeature | constraints+=DConstraint)*
	//	'}';
	public DimGrammarAccess.DimEntityTypeElements getDimEntityTypeAccess() {
		return gaDim.getDimEntityTypeAccess();
	}
	
	public ParserRule getDimEntityTypeRule() {
		return getDimEntityTypeAccess().getRule();
	}
	
	//enum DEntityNatureAutonomous returns DEntityNature:
	//	AUTONOMOUS_ENTITY='autonomous';
	public DimGrammarAccess.DEntityNatureAutonomousElements getDEntityNatureAutonomousAccess() {
		return gaDim.getDEntityNatureAutonomousAccess();
	}
	
	public EnumRule getDEntityNatureAutonomousRule() {
		return getDEntityNatureAutonomousAccess().getRule();
	}
	
	//enum DEntityNatureRelationship returns DEntityNature:
	//	RELATIONSHIP='relationship';
	public DimGrammarAccess.DEntityNatureRelationshipElements getDEntityNatureRelationshipAccess() {
		return gaDim.getDEntityNatureRelationshipAccess();
	}
	
	public EnumRule getDEntityNatureRelationshipRule() {
		return getDEntityNatureRelationshipAccess().getRule();
	}
	
	//DState:
	//	name=ID;
	public DimGrammarAccess.DStateElements getDStateAccess() {
		return gaDim.getDStateAccess();
	}
	
	public ParserRule getDStateRule() {
		return getDStateAccess().getRule();
	}
	
	//DStateEvent:
	//	name=ID;
	public DimGrammarAccess.DStateEventElements getDStateEventAccess() {
		return gaDim.getDStateEventAccess();
	}
	
	public ParserRule getDStateEventRule() {
		return getDStateEventAccess().getRule();
	}
	
	//DimDetailType DDetailType:
	//	{DimDetailType} abstract?='abstract'?
	//	'detail'
	//	DimComplexType
	//	'{' (features+=DimFeature | constraints+=DConstraint)*
	//	'}';
	public DimGrammarAccess.DimDetailTypeElements getDimDetailTypeAccess() {
		return gaDim.getDimDetailTypeAccess();
	}
	
	public ParserRule getDimDetailTypeRule() {
		return getDimDetailTypeAccess().getRule();
	}
	
	//fragment DimComplexType returns DComplexType:
	//	name=ID ('alias' aliases+=ID)* ('extends' superType=[DComplexType])?
	//	description=DRichText?
	//	notes+=DNote*;
	public DimGrammarAccess.DimComplexTypeElements getDimComplexTypeAccess() {
		return gaDim.getDimComplexTypeAccess();
	}
	
	public ParserRule getDimComplexTypeRule() {
		return getDimComplexTypeAccess().getRule();
	}
	
	//DimFeature DFeature:
	//	DimAssociation | DimAttribute | DimQuery;
	public DimGrammarAccess.DimFeatureElements getDimFeatureAccess() {
		return gaDim.getDimFeatureAccess();
	}
	
	public ParserRule getDimFeatureRule() {
		return getDimFeatureAccess().getRule();
	}
	
	//DimAssociation DAssociation:
	//	{DimAssociation} derived?='derived'?
	//	name=ID ('alias' aliases+=ID)* (kind=DAssociationKind | kind=DAssociationKindInverse "contains") type=[DEntityType]? // optional: allows parser to continue parsing potential targets, caught by validation
	//	multiplicity=DMultiplicity?
	//	description=DRichText?
	//	notes+=DNote*;
	public DimGrammarAccess.DimAssociationElements getDimAssociationAccess() {
		return gaDim.getDimAssociationAccess();
	}
	
	public ParserRule getDimAssociationRule() {
		return getDimAssociationAccess().getRule();
	}
	
	//enum DAssociationKind:
	//	REFERENCE="references" | COMPOSITE="contains";
	public DimGrammarAccess.DAssociationKindElements getDAssociationKindAccess() {
		return gaDim.getDAssociationKindAccess();
	}
	
	public EnumRule getDAssociationKindRule() {
		return getDAssociationKindAccess().getRule();
	}
	
	//enum DAssociationKindInverse returns DAssociationKind:
	//	INVERSE_COMPOSITE="inverse";
	public DimGrammarAccess.DAssociationKindInverseElements getDAssociationKindInverseAccess() {
		return gaDim.getDAssociationKindInverseAccess();
	}
	
	public EnumRule getDAssociationKindInverseRule() {
		return getDAssociationKindInverseAccess().getRule();
	}
	
	//DimAttribute DAttribute:
	//	{DimAttribute} detail?='detail'?
	//	name=ID ('alias' aliases+=ID)*
	//	':'
	//	type=[DType]? // optional: allows parser to continue parsing potential targets, caught by validation
	//	multiplicity=DMultiplicity?
	//	key?='key'?
	//	description=DRichText?
	//	notes+=DNote*;
	public DimGrammarAccess.DimAttributeElements getDimAttributeAccess() {
		return gaDim.getDimAttributeAccess();
	}
	
	public ParserRule getDimAttributeRule() {
		return getDimAttributeAccess().getRule();
	}
	
	//DimQuery DQuery:
	//	{DimQuery} name=ID ('alias' aliases+=ID)*
	//	'(' (parameters+=DimQueryParameter ("," parameters+=DimQueryParameter)*)? ')'
	//	':'
	//	type=[DType]? // optional: allows parser to continue parsing potential targets, caught by validation
	//	multiplicity=DMultiplicity? ('returns' ^returns=DExpression)?
	//	description=DRichText?
	//	notes+=DNote*;
	public DimGrammarAccess.DimQueryElements getDimQueryAccess() {
		return gaDim.getDimQueryAccess();
	}
	
	public ParserRule getDimQueryRule() {
		return getDimQueryAccess().getRule();
	}
	
	//DimQueryParameter DQueryParameter:
	//	{DimQueryParameter} name=ID
	//	':'
	//	type=[DType]? // optional: allows parser to continue parsing potential targets, caught by validation
	//	multiplicity=DMultiplicity?
	//	description=DRichText?
	//	notes+=DNote*;
	public DimGrammarAccess.DimQueryParameterElements getDimQueryParameterAccess() {
		return gaDim.getDimQueryParameterAccess();
	}
	
	public ParserRule getDimQueryParameterRule() {
		return getDimQueryParameterAccess().getRule();
	}
	
	//DNote:
	//	'NOTE'
	//	name=ID
	//	'{'
	//	text=DRichText
	//	color=DNoteColor?
	//	'}';
	public DmxGrammarAccess.DNoteElements getDNoteAccess() {
		return gaDmx.getDNoteAccess();
	}
	
	public ParserRule getDNoteRule() {
		return getDNoteAccess().getRule();
	}
	
	//enum DNoteColor:
	//	WHITE='white' | RED='red' | ORANGE='orange' | YELLOW='yellow' | GREEN='green' | BLUE='blue' | PINK='pink' |
	//	GREY='grey';
	public DmxGrammarAccess.DNoteColorElements getDNoteColorAccess() {
		return gaDmx.getDNoteColorAccess();
	}
	
	public EnumRule getDNoteColorRule() {
		return getDNoteColorAccess().getRule();
	}
	
	//DmxModel:
	//	{DmxModel} types+=DmxArchetype*
	//	filters+=DmxFilter*
	//	// For unit-testing purposes:
	//	tests+=DmxTest*;
	public DmxGrammarAccess.DmxModelElements getDmxModelAccess() {
		return gaDmx.getDmxModelAccess();
	}
	
	public ParserRule getDmxModelRule() {
		return getDmxModelAccess().getRule();
	}
	
	//DImport:
	//	'import' importedNamespace=DQualifiedNameWithWildcard;
	public DmxGrammarAccess.DImportElements getDImportAccess() {
		return gaDmx.getDImportAccess();
	}
	
	public ParserRule getDImportRule() {
		return getDImportAccess().getRule();
	}
	
	///* 
	// * Testing
	// */ DmxTest:
	//	'test'
	//	name=ID ('context'
	//	context+=DmxTestContext (',' context+=DmxTestContext)*)?
	//	'{'
	//	expr=DExpression
	//	'}';
	public DmxGrammarAccess.DmxTestElements getDmxTestAccess() {
		return gaDmx.getDmxTestAccess();
	}
	
	public ParserRule getDmxTestRule() {
		return getDmxTestAccess().getRule();
	}
	
	//DmxTestContext:
	//	name=ID
	//	':'
	//	type=[DType] multiplicity=DMultiplicity? (':=' (value=DmxLiteralExpression | value=DmxLiteralListExpression))?;
	public DmxGrammarAccess.DmxTestContextElements getDmxTestContextAccess() {
		return gaDmx.getDmxTestContextAccess();
	}
	
	public ParserRule getDmxTestContextRule() {
		return getDmxTestContextAccess().getRule();
	}
	
	//enum DmxBaseType:
	//	VOID | BOOLEAN | NUMBER | TEXT | IDENTIFIER | TIMEPOINT | STATE /*transition*/ | STATE_EVENT | COMPLEX | NOTIFICATION
	//	/*sent* */ | SERVICE /*invoked* */;
	public DmxGrammarAccess.DmxBaseTypeElements getDmxBaseTypeAccess() {
		return gaDmx.getDmxBaseTypeAccess();
	}
	
	public EnumRule getDmxBaseTypeRule() {
		return getDmxBaseTypeAccess().getRule();
	}
	
	//DmxBaseTypeSet:
	//	name=ID
	//	'in'
	//	'(' members+=DmxBaseType (',' members+=DmxBaseType)+ ')';
	public DmxGrammarAccess.DmxBaseTypeSetElements getDmxBaseTypeSetAccess() {
		return gaDmx.getDmxBaseTypeSetAccess();
	}
	
	public ParserRule getDmxBaseTypeSetRule() {
		return getDmxBaseTypeSetAccess().getRule();
	}
	
	//DmxArchetype:
	//	'archetype'
	//	name=ID
	//	'is'
	//	baseType=DmxBaseType
	//	description=DRichText?;
	public DmxGrammarAccess.DmxArchetypeElements getDmxArchetypeAccess() {
		return gaDmx.getDmxArchetypeAccess();
	}
	
	public ParserRule getDmxArchetypeRule() {
		return getDmxArchetypeAccess().getRule();
	}
	
	//DmxFilter:
	//	'filter'
	//	name=ID
	//	'(' (parameters+=DmxFilterParameter (',' parameters+=DmxFilterParameter)*)? ')'
	//	':'
	//	typeDesc=DmxFilterTypeDescriptor ('with' withTypeSet=DmxBaseTypeSet)?;
	public DmxGrammarAccess.DmxFilterElements getDmxFilterAccess() {
		return gaDmx.getDmxFilterAccess();
	}
	
	public ParserRule getDmxFilterRule() {
		return getDmxFilterAccess().getRule();
	}
	
	//DmxFilterTypeDescriptor:
	//	(single=DmxBaseType
	//	| multiple=[DmxBaseTypeSet]) collection?='*'?;
	public DmxGrammarAccess.DmxFilterTypeDescriptorElements getDmxFilterTypeDescriptorAccess() {
		return gaDmx.getDmxFilterTypeDescriptorAccess();
	}
	
	public ParserRule getDmxFilterTypeDescriptorRule() {
		return getDmxFilterTypeDescriptorAccess().getRule();
	}
	
	//DmxFilterParameter:
	//	name=ID
	//	':'
	//	typeDesc=DmxFilterTypeDescriptor;
	public DmxGrammarAccess.DmxFilterParameterElements getDmxFilterParameterAccess() {
		return gaDmx.getDmxFilterParameterAccess();
	}
	
	public ParserRule getDmxFilterParameterRule() {
		return getDmxFilterParameterAccess().getRule();
	}
	
	///*
	// * Expressions
	// */ DExpression:
	//	DmxAssignment | DmxPredicateWithCorrelationVariable | DRichText;
	public DmxGrammarAccess.DExpressionElements getDExpressionAccess() {
		return gaDmx.getDExpressionAccess();
	}
	
	public ParserRule getDExpressionRule() {
		return getDExpressionAccess().getRule();
	}
	
	//DRichText:
	//	segments+=DmxTextOnly
	//	| segments+=DmxTextStart
	//	segments+=DExpression (segments+=DmxTextMiddle segments+=DExpression)*
	//	segments+=DmxTextEnd;
	public DmxGrammarAccess.DRichTextElements getDRichTextAccess() {
		return gaDmx.getDRichTextAccess();
	}
	
	public ParserRule getDRichTextRule() {
		return getDRichTextAccess().getRule();
	}
	
	//DmxTextOnly DTextSegment:
	//	value=PLAIN_TEXT_ONLY;
	public DmxGrammarAccess.DmxTextOnlyElements getDmxTextOnlyAccess() {
		return gaDmx.getDmxTextOnlyAccess();
	}
	
	public ParserRule getDmxTextOnlyRule() {
		return getDmxTextOnlyAccess().getRule();
	}
	
	//DmxTextStart DTextSegment:
	//	value=RICH_TEXT_START;
	public DmxGrammarAccess.DmxTextStartElements getDmxTextStartAccess() {
		return gaDmx.getDmxTextStartAccess();
	}
	
	public ParserRule getDmxTextStartRule() {
		return getDmxTextStartAccess().getRule();
	}
	
	//DmxTextMiddle DTextSegment:
	//	value=RICH_TEXT_MIDDLE;
	public DmxGrammarAccess.DmxTextMiddleElements getDmxTextMiddleAccess() {
		return gaDmx.getDmxTextMiddleAccess();
	}
	
	public ParserRule getDmxTextMiddleRule() {
		return getDmxTextMiddleAccess().getRule();
	}
	
	//DmxTextEnd DTextSegment:
	//	value=RICH_TEXT_END;
	public DmxGrammarAccess.DmxTextEndElements getDmxTextEndAccess() {
		return gaDmx.getDmxTextEndAccess();
	}
	
	public ParserRule getDmxTextEndRule() {
		return getDmxTextEndAccess().getRule();
	}
	
	//DmxNavigableMemberReference DExpression:
	//	DmxPrimaryExpression (=> ({DmxAssignment.precedingNavigationSegment=current} '.'
	//	assignToMember=[DNavigableMember] DmxOpSingleAssign) value=DmxOrExpression
	//	| => ({DmxMemberNavigation.precedingNavigationSegment=current} '.') member=[DNavigableMember] (=>
	//	explicitOperationCall?='(' // => boolean => has 0.n explicit arguments
	//	callArguments=DmxCallArguments
	//	')'
	//	| before?="@before")?)*;
	public DmxGrammarAccess.DmxNavigableMemberReferenceElements getDmxNavigableMemberReferenceAccess() {
		return gaDmx.getDmxNavigableMemberReferenceAccess();
	}
	
	public ParserRule getDmxNavigableMemberReferenceRule() {
		return getDmxNavigableMemberReferenceAccess().getRule();
	}
	
	//DmxCallArguments:
	//	{DmxCallArguments} (arguments+=DmxPredicateWithCorrelationVariable (','
	//	arguments+=DmxPredicateWithCorrelationVariable)*)?;
	public DmxGrammarAccess.DmxCallArgumentsElements getDmxCallArgumentsAccess() {
		return gaDmx.getDmxCallArgumentsAccess();
	}
	
	public ParserRule getDmxCallArgumentsRule() {
		return getDmxCallArgumentsAccess().getRule();
	}
	
	//DmxAssignment DExpression:
	//	{DmxAssignment} assignToMember=[DNavigableMember] DmxOpSingleAssign value=DmxOrExpression;
	public DmxGrammarAccess.DmxAssignmentElements getDmxAssignmentAccess() {
		return gaDmx.getDmxAssignmentAccess();
	}
	
	public ParserRule getDmxAssignmentRule() {
		return getDmxAssignmentAccess().getRule();
	}
	
	//DmxOpSingleAssign:
	//	':=';
	public DmxGrammarAccess.DmxOpSingleAssignElements getDmxOpSingleAssignAccess() {
		return gaDmx.getDmxOpSingleAssignAccess();
	}
	
	public ParserRule getDmxOpSingleAssignRule() {
		return getDmxOpSingleAssignAccess().getRule();
	}
	
	//DmxPredicateWithCorrelationVariable DExpression:
	//	{DmxPredicateWithCorrelationVariable} correlationVariable=DmxCorrelationVariable
	//	'|'
	//	predicate=DmxOrExpression
	//	| DmxOrExpression;
	public DmxGrammarAccess.DmxPredicateWithCorrelationVariableElements getDmxPredicateWithCorrelationVariableAccess() {
		return gaDmx.getDmxPredicateWithCorrelationVariableAccess();
	}
	
	public ParserRule getDmxPredicateWithCorrelationVariableRule() {
		return getDmxPredicateWithCorrelationVariableAccess().getRule();
	}
	
	//DmxCorrelationVariable:
	//	name=ID;
	public DmxGrammarAccess.DmxCorrelationVariableElements getDmxCorrelationVariableAccess() {
		return gaDmx.getDmxCorrelationVariableAccess();
	}
	
	public ParserRule getDmxCorrelationVariableRule() {
		return getDmxCorrelationVariableAccess().getRule();
	}
	
	////	(':' type=[DType])? => type is always NULL!
	//DmxOrExpression DExpression:
	//	DmxAndExpression (=> ({DmxBinaryOperation.leftOperand=current} operator=DmxOpOr) rightOperand=DmxAndExpression)*;
	public DmxGrammarAccess.DmxOrExpressionElements getDmxOrExpressionAccess() {
		return gaDmx.getDmxOrExpressionAccess();
	}
	
	public ParserRule getDmxOrExpressionRule() {
		return getDmxOrExpressionAccess().getRule();
	}
	
	//enum DmxOpOr returns DmxBinaryOperator:
	//	OR | OR='or' | XOR | XOR='xor';
	public DmxGrammarAccess.DmxOpOrElements getDmxOpOrAccess() {
		return gaDmx.getDmxOpOrAccess();
	}
	
	public EnumRule getDmxOpOrRule() {
		return getDmxOpOrAccess().getRule();
	}
	
	//DmxAndExpression DExpression:
	//	DmxEqualityExpression (=> ({DmxBinaryOperation.leftOperand=current} operator=DmxOpAnd)
	//	rightOperand=DmxEqualityExpression)*;
	public DmxGrammarAccess.DmxAndExpressionElements getDmxAndExpressionAccess() {
		return gaDmx.getDmxAndExpressionAccess();
	}
	
	public ParserRule getDmxAndExpressionRule() {
		return getDmxAndExpressionAccess().getRule();
	}
	
	//enum DmxOpAnd returns DmxBinaryOperator:
	//	AND | AND='and';
	public DmxGrammarAccess.DmxOpAndElements getDmxOpAndAccess() {
		return gaDmx.getDmxOpAndAccess();
	}
	
	public EnumRule getDmxOpAndRule() {
		return getDmxOpAndAccess().getRule();
	}
	
	//DmxEqualityExpression DExpression:
	//	DmxRelationalExpression (=> ({DmxBinaryOperation.leftOperand=current} operator=DmxOpEquality)
	//	rightOperand=DmxRelationalExpression)*;
	public DmxGrammarAccess.DmxEqualityExpressionElements getDmxEqualityExpressionAccess() {
		return gaDmx.getDmxEqualityExpressionAccess();
	}
	
	public ParserRule getDmxEqualityExpressionRule() {
		return getDmxEqualityExpressionAccess().getRule();
	}
	
	//enum DmxOpEquality returns DmxBinaryOperator:
	//	EQUAL='=' | NOT_EQUAL='!=' | NOT_EQUAL='<>';
	public DmxGrammarAccess.DmxOpEqualityElements getDmxOpEqualityAccess() {
		return gaDmx.getDmxOpEqualityAccess();
	}
	
	public EnumRule getDmxOpEqualityRule() {
		return getDmxOpEqualityAccess().getRule();
	}
	
	//DmxRelationalExpression DExpression:
	//	DmxOtherOperatorExpression (=> ({DmxInstanceOfExpression.expression=current} DmxOpInstanceOf) type=[DType] | =>
	//	({DmxBinaryOperation.leftOperand=current} operator=OpCompare) rightOperand=DmxOtherOperatorExpression)*;
	public DmxGrammarAccess.DmxRelationalExpressionElements getDmxRelationalExpressionAccess() {
		return gaDmx.getDmxRelationalExpressionAccess();
	}
	
	public ParserRule getDmxRelationalExpressionRule() {
		return getDmxRelationalExpressionAccess().getRule();
	}
	
	//DmxOpInstanceOf:
	//	'ISA' | 'isa';
	public DmxGrammarAccess.DmxOpInstanceOfElements getDmxOpInstanceOfAccess() {
		return gaDmx.getDmxOpInstanceOfAccess();
	}
	
	public ParserRule getDmxOpInstanceOfRule() {
		return getDmxOpInstanceOfAccess().getRule();
	}
	
	//enum OpCompare returns DmxBinaryOperator:
	//	LESS='<' | LESS_OR_EQUAL='<=' | LESS_OR_EQUAL='≤' | GREATER_OR_EQUAL='>=' | GREATER_OR_EQUAL='≥' | GREATER='>';
	public DmxGrammarAccess.OpCompareElements getOpCompareAccess() {
		return gaDmx.getOpCompareAccess();
	}
	
	public EnumRule getOpCompareRule() {
		return getOpCompareAccess().getRule();
	}
	
	//DmxOtherOperatorExpression DExpression:
	//	DmxAdditiveExpression (=> ({DmxBinaryOperation.leftOperand=current} operator=OpOther)
	//	rightOperand=DmxAdditiveExpression)*;
	public DmxGrammarAccess.DmxOtherOperatorExpressionElements getDmxOtherOperatorExpressionAccess() {
		return gaDmx.getDmxOtherOperatorExpressionAccess();
	}
	
	public ParserRule getDmxOtherOperatorExpressionRule() {
		return getDmxOtherOperatorExpressionAccess().getRule();
	}
	
	//enum OpOther returns DmxBinaryOperator:
	//	IN | IN='in' | UNTIL='..' | SINGLE_ARROW='->' | DOUBLE_ARROW='=>';
	public DmxGrammarAccess.OpOtherElements getOpOtherAccess() {
		return gaDmx.getOpOtherAccess();
	}
	
	public EnumRule getOpOtherRule() {
		return getOpOtherAccess().getRule();
	}
	
	//DmxAdditiveExpression DExpression:
	//	DmxMultiplicativeExpression (=> ({DmxBinaryOperation.leftOperand=current} operator=OpAdd)
	//	rightOperand=DmxMultiplicativeExpression)*;
	public DmxGrammarAccess.DmxAdditiveExpressionElements getDmxAdditiveExpressionAccess() {
		return gaDmx.getDmxAdditiveExpressionAccess();
	}
	
	public ParserRule getDmxAdditiveExpressionRule() {
		return getDmxAdditiveExpressionAccess().getRule();
	}
	
	//enum OpAdd returns DmxBinaryOperator:
	//	ADD='+' | SUBTRACT='-';
	public DmxGrammarAccess.OpAddElements getOpAddAccess() {
		return gaDmx.getOpAddAccess();
	}
	
	public EnumRule getOpAddRule() {
		return getOpAddAccess().getRule();
	}
	
	//DmxMultiplicativeExpression DExpression:
	//	DmxUnaryOperation (=> ({DmxBinaryOperation.leftOperand=current} operator=OpMulti) rightOperand=DmxUnaryOperation)*;
	public DmxGrammarAccess.DmxMultiplicativeExpressionElements getDmxMultiplicativeExpressionAccess() {
		return gaDmx.getDmxMultiplicativeExpressionAccess();
	}
	
	public ParserRule getDmxMultiplicativeExpressionRule() {
		return getDmxMultiplicativeExpressionAccess().getRule();
	}
	
	//enum OpMulti returns DmxBinaryOperator:
	//	MULTIPLY='*' | DIVIDE='/' | POWER='**' | MODULO='%';
	public DmxGrammarAccess.OpMultiElements getOpMultiAccess() {
		return gaDmx.getOpMultiAccess();
	}
	
	public EnumRule getOpMultiRule() {
		return getOpMultiAccess().getRule();
	}
	
	//DmxUnaryOperation DExpression:
	//	{DmxUnaryOperation} operator=OpUnary operand=DmxUnaryOperation
	//	| DmxCastExpression;
	public DmxGrammarAccess.DmxUnaryOperationElements getDmxUnaryOperationAccess() {
		return gaDmx.getDmxUnaryOperationAccess();
	}
	
	public ParserRule getDmxUnaryOperationRule() {
		return getDmxUnaryOperationAccess().getRule();
	}
	
	//enum OpUnary returns DmxUnaryOperator:
	//	PLUS='+' | MINUS='-' | NOT='!' | NOT | NOT='not';
	public DmxGrammarAccess.OpUnaryElements getOpUnaryAccess() {
		return gaDmx.getOpUnaryAccess();
	}
	
	public EnumRule getOpUnaryRule() {
		return getOpUnaryAccess().getRule();
	}
	
	//DmxCastExpression DExpression:
	//	DmxNavigableMemberReference (=> ({DmxCastExpression.target=current} DmxOpCast) type=[DType])?;
	public DmxGrammarAccess.DmxCastExpressionElements getDmxCastExpressionAccess() {
		return gaDmx.getDmxCastExpressionAccess();
	}
	
	public ParserRule getDmxCastExpressionRule() {
		return getDmxCastExpressionAccess().getRule();
	}
	
	//DmxOpCast:
	//	'AS' | 'as';
	public DmxGrammarAccess.DmxOpCastElements getDmxOpCastAccess() {
		return gaDmx.getDmxOpCastAccess();
	}
	
	public ParserRule getDmxOpCastRule() {
		return getDmxOpCastAccess().getRule();
	}
	
	//DmxPrimaryExpression DExpression:
	//	DmxLiteralExpression | DmxParenthesizedExpression | DmxListExpression | DmxFunctionCall | DmxStaticReference |
	//	DmxContextReference | DmxIfExpression;
	public DmxGrammarAccess.DmxPrimaryExpressionElements getDmxPrimaryExpressionAccess() {
		return gaDmx.getDmxPrimaryExpressionAccess();
	}
	
	public ParserRule getDmxPrimaryExpressionRule() {
		return getDmxPrimaryExpressionAccess().getRule();
	}
	
	//DmxLiteralExpression DExpression:
	//	DmxBooleanLiteral | DmxStringLiteral | DmxNaturalLiteral | DmxDecimalLiteral | DmxUndefinedLiteral | DmxEntity |
	//	DmxDetail;
	public DmxGrammarAccess.DmxLiteralExpressionElements getDmxLiteralExpressionAccess() {
		return gaDmx.getDmxLiteralExpressionAccess();
	}
	
	public ParserRule getDmxLiteralExpressionRule() {
		return getDmxLiteralExpressionAccess().getRule();
	}
	
	//DmxParenthesizedExpression DExpression:
	//	'(' DExpression ')';
	public DmxGrammarAccess.DmxParenthesizedExpressionElements getDmxParenthesizedExpressionAccess() {
		return gaDmx.getDmxParenthesizedExpressionAccess();
	}
	
	public ParserRule getDmxParenthesizedExpressionRule() {
		return getDmxParenthesizedExpressionAccess().getRule();
	}
	
	//DmxListExpression DExpression:
	//	{DmxListExpression}
	//	'{' (elements+=DExpression (',' elements+=DExpression)*)?
	//	'}';
	public DmxGrammarAccess.DmxListExpressionElements getDmxListExpressionAccess() {
		return gaDmx.getDmxListExpressionAccess();
	}
	
	public ParserRule getDmxListExpressionRule() {
		return getDmxListExpressionAccess().getRule();
	}
	
	//DmxLiteralListExpression DExpression:
	//	{DmxListExpression}
	//	'{' (elements+=DmxLiteralExpression (',' elements+=DmxLiteralExpression)*)?
	//	'}';
	public DmxGrammarAccess.DmxLiteralListExpressionElements getDmxLiteralListExpressionAccess() {
		return gaDmx.getDmxLiteralListExpressionAccess();
	}
	
	public ParserRule getDmxLiteralListExpressionRule() {
		return getDmxLiteralListExpressionAccess().getRule();
	}
	
	//DmxFunctionCall DExpression:
	//	{DmxFunctionCall} function=[DmxFilter]
	//	'('
	//	callArguments=DmxFunctionCallArguments
	//	')';
	public DmxGrammarAccess.DmxFunctionCallElements getDmxFunctionCallAccess() {
		return gaDmx.getDmxFunctionCallAccess();
	}
	
	public ParserRule getDmxFunctionCallRule() {
		return getDmxFunctionCallAccess().getRule();
	}
	
	//DmxFunctionCallArguments DmxCallArguments:
	//	{DmxCallArguments} (arguments+=DExpression (',' arguments+=DExpression)*)?;
	public DmxGrammarAccess.DmxFunctionCallArgumentsElements getDmxFunctionCallArgumentsAccess() {
		return gaDmx.getDmxFunctionCallArgumentsAccess();
	}
	
	public ParserRule getDmxFunctionCallArgumentsRule() {
		return getDmxFunctionCallArgumentsAccess().getRule();
	}
	
	//DmxEntity:
	//	'entity'
	//	DmxComplexObject;
	public DmxGrammarAccess.DmxEntityElements getDmxEntityAccess() {
		return gaDmx.getDmxEntityAccess();
	}
	
	public ParserRule getDmxEntityRule() {
		return getDmxEntityAccess().getRule();
	}
	
	//DmxDetail:
	//	'detail'
	//	DmxComplexObject;
	public DmxGrammarAccess.DmxDetailElements getDmxDetailAccess() {
		return gaDmx.getDmxDetailAccess();
	}
	
	public ParserRule getDmxDetailRule() {
		return getDmxDetailAccess().getRule();
	}
	
	//fragment DmxComplexObject:
	//	type=[DComplexType] DomFieldListStartSymbol
	//	fields+=DmxField*
	//	'}';
	public DmxGrammarAccess.DmxComplexObjectElements getDmxComplexObjectAccess() {
		return gaDmx.getDmxComplexObjectAccess();
	}
	
	public ParserRule getDmxComplexObjectRule() {
		return getDmxComplexObjectAccess().getRule();
	}
	
	//DmxField:
	//	feature=[DFeature] "=" value=DExpression;
	public DmxGrammarAccess.DmxFieldElements getDmxFieldAccess() {
		return gaDmx.getDmxFieldAccess();
	}
	
	public ParserRule getDmxFieldRule() {
		return getDmxFieldAccess().getRule();
	}
	
	//DmxStaticReference DExpression:
	//	{DmxStaticReference}
	//	'['
	//	target=[IStaticReferenceTarget|DQualifiedName] ('#' member=[DNavigableMember])? ("|" (displayName=ID | plural?="*"))?
	//	-> ']';
	public DmxGrammarAccess.DmxStaticReferenceElements getDmxStaticReferenceAccess() {
		return gaDmx.getDmxStaticReferenceAccess();
	}
	
	public ParserRule getDmxStaticReferenceRule() {
		return getDmxStaticReferenceAccess().getRule();
	}
	
	//// '->' gives precedence to this ']' over PLAIN_TEXT_MIDDLE ('=>' works too but generates more lookahead overhead)
	//DmxContextReference DExpression:
	//	{DmxContextReference} target=[DNamedElement] (before?="@before"
	//	| '.' all?='all')?;
	public DmxGrammarAccess.DmxContextReferenceElements getDmxContextReferenceAccess() {
		return gaDmx.getDmxContextReferenceAccess();
	}
	
	public ParserRule getDmxContextReferenceRule() {
		return getDmxContextReferenceAccess().getRule();
	}
	
	//DmxIfExpression DExpression:
	//	{DmxIfExpression}
	//	'if' if=DExpression
	//	'then' then=DExpression (=> 'else' else=DExpression)?
	//	'end';
	public DmxGrammarAccess.DmxIfExpressionElements getDmxIfExpressionAccess() {
		return gaDmx.getDmxIfExpressionAccess();
	}
	
	public ParserRule getDmxIfExpressionRule() {
		return getDmxIfExpressionAccess().getRule();
	}
	
	//DMultiplicity:
	//	shorthand=DMultiplicityShorthand | '(' minOccurs=NATURAL '..' maxOccurs=MULTIPLICITY ')';
	public DmxGrammarAccess.DMultiplicityElements getDMultiplicityAccess() {
		return gaDmx.getDMultiplicityAccess();
	}
	
	public ParserRule getDMultiplicityRule() {
		return getDMultiplicityAccess().getRule();
	}
	
	//enum DMultiplicityShorthand:
	//	ZERO_OR_ONE='?' | ONE_OR_MORE='+' | ZERO_OR_MORE='*';
	public DmxGrammarAccess.DMultiplicityShorthandElements getDMultiplicityShorthandAccess() {
		return gaDmx.getDMultiplicityShorthandAccess();
	}
	
	public EnumRule getDMultiplicityShorthandRule() {
		return getDMultiplicityShorthandAccess().getRule();
	}
	
	//MULTIPLICITY ecore::EInt:
	//	NATURAL | '*';
	public DmxGrammarAccess.MULTIPLICITYElements getMULTIPLICITYAccess() {
		return gaDmx.getMULTIPLICITYAccess();
	}
	
	public ParserRule getMULTIPLICITYRule() {
		return getMULTIPLICITYAccess().getRule();
	}
	
	//DmxBooleanLiteral DExpression:
	//	{DmxBooleanLiteral} (value?='TRUE' | value?='true' | 'FALSE' | 'false');
	public DmxGrammarAccess.DmxBooleanLiteralElements getDmxBooleanLiteralAccess() {
		return gaDmx.getDmxBooleanLiteralAccess();
	}
	
	public ParserRule getDmxBooleanLiteralRule() {
		return getDmxBooleanLiteralAccess().getRule();
	}
	
	//DmxNaturalLiteral DExpression:
	//	{DmxNaturalLiteral} value=NATURAL;
	public DmxGrammarAccess.DmxNaturalLiteralElements getDmxNaturalLiteralAccess() {
		return gaDmx.getDmxNaturalLiteralAccess();
	}
	
	public ParserRule getDmxNaturalLiteralRule() {
		return getDmxNaturalLiteralAccess().getRule();
	}
	
	//DmxDecimalLiteral DExpression:
	//	{DmxDecimalLiteral} value=DECIMAL;
	public DmxGrammarAccess.DmxDecimalLiteralElements getDmxDecimalLiteralAccess() {
		return gaDmx.getDmxDecimalLiteralAccess();
	}
	
	public ParserRule getDmxDecimalLiteralRule() {
		return getDmxDecimalLiteralAccess().getRule();
	}
	
	//DmxStringLiteral DExpression:
	//	{DmxStringLiteral} value=STRING;
	public DmxGrammarAccess.DmxStringLiteralElements getDmxStringLiteralAccess() {
		return gaDmx.getDmxStringLiteralAccess();
	}
	
	public ParserRule getDmxStringLiteralRule() {
		return getDmxStringLiteralAccess().getRule();
	}
	
	//DmxUndefinedLiteral DExpression:
	//	{DmxUndefinedLiteral} ('UNDEFINED' | 'undefined');
	public DmxGrammarAccess.DmxUndefinedLiteralElements getDmxUndefinedLiteralAccess() {
		return gaDmx.getDmxUndefinedLiteralAccess();
	}
	
	public ParserRule getDmxUndefinedLiteralRule() {
		return getDmxUndefinedLiteralAccess().getRule();
	}
	
	//DmxUrlLiteral DExpression:
	//	{DmxUrlLiteral}
	//	'URL:'
	//	value=STRING ('|' display=STRING)?;
	public DmxGrammarAccess.DmxUrlLiteralElements getDmxUrlLiteralAccess() {
		return gaDmx.getDmxUrlLiteralAccess();
	}
	
	public ParserRule getDmxUrlLiteralRule() {
		return getDmxUrlLiteralAccess().getRule();
	}
	
	//DECIMAL:
	//	NATURAL '.' NATURAL (('E' | 'e') ('+' | '-')? NATURAL)?;
	public DmxGrammarAccess.DECIMALElements getDECIMALAccess() {
		return gaDmx.getDECIMALAccess();
	}
	
	public ParserRule getDECIMALRule() {
		return getDECIMALAccess().getRule();
	}
	
	//DomFieldListStartSymbol:
	//	'{';
	public DmxGrammarAccess.DomFieldListStartSymbolElements getDomFieldListStartSymbolAccess() {
		return gaDmx.getDomFieldListStartSymbolAccess();
	}
	
	public ParserRule getDomFieldListStartSymbolRule() {
		return getDomFieldListStartSymbolAccess().getRule();
	}
	
	//DQualifiedNameWithWildcard:
	//	DQualifiedName '.*'?;
	public DmxGrammarAccess.DQualifiedNameWithWildcardElements getDQualifiedNameWithWildcardAccess() {
		return gaDmx.getDQualifiedNameWithWildcardAccess();
	}
	
	public ParserRule getDQualifiedNameWithWildcardRule() {
		return getDQualifiedNameWithWildcardAccess().getRule();
	}
	
	//DQualifiedName:
	//	ID ('.' ID)*;
	public DmxGrammarAccess.DQualifiedNameElements getDQualifiedNameAccess() {
		return gaDmx.getDQualifiedNameAccess();
	}
	
	public ParserRule getDQualifiedNameRule() {
		return getDQualifiedNameAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? (LETTER | '_') (LETTER | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaDmx.getIDRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"';
	public TerminalRule getSTRINGRule() {
		return gaDmx.getSTRINGRule();
	}
	
	//terminal NATURAL returns ecore::EInt:
	//	'0'..'9'+ | '∞';
	public TerminalRule getNATURALRule() {
		return gaDmx.getNATURALRule();
	}
	
	//terminal fragment LETTER:
	//	'a'..'z' | 'A'..'Z' | '\\u00c0'..'\\u00d6' | '\\u00d8'..'\\u00f6' | '\\u00f8'..'\\u00ff';
	public TerminalRule getLETTERRule() {
		return gaDmx.getLETTERRule();
	}
	
	//terminal fragment PLAIN_TEXT:
	//	!('»' | ']' | '[');
	public TerminalRule getPLAIN_TEXTRule() {
		return gaDmx.getPLAIN_TEXTRule();
	}
	
	//terminal PLAIN_TEXT_ONLY:
	//	'«' PLAIN_TEXT* '»';
	public TerminalRule getPLAIN_TEXT_ONLYRule() {
		return gaDmx.getPLAIN_TEXT_ONLYRule();
	}
	
	//terminal RICH_TEXT_START:
	//	'«' PLAIN_TEXT* '[';
	public TerminalRule getRICH_TEXT_STARTRule() {
		return gaDmx.getRICH_TEXT_STARTRule();
	}
	
	//terminal RICH_TEXT_MIDDLE:
	//	']' PLAIN_TEXT* '[';
	public TerminalRule getRICH_TEXT_MIDDLERule() {
		return gaDmx.getRICH_TEXT_MIDDLERule();
	}
	
	//terminal RICH_TEXT_END:
	//	']' PLAIN_TEXT* '»';
	public TerminalRule getRICH_TEXT_ENDRule() {
		return gaDmx.getRICH_TEXT_ENDRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaDmx.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaDmx.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaDmx.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaDmx.getANY_OTHERRule();
	}
}
