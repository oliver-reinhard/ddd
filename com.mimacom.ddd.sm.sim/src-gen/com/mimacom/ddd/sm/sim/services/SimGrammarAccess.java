/*
 * generated by Xtext 2.16.0
 */
package com.mimacom.ddd.sm.sim.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class SimGrammarAccess extends AbstractGrammarElementFinder {
	
	public class SDomainElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.sm.sim.Sim.SDomain");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDomainKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cImportsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cImportsSImportParserRuleCall_2_0 = (RuleCall)cImportsAssignment_2.eContents().get(0);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Assignment cTypesAssignment_3_0 = (Assignment)cAlternatives_3.eContents().get(0);
		private final RuleCall cTypesSTypeParserRuleCall_3_0_0 = (RuleCall)cTypesAssignment_3_0.eContents().get(0);
		private final Assignment cAggregatesAssignment_3_1 = (Assignment)cAlternatives_3.eContents().get(1);
		private final RuleCall cAggregatesSAggregateParserRuleCall_3_1_0 = (RuleCall)cAggregatesAssignment_3_1.eContents().get(0);
		
		//SDomain:
		//	'domain'
		//	name=SQualifiedName
		//	//	(description=DRichText)?
		//	imports+=SImport* (types+=SType | aggregates+=SAggregate)*;
		@Override public ParserRule getRule() { return rule; }
		
		//'domain' name=SQualifiedName //	(description=DRichText)?
		//imports+=SImport* (types+=SType | aggregates+=SAggregate)*
		public Group getGroup() { return cGroup; }
		
		//'domain'
		public Keyword getDomainKeyword_0() { return cDomainKeyword_0; }
		
		//name=SQualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//SQualifiedName
		public RuleCall getNameSQualifiedNameParserRuleCall_1_0() { return cNameSQualifiedNameParserRuleCall_1_0; }
		
		////	(description=DRichText)?
		//imports+=SImport*
		public Assignment getImportsAssignment_2() { return cImportsAssignment_2; }
		
		//SImport
		public RuleCall getImportsSImportParserRuleCall_2_0() { return cImportsSImportParserRuleCall_2_0; }
		
		//(types+=SType | aggregates+=SAggregate)*
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//types+=SType
		public Assignment getTypesAssignment_3_0() { return cTypesAssignment_3_0; }
		
		//SType
		public RuleCall getTypesSTypeParserRuleCall_3_0_0() { return cTypesSTypeParserRuleCall_3_0_0; }
		
		//aggregates+=SAggregate
		public Assignment getAggregatesAssignment_3_1() { return cAggregatesAssignment_3_1; }
		
		//SAggregate
		public RuleCall getAggregatesSAggregateParserRuleCall_3_1_0() { return cAggregatesSAggregateParserRuleCall_3_1_0; }
	}
	public class SImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.sm.sim.Sim.SImport");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImportedNamespaceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportedNamespaceSQualifiedNameWithWildcardParserRuleCall_1_0 = (RuleCall)cImportedNamespaceAssignment_1.eContents().get(0);
		
		//SImport:
		//	'import' importedNamespace=SQualifiedNameWithWildcard;
		@Override public ParserRule getRule() { return rule; }
		
		//'import' importedNamespace=SQualifiedNameWithWildcard
		public Group getGroup() { return cGroup; }
		
		//'import'
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }
		
		//importedNamespace=SQualifiedNameWithWildcard
		public Assignment getImportedNamespaceAssignment_1() { return cImportedNamespaceAssignment_1; }
		
		//SQualifiedNameWithWildcard
		public RuleCall getImportedNamespaceSQualifiedNameWithWildcardParserRuleCall_1_0() { return cImportedNamespaceSQualifiedNameWithWildcardParserRuleCall_1_0; }
	}
	public class SGrabAggregateRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.sm.sim.Sim.SGrabAggregateRule");
		private final Assignment cSourceAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cSourceDAggregateCrossReference_0 = (CrossReference)cSourceAssignment.eContents().get(0);
		private final RuleCall cSourceDAggregateIDTerminalRuleCall_0_1 = (RuleCall)cSourceDAggregateCrossReference_0.eContents().get(1);
		
		//// Transformation rules
		//SGrabAggregateRule:
		//	source=[DAggregate];
		@Override public ParserRule getRule() { return rule; }
		
		//source=[DAggregate]
		public Assignment getSourceAssignment() { return cSourceAssignment; }
		
		//[DAggregate]
		public CrossReference getSourceDAggregateCrossReference_0() { return cSourceDAggregateCrossReference_0; }
		
		//ID
		public RuleCall getSourceDAggregateIDTerminalRuleCall_0_1() { return cSourceDAggregateIDTerminalRuleCall_0_1; }
	}
	public class SGrabEnumerationRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.sm.sim.Sim.SGrabEnumerationRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSourceAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cSourceDEnumerationCrossReference_0_0 = (CrossReference)cSourceAssignment_0.eContents().get(0);
		private final RuleCall cSourceDEnumerationSQualifiedNameParserRuleCall_0_0_1 = (RuleCall)cSourceDEnumerationCrossReference_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cAsKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cRenameToAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRenameToIDTerminalRuleCall_1_1_0 = (RuleCall)cRenameToAssignment_1_1.eContents().get(0);
		
		//SGrabEnumerationRule SGrabRule:
		//	source=[DEnumeration|SQualifiedName] ('as' renameTo=ID)?;
		@Override public ParserRule getRule() { return rule; }
		
		//source=[DEnumeration|SQualifiedName] ('as' renameTo=ID)?
		public Group getGroup() { return cGroup; }
		
		//source=[DEnumeration|SQualifiedName]
		public Assignment getSourceAssignment_0() { return cSourceAssignment_0; }
		
		//[DEnumeration|SQualifiedName]
		public CrossReference getSourceDEnumerationCrossReference_0_0() { return cSourceDEnumerationCrossReference_0_0; }
		
		//SQualifiedName
		public RuleCall getSourceDEnumerationSQualifiedNameParserRuleCall_0_0_1() { return cSourceDEnumerationSQualifiedNameParserRuleCall_0_0_1; }
		
		//('as' renameTo=ID)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'as'
		public Keyword getAsKeyword_1_0() { return cAsKeyword_1_0; }
		
		//renameTo=ID
		public Assignment getRenameToAssignment_1_1() { return cRenameToAssignment_1_1; }
		
		//ID
		public RuleCall getRenameToIDTerminalRuleCall_1_1_0() { return cRenameToIDTerminalRuleCall_1_1_0; }
	}
	public class SDitchEnumerationRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.sm.sim.Sim.SDitchEnumerationRule");
		private final Assignment cSourceAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cSourceDEnumerationCrossReference_0 = (CrossReference)cSourceAssignment.eContents().get(0);
		private final RuleCall cSourceDEnumerationIDTerminalRuleCall_0_1 = (RuleCall)cSourceDEnumerationCrossReference_0.eContents().get(1);
		
		//SDitchEnumerationRule SDitchRule:
		//	source=[DEnumeration];
		@Override public ParserRule getRule() { return rule; }
		
		//source=[DEnumeration]
		public Assignment getSourceAssignment() { return cSourceAssignment; }
		
		//[DEnumeration]
		public CrossReference getSourceDEnumerationCrossReference_0() { return cSourceDEnumerationCrossReference_0; }
		
		//ID
		public RuleCall getSourceDEnumerationIDTerminalRuleCall_0_1() { return cSourceDEnumerationIDTerminalRuleCall_0_1; }
	}
	public class SGrabEnumerationLiteralRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.sm.sim.Sim.SGrabEnumerationLiteralRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSourceAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cSourceDLiteralCrossReference_0_0 = (CrossReference)cSourceAssignment_0.eContents().get(0);
		private final RuleCall cSourceDLiteralIDTerminalRuleCall_0_0_1 = (RuleCall)cSourceDLiteralCrossReference_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cAsKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cRenameToAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRenameToIDTerminalRuleCall_1_1_0 = (RuleCall)cRenameToAssignment_1_1.eContents().get(0);
		
		//SGrabEnumerationLiteralRule SGrabRule:
		//	source=[DLiteral] ('as' renameTo=ID)?;
		@Override public ParserRule getRule() { return rule; }
		
		//source=[DLiteral] ('as' renameTo=ID)?
		public Group getGroup() { return cGroup; }
		
		//source=[DLiteral]
		public Assignment getSourceAssignment_0() { return cSourceAssignment_0; }
		
		//[DLiteral]
		public CrossReference getSourceDLiteralCrossReference_0_0() { return cSourceDLiteralCrossReference_0_0; }
		
		//ID
		public RuleCall getSourceDLiteralIDTerminalRuleCall_0_0_1() { return cSourceDLiteralIDTerminalRuleCall_0_0_1; }
		
		//('as' renameTo=ID)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'as'
		public Keyword getAsKeyword_1_0() { return cAsKeyword_1_0; }
		
		//renameTo=ID
		public Assignment getRenameToAssignment_1_1() { return cRenameToAssignment_1_1; }
		
		//ID
		public RuleCall getRenameToIDTerminalRuleCall_1_1_0() { return cRenameToIDTerminalRuleCall_1_1_0; }
	}
	public class SDitchEnumerationLiteralRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.sm.sim.Sim.SDitchEnumerationLiteralRule");
		private final Assignment cSourceAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cSourceDLiteralCrossReference_0 = (CrossReference)cSourceAssignment.eContents().get(0);
		private final RuleCall cSourceDLiteralIDTerminalRuleCall_0_1 = (RuleCall)cSourceDLiteralCrossReference_0.eContents().get(1);
		
		//SDitchEnumerationLiteralRule SDitchRule:
		//	source=[DLiteral];
		@Override public ParserRule getRule() { return rule; }
		
		//source=[DLiteral]
		public Assignment getSourceAssignment() { return cSourceAssignment; }
		
		//[DLiteral]
		public CrossReference getSourceDLiteralCrossReference_0() { return cSourceDLiteralCrossReference_0; }
		
		//ID
		public RuleCall getSourceDLiteralIDTerminalRuleCall_0_1() { return cSourceDLiteralIDTerminalRuleCall_0_1; }
	}
	public class SGrabComplexTypeRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.sm.sim.Sim.SGrabComplexTypeRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSourceAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cSourceDComplexTypeCrossReference_0_0 = (CrossReference)cSourceAssignment_0.eContents().get(0);
		private final RuleCall cSourceDComplexTypeSQualifiedNameParserRuleCall_0_0_1 = (RuleCall)cSourceDComplexTypeCrossReference_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cAsKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cRenameToAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRenameToIDTerminalRuleCall_1_1_0 = (RuleCall)cRenameToAssignment_1_1.eContents().get(0);
		
		//SGrabComplexTypeRule SGrabRule:
		//	source=[DComplexType|SQualifiedName] ('as' renameTo=ID)?;
		@Override public ParserRule getRule() { return rule; }
		
		//source=[DComplexType|SQualifiedName] ('as' renameTo=ID)?
		public Group getGroup() { return cGroup; }
		
		//source=[DComplexType|SQualifiedName]
		public Assignment getSourceAssignment_0() { return cSourceAssignment_0; }
		
		//[DComplexType|SQualifiedName]
		public CrossReference getSourceDComplexTypeCrossReference_0_0() { return cSourceDComplexTypeCrossReference_0_0; }
		
		//SQualifiedName
		public RuleCall getSourceDComplexTypeSQualifiedNameParserRuleCall_0_0_1() { return cSourceDComplexTypeSQualifiedNameParserRuleCall_0_0_1; }
		
		//('as' renameTo=ID)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'as'
		public Keyword getAsKeyword_1_0() { return cAsKeyword_1_0; }
		
		//renameTo=ID
		public Assignment getRenameToAssignment_1_1() { return cRenameToAssignment_1_1; }
		
		//ID
		public RuleCall getRenameToIDTerminalRuleCall_1_1_0() { return cRenameToIDTerminalRuleCall_1_1_0; }
	}
	public class SDitchComplexTypeRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.sm.sim.Sim.SDitchComplexTypeRule");
		private final Assignment cSourceAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cSourceDEnumerationCrossReference_0 = (CrossReference)cSourceAssignment.eContents().get(0);
		private final RuleCall cSourceDEnumerationIDTerminalRuleCall_0_1 = (RuleCall)cSourceDEnumerationCrossReference_0.eContents().get(1);
		
		//SDitchComplexTypeRule SDitchRule:
		//	source=[DEnumeration];
		@Override public ParserRule getRule() { return rule; }
		
		//source=[DEnumeration]
		public Assignment getSourceAssignment() { return cSourceAssignment; }
		
		//[DEnumeration]
		public CrossReference getSourceDEnumerationCrossReference_0() { return cSourceDEnumerationCrossReference_0; }
		
		//ID
		public RuleCall getSourceDEnumerationIDTerminalRuleCall_0_1() { return cSourceDEnumerationIDTerminalRuleCall_0_1; }
	}
	public class SMorphComplexTypeRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.sm.sim.Sim.SMorphComplexTypeRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSourceAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cSourceDComplexTypeCrossReference_0_0 = (CrossReference)cSourceAssignment_0.eContents().get(0);
		private final RuleCall cSourceDComplexTypeSQualifiedNameParserRuleCall_0_0_1 = (RuleCall)cSourceDComplexTypeCrossReference_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cAsKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cRenameToAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRenameToIDTerminalRuleCall_1_1_0 = (RuleCall)cRenameToAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cExtendsKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cRetypeToAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final CrossReference cRetypeToSComplexTypeCrossReference_2_2_0 = (CrossReference)cRetypeToAssignment_2_2.eContents().get(0);
		private final RuleCall cRetypeToSComplexTypeIDTerminalRuleCall_2_2_0_1 = (RuleCall)cRetypeToSComplexTypeCrossReference_2_2_0.eContents().get(1);
		
		//SMorphComplexTypeRule SMorphRule:
		//	source=[DComplexType|SQualifiedName] ('as' renameTo=ID)? ('extends' '=' retypeTo=[SComplexType])?;
		@Override public ParserRule getRule() { return rule; }
		
		//source=[DComplexType|SQualifiedName] ('as' renameTo=ID)? ('extends' '=' retypeTo=[SComplexType])?
		public Group getGroup() { return cGroup; }
		
		//source=[DComplexType|SQualifiedName]
		public Assignment getSourceAssignment_0() { return cSourceAssignment_0; }
		
		//[DComplexType|SQualifiedName]
		public CrossReference getSourceDComplexTypeCrossReference_0_0() { return cSourceDComplexTypeCrossReference_0_0; }
		
		//SQualifiedName
		public RuleCall getSourceDComplexTypeSQualifiedNameParserRuleCall_0_0_1() { return cSourceDComplexTypeSQualifiedNameParserRuleCall_0_0_1; }
		
		//('as' renameTo=ID)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'as'
		public Keyword getAsKeyword_1_0() { return cAsKeyword_1_0; }
		
		//renameTo=ID
		public Assignment getRenameToAssignment_1_1() { return cRenameToAssignment_1_1; }
		
		//ID
		public RuleCall getRenameToIDTerminalRuleCall_1_1_0() { return cRenameToIDTerminalRuleCall_1_1_0; }
		
		//('extends' '=' retypeTo=[SComplexType])?
		public Group getGroup_2() { return cGroup_2; }
		
		//'extends'
		public Keyword getExtendsKeyword_2_0() { return cExtendsKeyword_2_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_2_1() { return cEqualsSignKeyword_2_1; }
		
		//retypeTo=[SComplexType]
		public Assignment getRetypeToAssignment_2_2() { return cRetypeToAssignment_2_2; }
		
		//[SComplexType]
		public CrossReference getRetypeToSComplexTypeCrossReference_2_2_0() { return cRetypeToSComplexTypeCrossReference_2_2_0; }
		
		//ID
		public RuleCall getRetypeToSComplexTypeIDTerminalRuleCall_2_2_0_1() { return cRetypeToSComplexTypeIDTerminalRuleCall_2_2_0_1; }
	}
	public class SFuseComplexTypeRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.sm.sim.Sim.SFuseComplexTypeRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSourceAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cSourceDComplexTypeCrossReference_0_0 = (CrossReference)cSourceAssignment_0.eContents().get(0);
		private final RuleCall cSourceDComplexTypeSQualifiedNameParserRuleCall_0_0_1 = (RuleCall)cSourceDComplexTypeCrossReference_0_0.eContents().get(1);
		private final Keyword cAndKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSource2Assignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cSource2DComplexTypeCrossReference_2_0 = (CrossReference)cSource2Assignment_2.eContents().get(0);
		private final RuleCall cSource2DComplexTypeSQualifiedNameParserRuleCall_2_0_1 = (RuleCall)cSource2DComplexTypeCrossReference_2_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cAsKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cRenameToAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cRenameToIDTerminalRuleCall_3_1_0 = (RuleCall)cRenameToAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cExtendsKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cExtendFromAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final CrossReference cExtendFromSComplexTypeCrossReference_4_1_0 = (CrossReference)cExtendFromAssignment_4_1.eContents().get(0);
		private final RuleCall cExtendFromSComplexTypeIDTerminalRuleCall_4_1_0_1 = (RuleCall)cExtendFromSComplexTypeCrossReference_4_1_0.eContents().get(1);
		
		//SFuseComplexTypeRule SFuseRule:
		//	source=[DComplexType|SQualifiedName]
		//	'and'
		//	source2=[DComplexType|SQualifiedName] ('as' renameTo=ID)? ('extends' extendFrom=[SComplexType])?;
		@Override public ParserRule getRule() { return rule; }
		
		//source=[DComplexType|SQualifiedName] 'and' source2=[DComplexType|SQualifiedName] ('as' renameTo=ID)? ('extends'
		//extendFrom=[SComplexType])?
		public Group getGroup() { return cGroup; }
		
		//source=[DComplexType|SQualifiedName]
		public Assignment getSourceAssignment_0() { return cSourceAssignment_0; }
		
		//[DComplexType|SQualifiedName]
		public CrossReference getSourceDComplexTypeCrossReference_0_0() { return cSourceDComplexTypeCrossReference_0_0; }
		
		//SQualifiedName
		public RuleCall getSourceDComplexTypeSQualifiedNameParserRuleCall_0_0_1() { return cSourceDComplexTypeSQualifiedNameParserRuleCall_0_0_1; }
		
		//'and'
		public Keyword getAndKeyword_1() { return cAndKeyword_1; }
		
		//source2=[DComplexType|SQualifiedName]
		public Assignment getSource2Assignment_2() { return cSource2Assignment_2; }
		
		//[DComplexType|SQualifiedName]
		public CrossReference getSource2DComplexTypeCrossReference_2_0() { return cSource2DComplexTypeCrossReference_2_0; }
		
		//SQualifiedName
		public RuleCall getSource2DComplexTypeSQualifiedNameParserRuleCall_2_0_1() { return cSource2DComplexTypeSQualifiedNameParserRuleCall_2_0_1; }
		
		//('as' renameTo=ID)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'as'
		public Keyword getAsKeyword_3_0() { return cAsKeyword_3_0; }
		
		//renameTo=ID
		public Assignment getRenameToAssignment_3_1() { return cRenameToAssignment_3_1; }
		
		//ID
		public RuleCall getRenameToIDTerminalRuleCall_3_1_0() { return cRenameToIDTerminalRuleCall_3_1_0; }
		
		//('extends' extendFrom=[SComplexType])?
		public Group getGroup_4() { return cGroup_4; }
		
		//'extends'
		public Keyword getExtendsKeyword_4_0() { return cExtendsKeyword_4_0; }
		
		//extendFrom=[SComplexType]
		public Assignment getExtendFromAssignment_4_1() { return cExtendFromAssignment_4_1; }
		
		//[SComplexType]
		public CrossReference getExtendFromSComplexTypeCrossReference_4_1_0() { return cExtendFromSComplexTypeCrossReference_4_1_0; }
		
		//ID
		public RuleCall getExtendFromSComplexTypeIDTerminalRuleCall_4_1_0_1() { return cExtendFromSComplexTypeIDTerminalRuleCall_4_1_0_1; }
	}
	public class SGrabFeatureRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.sm.sim.Sim.SGrabFeatureRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSourceAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cSourceDFeatureCrossReference_0_0 = (CrossReference)cSourceAssignment_0.eContents().get(0);
		private final RuleCall cSourceDFeatureIDTerminalRuleCall_0_0_1 = (RuleCall)cSourceDFeatureCrossReference_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cAsKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cRenameToAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRenameToIDTerminalRuleCall_1_1_0 = (RuleCall)cRenameToAssignment_1_1.eContents().get(0);
		
		//SGrabFeatureRule SGrabRule:
		//	source=[DFeature] ('as' renameTo=ID)?;
		@Override public ParserRule getRule() { return rule; }
		
		//source=[DFeature] ('as' renameTo=ID)?
		public Group getGroup() { return cGroup; }
		
		//source=[DFeature]
		public Assignment getSourceAssignment_0() { return cSourceAssignment_0; }
		
		//[DFeature]
		public CrossReference getSourceDFeatureCrossReference_0_0() { return cSourceDFeatureCrossReference_0_0; }
		
		//ID
		public RuleCall getSourceDFeatureIDTerminalRuleCall_0_0_1() { return cSourceDFeatureIDTerminalRuleCall_0_0_1; }
		
		//('as' renameTo=ID)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'as'
		public Keyword getAsKeyword_1_0() { return cAsKeyword_1_0; }
		
		//renameTo=ID
		public Assignment getRenameToAssignment_1_1() { return cRenameToAssignment_1_1; }
		
		//ID
		public RuleCall getRenameToIDTerminalRuleCall_1_1_0() { return cRenameToIDTerminalRuleCall_1_1_0; }
	}
	public class SMorphFeatureRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.sm.sim.Sim.SMorphFeatureRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSourceAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cSourceDFeatureCrossReference_0_0 = (CrossReference)cSourceAssignment_0.eContents().get(0);
		private final RuleCall cSourceDFeatureIDTerminalRuleCall_0_0_1 = (RuleCall)cSourceDFeatureCrossReference_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cAsKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cRenameToAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRenameToIDTerminalRuleCall_1_1_0 = (RuleCall)cRenameToAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cColonKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cRetypeToAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cRetypeToSTypeCrossReference_2_1_0 = (CrossReference)cRetypeToAssignment_2_1.eContents().get(0);
		private final RuleCall cRetypeToSTypeIDTerminalRuleCall_2_1_0_1 = (RuleCall)cRetypeToSTypeCrossReference_2_1_0.eContents().get(1);
		private final Assignment cRemultiplyToAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cRemultiplyToSMultiplicityParserRuleCall_2_2_0 = (RuleCall)cRemultiplyToAssignment_2_2.eContents().get(0);
		
		//SMorphFeatureRule SMorphRule:
		//	source=[DFeature] ('as' renameTo=ID)? (':' retypeTo=[SType] remultiplyTo=SMultiplicity?)?;
		@Override public ParserRule getRule() { return rule; }
		
		//source=[DFeature] ('as' renameTo=ID)? (':' retypeTo=[SType] remultiplyTo=SMultiplicity?)?
		public Group getGroup() { return cGroup; }
		
		//source=[DFeature]
		public Assignment getSourceAssignment_0() { return cSourceAssignment_0; }
		
		//[DFeature]
		public CrossReference getSourceDFeatureCrossReference_0_0() { return cSourceDFeatureCrossReference_0_0; }
		
		//ID
		public RuleCall getSourceDFeatureIDTerminalRuleCall_0_0_1() { return cSourceDFeatureIDTerminalRuleCall_0_0_1; }
		
		//('as' renameTo=ID)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'as'
		public Keyword getAsKeyword_1_0() { return cAsKeyword_1_0; }
		
		//renameTo=ID
		public Assignment getRenameToAssignment_1_1() { return cRenameToAssignment_1_1; }
		
		//ID
		public RuleCall getRenameToIDTerminalRuleCall_1_1_0() { return cRenameToIDTerminalRuleCall_1_1_0; }
		
		//(':' retypeTo=[SType] remultiplyTo=SMultiplicity?)?
		public Group getGroup_2() { return cGroup_2; }
		
		//':'
		public Keyword getColonKeyword_2_0() { return cColonKeyword_2_0; }
		
		//retypeTo=[SType]
		public Assignment getRetypeToAssignment_2_1() { return cRetypeToAssignment_2_1; }
		
		//[SType]
		public CrossReference getRetypeToSTypeCrossReference_2_1_0() { return cRetypeToSTypeCrossReference_2_1_0; }
		
		//ID
		public RuleCall getRetypeToSTypeIDTerminalRuleCall_2_1_0_1() { return cRetypeToSTypeIDTerminalRuleCall_2_1_0_1; }
		
		//remultiplyTo=SMultiplicity?
		public Assignment getRemultiplyToAssignment_2_2() { return cRemultiplyToAssignment_2_2; }
		
		//SMultiplicity
		public RuleCall getRemultiplyToSMultiplicityParserRuleCall_2_2_0() { return cRemultiplyToSMultiplicityParserRuleCall_2_2_0; }
	}
	public class SDitchFeatureRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.sm.sim.Sim.SDitchFeatureRule");
		private final Assignment cSourceAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cSourceDFeatureCrossReference_0 = (CrossReference)cSourceAssignment.eContents().get(0);
		private final RuleCall cSourceDFeatureIDTerminalRuleCall_0_1 = (RuleCall)cSourceDFeatureCrossReference_0.eContents().get(1);
		
		//SDitchFeatureRule SDitchRule:
		//	source=[DFeature];
		@Override public ParserRule getRule() { return rule; }
		
		//source=[DFeature]
		public Assignment getSourceAssignment() { return cSourceAssignment; }
		
		//[DFeature]
		public CrossReference getSourceDFeatureCrossReference_0() { return cSourceDFeatureCrossReference_0; }
		
		//ID
		public RuleCall getSourceDFeatureIDTerminalRuleCall_0_1() { return cSourceDFeatureIDTerminalRuleCall_0_1; }
	}
	public class SAggregateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.sm.sim.Sim.SAggregate");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSAggregateAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cGrabKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Keyword cAggregateKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Assignment cDeductionRuleAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cDeductionRuleSGrabAggregateRuleParserRuleCall_1_0_2_0 = (RuleCall)cDeductionRuleAssignment_1_0_2.eContents().get(0);
		private final Keyword cAggregateKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypesSTypeParserRuleCall_3_0 = (RuleCall)cTypesAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//SAggregate:
		//	{SAggregate} ('grab' 'aggregate' deductionRule=SGrabAggregateRule
		//	| 'aggregate')
		//	//	(description=DRichText)?
		//	'{'
		//	types+=SType*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{SAggregate} ('grab' 'aggregate' deductionRule=SGrabAggregateRule | 'aggregate') //	(description=DRichText)?
		//'{' types+=SType* '}'
		public Group getGroup() { return cGroup; }
		
		//{SAggregate}
		public Action getSAggregateAction_0() { return cSAggregateAction_0; }
		
		//'grab' 'aggregate' deductionRule=SGrabAggregateRule | 'aggregate'
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'grab' 'aggregate' deductionRule=SGrabAggregateRule
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//'grab'
		public Keyword getGrabKeyword_1_0_0() { return cGrabKeyword_1_0_0; }
		
		//'aggregate'
		public Keyword getAggregateKeyword_1_0_1() { return cAggregateKeyword_1_0_1; }
		
		//deductionRule=SGrabAggregateRule
		public Assignment getDeductionRuleAssignment_1_0_2() { return cDeductionRuleAssignment_1_0_2; }
		
		//SGrabAggregateRule
		public RuleCall getDeductionRuleSGrabAggregateRuleParserRuleCall_1_0_2_0() { return cDeductionRuleSGrabAggregateRuleParserRuleCall_1_0_2_0; }
		
		//'aggregate'
		public Keyword getAggregateKeyword_1_1() { return cAggregateKeyword_1_1; }
		
		////	(description=DRichText)?
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//types+=SType*
		public Assignment getTypesAssignment_3() { return cTypesAssignment_3; }
		
		//SType
		public RuleCall getTypesSTypeParserRuleCall_3_0() { return cTypesSTypeParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class STypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.sm.sim.Sim.SType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSPrimitiveParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSPrimitiveArchetypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cSEnumerationParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cSRootTypeParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cSDetailTypeParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		///*
		// * TYPES
		// */ SType:
		//	SPrimitive | SPrimitiveArchetype | SEnumeration | SRootType | SDetailType;
		@Override public ParserRule getRule() { return rule; }
		
		//SPrimitive | SPrimitiveArchetype | SEnumeration | SRootType | SDetailType
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//SPrimitive
		public RuleCall getSPrimitiveParserRuleCall_0() { return cSPrimitiveParserRuleCall_0; }
		
		//SPrimitiveArchetype
		public RuleCall getSPrimitiveArchetypeParserRuleCall_1() { return cSPrimitiveArchetypeParserRuleCall_1; }
		
		//SEnumeration
		public RuleCall getSEnumerationParserRuleCall_2() { return cSEnumerationParserRuleCall_2; }
		
		//SRootType
		public RuleCall getSRootTypeParserRuleCall_3() { return cSRootTypeParserRuleCall_3; }
		
		//SDetailType
		public RuleCall getSDetailTypeParserRuleCall_4() { return cSDetailTypeParserRuleCall_4; }
	}
	public class SConstraintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.sm.sim.Sim.SConstraint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cConstraintKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cConditionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cConditionSExpressionParserRuleCall_3_0 = (RuleCall)cConditionAssignment_3.eContents().get(0);
		
		//SConstraint SCondition:
		//	'constraint'
		//	name=ID
		//	':'
		//	condition=SExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//'constraint' name=ID ':' condition=SExpression
		public Group getGroup() { return cGroup; }
		
		//'constraint'
		public Keyword getConstraintKeyword_0() { return cConstraintKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//condition=SExpression
		public Assignment getConditionAssignment_3() { return cConditionAssignment_3; }
		
		//SExpression
		public RuleCall getConditionSExpressionParserRuleCall_3_0() { return cConditionSExpressionParserRuleCall_3_0; }
	}
	public class SPrimitiveElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.sm.sim.Sim.SPrimitive");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPrimitiveKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final Keyword cRedefinesKeyword_2_0_0 = (Keyword)cGroup_2_0.eContents().get(0);
		private final Assignment cRedefinesAssignment_2_0_1 = (Assignment)cGroup_2_0.eContents().get(1);
		private final CrossReference cRedefinesSPrimitiveCrossReference_2_0_1_0 = (CrossReference)cRedefinesAssignment_2_0_1.eContents().get(0);
		private final RuleCall cRedefinesSPrimitiveIDTerminalRuleCall_2_0_1_0_1 = (RuleCall)cRedefinesSPrimitiveCrossReference_2_0_1_0.eContents().get(1);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Alternatives cAlternatives_2_1_0 = (Alternatives)cGroup_2_1.eContents().get(0);
		private final Keyword cRealizesKeyword_2_1_0_0 = (Keyword)cAlternatives_2_1_0.eContents().get(0);
		private final Keyword cRealisesKeyword_2_1_0_1 = (Keyword)cAlternatives_2_1_0.eContents().get(1);
		private final Assignment cRealizesAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final CrossReference cRealizesDPrimitiveCrossReference_2_1_1_0 = (CrossReference)cRealizesAssignment_2_1_1.eContents().get(0);
		private final RuleCall cRealizesDPrimitiveSQualifiedNameParserRuleCall_2_1_1_0_1 = (RuleCall)cRealizesDPrimitiveCrossReference_2_1_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cConstraintsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cConstraintsSConstraintParserRuleCall_4_0 = (RuleCall)cConstraintsAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		////	(description=DRichText)?;
		//SPrimitive:
		//	'primitive'
		//	name=ID ('redefines' redefines=[SPrimitive] | ('realizes' | 'realises') realizes=[DPrimitive|SQualifiedName])
		//	//(description=DRichText)?
		//	'{'
		//	constraints+=SConstraint*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'primitive' name=ID ('redefines' redefines=[SPrimitive] | ('realizes' | 'realises')
		//realizes=[DPrimitive|SQualifiedName]) //(description=DRichText)?
		//'{' constraints+=SConstraint* '}'
		public Group getGroup() { return cGroup; }
		
		//'primitive'
		public Keyword getPrimitiveKeyword_0() { return cPrimitiveKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'redefines' redefines=[SPrimitive] | ('realizes' | 'realises') realizes=[DPrimitive|SQualifiedName]
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//'redefines' redefines=[SPrimitive]
		public Group getGroup_2_0() { return cGroup_2_0; }
		
		//'redefines'
		public Keyword getRedefinesKeyword_2_0_0() { return cRedefinesKeyword_2_0_0; }
		
		//redefines=[SPrimitive]
		public Assignment getRedefinesAssignment_2_0_1() { return cRedefinesAssignment_2_0_1; }
		
		//[SPrimitive]
		public CrossReference getRedefinesSPrimitiveCrossReference_2_0_1_0() { return cRedefinesSPrimitiveCrossReference_2_0_1_0; }
		
		//ID
		public RuleCall getRedefinesSPrimitiveIDTerminalRuleCall_2_0_1_0_1() { return cRedefinesSPrimitiveIDTerminalRuleCall_2_0_1_0_1; }
		
		//('realizes' | 'realises') realizes=[DPrimitive|SQualifiedName]
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//'realizes' | 'realises'
		public Alternatives getAlternatives_2_1_0() { return cAlternatives_2_1_0; }
		
		//'realizes'
		public Keyword getRealizesKeyword_2_1_0_0() { return cRealizesKeyword_2_1_0_0; }
		
		//'realises'
		public Keyword getRealisesKeyword_2_1_0_1() { return cRealisesKeyword_2_1_0_1; }
		
		//realizes=[DPrimitive|SQualifiedName]
		public Assignment getRealizesAssignment_2_1_1() { return cRealizesAssignment_2_1_1; }
		
		//[DPrimitive|SQualifiedName]
		public CrossReference getRealizesDPrimitiveCrossReference_2_1_1_0() { return cRealizesDPrimitiveCrossReference_2_1_1_0; }
		
		//SQualifiedName
		public RuleCall getRealizesDPrimitiveSQualifiedNameParserRuleCall_2_1_1_0_1() { return cRealizesDPrimitiveSQualifiedNameParserRuleCall_2_1_1_0_1; }
		
		////(description=DRichText)?
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//constraints+=SConstraint*
		public Assignment getConstraintsAssignment_4() { return cConstraintsAssignment_4; }
		
		//SConstraint
		public RuleCall getConstraintsSConstraintParserRuleCall_4_0() { return cConstraintsSConstraintParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class SPrimitiveArchetypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.sm.sim.Sim.SPrimitiveArchetype");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cArchetypeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cConstraintsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cConstraintsSConstraintParserRuleCall_3_0 = (RuleCall)cConstraintsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//SPrimitiveArchetype SPrimitive:
		//	'archetype'
		//	name=ID
		//	// (description=DRichText)?
		//	'{'
		//	constraints+=SConstraint*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'archetype' name=ID // (description=DRichText)?
		//'{' constraints+=SConstraint* '}'
		public Group getGroup() { return cGroup; }
		
		//'archetype'
		public Keyword getArchetypeKeyword_0() { return cArchetypeKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//// (description=DRichText)?
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//constraints+=SConstraint*
		public Assignment getConstraintsAssignment_3() { return cConstraintsAssignment_3; }
		
		//SConstraint
		public RuleCall getConstraintsSConstraintParserRuleCall_3_0() { return cConstraintsSConstraintParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class SEnumerationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.sm.sim.Sim.SEnumeration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cAlternatives_0.eContents().get(0);
		private final Action cSEnumerationAction_0_0_0 = (Action)cGroup_0_0.eContents().get(0);
		private final Keyword cGrabKeyword_0_0_1 = (Keyword)cGroup_0_0.eContents().get(1);
		private final Keyword cEnumerationKeyword_0_0_2 = (Keyword)cGroup_0_0.eContents().get(2);
		private final Assignment cDeductionRuleAssignment_0_0_3 = (Assignment)cGroup_0_0.eContents().get(3);
		private final RuleCall cDeductionRuleSGrabEnumerationRuleParserRuleCall_0_0_3_0 = (RuleCall)cDeductionRuleAssignment_0_0_3.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cAlternatives_0.eContents().get(1);
		private final Action cSEnumerationAction_0_1_0 = (Action)cGroup_0_1.eContents().get(0);
		private final Keyword cDitchKeyword_0_1_1 = (Keyword)cGroup_0_1.eContents().get(1);
		private final Keyword cEnumerationKeyword_0_1_2 = (Keyword)cGroup_0_1.eContents().get(2);
		private final Assignment cDeductionRuleAssignment_0_1_3 = (Assignment)cGroup_0_1.eContents().get(3);
		private final RuleCall cDeductionRuleSDitchEnumerationRuleParserRuleCall_0_1_3_0 = (RuleCall)cDeductionRuleAssignment_0_1_3.eContents().get(0);
		private final Group cGroup_0_2 = (Group)cAlternatives_0.eContents().get(2);
		private final Keyword cEnumerationKeyword_0_2_0 = (Keyword)cGroup_0_2.eContents().get(0);
		private final Assignment cNameAssignment_0_2_1 = (Assignment)cGroup_0_2.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0_2_1_0 = (RuleCall)cNameAssignment_0_2_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cLiteralsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cLiteralsSLiteralParserRuleCall_2_0_0 = (RuleCall)cLiteralsAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cLiteralsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cLiteralsSLiteralParserRuleCall_2_1_1_0 = (RuleCall)cLiteralsAssignment_2_1_1.eContents().get(0);
		private final Assignment cConstraintsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cConstraintsSConstraintParserRuleCall_3_0 = (RuleCall)cConstraintsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//SEnumeration:
		//	({SEnumeration} 'grab' 'enumeration' deductionRule=SGrabEnumerationRule
		//	| {SEnumeration} 'ditch' 'enumeration' deductionRule=SDitchEnumerationRule
		//	| 'enumeration'
		//	name=ID
		//	//	(description=DRichText)?
		//)
		//	'{' (literals+=SLiteral (',' literals+=SLiteral)*)?
		//	constraints+=SConstraint*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//({SEnumeration} 'grab' 'enumeration' deductionRule=SGrabEnumerationRule | {SEnumeration} 'ditch' 'enumeration'
		//deductionRule=SDitchEnumerationRule | 'enumeration' name=ID //	(description=DRichText)?
		//) '{' (literals+=SLiteral (',' literals+=SLiteral)*)? constraints+=SConstraint* '}'
		public Group getGroup() { return cGroup; }
		
		//{SEnumeration} 'grab' 'enumeration' deductionRule=SGrabEnumerationRule | {SEnumeration} 'ditch' 'enumeration'
		//deductionRule=SDitchEnumerationRule | 'enumeration' name=ID
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//{SEnumeration} 'grab' 'enumeration' deductionRule=SGrabEnumerationRule
		public Group getGroup_0_0() { return cGroup_0_0; }
		
		//{SEnumeration}
		public Action getSEnumerationAction_0_0_0() { return cSEnumerationAction_0_0_0; }
		
		//'grab'
		public Keyword getGrabKeyword_0_0_1() { return cGrabKeyword_0_0_1; }
		
		//'enumeration'
		public Keyword getEnumerationKeyword_0_0_2() { return cEnumerationKeyword_0_0_2; }
		
		//deductionRule=SGrabEnumerationRule
		public Assignment getDeductionRuleAssignment_0_0_3() { return cDeductionRuleAssignment_0_0_3; }
		
		//SGrabEnumerationRule
		public RuleCall getDeductionRuleSGrabEnumerationRuleParserRuleCall_0_0_3_0() { return cDeductionRuleSGrabEnumerationRuleParserRuleCall_0_0_3_0; }
		
		//{SEnumeration} 'ditch' 'enumeration' deductionRule=SDitchEnumerationRule
		public Group getGroup_0_1() { return cGroup_0_1; }
		
		//{SEnumeration}
		public Action getSEnumerationAction_0_1_0() { return cSEnumerationAction_0_1_0; }
		
		//'ditch'
		public Keyword getDitchKeyword_0_1_1() { return cDitchKeyword_0_1_1; }
		
		//'enumeration'
		public Keyword getEnumerationKeyword_0_1_2() { return cEnumerationKeyword_0_1_2; }
		
		//deductionRule=SDitchEnumerationRule
		public Assignment getDeductionRuleAssignment_0_1_3() { return cDeductionRuleAssignment_0_1_3; }
		
		//SDitchEnumerationRule
		public RuleCall getDeductionRuleSDitchEnumerationRuleParserRuleCall_0_1_3_0() { return cDeductionRuleSDitchEnumerationRuleParserRuleCall_0_1_3_0; }
		
		//'enumeration' name=ID
		public Group getGroup_0_2() { return cGroup_0_2; }
		
		//'enumeration'
		public Keyword getEnumerationKeyword_0_2_0() { return cEnumerationKeyword_0_2_0; }
		
		//name=ID
		public Assignment getNameAssignment_0_2_1() { return cNameAssignment_0_2_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_2_1_0() { return cNameIDTerminalRuleCall_0_2_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//(literals+=SLiteral (',' literals+=SLiteral)*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//literals+=SLiteral
		public Assignment getLiteralsAssignment_2_0() { return cLiteralsAssignment_2_0; }
		
		//SLiteral
		public RuleCall getLiteralsSLiteralParserRuleCall_2_0_0() { return cLiteralsSLiteralParserRuleCall_2_0_0; }
		
		//(',' literals+=SLiteral)*
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//','
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }
		
		//literals+=SLiteral
		public Assignment getLiteralsAssignment_2_1_1() { return cLiteralsAssignment_2_1_1; }
		
		//SLiteral
		public RuleCall getLiteralsSLiteralParserRuleCall_2_1_1_0() { return cLiteralsSLiteralParserRuleCall_2_1_1_0; }
		
		//constraints+=SConstraint*
		public Assignment getConstraintsAssignment_3() { return cConstraintsAssignment_3; }
		
		//SConstraint
		public RuleCall getConstraintsSConstraintParserRuleCall_3_0() { return cConstraintsSConstraintParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class SLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.sm.sim.Sim.SLiteral");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cSLiteralAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cGrabKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cDeductionRuleAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cDeductionRuleSGrabEnumerationLiteralRuleParserRuleCall_0_2_0 = (RuleCall)cDeductionRuleAssignment_0_2.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cSLiteralAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cDitchKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cDeductionRuleAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cDeductionRuleSDitchEnumerationLiteralRuleParserRuleCall_1_2_0 = (RuleCall)cDeductionRuleAssignment_1_2.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//SLiteral:
		//	{SLiteral} 'grab' deductionRule=SGrabEnumerationLiteralRule
		//	| {SLiteral} 'ditch' deductionRule=SDitchEnumerationLiteralRule
		//	| name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//{SLiteral} 'grab' deductionRule=SGrabEnumerationLiteralRule | {SLiteral} 'ditch'
		//deductionRule=SDitchEnumerationLiteralRule | name=ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{SLiteral} 'grab' deductionRule=SGrabEnumerationLiteralRule
		public Group getGroup_0() { return cGroup_0; }
		
		//{SLiteral}
		public Action getSLiteralAction_0_0() { return cSLiteralAction_0_0; }
		
		//'grab'
		public Keyword getGrabKeyword_0_1() { return cGrabKeyword_0_1; }
		
		//deductionRule=SGrabEnumerationLiteralRule
		public Assignment getDeductionRuleAssignment_0_2() { return cDeductionRuleAssignment_0_2; }
		
		//SGrabEnumerationLiteralRule
		public RuleCall getDeductionRuleSGrabEnumerationLiteralRuleParserRuleCall_0_2_0() { return cDeductionRuleSGrabEnumerationLiteralRuleParserRuleCall_0_2_0; }
		
		//{SLiteral} 'ditch' deductionRule=SDitchEnumerationLiteralRule
		public Group getGroup_1() { return cGroup_1; }
		
		//{SLiteral}
		public Action getSLiteralAction_1_0() { return cSLiteralAction_1_0; }
		
		//'ditch'
		public Keyword getDitchKeyword_1_1() { return cDitchKeyword_1_1; }
		
		//deductionRule=SDitchEnumerationLiteralRule
		public Assignment getDeductionRuleAssignment_1_2() { return cDeductionRuleAssignment_1_2; }
		
		//SDitchEnumerationLiteralRule
		public RuleCall getDeductionRuleSDitchEnumerationLiteralRuleParserRuleCall_1_2_0() { return cDeductionRuleSDitchEnumerationLiteralRuleParserRuleCall_1_2_0; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
	}
	public class SRootTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.sm.sim.Sim.SRootType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cAlternatives_0.eContents().get(0);
		private final Action cSRootTypeAction_0_0_0 = (Action)cGroup_0_0.eContents().get(0);
		private final Keyword cGrabKeyword_0_0_1 = (Keyword)cGroup_0_0.eContents().get(1);
		private final Assignment cAbstractAssignment_0_0_2 = (Assignment)cGroup_0_0.eContents().get(2);
		private final Keyword cAbstractAbstractKeyword_0_0_2_0 = (Keyword)cAbstractAssignment_0_0_2.eContents().get(0);
		private final Keyword cRootKeyword_0_0_3 = (Keyword)cGroup_0_0.eContents().get(3);
		private final Assignment cDeductionRuleAssignment_0_0_4 = (Assignment)cGroup_0_0.eContents().get(4);
		private final RuleCall cDeductionRuleSGrabComplexTypeRuleParserRuleCall_0_0_4_0 = (RuleCall)cDeductionRuleAssignment_0_0_4.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cAlternatives_0.eContents().get(1);
		private final Action cSRootTypeAction_0_1_0 = (Action)cGroup_0_1.eContents().get(0);
		private final Keyword cDitchKeyword_0_1_1 = (Keyword)cGroup_0_1.eContents().get(1);
		private final Assignment cAbstractAssignment_0_1_2 = (Assignment)cGroup_0_1.eContents().get(2);
		private final Keyword cAbstractAbstractKeyword_0_1_2_0 = (Keyword)cAbstractAssignment_0_1_2.eContents().get(0);
		private final Keyword cRootKeyword_0_1_3 = (Keyword)cGroup_0_1.eContents().get(3);
		private final Assignment cDeductionRuleAssignment_0_1_4 = (Assignment)cGroup_0_1.eContents().get(4);
		private final RuleCall cDeductionRuleSDitchComplexTypeRuleParserRuleCall_0_1_4_0 = (RuleCall)cDeductionRuleAssignment_0_1_4.eContents().get(0);
		private final Group cGroup_0_2 = (Group)cAlternatives_0.eContents().get(2);
		private final Action cSRootTypeAction_0_2_0 = (Action)cGroup_0_2.eContents().get(0);
		private final Keyword cMorphKeyword_0_2_1 = (Keyword)cGroup_0_2.eContents().get(1);
		private final Assignment cAbstractAssignment_0_2_2 = (Assignment)cGroup_0_2.eContents().get(2);
		private final Keyword cAbstractAbstractKeyword_0_2_2_0 = (Keyword)cAbstractAssignment_0_2_2.eContents().get(0);
		private final Keyword cRootKeyword_0_2_3 = (Keyword)cGroup_0_2.eContents().get(3);
		private final Assignment cDeductionRuleAssignment_0_2_4 = (Assignment)cGroup_0_2.eContents().get(4);
		private final RuleCall cDeductionRuleSMorphComplexTypeRuleParserRuleCall_0_2_4_0 = (RuleCall)cDeductionRuleAssignment_0_2_4.eContents().get(0);
		private final Group cGroup_0_3 = (Group)cAlternatives_0.eContents().get(3);
		private final Action cSRootTypeAction_0_3_0 = (Action)cGroup_0_3.eContents().get(0);
		private final Keyword cFuseKeyword_0_3_1 = (Keyword)cGroup_0_3.eContents().get(1);
		private final Assignment cAbstractAssignment_0_3_2 = (Assignment)cGroup_0_3.eContents().get(2);
		private final Keyword cAbstractAbstractKeyword_0_3_2_0 = (Keyword)cAbstractAssignment_0_3_2.eContents().get(0);
		private final Keyword cRootKeyword_0_3_3 = (Keyword)cGroup_0_3.eContents().get(3);
		private final Assignment cDeductionRuleAssignment_0_3_4 = (Assignment)cGroup_0_3.eContents().get(4);
		private final RuleCall cDeductionRuleSFuseComplexTypeRuleParserRuleCall_0_3_4_0 = (RuleCall)cDeductionRuleAssignment_0_3_4.eContents().get(0);
		private final Group cGroup_0_4 = (Group)cAlternatives_0.eContents().get(4);
		private final Assignment cAbstractAssignment_0_4_0 = (Assignment)cGroup_0_4.eContents().get(0);
		private final Keyword cAbstractAbstractKeyword_0_4_0_0 = (Keyword)cAbstractAssignment_0_4_0.eContents().get(0);
		private final Keyword cRootKeyword_0_4_1 = (Keyword)cGroup_0_4.eContents().get(1);
		private final Assignment cNameAssignment_0_4_2 = (Assignment)cGroup_0_4.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_0_4_2_0 = (RuleCall)cNameAssignment_0_4_2.eContents().get(0);
		private final RuleCall cSComplexTypeExtendsParserRuleCall_0_4_3 = (RuleCall)cGroup_0_4.eContents().get(3);
		private final RuleCall cSComplexTypeFeaturesParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		////	(description=DRichText)?;
		//SRootType:
		//	({SRootType} 'grab' abstract?='abstract'? 'root' deductionRule=SGrabComplexTypeRule
		//	| {SRootType} 'ditch' abstract?='abstract'? 'root' deductionRule=SDitchComplexTypeRule
		//	| {SRootType} 'morph' abstract?='abstract'? 'root' deductionRule=SMorphComplexTypeRule
		//	| {SRootType} 'fuse' abstract?='abstract'? 'root' deductionRule=SFuseComplexTypeRule
		//	| abstract?='abstract'? 'root'
		//	name=ID
		//	SComplexTypeExtends) SComplexTypeFeatures;
		@Override public ParserRule getRule() { return rule; }
		
		//({SRootType} 'grab' abstract?='abstract'? 'root' deductionRule=SGrabComplexTypeRule | {SRootType} 'ditch'
		//abstract?='abstract'? 'root' deductionRule=SDitchComplexTypeRule | {SRootType} 'morph' abstract?='abstract'? 'root'
		//deductionRule=SMorphComplexTypeRule | {SRootType} 'fuse' abstract?='abstract'? 'root'
		//deductionRule=SFuseComplexTypeRule | abstract?='abstract'? 'root' name=ID SComplexTypeExtends) SComplexTypeFeatures
		public Group getGroup() { return cGroup; }
		
		//{SRootType} 'grab' abstract?='abstract'? 'root' deductionRule=SGrabComplexTypeRule | {SRootType} 'ditch'
		//abstract?='abstract'? 'root' deductionRule=SDitchComplexTypeRule | {SRootType} 'morph' abstract?='abstract'? 'root'
		//deductionRule=SMorphComplexTypeRule | {SRootType} 'fuse' abstract?='abstract'? 'root'
		//deductionRule=SFuseComplexTypeRule | abstract?='abstract'? 'root' name=ID SComplexTypeExtends
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//{SRootType} 'grab' abstract?='abstract'? 'root' deductionRule=SGrabComplexTypeRule
		public Group getGroup_0_0() { return cGroup_0_0; }
		
		//{SRootType}
		public Action getSRootTypeAction_0_0_0() { return cSRootTypeAction_0_0_0; }
		
		//'grab'
		public Keyword getGrabKeyword_0_0_1() { return cGrabKeyword_0_0_1; }
		
		//abstract?='abstract'?
		public Assignment getAbstractAssignment_0_0_2() { return cAbstractAssignment_0_0_2; }
		
		//'abstract'
		public Keyword getAbstractAbstractKeyword_0_0_2_0() { return cAbstractAbstractKeyword_0_0_2_0; }
		
		//'root'
		public Keyword getRootKeyword_0_0_3() { return cRootKeyword_0_0_3; }
		
		//deductionRule=SGrabComplexTypeRule
		public Assignment getDeductionRuleAssignment_0_0_4() { return cDeductionRuleAssignment_0_0_4; }
		
		//SGrabComplexTypeRule
		public RuleCall getDeductionRuleSGrabComplexTypeRuleParserRuleCall_0_0_4_0() { return cDeductionRuleSGrabComplexTypeRuleParserRuleCall_0_0_4_0; }
		
		//{SRootType} 'ditch' abstract?='abstract'? 'root' deductionRule=SDitchComplexTypeRule
		public Group getGroup_0_1() { return cGroup_0_1; }
		
		//{SRootType}
		public Action getSRootTypeAction_0_1_0() { return cSRootTypeAction_0_1_0; }
		
		//'ditch'
		public Keyword getDitchKeyword_0_1_1() { return cDitchKeyword_0_1_1; }
		
		//abstract?='abstract'?
		public Assignment getAbstractAssignment_0_1_2() { return cAbstractAssignment_0_1_2; }
		
		//'abstract'
		public Keyword getAbstractAbstractKeyword_0_1_2_0() { return cAbstractAbstractKeyword_0_1_2_0; }
		
		//'root'
		public Keyword getRootKeyword_0_1_3() { return cRootKeyword_0_1_3; }
		
		//deductionRule=SDitchComplexTypeRule
		public Assignment getDeductionRuleAssignment_0_1_4() { return cDeductionRuleAssignment_0_1_4; }
		
		//SDitchComplexTypeRule
		public RuleCall getDeductionRuleSDitchComplexTypeRuleParserRuleCall_0_1_4_0() { return cDeductionRuleSDitchComplexTypeRuleParserRuleCall_0_1_4_0; }
		
		//{SRootType} 'morph' abstract?='abstract'? 'root' deductionRule=SMorphComplexTypeRule
		public Group getGroup_0_2() { return cGroup_0_2; }
		
		//{SRootType}
		public Action getSRootTypeAction_0_2_0() { return cSRootTypeAction_0_2_0; }
		
		//'morph'
		public Keyword getMorphKeyword_0_2_1() { return cMorphKeyword_0_2_1; }
		
		//abstract?='abstract'?
		public Assignment getAbstractAssignment_0_2_2() { return cAbstractAssignment_0_2_2; }
		
		//'abstract'
		public Keyword getAbstractAbstractKeyword_0_2_2_0() { return cAbstractAbstractKeyword_0_2_2_0; }
		
		//'root'
		public Keyword getRootKeyword_0_2_3() { return cRootKeyword_0_2_3; }
		
		//deductionRule=SMorphComplexTypeRule
		public Assignment getDeductionRuleAssignment_0_2_4() { return cDeductionRuleAssignment_0_2_4; }
		
		//SMorphComplexTypeRule
		public RuleCall getDeductionRuleSMorphComplexTypeRuleParserRuleCall_0_2_4_0() { return cDeductionRuleSMorphComplexTypeRuleParserRuleCall_0_2_4_0; }
		
		//{SRootType} 'fuse' abstract?='abstract'? 'root' deductionRule=SFuseComplexTypeRule
		public Group getGroup_0_3() { return cGroup_0_3; }
		
		//{SRootType}
		public Action getSRootTypeAction_0_3_0() { return cSRootTypeAction_0_3_0; }
		
		//'fuse'
		public Keyword getFuseKeyword_0_3_1() { return cFuseKeyword_0_3_1; }
		
		//abstract?='abstract'?
		public Assignment getAbstractAssignment_0_3_2() { return cAbstractAssignment_0_3_2; }
		
		//'abstract'
		public Keyword getAbstractAbstractKeyword_0_3_2_0() { return cAbstractAbstractKeyword_0_3_2_0; }
		
		//'root'
		public Keyword getRootKeyword_0_3_3() { return cRootKeyword_0_3_3; }
		
		//deductionRule=SFuseComplexTypeRule
		public Assignment getDeductionRuleAssignment_0_3_4() { return cDeductionRuleAssignment_0_3_4; }
		
		//SFuseComplexTypeRule
		public RuleCall getDeductionRuleSFuseComplexTypeRuleParserRuleCall_0_3_4_0() { return cDeductionRuleSFuseComplexTypeRuleParserRuleCall_0_3_4_0; }
		
		//abstract?='abstract'? 'root' name=ID SComplexTypeExtends
		public Group getGroup_0_4() { return cGroup_0_4; }
		
		//abstract?='abstract'?
		public Assignment getAbstractAssignment_0_4_0() { return cAbstractAssignment_0_4_0; }
		
		//'abstract'
		public Keyword getAbstractAbstractKeyword_0_4_0_0() { return cAbstractAbstractKeyword_0_4_0_0; }
		
		//'root'
		public Keyword getRootKeyword_0_4_1() { return cRootKeyword_0_4_1; }
		
		//name=ID
		public Assignment getNameAssignment_0_4_2() { return cNameAssignment_0_4_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_4_2_0() { return cNameIDTerminalRuleCall_0_4_2_0; }
		
		//SComplexTypeExtends
		public RuleCall getSComplexTypeExtendsParserRuleCall_0_4_3() { return cSComplexTypeExtendsParserRuleCall_0_4_3; }
		
		//SComplexTypeFeatures
		public RuleCall getSComplexTypeFeaturesParserRuleCall_1() { return cSComplexTypeFeaturesParserRuleCall_1; }
	}
	public class SDetailTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.sm.sim.Sim.SDetailType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cAlternatives_0.eContents().get(0);
		private final Action cSDetailTypeAction_0_0_0 = (Action)cGroup_0_0.eContents().get(0);
		private final Keyword cGrabKeyword_0_0_1 = (Keyword)cGroup_0_0.eContents().get(1);
		private final Assignment cAbstractAssignment_0_0_2 = (Assignment)cGroup_0_0.eContents().get(2);
		private final Keyword cAbstractAbstractKeyword_0_0_2_0 = (Keyword)cAbstractAssignment_0_0_2.eContents().get(0);
		private final Keyword cDetailKeyword_0_0_3 = (Keyword)cGroup_0_0.eContents().get(3);
		private final Assignment cDeductionRuleAssignment_0_0_4 = (Assignment)cGroup_0_0.eContents().get(4);
		private final RuleCall cDeductionRuleSGrabComplexTypeRuleParserRuleCall_0_0_4_0 = (RuleCall)cDeductionRuleAssignment_0_0_4.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cAlternatives_0.eContents().get(1);
		private final Action cSDetailTypeAction_0_1_0 = (Action)cGroup_0_1.eContents().get(0);
		private final Keyword cDitchKeyword_0_1_1 = (Keyword)cGroup_0_1.eContents().get(1);
		private final Assignment cAbstractAssignment_0_1_2 = (Assignment)cGroup_0_1.eContents().get(2);
		private final Keyword cAbstractAbstractKeyword_0_1_2_0 = (Keyword)cAbstractAssignment_0_1_2.eContents().get(0);
		private final Keyword cDetailKeyword_0_1_3 = (Keyword)cGroup_0_1.eContents().get(3);
		private final Assignment cDeductionRuleAssignment_0_1_4 = (Assignment)cGroup_0_1.eContents().get(4);
		private final RuleCall cDeductionRuleSDitchComplexTypeRuleParserRuleCall_0_1_4_0 = (RuleCall)cDeductionRuleAssignment_0_1_4.eContents().get(0);
		private final Group cGroup_0_2 = (Group)cAlternatives_0.eContents().get(2);
		private final Action cSDetailTypeAction_0_2_0 = (Action)cGroup_0_2.eContents().get(0);
		private final Keyword cMorphKeyword_0_2_1 = (Keyword)cGroup_0_2.eContents().get(1);
		private final Assignment cAbstractAssignment_0_2_2 = (Assignment)cGroup_0_2.eContents().get(2);
		private final Keyword cAbstractAbstractKeyword_0_2_2_0 = (Keyword)cAbstractAssignment_0_2_2.eContents().get(0);
		private final Keyword cDetailKeyword_0_2_3 = (Keyword)cGroup_0_2.eContents().get(3);
		private final Assignment cDeductionRuleAssignment_0_2_4 = (Assignment)cGroup_0_2.eContents().get(4);
		private final RuleCall cDeductionRuleSMorphComplexTypeRuleParserRuleCall_0_2_4_0 = (RuleCall)cDeductionRuleAssignment_0_2_4.eContents().get(0);
		private final Group cGroup_0_3 = (Group)cAlternatives_0.eContents().get(3);
		private final Action cSDetailTypeAction_0_3_0 = (Action)cGroup_0_3.eContents().get(0);
		private final Keyword cFuseKeyword_0_3_1 = (Keyword)cGroup_0_3.eContents().get(1);
		private final Assignment cAbstractAssignment_0_3_2 = (Assignment)cGroup_0_3.eContents().get(2);
		private final Keyword cAbstractAbstractKeyword_0_3_2_0 = (Keyword)cAbstractAssignment_0_3_2.eContents().get(0);
		private final Keyword cDetailKeyword_0_3_3 = (Keyword)cGroup_0_3.eContents().get(3);
		private final Assignment cDeductionRuleAssignment_0_3_4 = (Assignment)cGroup_0_3.eContents().get(4);
		private final RuleCall cDeductionRuleSFuseComplexTypeRuleParserRuleCall_0_3_4_0 = (RuleCall)cDeductionRuleAssignment_0_3_4.eContents().get(0);
		private final Group cGroup_0_4 = (Group)cAlternatives_0.eContents().get(4);
		private final Assignment cAbstractAssignment_0_4_0 = (Assignment)cGroup_0_4.eContents().get(0);
		private final Keyword cAbstractAbstractKeyword_0_4_0_0 = (Keyword)cAbstractAssignment_0_4_0.eContents().get(0);
		private final Keyword cDetailKeyword_0_4_1 = (Keyword)cGroup_0_4.eContents().get(1);
		private final Assignment cNameAssignment_0_4_2 = (Assignment)cGroup_0_4.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_0_4_2_0 = (RuleCall)cNameAssignment_0_4_2.eContents().get(0);
		private final RuleCall cSComplexTypeExtendsParserRuleCall_0_4_3 = (RuleCall)cGroup_0_4.eContents().get(3);
		private final RuleCall cSComplexTypeFeaturesParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//SDetailType:
		//	({SDetailType} 'grab' abstract?='abstract'? 'detail' deductionRule=SGrabComplexTypeRule
		//	| {SDetailType} 'ditch' abstract?='abstract'? 'detail' deductionRule=SDitchComplexTypeRule
		//	| {SDetailType} 'morph' abstract?='abstract'? 'detail' deductionRule=SMorphComplexTypeRule
		//	| {SDetailType} 'fuse' abstract?='abstract'? 'detail' deductionRule=SFuseComplexTypeRule
		//	| abstract?='abstract'? 'detail'
		//	name=ID
		//	SComplexTypeExtends) SComplexTypeFeatures;
		@Override public ParserRule getRule() { return rule; }
		
		//({SDetailType} 'grab' abstract?='abstract'? 'detail' deductionRule=SGrabComplexTypeRule | {SDetailType} 'ditch'
		//abstract?='abstract'? 'detail' deductionRule=SDitchComplexTypeRule | {SDetailType} 'morph' abstract?='abstract'?
		//'detail' deductionRule=SMorphComplexTypeRule | {SDetailType} 'fuse' abstract?='abstract'? 'detail'
		//deductionRule=SFuseComplexTypeRule | abstract?='abstract'? 'detail' name=ID SComplexTypeExtends) SComplexTypeFeatures
		public Group getGroup() { return cGroup; }
		
		//{SDetailType} 'grab' abstract?='abstract'? 'detail' deductionRule=SGrabComplexTypeRule | {SDetailType} 'ditch'
		//abstract?='abstract'? 'detail' deductionRule=SDitchComplexTypeRule | {SDetailType} 'morph' abstract?='abstract'?
		//'detail' deductionRule=SMorphComplexTypeRule | {SDetailType} 'fuse' abstract?='abstract'? 'detail'
		//deductionRule=SFuseComplexTypeRule | abstract?='abstract'? 'detail' name=ID SComplexTypeExtends
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//{SDetailType} 'grab' abstract?='abstract'? 'detail' deductionRule=SGrabComplexTypeRule
		public Group getGroup_0_0() { return cGroup_0_0; }
		
		//{SDetailType}
		public Action getSDetailTypeAction_0_0_0() { return cSDetailTypeAction_0_0_0; }
		
		//'grab'
		public Keyword getGrabKeyword_0_0_1() { return cGrabKeyword_0_0_1; }
		
		//abstract?='abstract'?
		public Assignment getAbstractAssignment_0_0_2() { return cAbstractAssignment_0_0_2; }
		
		//'abstract'
		public Keyword getAbstractAbstractKeyword_0_0_2_0() { return cAbstractAbstractKeyword_0_0_2_0; }
		
		//'detail'
		public Keyword getDetailKeyword_0_0_3() { return cDetailKeyword_0_0_3; }
		
		//deductionRule=SGrabComplexTypeRule
		public Assignment getDeductionRuleAssignment_0_0_4() { return cDeductionRuleAssignment_0_0_4; }
		
		//SGrabComplexTypeRule
		public RuleCall getDeductionRuleSGrabComplexTypeRuleParserRuleCall_0_0_4_0() { return cDeductionRuleSGrabComplexTypeRuleParserRuleCall_0_0_4_0; }
		
		//{SDetailType} 'ditch' abstract?='abstract'? 'detail' deductionRule=SDitchComplexTypeRule
		public Group getGroup_0_1() { return cGroup_0_1; }
		
		//{SDetailType}
		public Action getSDetailTypeAction_0_1_0() { return cSDetailTypeAction_0_1_0; }
		
		//'ditch'
		public Keyword getDitchKeyword_0_1_1() { return cDitchKeyword_0_1_1; }
		
		//abstract?='abstract'?
		public Assignment getAbstractAssignment_0_1_2() { return cAbstractAssignment_0_1_2; }
		
		//'abstract'
		public Keyword getAbstractAbstractKeyword_0_1_2_0() { return cAbstractAbstractKeyword_0_1_2_0; }
		
		//'detail'
		public Keyword getDetailKeyword_0_1_3() { return cDetailKeyword_0_1_3; }
		
		//deductionRule=SDitchComplexTypeRule
		public Assignment getDeductionRuleAssignment_0_1_4() { return cDeductionRuleAssignment_0_1_4; }
		
		//SDitchComplexTypeRule
		public RuleCall getDeductionRuleSDitchComplexTypeRuleParserRuleCall_0_1_4_0() { return cDeductionRuleSDitchComplexTypeRuleParserRuleCall_0_1_4_0; }
		
		//{SDetailType} 'morph' abstract?='abstract'? 'detail' deductionRule=SMorphComplexTypeRule
		public Group getGroup_0_2() { return cGroup_0_2; }
		
		//{SDetailType}
		public Action getSDetailTypeAction_0_2_0() { return cSDetailTypeAction_0_2_0; }
		
		//'morph'
		public Keyword getMorphKeyword_0_2_1() { return cMorphKeyword_0_2_1; }
		
		//abstract?='abstract'?
		public Assignment getAbstractAssignment_0_2_2() { return cAbstractAssignment_0_2_2; }
		
		//'abstract'
		public Keyword getAbstractAbstractKeyword_0_2_2_0() { return cAbstractAbstractKeyword_0_2_2_0; }
		
		//'detail'
		public Keyword getDetailKeyword_0_2_3() { return cDetailKeyword_0_2_3; }
		
		//deductionRule=SMorphComplexTypeRule
		public Assignment getDeductionRuleAssignment_0_2_4() { return cDeductionRuleAssignment_0_2_4; }
		
		//SMorphComplexTypeRule
		public RuleCall getDeductionRuleSMorphComplexTypeRuleParserRuleCall_0_2_4_0() { return cDeductionRuleSMorphComplexTypeRuleParserRuleCall_0_2_4_0; }
		
		//{SDetailType} 'fuse' abstract?='abstract'? 'detail' deductionRule=SFuseComplexTypeRule
		public Group getGroup_0_3() { return cGroup_0_3; }
		
		//{SDetailType}
		public Action getSDetailTypeAction_0_3_0() { return cSDetailTypeAction_0_3_0; }
		
		//'fuse'
		public Keyword getFuseKeyword_0_3_1() { return cFuseKeyword_0_3_1; }
		
		//abstract?='abstract'?
		public Assignment getAbstractAssignment_0_3_2() { return cAbstractAssignment_0_3_2; }
		
		//'abstract'
		public Keyword getAbstractAbstractKeyword_0_3_2_0() { return cAbstractAbstractKeyword_0_3_2_0; }
		
		//'detail'
		public Keyword getDetailKeyword_0_3_3() { return cDetailKeyword_0_3_3; }
		
		//deductionRule=SFuseComplexTypeRule
		public Assignment getDeductionRuleAssignment_0_3_4() { return cDeductionRuleAssignment_0_3_4; }
		
		//SFuseComplexTypeRule
		public RuleCall getDeductionRuleSFuseComplexTypeRuleParserRuleCall_0_3_4_0() { return cDeductionRuleSFuseComplexTypeRuleParserRuleCall_0_3_4_0; }
		
		//abstract?='abstract'? 'detail' name=ID SComplexTypeExtends
		public Group getGroup_0_4() { return cGroup_0_4; }
		
		//abstract?='abstract'?
		public Assignment getAbstractAssignment_0_4_0() { return cAbstractAssignment_0_4_0; }
		
		//'abstract'
		public Keyword getAbstractAbstractKeyword_0_4_0_0() { return cAbstractAbstractKeyword_0_4_0_0; }
		
		//'detail'
		public Keyword getDetailKeyword_0_4_1() { return cDetailKeyword_0_4_1; }
		
		//name=ID
		public Assignment getNameAssignment_0_4_2() { return cNameAssignment_0_4_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_4_2_0() { return cNameIDTerminalRuleCall_0_4_2_0; }
		
		//SComplexTypeExtends
		public RuleCall getSComplexTypeExtendsParserRuleCall_0_4_3() { return cSComplexTypeExtendsParserRuleCall_0_4_3; }
		
		//SComplexTypeFeatures
		public RuleCall getSComplexTypeFeaturesParserRuleCall_1() { return cSComplexTypeFeaturesParserRuleCall_1; }
	}
	public class SComplexTypeExtendsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.sm.sim.Sim.SComplexTypeExtends");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExtendsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cSuperTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cSuperTypeSComplexTypeCrossReference_1_0 = (CrossReference)cSuperTypeAssignment_1.eContents().get(0);
		private final RuleCall cSuperTypeSComplexTypeIDTerminalRuleCall_1_0_1 = (RuleCall)cSuperTypeSComplexTypeCrossReference_1_0.eContents().get(1);
		
		//fragment SComplexTypeExtends returns SComplexType:
		//	('extends' superType=[SComplexType])?
		//	//	(description=DRichText)?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//('extends' superType=[SComplexType])?
		public Group getGroup() { return cGroup; }
		
		//'extends'
		public Keyword getExtendsKeyword_0() { return cExtendsKeyword_0; }
		
		//superType=[SComplexType]
		public Assignment getSuperTypeAssignment_1() { return cSuperTypeAssignment_1; }
		
		//[SComplexType]
		public CrossReference getSuperTypeSComplexTypeCrossReference_1_0() { return cSuperTypeSComplexTypeCrossReference_1_0; }
		
		//ID
		public RuleCall getSuperTypeSComplexTypeIDTerminalRuleCall_1_0_1() { return cSuperTypeSComplexTypeIDTerminalRuleCall_1_0_1; }
	}
	public class SComplexTypeFeaturesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.sm.sim.Sim.SComplexTypeFeatures");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cFeaturesAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cFeaturesSFeatureParserRuleCall_1_0_0 = (RuleCall)cFeaturesAssignment_1_0.eContents().get(0);
		private final Assignment cConstraintsAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cConstraintsSConstraintParserRuleCall_1_1_0 = (RuleCall)cConstraintsAssignment_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//fragment SComplexTypeFeatures returns SComplexType:
		//	'{' (features+=SFeature | constraints+=SConstraint)*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'{' (features+=SFeature | constraints+=SConstraint)* '}'
		public Group getGroup() { return cGroup; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }
		
		//(features+=SFeature | constraints+=SConstraint)*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//features+=SFeature
		public Assignment getFeaturesAssignment_1_0() { return cFeaturesAssignment_1_0; }
		
		//SFeature
		public RuleCall getFeaturesSFeatureParserRuleCall_1_0_0() { return cFeaturesSFeatureParserRuleCall_1_0_0; }
		
		//constraints+=SConstraint
		public Assignment getConstraintsAssignment_1_1() { return cConstraintsAssignment_1_1; }
		
		//SConstraint
		public RuleCall getConstraintsSConstraintParserRuleCall_1_1_0() { return cConstraintsSConstraintParserRuleCall_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_2() { return cRightCurlyBracketKeyword_2; }
	}
	public class SFeatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.sm.sim.Sim.SFeature");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSAssociationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSAttributeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cSQueryParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//SFeature:
		//	SAssociation | SAttribute | SQuery;
		@Override public ParserRule getRule() { return rule; }
		
		//SAssociation | SAttribute | SQuery
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//SAssociation
		public RuleCall getSAssociationParserRuleCall_0() { return cSAssociationParserRuleCall_0; }
		
		//SAttribute
		public RuleCall getSAttributeParserRuleCall_1() { return cSAttributeParserRuleCall_1; }
		
		//SQuery
		public RuleCall getSQueryParserRuleCall_2() { return cSQueryParserRuleCall_2; }
	}
	public class SAssociationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.sm.sim.Sim.SAssociation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cSAssociationAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cGrabKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Alternatives cAlternatives_0_2 = (Alternatives)cGroup_0.eContents().get(2);
		private final Keyword cReferenceKeyword_0_2_0 = (Keyword)cAlternatives_0_2.eContents().get(0);
		private final Keyword cCompositeKeyword_0_2_1 = (Keyword)cAlternatives_0_2.eContents().get(1);
		private final Assignment cDeductionRuleAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cDeductionRuleSGrabFeatureRuleParserRuleCall_0_3_0 = (RuleCall)cDeductionRuleAssignment_0_3.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cSAssociationAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cMorphKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Alternatives cAlternatives_1_2 = (Alternatives)cGroup_1.eContents().get(2);
		private final Keyword cReferenceKeyword_1_2_0 = (Keyword)cAlternatives_1_2.eContents().get(0);
		private final Keyword cCompositeKeyword_1_2_1 = (Keyword)cAlternatives_1_2.eContents().get(1);
		private final Assignment cDeductionRuleAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cDeductionRuleSMorphFeatureRuleParserRuleCall_1_3_0 = (RuleCall)cDeductionRuleAssignment_1_3.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cSAssociationAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cDitchKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Alternatives cAlternatives_2_2 = (Alternatives)cGroup_2.eContents().get(2);
		private final Keyword cReferenceKeyword_2_2_0 = (Keyword)cAlternatives_2_2.eContents().get(0);
		private final Keyword cCompositeKeyword_2_2_1 = (Keyword)cAlternatives_2_2.eContents().get(1);
		private final Assignment cDeductionRuleAssignment_2_3 = (Assignment)cGroup_2.eContents().get(3);
		private final RuleCall cDeductionRuleSDitchFeatureRuleParserRuleCall_2_3_0 = (RuleCall)cDeductionRuleAssignment_2_3.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Assignment cDerivedAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final Keyword cDerivedDerivedKeyword_3_0_0 = (Keyword)cDerivedAssignment_3_0.eContents().get(0);
		private final Alternatives cAlternatives_3_1 = (Alternatives)cGroup_3.eContents().get(1);
		private final Assignment cKindAssignment_3_1_0 = (Assignment)cAlternatives_3_1.eContents().get(0);
		private final RuleCall cKindSAssociationKindEnumRuleCall_3_1_0_0 = (RuleCall)cKindAssignment_3_1_0.eContents().get(0);
		private final Group cGroup_3_1_1 = (Group)cAlternatives_3_1.eContents().get(1);
		private final Assignment cKindAssignment_3_1_1_0 = (Assignment)cGroup_3_1_1.eContents().get(0);
		private final RuleCall cKindSAssociationKindInverseEnumRuleCall_3_1_1_0_0 = (RuleCall)cKindAssignment_3_1_1_0.eContents().get(0);
		private final Keyword cCompositeKeyword_3_1_1_1 = (Keyword)cGroup_3_1_1.eContents().get(1);
		private final Assignment cNameAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_3_2_0 = (RuleCall)cNameAssignment_3_2.eContents().get(0);
		private final Keyword cColonKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		private final Assignment cTypeAssignment_3_4 = (Assignment)cGroup_3.eContents().get(4);
		private final CrossReference cTypeSRootTypeCrossReference_3_4_0 = (CrossReference)cTypeAssignment_3_4.eContents().get(0);
		private final RuleCall cTypeSRootTypeIDTerminalRuleCall_3_4_0_1 = (RuleCall)cTypeSRootTypeCrossReference_3_4_0.eContents().get(1);
		private final Assignment cMultiplicityAssignment_3_5 = (Assignment)cGroup_3.eContents().get(5);
		private final RuleCall cMultiplicitySMultiplicityParserRuleCall_3_5_0 = (RuleCall)cMultiplicityAssignment_3_5.eContents().get(0);
		
		//SAssociation:
		//	{SAssociation} 'grab' ('reference' | 'composite') deductionRule=SGrabFeatureRule
		//	| {SAssociation} 'morph' ('reference' | 'composite') deductionRule=SMorphFeatureRule
		//	| {SAssociation} 'ditch' ('reference' | 'composite') deductionRule=SDitchFeatureRule
		//	| derived?='derived'? (kind=SAssociationKind | kind=SAssociationKindInverse 'composite') name=ID
		//	':'
		//	type=[SRootType] multiplicity=SMultiplicity?
		//	//	(description=DRichText)?;
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{SAssociation} 'grab' ('reference' | 'composite') deductionRule=SGrabFeatureRule | {SAssociation} 'morph' ('reference' |
		//'composite') deductionRule=SMorphFeatureRule | {SAssociation} 'ditch' ('reference' | 'composite')
		//deductionRule=SDitchFeatureRule | derived?='derived'? (kind=SAssociationKind | kind=SAssociationKindInverse
		//'composite') name=ID ':' type=[SRootType] multiplicity=SMultiplicity?
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{SAssociation} 'grab' ('reference' | 'composite') deductionRule=SGrabFeatureRule
		public Group getGroup_0() { return cGroup_0; }
		
		//{SAssociation}
		public Action getSAssociationAction_0_0() { return cSAssociationAction_0_0; }
		
		//'grab'
		public Keyword getGrabKeyword_0_1() { return cGrabKeyword_0_1; }
		
		//'reference' | 'composite'
		public Alternatives getAlternatives_0_2() { return cAlternatives_0_2; }
		
		//'reference'
		public Keyword getReferenceKeyword_0_2_0() { return cReferenceKeyword_0_2_0; }
		
		//'composite'
		public Keyword getCompositeKeyword_0_2_1() { return cCompositeKeyword_0_2_1; }
		
		//deductionRule=SGrabFeatureRule
		public Assignment getDeductionRuleAssignment_0_3() { return cDeductionRuleAssignment_0_3; }
		
		//SGrabFeatureRule
		public RuleCall getDeductionRuleSGrabFeatureRuleParserRuleCall_0_3_0() { return cDeductionRuleSGrabFeatureRuleParserRuleCall_0_3_0; }
		
		//{SAssociation} 'morph' ('reference' | 'composite') deductionRule=SMorphFeatureRule
		public Group getGroup_1() { return cGroup_1; }
		
		//{SAssociation}
		public Action getSAssociationAction_1_0() { return cSAssociationAction_1_0; }
		
		//'morph'
		public Keyword getMorphKeyword_1_1() { return cMorphKeyword_1_1; }
		
		//'reference' | 'composite'
		public Alternatives getAlternatives_1_2() { return cAlternatives_1_2; }
		
		//'reference'
		public Keyword getReferenceKeyword_1_2_0() { return cReferenceKeyword_1_2_0; }
		
		//'composite'
		public Keyword getCompositeKeyword_1_2_1() { return cCompositeKeyword_1_2_1; }
		
		//deductionRule=SMorphFeatureRule
		public Assignment getDeductionRuleAssignment_1_3() { return cDeductionRuleAssignment_1_3; }
		
		//SMorphFeatureRule
		public RuleCall getDeductionRuleSMorphFeatureRuleParserRuleCall_1_3_0() { return cDeductionRuleSMorphFeatureRuleParserRuleCall_1_3_0; }
		
		//{SAssociation} 'ditch' ('reference' | 'composite') deductionRule=SDitchFeatureRule
		public Group getGroup_2() { return cGroup_2; }
		
		//{SAssociation}
		public Action getSAssociationAction_2_0() { return cSAssociationAction_2_0; }
		
		//'ditch'
		public Keyword getDitchKeyword_2_1() { return cDitchKeyword_2_1; }
		
		//'reference' | 'composite'
		public Alternatives getAlternatives_2_2() { return cAlternatives_2_2; }
		
		//'reference'
		public Keyword getReferenceKeyword_2_2_0() { return cReferenceKeyword_2_2_0; }
		
		//'composite'
		public Keyword getCompositeKeyword_2_2_1() { return cCompositeKeyword_2_2_1; }
		
		//deductionRule=SDitchFeatureRule
		public Assignment getDeductionRuleAssignment_2_3() { return cDeductionRuleAssignment_2_3; }
		
		//SDitchFeatureRule
		public RuleCall getDeductionRuleSDitchFeatureRuleParserRuleCall_2_3_0() { return cDeductionRuleSDitchFeatureRuleParserRuleCall_2_3_0; }
		
		//derived?='derived'? (kind=SAssociationKind | kind=SAssociationKindInverse 'composite') name=ID ':' type=[SRootType]
		//multiplicity=SMultiplicity?
		public Group getGroup_3() { return cGroup_3; }
		
		//derived?='derived'?
		public Assignment getDerivedAssignment_3_0() { return cDerivedAssignment_3_0; }
		
		//'derived'
		public Keyword getDerivedDerivedKeyword_3_0_0() { return cDerivedDerivedKeyword_3_0_0; }
		
		//kind=SAssociationKind | kind=SAssociationKindInverse 'composite'
		public Alternatives getAlternatives_3_1() { return cAlternatives_3_1; }
		
		//kind=SAssociationKind
		public Assignment getKindAssignment_3_1_0() { return cKindAssignment_3_1_0; }
		
		//SAssociationKind
		public RuleCall getKindSAssociationKindEnumRuleCall_3_1_0_0() { return cKindSAssociationKindEnumRuleCall_3_1_0_0; }
		
		//kind=SAssociationKindInverse 'composite'
		public Group getGroup_3_1_1() { return cGroup_3_1_1; }
		
		//kind=SAssociationKindInverse
		public Assignment getKindAssignment_3_1_1_0() { return cKindAssignment_3_1_1_0; }
		
		//SAssociationKindInverse
		public RuleCall getKindSAssociationKindInverseEnumRuleCall_3_1_1_0_0() { return cKindSAssociationKindInverseEnumRuleCall_3_1_1_0_0; }
		
		//'composite'
		public Keyword getCompositeKeyword_3_1_1_1() { return cCompositeKeyword_3_1_1_1; }
		
		//name=ID
		public Assignment getNameAssignment_3_2() { return cNameAssignment_3_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_3_2_0() { return cNameIDTerminalRuleCall_3_2_0; }
		
		//':'
		public Keyword getColonKeyword_3_3() { return cColonKeyword_3_3; }
		
		//type=[SRootType]
		public Assignment getTypeAssignment_3_4() { return cTypeAssignment_3_4; }
		
		//[SRootType]
		public CrossReference getTypeSRootTypeCrossReference_3_4_0() { return cTypeSRootTypeCrossReference_3_4_0; }
		
		//ID
		public RuleCall getTypeSRootTypeIDTerminalRuleCall_3_4_0_1() { return cTypeSRootTypeIDTerminalRuleCall_3_4_0_1; }
		
		//multiplicity=SMultiplicity?
		public Assignment getMultiplicityAssignment_3_5() { return cMultiplicityAssignment_3_5; }
		
		//SMultiplicity
		public RuleCall getMultiplicitySMultiplicityParserRuleCall_3_5_0() { return cMultiplicitySMultiplicityParserRuleCall_3_5_0; }
	}
	public class SAttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.sm.sim.Sim.SAttribute");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cSAttributeAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cGrabKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Alternatives cAlternatives_0_2 = (Alternatives)cGroup_0.eContents().get(2);
		private final Keyword cAttributeKeyword_0_2_0 = (Keyword)cAlternatives_0_2.eContents().get(0);
		private final Assignment cDetailAssignment_0_2_1 = (Assignment)cAlternatives_0_2.eContents().get(1);
		private final Keyword cDetailDetailKeyword_0_2_1_0 = (Keyword)cDetailAssignment_0_2_1.eContents().get(0);
		private final Assignment cDeductionRuleAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cDeductionRuleSGrabFeatureRuleParserRuleCall_0_3_0 = (RuleCall)cDeductionRuleAssignment_0_3.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cSAttributeAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cMorphKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Alternatives cAlternatives_1_2 = (Alternatives)cGroup_1.eContents().get(2);
		private final Keyword cAttributeKeyword_1_2_0 = (Keyword)cAlternatives_1_2.eContents().get(0);
		private final Assignment cDetailAssignment_1_2_1 = (Assignment)cAlternatives_1_2.eContents().get(1);
		private final Keyword cDetailDetailKeyword_1_2_1_0 = (Keyword)cDetailAssignment_1_2_1.eContents().get(0);
		private final Assignment cDeductionRuleAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cDeductionRuleSMorphFeatureRuleParserRuleCall_1_3_0 = (RuleCall)cDeductionRuleAssignment_1_3.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cSAttributeAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cDitchKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Alternatives cAlternatives_2_2 = (Alternatives)cGroup_2.eContents().get(2);
		private final Keyword cAttributeKeyword_2_2_0 = (Keyword)cAlternatives_2_2.eContents().get(0);
		private final Assignment cDetailAssignment_2_2_1 = (Assignment)cAlternatives_2_2.eContents().get(1);
		private final Keyword cDetailDetailKeyword_2_2_1_0 = (Keyword)cDetailAssignment_2_2_1.eContents().get(0);
		private final Assignment cDeductionRuleAssignment_2_3 = (Assignment)cGroup_2.eContents().get(3);
		private final RuleCall cDeductionRuleSDitchFeatureRuleParserRuleCall_2_3_0 = (RuleCall)cDeductionRuleAssignment_2_3.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Assignment cDetailAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final Keyword cDetailDetailKeyword_3_0_0 = (Keyword)cDetailAssignment_3_0.eContents().get(0);
		private final Assignment cNameAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_3_1_0 = (RuleCall)cNameAssignment_3_1.eContents().get(0);
		private final Keyword cColonKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Assignment cTypeAssignment_3_3 = (Assignment)cGroup_3.eContents().get(3);
		private final CrossReference cTypeSSimpleTypeCrossReference_3_3_0 = (CrossReference)cTypeAssignment_3_3.eContents().get(0);
		private final RuleCall cTypeSSimpleTypeIDTerminalRuleCall_3_3_0_1 = (RuleCall)cTypeSSimpleTypeCrossReference_3_3_0.eContents().get(1);
		private final Assignment cMultiplicityAssignment_3_4 = (Assignment)cGroup_3.eContents().get(4);
		private final RuleCall cMultiplicitySMultiplicityParserRuleCall_3_4_0 = (RuleCall)cMultiplicityAssignment_3_4.eContents().get(0);
		private final Assignment cKeyAssignment_3_5 = (Assignment)cGroup_3.eContents().get(5);
		private final Keyword cKeyKeyKeyword_3_5_0 = (Keyword)cKeyAssignment_3_5.eContents().get(0);
		
		//SAttribute:
		//	{SAttribute} 'grab' ('attribute' | detail?='detail')? deductionRule=SGrabFeatureRule
		//	| {SAttribute} 'morph' ('attribute' | detail?='detail')? deductionRule=SMorphFeatureRule
		//	| {SAttribute} 'ditch' ('attribute' | detail?='detail')? deductionRule=SDitchFeatureRule
		//	| detail?='detail'?
		//	name=ID
		//	':'
		//	type=[SSimpleType] multiplicity=SMultiplicity?
		//	key?='key'?;
		@Override public ParserRule getRule() { return rule; }
		
		//{SAttribute} 'grab' ('attribute' | detail?='detail')? deductionRule=SGrabFeatureRule | {SAttribute} 'morph' ('attribute'
		//| detail?='detail')? deductionRule=SMorphFeatureRule | {SAttribute} 'ditch' ('attribute' | detail?='detail')?
		//deductionRule=SDitchFeatureRule | detail?='detail'? name=ID ':' type=[SSimpleType] multiplicity=SMultiplicity?
		//key?='key'?
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{SAttribute} 'grab' ('attribute' | detail?='detail')? deductionRule=SGrabFeatureRule
		public Group getGroup_0() { return cGroup_0; }
		
		//{SAttribute}
		public Action getSAttributeAction_0_0() { return cSAttributeAction_0_0; }
		
		//'grab'
		public Keyword getGrabKeyword_0_1() { return cGrabKeyword_0_1; }
		
		//('attribute' | detail?='detail')?
		public Alternatives getAlternatives_0_2() { return cAlternatives_0_2; }
		
		//'attribute'
		public Keyword getAttributeKeyword_0_2_0() { return cAttributeKeyword_0_2_0; }
		
		//detail?='detail'
		public Assignment getDetailAssignment_0_2_1() { return cDetailAssignment_0_2_1; }
		
		//'detail'
		public Keyword getDetailDetailKeyword_0_2_1_0() { return cDetailDetailKeyword_0_2_1_0; }
		
		//deductionRule=SGrabFeatureRule
		public Assignment getDeductionRuleAssignment_0_3() { return cDeductionRuleAssignment_0_3; }
		
		//SGrabFeatureRule
		public RuleCall getDeductionRuleSGrabFeatureRuleParserRuleCall_0_3_0() { return cDeductionRuleSGrabFeatureRuleParserRuleCall_0_3_0; }
		
		//{SAttribute} 'morph' ('attribute' | detail?='detail')? deductionRule=SMorphFeatureRule
		public Group getGroup_1() { return cGroup_1; }
		
		//{SAttribute}
		public Action getSAttributeAction_1_0() { return cSAttributeAction_1_0; }
		
		//'morph'
		public Keyword getMorphKeyword_1_1() { return cMorphKeyword_1_1; }
		
		//('attribute' | detail?='detail')?
		public Alternatives getAlternatives_1_2() { return cAlternatives_1_2; }
		
		//'attribute'
		public Keyword getAttributeKeyword_1_2_0() { return cAttributeKeyword_1_2_0; }
		
		//detail?='detail'
		public Assignment getDetailAssignment_1_2_1() { return cDetailAssignment_1_2_1; }
		
		//'detail'
		public Keyword getDetailDetailKeyword_1_2_1_0() { return cDetailDetailKeyword_1_2_1_0; }
		
		//deductionRule=SMorphFeatureRule
		public Assignment getDeductionRuleAssignment_1_3() { return cDeductionRuleAssignment_1_3; }
		
		//SMorphFeatureRule
		public RuleCall getDeductionRuleSMorphFeatureRuleParserRuleCall_1_3_0() { return cDeductionRuleSMorphFeatureRuleParserRuleCall_1_3_0; }
		
		//{SAttribute} 'ditch' ('attribute' | detail?='detail')? deductionRule=SDitchFeatureRule
		public Group getGroup_2() { return cGroup_2; }
		
		//{SAttribute}
		public Action getSAttributeAction_2_0() { return cSAttributeAction_2_0; }
		
		//'ditch'
		public Keyword getDitchKeyword_2_1() { return cDitchKeyword_2_1; }
		
		//('attribute' | detail?='detail')?
		public Alternatives getAlternatives_2_2() { return cAlternatives_2_2; }
		
		//'attribute'
		public Keyword getAttributeKeyword_2_2_0() { return cAttributeKeyword_2_2_0; }
		
		//detail?='detail'
		public Assignment getDetailAssignment_2_2_1() { return cDetailAssignment_2_2_1; }
		
		//'detail'
		public Keyword getDetailDetailKeyword_2_2_1_0() { return cDetailDetailKeyword_2_2_1_0; }
		
		//deductionRule=SDitchFeatureRule
		public Assignment getDeductionRuleAssignment_2_3() { return cDeductionRuleAssignment_2_3; }
		
		//SDitchFeatureRule
		public RuleCall getDeductionRuleSDitchFeatureRuleParserRuleCall_2_3_0() { return cDeductionRuleSDitchFeatureRuleParserRuleCall_2_3_0; }
		
		//detail?='detail'? name=ID ':' type=[SSimpleType] multiplicity=SMultiplicity? key?='key'?
		public Group getGroup_3() { return cGroup_3; }
		
		//detail?='detail'?
		public Assignment getDetailAssignment_3_0() { return cDetailAssignment_3_0; }
		
		//'detail'
		public Keyword getDetailDetailKeyword_3_0_0() { return cDetailDetailKeyword_3_0_0; }
		
		//name=ID
		public Assignment getNameAssignment_3_1() { return cNameAssignment_3_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_3_1_0() { return cNameIDTerminalRuleCall_3_1_0; }
		
		//':'
		public Keyword getColonKeyword_3_2() { return cColonKeyword_3_2; }
		
		//type=[SSimpleType]
		public Assignment getTypeAssignment_3_3() { return cTypeAssignment_3_3; }
		
		//[SSimpleType]
		public CrossReference getTypeSSimpleTypeCrossReference_3_3_0() { return cTypeSSimpleTypeCrossReference_3_3_0; }
		
		//ID
		public RuleCall getTypeSSimpleTypeIDTerminalRuleCall_3_3_0_1() { return cTypeSSimpleTypeIDTerminalRuleCall_3_3_0_1; }
		
		//multiplicity=SMultiplicity?
		public Assignment getMultiplicityAssignment_3_4() { return cMultiplicityAssignment_3_4; }
		
		//SMultiplicity
		public RuleCall getMultiplicitySMultiplicityParserRuleCall_3_4_0() { return cMultiplicitySMultiplicityParserRuleCall_3_4_0; }
		
		//key?='key'?
		public Assignment getKeyAssignment_3_5() { return cKeyAssignment_3_5; }
		
		//'key'
		public Keyword getKeyKeyKeyword_3_5_0() { return cKeyKeyKeyword_3_5_0; }
	}
	public class SQueryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.sm.sim.Sim.SQuery");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Alternatives cAlternatives_0_0 = (Alternatives)cGroup_0.eContents().get(0);
		private final Group cGroup_0_0_0 = (Group)cAlternatives_0_0.eContents().get(0);
		private final Action cSQueryAction_0_0_0_0 = (Action)cGroup_0_0_0.eContents().get(0);
		private final Keyword cGrabKeyword_0_0_0_1 = (Keyword)cGroup_0_0_0.eContents().get(1);
		private final Keyword cQueryKeyword_0_0_0_2 = (Keyword)cGroup_0_0_0.eContents().get(2);
		private final Assignment cDeductionRuleAssignment_0_0_0_3 = (Assignment)cGroup_0_0_0.eContents().get(3);
		private final RuleCall cDeductionRuleSGrabFeatureRuleParserRuleCall_0_0_0_3_0 = (RuleCall)cDeductionRuleAssignment_0_0_0_3.eContents().get(0);
		private final Group cGroup_0_0_1 = (Group)cAlternatives_0_0.eContents().get(1);
		private final Action cSQueryAction_0_0_1_0 = (Action)cGroup_0_0_1.eContents().get(0);
		private final Keyword cMorphKeyword_0_0_1_1 = (Keyword)cGroup_0_0_1.eContents().get(1);
		private final Keyword cQueryKeyword_0_0_1_2 = (Keyword)cGroup_0_0_1.eContents().get(2);
		private final Assignment cDeductionRuleAssignment_0_0_1_3 = (Assignment)cGroup_0_0_1.eContents().get(3);
		private final RuleCall cDeductionRuleSMorphFeatureRuleParserRuleCall_0_0_1_3_0 = (RuleCall)cDeductionRuleAssignment_0_0_1_3.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Alternatives cAlternatives_0_2 = (Alternatives)cGroup_0.eContents().get(2);
		private final Keyword cAsteriskKeyword_0_2_0 = (Keyword)cAlternatives_0_2.eContents().get(0);
		private final Group cGroup_0_2_1 = (Group)cAlternatives_0_2.eContents().get(1);
		private final Assignment cParametersAssignment_0_2_1_0 = (Assignment)cGroup_0_2_1.eContents().get(0);
		private final RuleCall cParametersSQueryParameterParserRuleCall_0_2_1_0_0 = (RuleCall)cParametersAssignment_0_2_1_0.eContents().get(0);
		private final Group cGroup_0_2_1_1 = (Group)cGroup_0_2_1.eContents().get(1);
		private final Keyword cCommaKeyword_0_2_1_1_0 = (Keyword)cGroup_0_2_1_1.eContents().get(0);
		private final Assignment cParametersAssignment_0_2_1_1_1 = (Assignment)cGroup_0_2_1_1.eContents().get(1);
		private final RuleCall cParametersSQueryParameterParserRuleCall_0_2_1_1_1_0 = (RuleCall)cParametersAssignment_0_2_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cDitchKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cQueryKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cDeductionRuleAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cDeductionRuleSDitchFeatureRuleParserRuleCall_1_2_0 = (RuleCall)cDeductionRuleAssignment_1_2.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Assignment cNameAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_2_0_0 = (RuleCall)cNameAssignment_2_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Assignment cParametersAssignment_2_2_0 = (Assignment)cGroup_2_2.eContents().get(0);
		private final RuleCall cParametersSQueryParameterParserRuleCall_2_2_0_0 = (RuleCall)cParametersAssignment_2_2_0.eContents().get(0);
		private final Group cGroup_2_2_1 = (Group)cGroup_2_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_2_1_0 = (Keyword)cGroup_2_2_1.eContents().get(0);
		private final Assignment cParametersAssignment_2_2_1_1 = (Assignment)cGroup_2_2_1.eContents().get(1);
		private final RuleCall cParametersSQueryParameterParserRuleCall_2_2_1_1_0 = (RuleCall)cParametersAssignment_2_2_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Keyword cColonKeyword_2_4 = (Keyword)cGroup_2.eContents().get(4);
		private final Assignment cTypeAssignment_2_5 = (Assignment)cGroup_2.eContents().get(5);
		private final CrossReference cTypeSTypeCrossReference_2_5_0 = (CrossReference)cTypeAssignment_2_5.eContents().get(0);
		private final RuleCall cTypeSTypeIDTerminalRuleCall_2_5_0_1 = (RuleCall)cTypeSTypeCrossReference_2_5_0.eContents().get(1);
		private final Assignment cMultiplicityAssignment_2_6 = (Assignment)cGroup_2.eContents().get(6);
		private final RuleCall cMultiplicitySMultiplicityParserRuleCall_2_6_0 = (RuleCall)cMultiplicityAssignment_2_6.eContents().get(0);
		private final Group cGroup_2_7 = (Group)cGroup_2.eContents().get(7);
		private final Keyword cReturnsKeyword_2_7_0 = (Keyword)cGroup_2_7.eContents().get(0);
		private final Assignment cReturnsAssignment_2_7_1 = (Assignment)cGroup_2_7.eContents().get(1);
		private final RuleCall cReturnsSExpressionParserRuleCall_2_7_1_0 = (RuleCall)cReturnsAssignment_2_7_1.eContents().get(0);
		
		////	(description=DRichText)?;
		//SQuery:
		//	({SQuery} 'grab' 'query' deductionRule=SGrabFeatureRule
		//	| {SQuery} 'morph' 'query' deductionRule=SMorphFeatureRule)
		//	'(' ('*'
		//	| (parameters+=SQueryParameter (',' parameters+=SQueryParameter)*)?)
		//	')'
		//	| 'ditch' 'query' deductionRule=SDitchFeatureRule
		//	| name=ID
		//	'(' (parameters+=SQueryParameter (',' parameters+=SQueryParameter)*)? ')'
		//	':'
		//	type=[SType] multiplicity=SMultiplicity? ('returns' ^returns=SExpression)?;
		@Override public ParserRule getRule() { return rule; }
		
		//({SQuery} 'grab' 'query' deductionRule=SGrabFeatureRule | {SQuery} 'morph' 'query' deductionRule=SMorphFeatureRule) '('
		//('*' | (parameters+=SQueryParameter (',' parameters+=SQueryParameter)*)?) ')' | 'ditch' 'query'
		//deductionRule=SDitchFeatureRule | name=ID '(' (parameters+=SQueryParameter (',' parameters+=SQueryParameter)*)? ')' ':'
		//type=[SType] multiplicity=SMultiplicity? ('returns' ^returns=SExpression)?
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//({SQuery} 'grab' 'query' deductionRule=SGrabFeatureRule | {SQuery} 'morph' 'query' deductionRule=SMorphFeatureRule) '('
		//('*' | (parameters+=SQueryParameter (',' parameters+=SQueryParameter)*)?) ')'
		public Group getGroup_0() { return cGroup_0; }
		
		//{SQuery} 'grab' 'query' deductionRule=SGrabFeatureRule | {SQuery} 'morph' 'query' deductionRule=SMorphFeatureRule
		public Alternatives getAlternatives_0_0() { return cAlternatives_0_0; }
		
		//{SQuery} 'grab' 'query' deductionRule=SGrabFeatureRule
		public Group getGroup_0_0_0() { return cGroup_0_0_0; }
		
		//{SQuery}
		public Action getSQueryAction_0_0_0_0() { return cSQueryAction_0_0_0_0; }
		
		//'grab'
		public Keyword getGrabKeyword_0_0_0_1() { return cGrabKeyword_0_0_0_1; }
		
		//'query'
		public Keyword getQueryKeyword_0_0_0_2() { return cQueryKeyword_0_0_0_2; }
		
		//deductionRule=SGrabFeatureRule
		public Assignment getDeductionRuleAssignment_0_0_0_3() { return cDeductionRuleAssignment_0_0_0_3; }
		
		//SGrabFeatureRule
		public RuleCall getDeductionRuleSGrabFeatureRuleParserRuleCall_0_0_0_3_0() { return cDeductionRuleSGrabFeatureRuleParserRuleCall_0_0_0_3_0; }
		
		//{SQuery} 'morph' 'query' deductionRule=SMorphFeatureRule
		public Group getGroup_0_0_1() { return cGroup_0_0_1; }
		
		//{SQuery}
		public Action getSQueryAction_0_0_1_0() { return cSQueryAction_0_0_1_0; }
		
		//'morph'
		public Keyword getMorphKeyword_0_0_1_1() { return cMorphKeyword_0_0_1_1; }
		
		//'query'
		public Keyword getQueryKeyword_0_0_1_2() { return cQueryKeyword_0_0_1_2; }
		
		//deductionRule=SMorphFeatureRule
		public Assignment getDeductionRuleAssignment_0_0_1_3() { return cDeductionRuleAssignment_0_0_1_3; }
		
		//SMorphFeatureRule
		public RuleCall getDeductionRuleSMorphFeatureRuleParserRuleCall_0_0_1_3_0() { return cDeductionRuleSMorphFeatureRuleParserRuleCall_0_0_1_3_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_1() { return cLeftParenthesisKeyword_0_1; }
		
		//'*' | (parameters+=SQueryParameter (',' parameters+=SQueryParameter)*)?
		public Alternatives getAlternatives_0_2() { return cAlternatives_0_2; }
		
		//'*'
		public Keyword getAsteriskKeyword_0_2_0() { return cAsteriskKeyword_0_2_0; }
		
		//(parameters+=SQueryParameter (',' parameters+=SQueryParameter)*)?
		public Group getGroup_0_2_1() { return cGroup_0_2_1; }
		
		//parameters+=SQueryParameter
		public Assignment getParametersAssignment_0_2_1_0() { return cParametersAssignment_0_2_1_0; }
		
		//SQueryParameter
		public RuleCall getParametersSQueryParameterParserRuleCall_0_2_1_0_0() { return cParametersSQueryParameterParserRuleCall_0_2_1_0_0; }
		
		//(',' parameters+=SQueryParameter)*
		public Group getGroup_0_2_1_1() { return cGroup_0_2_1_1; }
		
		//','
		public Keyword getCommaKeyword_0_2_1_1_0() { return cCommaKeyword_0_2_1_1_0; }
		
		//parameters+=SQueryParameter
		public Assignment getParametersAssignment_0_2_1_1_1() { return cParametersAssignment_0_2_1_1_1; }
		
		//SQueryParameter
		public RuleCall getParametersSQueryParameterParserRuleCall_0_2_1_1_1_0() { return cParametersSQueryParameterParserRuleCall_0_2_1_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_3() { return cRightParenthesisKeyword_0_3; }
		
		//'ditch' 'query' deductionRule=SDitchFeatureRule
		public Group getGroup_1() { return cGroup_1; }
		
		//'ditch'
		public Keyword getDitchKeyword_1_0() { return cDitchKeyword_1_0; }
		
		//'query'
		public Keyword getQueryKeyword_1_1() { return cQueryKeyword_1_1; }
		
		//deductionRule=SDitchFeatureRule
		public Assignment getDeductionRuleAssignment_1_2() { return cDeductionRuleAssignment_1_2; }
		
		//SDitchFeatureRule
		public RuleCall getDeductionRuleSDitchFeatureRuleParserRuleCall_1_2_0() { return cDeductionRuleSDitchFeatureRuleParserRuleCall_1_2_0; }
		
		//name=ID '(' (parameters+=SQueryParameter (',' parameters+=SQueryParameter)*)? ')' ':' type=[SType]
		//multiplicity=SMultiplicity? ('returns' ^returns=SExpression)?
		public Group getGroup_2() { return cGroup_2; }
		
		//name=ID
		public Assignment getNameAssignment_2_0() { return cNameAssignment_2_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0_0() { return cNameIDTerminalRuleCall_2_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_1() { return cLeftParenthesisKeyword_2_1; }
		
		//(parameters+=SQueryParameter (',' parameters+=SQueryParameter)*)?
		public Group getGroup_2_2() { return cGroup_2_2; }
		
		//parameters+=SQueryParameter
		public Assignment getParametersAssignment_2_2_0() { return cParametersAssignment_2_2_0; }
		
		//SQueryParameter
		public RuleCall getParametersSQueryParameterParserRuleCall_2_2_0_0() { return cParametersSQueryParameterParserRuleCall_2_2_0_0; }
		
		//(',' parameters+=SQueryParameter)*
		public Group getGroup_2_2_1() { return cGroup_2_2_1; }
		
		//','
		public Keyword getCommaKeyword_2_2_1_0() { return cCommaKeyword_2_2_1_0; }
		
		//parameters+=SQueryParameter
		public Assignment getParametersAssignment_2_2_1_1() { return cParametersAssignment_2_2_1_1; }
		
		//SQueryParameter
		public RuleCall getParametersSQueryParameterParserRuleCall_2_2_1_1_0() { return cParametersSQueryParameterParserRuleCall_2_2_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_3() { return cRightParenthesisKeyword_2_3; }
		
		//':'
		public Keyword getColonKeyword_2_4() { return cColonKeyword_2_4; }
		
		//type=[SType]
		public Assignment getTypeAssignment_2_5() { return cTypeAssignment_2_5; }
		
		//[SType]
		public CrossReference getTypeSTypeCrossReference_2_5_0() { return cTypeSTypeCrossReference_2_5_0; }
		
		//ID
		public RuleCall getTypeSTypeIDTerminalRuleCall_2_5_0_1() { return cTypeSTypeIDTerminalRuleCall_2_5_0_1; }
		
		//multiplicity=SMultiplicity?
		public Assignment getMultiplicityAssignment_2_6() { return cMultiplicityAssignment_2_6; }
		
		//SMultiplicity
		public RuleCall getMultiplicitySMultiplicityParserRuleCall_2_6_0() { return cMultiplicitySMultiplicityParserRuleCall_2_6_0; }
		
		//('returns' ^returns=SExpression)?
		public Group getGroup_2_7() { return cGroup_2_7; }
		
		//'returns'
		public Keyword getReturnsKeyword_2_7_0() { return cReturnsKeyword_2_7_0; }
		
		//^returns=SExpression
		public Assignment getReturnsAssignment_2_7_1() { return cReturnsAssignment_2_7_1; }
		
		//SExpression
		public RuleCall getReturnsSExpressionParserRuleCall_2_7_1_0() { return cReturnsSExpressionParserRuleCall_2_7_1_0; }
	}
	public class SQueryParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.sm.sim.Sim.SQueryParameter");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cSQueryParameterAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cGrabKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cDeductionRuleAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cDeductionRuleSGrabFeatureRuleParserRuleCall_0_2_0 = (RuleCall)cDeductionRuleAssignment_0_2.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cSQueryParameterAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cMorphKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cDeductionRuleAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cDeductionRuleSMorphFeatureRuleParserRuleCall_1_2_0 = (RuleCall)cDeductionRuleAssignment_1_2.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cSQueryParameterAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cDitchKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cDeductionRuleAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cDeductionRuleSDitchFeatureRuleParserRuleCall_2_2_0 = (RuleCall)cDeductionRuleAssignment_2_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Assignment cNameAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_3_0_0 = (RuleCall)cNameAssignment_3_0.eContents().get(0);
		private final Keyword cColonKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cTypeAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final CrossReference cTypeSTypeCrossReference_3_2_0 = (CrossReference)cTypeAssignment_3_2.eContents().get(0);
		private final RuleCall cTypeSTypeIDTerminalRuleCall_3_2_0_1 = (RuleCall)cTypeSTypeCrossReference_3_2_0.eContents().get(1);
		private final Assignment cMultiplicityAssignment_3_3 = (Assignment)cGroup_3.eContents().get(3);
		private final RuleCall cMultiplicitySMultiplicityParserRuleCall_3_3_0 = (RuleCall)cMultiplicityAssignment_3_3.eContents().get(0);
		
		////	(description=DRichText)?;
		//SQueryParameter:
		//	{SQueryParameter} 'grab' deductionRule=SGrabFeatureRule
		//	| {SQueryParameter} 'morph' deductionRule=SMorphFeatureRule
		//	| {SQueryParameter} 'ditch' deductionRule=SDitchFeatureRule
		//	| name=ID
		//	':'
		//	type=[SType] multiplicity=SMultiplicity?;
		@Override public ParserRule getRule() { return rule; }
		
		//{SQueryParameter} 'grab' deductionRule=SGrabFeatureRule | {SQueryParameter} 'morph' deductionRule=SMorphFeatureRule |
		//{SQueryParameter} 'ditch' deductionRule=SDitchFeatureRule | name=ID ':' type=[SType] multiplicity=SMultiplicity?
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{SQueryParameter} 'grab' deductionRule=SGrabFeatureRule
		public Group getGroup_0() { return cGroup_0; }
		
		//{SQueryParameter}
		public Action getSQueryParameterAction_0_0() { return cSQueryParameterAction_0_0; }
		
		//'grab'
		public Keyword getGrabKeyword_0_1() { return cGrabKeyword_0_1; }
		
		//deductionRule=SGrabFeatureRule
		public Assignment getDeductionRuleAssignment_0_2() { return cDeductionRuleAssignment_0_2; }
		
		//SGrabFeatureRule
		public RuleCall getDeductionRuleSGrabFeatureRuleParserRuleCall_0_2_0() { return cDeductionRuleSGrabFeatureRuleParserRuleCall_0_2_0; }
		
		//{SQueryParameter} 'morph' deductionRule=SMorphFeatureRule
		public Group getGroup_1() { return cGroup_1; }
		
		//{SQueryParameter}
		public Action getSQueryParameterAction_1_0() { return cSQueryParameterAction_1_0; }
		
		//'morph'
		public Keyword getMorphKeyword_1_1() { return cMorphKeyword_1_1; }
		
		//deductionRule=SMorphFeatureRule
		public Assignment getDeductionRuleAssignment_1_2() { return cDeductionRuleAssignment_1_2; }
		
		//SMorphFeatureRule
		public RuleCall getDeductionRuleSMorphFeatureRuleParserRuleCall_1_2_0() { return cDeductionRuleSMorphFeatureRuleParserRuleCall_1_2_0; }
		
		//{SQueryParameter} 'ditch' deductionRule=SDitchFeatureRule
		public Group getGroup_2() { return cGroup_2; }
		
		//{SQueryParameter}
		public Action getSQueryParameterAction_2_0() { return cSQueryParameterAction_2_0; }
		
		//'ditch'
		public Keyword getDitchKeyword_2_1() { return cDitchKeyword_2_1; }
		
		//deductionRule=SDitchFeatureRule
		public Assignment getDeductionRuleAssignment_2_2() { return cDeductionRuleAssignment_2_2; }
		
		//SDitchFeatureRule
		public RuleCall getDeductionRuleSDitchFeatureRuleParserRuleCall_2_2_0() { return cDeductionRuleSDitchFeatureRuleParserRuleCall_2_2_0; }
		
		//name=ID ':' type=[SType] multiplicity=SMultiplicity?
		public Group getGroup_3() { return cGroup_3; }
		
		//name=ID
		public Assignment getNameAssignment_3_0() { return cNameAssignment_3_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0_0() { return cNameIDTerminalRuleCall_3_0_0; }
		
		//':'
		public Keyword getColonKeyword_3_1() { return cColonKeyword_3_1; }
		
		//type=[SType]
		public Assignment getTypeAssignment_3_2() { return cTypeAssignment_3_2; }
		
		//[SType]
		public CrossReference getTypeSTypeCrossReference_3_2_0() { return cTypeSTypeCrossReference_3_2_0; }
		
		//ID
		public RuleCall getTypeSTypeIDTerminalRuleCall_3_2_0_1() { return cTypeSTypeIDTerminalRuleCall_3_2_0_1; }
		
		//multiplicity=SMultiplicity?
		public Assignment getMultiplicityAssignment_3_3() { return cMultiplicityAssignment_3_3; }
		
		//SMultiplicity
		public RuleCall getMultiplicitySMultiplicityParserRuleCall_3_3_0() { return cMultiplicitySMultiplicityParserRuleCall_3_3_0; }
	}
	public class SExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.sm.sim.Sim.SExpression");
		private final Assignment cExprAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cExprSTRINGTerminalRuleCall_0 = (RuleCall)cExprAssignment.eContents().get(0);
		
		////	(description=DRichText)?;
		//SExpression:
		//	expr=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//expr=STRING
		public Assignment getExprAssignment() { return cExprAssignment; }
		
		//STRING
		public RuleCall getExprSTRINGTerminalRuleCall_0() { return cExprSTRINGTerminalRuleCall_0; }
	}
	public class SQualifiedNameWithWildcardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.sm.sim.Sim.SQualifiedNameWithWildcard");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cSQualifiedNameParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopAsteriskKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//SQualifiedNameWithWildcard:
		//	SQualifiedName '.*'?;
		@Override public ParserRule getRule() { return rule; }
		
		//SQualifiedName '.*'?
		public Group getGroup() { return cGroup; }
		
		//SQualifiedName
		public RuleCall getSQualifiedNameParserRuleCall_0() { return cSQualifiedNameParserRuleCall_0; }
		
		//'.*'?
		public Keyword getFullStopAsteriskKeyword_1() { return cFullStopAsteriskKeyword_1; }
	}
	public class SQualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.sm.sim.Sim.SQualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//SQualifiedName:
		//	ID ('.' ID)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ID ('.' ID)*
		public Group getGroup() { return cGroup; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//('.' ID)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	public class SMultiplicityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.sm.sim.Sim.SMultiplicity");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cMinOccursAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cMinOccursINTTerminalRuleCall_1_0 = (RuleCall)cMinOccursAssignment_1.eContents().get(0);
		private final Keyword cFullStopFullStopKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cMaxOccursAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cMaxOccursMULTIPLICITYParserRuleCall_3_0 = (RuleCall)cMaxOccursAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//SMultiplicity:
		//	'(' minOccurs=INT '..' maxOccurs=MULTIPLICITY ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'(' minOccurs=INT '..' maxOccurs=MULTIPLICITY ')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//minOccurs=INT
		public Assignment getMinOccursAssignment_1() { return cMinOccursAssignment_1; }
		
		//INT
		public RuleCall getMinOccursINTTerminalRuleCall_1_0() { return cMinOccursINTTerminalRuleCall_1_0; }
		
		//'..'
		public Keyword getFullStopFullStopKeyword_2() { return cFullStopFullStopKeyword_2; }
		
		//maxOccurs=MULTIPLICITY
		public Assignment getMaxOccursAssignment_3() { return cMaxOccursAssignment_3; }
		
		//MULTIPLICITY
		public RuleCall getMaxOccursMULTIPLICITYParserRuleCall_3_0() { return cMaxOccursMULTIPLICITYParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class MULTIPLICITYElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.sm.sim.Sim.MULTIPLICITY");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Keyword cAsteriskKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//MULTIPLICITY ecore::EInt:
		//	INT | '*';
		@Override public ParserRule getRule() { return rule; }
		
		//INT | '*'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }
		
		//'*'
		public Keyword getAsteriskKeyword_1() { return cAsteriskKeyword_1; }
	}
	
	public class SAssociationKindElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.sm.sim.Sim.SAssociationKind");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cREFERENCEEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cREFERENCEReferenceKeyword_0_0 = (Keyword)cREFERENCEEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cCOMPOSITEEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cCOMPOSITECompositeKeyword_1_0 = (Keyword)cCOMPOSITEEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum SAssociationKind:
		//	REFERENCE='reference' | COMPOSITE='composite';
		public EnumRule getRule() { return rule; }
		
		//REFERENCE='reference' | COMPOSITE='composite'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//REFERENCE='reference'
		public EnumLiteralDeclaration getREFERENCEEnumLiteralDeclaration_0() { return cREFERENCEEnumLiteralDeclaration_0; }
		
		//'reference'
		public Keyword getREFERENCEReferenceKeyword_0_0() { return cREFERENCEReferenceKeyword_0_0; }
		
		//COMPOSITE='composite'
		public EnumLiteralDeclaration getCOMPOSITEEnumLiteralDeclaration_1() { return cCOMPOSITEEnumLiteralDeclaration_1; }
		
		//'composite'
		public Keyword getCOMPOSITECompositeKeyword_1_0() { return cCOMPOSITECompositeKeyword_1_0; }
	}
	public class SAssociationKindInverseElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.sm.sim.Sim.SAssociationKindInverse");
		private final EnumLiteralDeclaration cINVERSE_COMPOSITEEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cINVERSE_COMPOSITEInverseKeyword_0 = (Keyword)cINVERSE_COMPOSITEEnumLiteralDeclaration.eContents().get(0);
		
		//enum SAssociationKindInverse returns SAssociationKind:
		//	INVERSE_COMPOSITE='inverse';
		public EnumRule getRule() { return rule; }
		
		//INVERSE_COMPOSITE='inverse'
		public EnumLiteralDeclaration getINVERSE_COMPOSITEEnumLiteralDeclaration() { return cINVERSE_COMPOSITEEnumLiteralDeclaration; }
		
		//'inverse'
		public Keyword getINVERSE_COMPOSITEInverseKeyword_0() { return cINVERSE_COMPOSITEInverseKeyword_0; }
	}
	
	private final SDomainElements pSDomain;
	private final SImportElements pSImport;
	private final SGrabAggregateRuleElements pSGrabAggregateRule;
	private final SGrabEnumerationRuleElements pSGrabEnumerationRule;
	private final SDitchEnumerationRuleElements pSDitchEnumerationRule;
	private final SGrabEnumerationLiteralRuleElements pSGrabEnumerationLiteralRule;
	private final SDitchEnumerationLiteralRuleElements pSDitchEnumerationLiteralRule;
	private final SGrabComplexTypeRuleElements pSGrabComplexTypeRule;
	private final SDitchComplexTypeRuleElements pSDitchComplexTypeRule;
	private final SMorphComplexTypeRuleElements pSMorphComplexTypeRule;
	private final SFuseComplexTypeRuleElements pSFuseComplexTypeRule;
	private final SGrabFeatureRuleElements pSGrabFeatureRule;
	private final SMorphFeatureRuleElements pSMorphFeatureRule;
	private final SDitchFeatureRuleElements pSDitchFeatureRule;
	private final SAggregateElements pSAggregate;
	private final STypeElements pSType;
	private final SConstraintElements pSConstraint;
	private final SPrimitiveElements pSPrimitive;
	private final SPrimitiveArchetypeElements pSPrimitiveArchetype;
	private final SEnumerationElements pSEnumeration;
	private final SLiteralElements pSLiteral;
	private final SRootTypeElements pSRootType;
	private final SDetailTypeElements pSDetailType;
	private final SComplexTypeExtendsElements pSComplexTypeExtends;
	private final SComplexTypeFeaturesElements pSComplexTypeFeatures;
	private final SFeatureElements pSFeature;
	private final SAssociationElements pSAssociation;
	private final SAssociationKindElements eSAssociationKind;
	private final SAssociationKindInverseElements eSAssociationKindInverse;
	private final SAttributeElements pSAttribute;
	private final SQueryElements pSQuery;
	private final SQueryParameterElements pSQueryParameter;
	private final SExpressionElements pSExpression;
	private final SQualifiedNameWithWildcardElements pSQualifiedNameWithWildcard;
	private final SQualifiedNameElements pSQualifiedName;
	private final SMultiplicityElements pSMultiplicity;
	private final MULTIPLICITYElements pMULTIPLICITY;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public SimGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pSDomain = new SDomainElements();
		this.pSImport = new SImportElements();
		this.pSGrabAggregateRule = new SGrabAggregateRuleElements();
		this.pSGrabEnumerationRule = new SGrabEnumerationRuleElements();
		this.pSDitchEnumerationRule = new SDitchEnumerationRuleElements();
		this.pSGrabEnumerationLiteralRule = new SGrabEnumerationLiteralRuleElements();
		this.pSDitchEnumerationLiteralRule = new SDitchEnumerationLiteralRuleElements();
		this.pSGrabComplexTypeRule = new SGrabComplexTypeRuleElements();
		this.pSDitchComplexTypeRule = new SDitchComplexTypeRuleElements();
		this.pSMorphComplexTypeRule = new SMorphComplexTypeRuleElements();
		this.pSFuseComplexTypeRule = new SFuseComplexTypeRuleElements();
		this.pSGrabFeatureRule = new SGrabFeatureRuleElements();
		this.pSMorphFeatureRule = new SMorphFeatureRuleElements();
		this.pSDitchFeatureRule = new SDitchFeatureRuleElements();
		this.pSAggregate = new SAggregateElements();
		this.pSType = new STypeElements();
		this.pSConstraint = new SConstraintElements();
		this.pSPrimitive = new SPrimitiveElements();
		this.pSPrimitiveArchetype = new SPrimitiveArchetypeElements();
		this.pSEnumeration = new SEnumerationElements();
		this.pSLiteral = new SLiteralElements();
		this.pSRootType = new SRootTypeElements();
		this.pSDetailType = new SDetailTypeElements();
		this.pSComplexTypeExtends = new SComplexTypeExtendsElements();
		this.pSComplexTypeFeatures = new SComplexTypeFeaturesElements();
		this.pSFeature = new SFeatureElements();
		this.pSAssociation = new SAssociationElements();
		this.eSAssociationKind = new SAssociationKindElements();
		this.eSAssociationKindInverse = new SAssociationKindInverseElements();
		this.pSAttribute = new SAttributeElements();
		this.pSQuery = new SQueryElements();
		this.pSQueryParameter = new SQueryParameterElements();
		this.pSExpression = new SExpressionElements();
		this.pSQualifiedNameWithWildcard = new SQualifiedNameWithWildcardElements();
		this.pSQualifiedName = new SQualifiedNameElements();
		this.pSMultiplicity = new SMultiplicityElements();
		this.pMULTIPLICITY = new MULTIPLICITYElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("com.mimacom.ddd.sm.sim.Sim".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//SDomain:
	//	'domain'
	//	name=SQualifiedName
	//	//	(description=DRichText)?
	//	imports+=SImport* (types+=SType | aggregates+=SAggregate)*;
	public SDomainElements getSDomainAccess() {
		return pSDomain;
	}
	
	public ParserRule getSDomainRule() {
		return getSDomainAccess().getRule();
	}
	
	//SImport:
	//	'import' importedNamespace=SQualifiedNameWithWildcard;
	public SImportElements getSImportAccess() {
		return pSImport;
	}
	
	public ParserRule getSImportRule() {
		return getSImportAccess().getRule();
	}
	
	//// Transformation rules
	//SGrabAggregateRule:
	//	source=[DAggregate];
	public SGrabAggregateRuleElements getSGrabAggregateRuleAccess() {
		return pSGrabAggregateRule;
	}
	
	public ParserRule getSGrabAggregateRuleRule() {
		return getSGrabAggregateRuleAccess().getRule();
	}
	
	//SGrabEnumerationRule SGrabRule:
	//	source=[DEnumeration|SQualifiedName] ('as' renameTo=ID)?;
	public SGrabEnumerationRuleElements getSGrabEnumerationRuleAccess() {
		return pSGrabEnumerationRule;
	}
	
	public ParserRule getSGrabEnumerationRuleRule() {
		return getSGrabEnumerationRuleAccess().getRule();
	}
	
	//SDitchEnumerationRule SDitchRule:
	//	source=[DEnumeration];
	public SDitchEnumerationRuleElements getSDitchEnumerationRuleAccess() {
		return pSDitchEnumerationRule;
	}
	
	public ParserRule getSDitchEnumerationRuleRule() {
		return getSDitchEnumerationRuleAccess().getRule();
	}
	
	//SGrabEnumerationLiteralRule SGrabRule:
	//	source=[DLiteral] ('as' renameTo=ID)?;
	public SGrabEnumerationLiteralRuleElements getSGrabEnumerationLiteralRuleAccess() {
		return pSGrabEnumerationLiteralRule;
	}
	
	public ParserRule getSGrabEnumerationLiteralRuleRule() {
		return getSGrabEnumerationLiteralRuleAccess().getRule();
	}
	
	//SDitchEnumerationLiteralRule SDitchRule:
	//	source=[DLiteral];
	public SDitchEnumerationLiteralRuleElements getSDitchEnumerationLiteralRuleAccess() {
		return pSDitchEnumerationLiteralRule;
	}
	
	public ParserRule getSDitchEnumerationLiteralRuleRule() {
		return getSDitchEnumerationLiteralRuleAccess().getRule();
	}
	
	//SGrabComplexTypeRule SGrabRule:
	//	source=[DComplexType|SQualifiedName] ('as' renameTo=ID)?;
	public SGrabComplexTypeRuleElements getSGrabComplexTypeRuleAccess() {
		return pSGrabComplexTypeRule;
	}
	
	public ParserRule getSGrabComplexTypeRuleRule() {
		return getSGrabComplexTypeRuleAccess().getRule();
	}
	
	//SDitchComplexTypeRule SDitchRule:
	//	source=[DEnumeration];
	public SDitchComplexTypeRuleElements getSDitchComplexTypeRuleAccess() {
		return pSDitchComplexTypeRule;
	}
	
	public ParserRule getSDitchComplexTypeRuleRule() {
		return getSDitchComplexTypeRuleAccess().getRule();
	}
	
	//SMorphComplexTypeRule SMorphRule:
	//	source=[DComplexType|SQualifiedName] ('as' renameTo=ID)? ('extends' '=' retypeTo=[SComplexType])?;
	public SMorphComplexTypeRuleElements getSMorphComplexTypeRuleAccess() {
		return pSMorphComplexTypeRule;
	}
	
	public ParserRule getSMorphComplexTypeRuleRule() {
		return getSMorphComplexTypeRuleAccess().getRule();
	}
	
	//SFuseComplexTypeRule SFuseRule:
	//	source=[DComplexType|SQualifiedName]
	//	'and'
	//	source2=[DComplexType|SQualifiedName] ('as' renameTo=ID)? ('extends' extendFrom=[SComplexType])?;
	public SFuseComplexTypeRuleElements getSFuseComplexTypeRuleAccess() {
		return pSFuseComplexTypeRule;
	}
	
	public ParserRule getSFuseComplexTypeRuleRule() {
		return getSFuseComplexTypeRuleAccess().getRule();
	}
	
	//SGrabFeatureRule SGrabRule:
	//	source=[DFeature] ('as' renameTo=ID)?;
	public SGrabFeatureRuleElements getSGrabFeatureRuleAccess() {
		return pSGrabFeatureRule;
	}
	
	public ParserRule getSGrabFeatureRuleRule() {
		return getSGrabFeatureRuleAccess().getRule();
	}
	
	//SMorphFeatureRule SMorphRule:
	//	source=[DFeature] ('as' renameTo=ID)? (':' retypeTo=[SType] remultiplyTo=SMultiplicity?)?;
	public SMorphFeatureRuleElements getSMorphFeatureRuleAccess() {
		return pSMorphFeatureRule;
	}
	
	public ParserRule getSMorphFeatureRuleRule() {
		return getSMorphFeatureRuleAccess().getRule();
	}
	
	//SDitchFeatureRule SDitchRule:
	//	source=[DFeature];
	public SDitchFeatureRuleElements getSDitchFeatureRuleAccess() {
		return pSDitchFeatureRule;
	}
	
	public ParserRule getSDitchFeatureRuleRule() {
		return getSDitchFeatureRuleAccess().getRule();
	}
	
	//SAggregate:
	//	{SAggregate} ('grab' 'aggregate' deductionRule=SGrabAggregateRule
	//	| 'aggregate')
	//	//	(description=DRichText)?
	//	'{'
	//	types+=SType*
	//	'}';
	public SAggregateElements getSAggregateAccess() {
		return pSAggregate;
	}
	
	public ParserRule getSAggregateRule() {
		return getSAggregateAccess().getRule();
	}
	
	///*
	// * TYPES
	// */ SType:
	//	SPrimitive | SPrimitiveArchetype | SEnumeration | SRootType | SDetailType;
	public STypeElements getSTypeAccess() {
		return pSType;
	}
	
	public ParserRule getSTypeRule() {
		return getSTypeAccess().getRule();
	}
	
	//SConstraint SCondition:
	//	'constraint'
	//	name=ID
	//	':'
	//	condition=SExpression;
	public SConstraintElements getSConstraintAccess() {
		return pSConstraint;
	}
	
	public ParserRule getSConstraintRule() {
		return getSConstraintAccess().getRule();
	}
	
	////	(description=DRichText)?;
	//SPrimitive:
	//	'primitive'
	//	name=ID ('redefines' redefines=[SPrimitive] | ('realizes' | 'realises') realizes=[DPrimitive|SQualifiedName])
	//	//(description=DRichText)?
	//	'{'
	//	constraints+=SConstraint*
	//	'}';
	public SPrimitiveElements getSPrimitiveAccess() {
		return pSPrimitive;
	}
	
	public ParserRule getSPrimitiveRule() {
		return getSPrimitiveAccess().getRule();
	}
	
	//SPrimitiveArchetype SPrimitive:
	//	'archetype'
	//	name=ID
	//	// (description=DRichText)?
	//	'{'
	//	constraints+=SConstraint*
	//	'}';
	public SPrimitiveArchetypeElements getSPrimitiveArchetypeAccess() {
		return pSPrimitiveArchetype;
	}
	
	public ParserRule getSPrimitiveArchetypeRule() {
		return getSPrimitiveArchetypeAccess().getRule();
	}
	
	//SEnumeration:
	//	({SEnumeration} 'grab' 'enumeration' deductionRule=SGrabEnumerationRule
	//	| {SEnumeration} 'ditch' 'enumeration' deductionRule=SDitchEnumerationRule
	//	| 'enumeration'
	//	name=ID
	//	//	(description=DRichText)?
	//)
	//	'{' (literals+=SLiteral (',' literals+=SLiteral)*)?
	//	constraints+=SConstraint*
	//	'}';
	public SEnumerationElements getSEnumerationAccess() {
		return pSEnumeration;
	}
	
	public ParserRule getSEnumerationRule() {
		return getSEnumerationAccess().getRule();
	}
	
	//SLiteral:
	//	{SLiteral} 'grab' deductionRule=SGrabEnumerationLiteralRule
	//	| {SLiteral} 'ditch' deductionRule=SDitchEnumerationLiteralRule
	//	| name=ID;
	public SLiteralElements getSLiteralAccess() {
		return pSLiteral;
	}
	
	public ParserRule getSLiteralRule() {
		return getSLiteralAccess().getRule();
	}
	
	////	(description=DRichText)?;
	//SRootType:
	//	({SRootType} 'grab' abstract?='abstract'? 'root' deductionRule=SGrabComplexTypeRule
	//	| {SRootType} 'ditch' abstract?='abstract'? 'root' deductionRule=SDitchComplexTypeRule
	//	| {SRootType} 'morph' abstract?='abstract'? 'root' deductionRule=SMorphComplexTypeRule
	//	| {SRootType} 'fuse' abstract?='abstract'? 'root' deductionRule=SFuseComplexTypeRule
	//	| abstract?='abstract'? 'root'
	//	name=ID
	//	SComplexTypeExtends) SComplexTypeFeatures;
	public SRootTypeElements getSRootTypeAccess() {
		return pSRootType;
	}
	
	public ParserRule getSRootTypeRule() {
		return getSRootTypeAccess().getRule();
	}
	
	//SDetailType:
	//	({SDetailType} 'grab' abstract?='abstract'? 'detail' deductionRule=SGrabComplexTypeRule
	//	| {SDetailType} 'ditch' abstract?='abstract'? 'detail' deductionRule=SDitchComplexTypeRule
	//	| {SDetailType} 'morph' abstract?='abstract'? 'detail' deductionRule=SMorphComplexTypeRule
	//	| {SDetailType} 'fuse' abstract?='abstract'? 'detail' deductionRule=SFuseComplexTypeRule
	//	| abstract?='abstract'? 'detail'
	//	name=ID
	//	SComplexTypeExtends) SComplexTypeFeatures;
	public SDetailTypeElements getSDetailTypeAccess() {
		return pSDetailType;
	}
	
	public ParserRule getSDetailTypeRule() {
		return getSDetailTypeAccess().getRule();
	}
	
	//fragment SComplexTypeExtends returns SComplexType:
	//	('extends' superType=[SComplexType])?
	//	//	(description=DRichText)?
	//;
	public SComplexTypeExtendsElements getSComplexTypeExtendsAccess() {
		return pSComplexTypeExtends;
	}
	
	public ParserRule getSComplexTypeExtendsRule() {
		return getSComplexTypeExtendsAccess().getRule();
	}
	
	//fragment SComplexTypeFeatures returns SComplexType:
	//	'{' (features+=SFeature | constraints+=SConstraint)*
	//	'}';
	public SComplexTypeFeaturesElements getSComplexTypeFeaturesAccess() {
		return pSComplexTypeFeatures;
	}
	
	public ParserRule getSComplexTypeFeaturesRule() {
		return getSComplexTypeFeaturesAccess().getRule();
	}
	
	//SFeature:
	//	SAssociation | SAttribute | SQuery;
	public SFeatureElements getSFeatureAccess() {
		return pSFeature;
	}
	
	public ParserRule getSFeatureRule() {
		return getSFeatureAccess().getRule();
	}
	
	//SAssociation:
	//	{SAssociation} 'grab' ('reference' | 'composite') deductionRule=SGrabFeatureRule
	//	| {SAssociation} 'morph' ('reference' | 'composite') deductionRule=SMorphFeatureRule
	//	| {SAssociation} 'ditch' ('reference' | 'composite') deductionRule=SDitchFeatureRule
	//	| derived?='derived'? (kind=SAssociationKind | kind=SAssociationKindInverse 'composite') name=ID
	//	':'
	//	type=[SRootType] multiplicity=SMultiplicity?
	//	//	(description=DRichText)?;
	//;
	public SAssociationElements getSAssociationAccess() {
		return pSAssociation;
	}
	
	public ParserRule getSAssociationRule() {
		return getSAssociationAccess().getRule();
	}
	
	//enum SAssociationKind:
	//	REFERENCE='reference' | COMPOSITE='composite';
	public SAssociationKindElements getSAssociationKindAccess() {
		return eSAssociationKind;
	}
	
	public EnumRule getSAssociationKindRule() {
		return getSAssociationKindAccess().getRule();
	}
	
	//enum SAssociationKindInverse returns SAssociationKind:
	//	INVERSE_COMPOSITE='inverse';
	public SAssociationKindInverseElements getSAssociationKindInverseAccess() {
		return eSAssociationKindInverse;
	}
	
	public EnumRule getSAssociationKindInverseRule() {
		return getSAssociationKindInverseAccess().getRule();
	}
	
	//SAttribute:
	//	{SAttribute} 'grab' ('attribute' | detail?='detail')? deductionRule=SGrabFeatureRule
	//	| {SAttribute} 'morph' ('attribute' | detail?='detail')? deductionRule=SMorphFeatureRule
	//	| {SAttribute} 'ditch' ('attribute' | detail?='detail')? deductionRule=SDitchFeatureRule
	//	| detail?='detail'?
	//	name=ID
	//	':'
	//	type=[SSimpleType] multiplicity=SMultiplicity?
	//	key?='key'?;
	public SAttributeElements getSAttributeAccess() {
		return pSAttribute;
	}
	
	public ParserRule getSAttributeRule() {
		return getSAttributeAccess().getRule();
	}
	
	////	(description=DRichText)?;
	//SQuery:
	//	({SQuery} 'grab' 'query' deductionRule=SGrabFeatureRule
	//	| {SQuery} 'morph' 'query' deductionRule=SMorphFeatureRule)
	//	'(' ('*'
	//	| (parameters+=SQueryParameter (',' parameters+=SQueryParameter)*)?)
	//	')'
	//	| 'ditch' 'query' deductionRule=SDitchFeatureRule
	//	| name=ID
	//	'(' (parameters+=SQueryParameter (',' parameters+=SQueryParameter)*)? ')'
	//	':'
	//	type=[SType] multiplicity=SMultiplicity? ('returns' ^returns=SExpression)?;
	public SQueryElements getSQueryAccess() {
		return pSQuery;
	}
	
	public ParserRule getSQueryRule() {
		return getSQueryAccess().getRule();
	}
	
	////	(description=DRichText)?;
	//SQueryParameter:
	//	{SQueryParameter} 'grab' deductionRule=SGrabFeatureRule
	//	| {SQueryParameter} 'morph' deductionRule=SMorphFeatureRule
	//	| {SQueryParameter} 'ditch' deductionRule=SDitchFeatureRule
	//	| name=ID
	//	':'
	//	type=[SType] multiplicity=SMultiplicity?;
	public SQueryParameterElements getSQueryParameterAccess() {
		return pSQueryParameter;
	}
	
	public ParserRule getSQueryParameterRule() {
		return getSQueryParameterAccess().getRule();
	}
	
	////	(description=DRichText)?;
	//SExpression:
	//	expr=STRING;
	public SExpressionElements getSExpressionAccess() {
		return pSExpression;
	}
	
	public ParserRule getSExpressionRule() {
		return getSExpressionAccess().getRule();
	}
	
	//SQualifiedNameWithWildcard:
	//	SQualifiedName '.*'?;
	public SQualifiedNameWithWildcardElements getSQualifiedNameWithWildcardAccess() {
		return pSQualifiedNameWithWildcard;
	}
	
	public ParserRule getSQualifiedNameWithWildcardRule() {
		return getSQualifiedNameWithWildcardAccess().getRule();
	}
	
	//SQualifiedName:
	//	ID ('.' ID)*;
	public SQualifiedNameElements getSQualifiedNameAccess() {
		return pSQualifiedName;
	}
	
	public ParserRule getSQualifiedNameRule() {
		return getSQualifiedNameAccess().getRule();
	}
	
	//SMultiplicity:
	//	'(' minOccurs=INT '..' maxOccurs=MULTIPLICITY ')';
	public SMultiplicityElements getSMultiplicityAccess() {
		return pSMultiplicity;
	}
	
	public ParserRule getSMultiplicityRule() {
		return getSMultiplicityAccess().getRule();
	}
	
	//MULTIPLICITY ecore::EInt:
	//	INT | '*';
	public MULTIPLICITYElements getMULTIPLICITYAccess() {
		return pMULTIPLICITY;
	}
	
	public ParserRule getMULTIPLICITYRule() {
		return getMULTIPLICITYAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
