/*
 * generated by Xtext 2.17.1
 */
package com.mimacom.ddd.sm.sim.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import com.mimacom.ddd.dm.dim.services.DimGrammarAccess;
import com.mimacom.ddd.dm.dmx.services.DmxGrammarAccess;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class SimGrammarAccess extends AbstractGrammarElementFinder {
	
	public class SInformationModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.sm.sim.Sim.SInformationModel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cImportsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cImportsDImportParserRuleCall_0_0 = (RuleCall)cImportsAssignment_0.eContents().get(0);
		private final Assignment cKindAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cKindSInformationModelKindEnumRuleCall_1_0 = (RuleCall)cKindAssignment_1.eContents().get(0);
		private final Keyword cInformationKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cModelKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cNameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cNameDQualifiedNameParserRuleCall_4_0 = (RuleCall)cNameAssignment_4.eContents().get(0);
		private final Assignment cGenerateAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final Keyword cGenerateGenerateKeyword_5_0 = (Keyword)cGenerateAssignment_5.eContents().get(0);
		private final Assignment cDescriptionAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cDescriptionDRichTextParserRuleCall_6_0 = (RuleCall)cDescriptionAssignment_6.eContents().get(0);
		private final Assignment cQueriesAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cQueriesSCoreQueryParserRuleCall_7_0 = (RuleCall)cQueriesAssignment_7.eContents().get(0);
		private final Alternatives cAlternatives_8 = (Alternatives)cGroup.eContents().get(8);
		private final Assignment cTypesAssignment_8_0 = (Assignment)cAlternatives_8.eContents().get(0);
		private final RuleCall cTypesTypeParserRuleCall_8_0_0 = (RuleCall)cTypesAssignment_8_0.eContents().get(0);
		private final Assignment cAggregatesAssignment_8_1 = (Assignment)cAlternatives_8.eContents().get(1);
		private final RuleCall cAggregatesAggregateParserRuleCall_8_1_0 = (RuleCall)cAggregatesAssignment_8_1.eContents().get(0);
		private final Assignment cDomainProxiesAssignment_8_2 = (Assignment)cAlternatives_8.eContents().get(2);
		private final RuleCall cDomainProxiesDomainParserRuleCall_8_2_0 = (RuleCall)cDomainProxiesAssignment_8_2.eContents().get(0);
		
		//SInformationModel:
		//	imports+=DImport*
		//	kind=SInformationModelKind 'information' 'model'
		//	name=DQualifiedName
		//	^generate?='generate'?
		//	description=DRichText?
		//	queries+=SCoreQuery* (types+=Type | aggregates+=Aggregate | domainProxies+=Domain)*;
		@Override public ParserRule getRule() { return rule; }
		
		//imports+=DImport* kind=SInformationModelKind 'information' 'model' name=DQualifiedName ^generate?='generate'?
		//description=DRichText? queries+=SCoreQuery* (types+=Type | aggregates+=Aggregate | domainProxies+=Domain)*
		public Group getGroup() { return cGroup; }
		
		//imports+=DImport*
		public Assignment getImportsAssignment_0() { return cImportsAssignment_0; }
		
		//DImport
		public RuleCall getImportsDImportParserRuleCall_0_0() { return cImportsDImportParserRuleCall_0_0; }
		
		//kind=SInformationModelKind
		public Assignment getKindAssignment_1() { return cKindAssignment_1; }
		
		//SInformationModelKind
		public RuleCall getKindSInformationModelKindEnumRuleCall_1_0() { return cKindSInformationModelKindEnumRuleCall_1_0; }
		
		//'information'
		public Keyword getInformationKeyword_2() { return cInformationKeyword_2; }
		
		//'model'
		public Keyword getModelKeyword_3() { return cModelKeyword_3; }
		
		//name=DQualifiedName
		public Assignment getNameAssignment_4() { return cNameAssignment_4; }
		
		//DQualifiedName
		public RuleCall getNameDQualifiedNameParserRuleCall_4_0() { return cNameDQualifiedNameParserRuleCall_4_0; }
		
		//^generate?='generate'?
		public Assignment getGenerateAssignment_5() { return cGenerateAssignment_5; }
		
		//'generate'
		public Keyword getGenerateGenerateKeyword_5_0() { return cGenerateGenerateKeyword_5_0; }
		
		//description=DRichText?
		public Assignment getDescriptionAssignment_6() { return cDescriptionAssignment_6; }
		
		//DRichText
		public RuleCall getDescriptionDRichTextParserRuleCall_6_0() { return cDescriptionDRichTextParserRuleCall_6_0; }
		
		//queries+=SCoreQuery*
		public Assignment getQueriesAssignment_7() { return cQueriesAssignment_7; }
		
		//SCoreQuery
		public RuleCall getQueriesSCoreQueryParserRuleCall_7_0() { return cQueriesSCoreQueryParserRuleCall_7_0; }
		
		//(types+=Type | aggregates+=Aggregate | domainProxies+=Domain)*
		public Alternatives getAlternatives_8() { return cAlternatives_8; }
		
		//types+=Type
		public Assignment getTypesAssignment_8_0() { return cTypesAssignment_8_0; }
		
		//Type
		public RuleCall getTypesTypeParserRuleCall_8_0_0() { return cTypesTypeParserRuleCall_8_0_0; }
		
		//aggregates+=Aggregate
		public Assignment getAggregatesAssignment_8_1() { return cAggregatesAssignment_8_1; }
		
		//Aggregate
		public RuleCall getAggregatesAggregateParserRuleCall_8_1_0() { return cAggregatesAggregateParserRuleCall_8_1_0; }
		
		//domainProxies+=Domain
		public Assignment getDomainProxiesAssignment_8_2() { return cDomainProxiesAssignment_8_2; }
		
		//Domain
		public RuleCall getDomainProxiesDomainParserRuleCall_8_2_0() { return cDomainProxiesDomainParserRuleCall_8_2_0; }
	}
	public class SGrabDomainRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.sm.sim.Sim.SGrabDomainRule");
		private final Assignment cSourceAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cSourceDDomainCrossReference_0 = (CrossReference)cSourceAssignment.eContents().get(0);
		private final RuleCall cSourceDDomainDQualifiedNameParserRuleCall_0_1 = (RuleCall)cSourceDDomainCrossReference_0.eContents().get(1);
		
		///*
		// * RULEs
		// */ SGrabDomainRule:
		//	source=[DDomain|DQualifiedName];
		@Override public ParserRule getRule() { return rule; }
		
		//source=[DDomain|DQualifiedName]
		public Assignment getSourceAssignment() { return cSourceAssignment; }
		
		//[DDomain|DQualifiedName]
		public CrossReference getSourceDDomainCrossReference_0() { return cSourceDDomainCrossReference_0; }
		
		//DQualifiedName
		public RuleCall getSourceDDomainDQualifiedNameParserRuleCall_0_1() { return cSourceDDomainDQualifiedNameParserRuleCall_0_1; }
	}
	public class SGrabAggregateRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.sm.sim.Sim.SGrabAggregateRule");
		private final Assignment cSourceAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cSourceDAggregateCrossReference_0 = (CrossReference)cSourceAssignment.eContents().get(0);
		private final RuleCall cSourceDAggregateDQualifiedNameParserRuleCall_0_1 = (RuleCall)cSourceDAggregateCrossReference_0.eContents().get(1);
		
		//SGrabAggregateRule:
		//	source=[DAggregate|DQualifiedName];
		@Override public ParserRule getRule() { return rule; }
		
		//source=[DAggregate|DQualifiedName]
		public Assignment getSourceAssignment() { return cSourceAssignment; }
		
		//[DAggregate|DQualifiedName]
		public CrossReference getSourceDAggregateCrossReference_0() { return cSourceDAggregateCrossReference_0; }
		
		//DQualifiedName
		public RuleCall getSourceDAggregateDQualifiedNameParserRuleCall_0_1() { return cSourceDAggregateDQualifiedNameParserRuleCall_0_1; }
	}
	public class SGrabPrimitiveRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.sm.sim.Sim.SGrabPrimitiveRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSourceAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cSourceDPrimitiveCrossReference_0_0 = (CrossReference)cSourceAssignment_0.eContents().get(0);
		private final RuleCall cSourceDPrimitiveDQualifiedNameParserRuleCall_0_0_1 = (RuleCall)cSourceDPrimitiveCrossReference_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cAsKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cRenameToAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRenameToIDTerminalRuleCall_1_1_0 = (RuleCall)cRenameToAssignment_1_1.eContents().get(0);
		
		//SGrabPrimitiveRule SGrabRule:
		//	source=[DPrimitive|DQualifiedName] ('as' renameTo=ID)?;
		@Override public ParserRule getRule() { return rule; }
		
		//source=[DPrimitive|DQualifiedName] ('as' renameTo=ID)?
		public Group getGroup() { return cGroup; }
		
		//source=[DPrimitive|DQualifiedName]
		public Assignment getSourceAssignment_0() { return cSourceAssignment_0; }
		
		//[DPrimitive|DQualifiedName]
		public CrossReference getSourceDPrimitiveCrossReference_0_0() { return cSourceDPrimitiveCrossReference_0_0; }
		
		//DQualifiedName
		public RuleCall getSourceDPrimitiveDQualifiedNameParserRuleCall_0_0_1() { return cSourceDPrimitiveDQualifiedNameParserRuleCall_0_0_1; }
		
		//('as' renameTo=ID)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'as'
		public Keyword getAsKeyword_1_0() { return cAsKeyword_1_0; }
		
		//renameTo=ID
		public Assignment getRenameToAssignment_1_1() { return cRenameToAssignment_1_1; }
		
		//ID
		public RuleCall getRenameToIDTerminalRuleCall_1_1_0() { return cRenameToIDTerminalRuleCall_1_1_0; }
	}
	public class SDitchPrimitiveRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.sm.sim.Sim.SDitchPrimitiveRule");
		private final Assignment cSourceAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cSourceDPrimitiveCrossReference_0 = (CrossReference)cSourceAssignment.eContents().get(0);
		private final RuleCall cSourceDPrimitiveDQualifiedNameParserRuleCall_0_1 = (RuleCall)cSourceDPrimitiveCrossReference_0.eContents().get(1);
		
		//SDitchPrimitiveRule SDitchRule:
		//	source=[DPrimitive|DQualifiedName];
		@Override public ParserRule getRule() { return rule; }
		
		//source=[DPrimitive|DQualifiedName]
		public Assignment getSourceAssignment() { return cSourceAssignment; }
		
		//[DPrimitive|DQualifiedName]
		public CrossReference getSourceDPrimitiveCrossReference_0() { return cSourceDPrimitiveCrossReference_0; }
		
		//DQualifiedName
		public RuleCall getSourceDPrimitiveDQualifiedNameParserRuleCall_0_1() { return cSourceDPrimitiveDQualifiedNameParserRuleCall_0_1; }
	}
	public class SGrabEnumerationRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.sm.sim.Sim.SGrabEnumerationRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSourceAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cSourceDEnumerationCrossReference_0_0 = (CrossReference)cSourceAssignment_0.eContents().get(0);
		private final RuleCall cSourceDEnumerationDQualifiedNameParserRuleCall_0_0_1 = (RuleCall)cSourceDEnumerationCrossReference_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cAsKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cRenameToAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRenameToIDTerminalRuleCall_1_1_0 = (RuleCall)cRenameToAssignment_1_1.eContents().get(0);
		
		//SGrabEnumerationRule SGrabRule:
		//	source=[DEnumeration|DQualifiedName] ('as' renameTo=ID)?;
		@Override public ParserRule getRule() { return rule; }
		
		//source=[DEnumeration|DQualifiedName] ('as' renameTo=ID)?
		public Group getGroup() { return cGroup; }
		
		//source=[DEnumeration|DQualifiedName]
		public Assignment getSourceAssignment_0() { return cSourceAssignment_0; }
		
		//[DEnumeration|DQualifiedName]
		public CrossReference getSourceDEnumerationCrossReference_0_0() { return cSourceDEnumerationCrossReference_0_0; }
		
		//DQualifiedName
		public RuleCall getSourceDEnumerationDQualifiedNameParserRuleCall_0_0_1() { return cSourceDEnumerationDQualifiedNameParserRuleCall_0_0_1; }
		
		//('as' renameTo=ID)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'as'
		public Keyword getAsKeyword_1_0() { return cAsKeyword_1_0; }
		
		//renameTo=ID
		public Assignment getRenameToAssignment_1_1() { return cRenameToAssignment_1_1; }
		
		//ID
		public RuleCall getRenameToIDTerminalRuleCall_1_1_0() { return cRenameToIDTerminalRuleCall_1_1_0; }
	}
	public class SDitchEnumerationRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.sm.sim.Sim.SDitchEnumerationRule");
		private final Assignment cSourceAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cSourceDEnumerationCrossReference_0 = (CrossReference)cSourceAssignment.eContents().get(0);
		private final RuleCall cSourceDEnumerationDQualifiedNameParserRuleCall_0_1 = (RuleCall)cSourceDEnumerationCrossReference_0.eContents().get(1);
		
		//SDitchEnumerationRule SDitchRule:
		//	source=[DEnumeration|DQualifiedName];
		@Override public ParserRule getRule() { return rule; }
		
		//source=[DEnumeration|DQualifiedName]
		public Assignment getSourceAssignment() { return cSourceAssignment; }
		
		//[DEnumeration|DQualifiedName]
		public CrossReference getSourceDEnumerationCrossReference_0() { return cSourceDEnumerationCrossReference_0; }
		
		//DQualifiedName
		public RuleCall getSourceDEnumerationDQualifiedNameParserRuleCall_0_1() { return cSourceDEnumerationDQualifiedNameParserRuleCall_0_1; }
	}
	public class SGrabEnumerationLiteralRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.sm.sim.Sim.SGrabEnumerationLiteralRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSourceAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cSourceDLiteralCrossReference_0_0 = (CrossReference)cSourceAssignment_0.eContents().get(0);
		private final RuleCall cSourceDLiteralIDTerminalRuleCall_0_0_1 = (RuleCall)cSourceDLiteralCrossReference_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cAsKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cRenameToAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRenameToIDTerminalRuleCall_1_1_0 = (RuleCall)cRenameToAssignment_1_1.eContents().get(0);
		
		//SGrabEnumerationLiteralRule SGrabRule:
		//	source=[DLiteral] ('as' renameTo=ID)?;
		@Override public ParserRule getRule() { return rule; }
		
		//source=[DLiteral] ('as' renameTo=ID)?
		public Group getGroup() { return cGroup; }
		
		//source=[DLiteral]
		public Assignment getSourceAssignment_0() { return cSourceAssignment_0; }
		
		//[DLiteral]
		public CrossReference getSourceDLiteralCrossReference_0_0() { return cSourceDLiteralCrossReference_0_0; }
		
		//ID
		public RuleCall getSourceDLiteralIDTerminalRuleCall_0_0_1() { return cSourceDLiteralIDTerminalRuleCall_0_0_1; }
		
		//('as' renameTo=ID)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'as'
		public Keyword getAsKeyword_1_0() { return cAsKeyword_1_0; }
		
		//renameTo=ID
		public Assignment getRenameToAssignment_1_1() { return cRenameToAssignment_1_1; }
		
		//ID
		public RuleCall getRenameToIDTerminalRuleCall_1_1_0() { return cRenameToIDTerminalRuleCall_1_1_0; }
	}
	public class SDitchEnumerationLiteralRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.sm.sim.Sim.SDitchEnumerationLiteralRule");
		private final Assignment cSourceAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cSourceDLiteralCrossReference_0 = (CrossReference)cSourceAssignment.eContents().get(0);
		private final RuleCall cSourceDLiteralIDTerminalRuleCall_0_1 = (RuleCall)cSourceDLiteralCrossReference_0.eContents().get(1);
		
		//SDitchEnumerationLiteralRule SDitchRule:
		//	source=[DLiteral];
		@Override public ParserRule getRule() { return rule; }
		
		//source=[DLiteral]
		public Assignment getSourceAssignment() { return cSourceAssignment; }
		
		//[DLiteral]
		public CrossReference getSourceDLiteralCrossReference_0() { return cSourceDLiteralCrossReference_0; }
		
		//ID
		public RuleCall getSourceDLiteralIDTerminalRuleCall_0_1() { return cSourceDLiteralIDTerminalRuleCall_0_1; }
	}
	public class SGrabComplexTypeRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.sm.sim.Sim.SGrabComplexTypeRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSourceAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cSourceDComplexTypeCrossReference_0_0 = (CrossReference)cSourceAssignment_0.eContents().get(0);
		private final RuleCall cSourceDComplexTypeDQualifiedNameParserRuleCall_0_0_1 = (RuleCall)cSourceDComplexTypeCrossReference_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cAsKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cRenameToAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRenameToIDTerminalRuleCall_1_1_0 = (RuleCall)cRenameToAssignment_1_1.eContents().get(0);
		
		//SGrabComplexTypeRule SGrabRule:
		//	source=[DComplexType|DQualifiedName] ('as' renameTo=ID)?;
		@Override public ParserRule getRule() { return rule; }
		
		//source=[DComplexType|DQualifiedName] ('as' renameTo=ID)?
		public Group getGroup() { return cGroup; }
		
		//source=[DComplexType|DQualifiedName]
		public Assignment getSourceAssignment_0() { return cSourceAssignment_0; }
		
		//[DComplexType|DQualifiedName]
		public CrossReference getSourceDComplexTypeCrossReference_0_0() { return cSourceDComplexTypeCrossReference_0_0; }
		
		//DQualifiedName
		public RuleCall getSourceDComplexTypeDQualifiedNameParserRuleCall_0_0_1() { return cSourceDComplexTypeDQualifiedNameParserRuleCall_0_0_1; }
		
		//('as' renameTo=ID)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'as'
		public Keyword getAsKeyword_1_0() { return cAsKeyword_1_0; }
		
		//renameTo=ID
		public Assignment getRenameToAssignment_1_1() { return cRenameToAssignment_1_1; }
		
		//ID
		public RuleCall getRenameToIDTerminalRuleCall_1_1_0() { return cRenameToIDTerminalRuleCall_1_1_0; }
	}
	public class SDitchComplexTypeRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.sm.sim.Sim.SDitchComplexTypeRule");
		private final Assignment cSourceAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cSourceDComplexTypeCrossReference_0 = (CrossReference)cSourceAssignment.eContents().get(0);
		private final RuleCall cSourceDComplexTypeDQualifiedNameParserRuleCall_0_1 = (RuleCall)cSourceDComplexTypeCrossReference_0.eContents().get(1);
		
		//SDitchComplexTypeRule SDitchRule:
		//	source=[DComplexType|DQualifiedName];
		@Override public ParserRule getRule() { return rule; }
		
		//source=[DComplexType|DQualifiedName]
		public Assignment getSourceAssignment() { return cSourceAssignment; }
		
		//[DComplexType|DQualifiedName]
		public CrossReference getSourceDComplexTypeCrossReference_0() { return cSourceDComplexTypeCrossReference_0; }
		
		//DQualifiedName
		public RuleCall getSourceDComplexTypeDQualifiedNameParserRuleCall_0_1() { return cSourceDComplexTypeDQualifiedNameParserRuleCall_0_1; }
	}
	public class SMorphComplexTypeRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.sm.sim.Sim.SMorphComplexTypeRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSourceAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cSourceDComplexTypeCrossReference_0_0 = (CrossReference)cSourceAssignment_0.eContents().get(0);
		private final RuleCall cSourceDComplexTypeDQualifiedNameParserRuleCall_0_0_1 = (RuleCall)cSourceDComplexTypeCrossReference_0_0.eContents().get(1);
		private final RuleCall cChangeComplexTypeParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//SMorphComplexTypeRule SMorphRule:
		//	source=[DComplexType|DQualifiedName] ChangeComplexType;
		@Override public ParserRule getRule() { return rule; }
		
		//source=[DComplexType|DQualifiedName] ChangeComplexType
		public Group getGroup() { return cGroup; }
		
		//source=[DComplexType|DQualifiedName]
		public Assignment getSourceAssignment_0() { return cSourceAssignment_0; }
		
		//[DComplexType|DQualifiedName]
		public CrossReference getSourceDComplexTypeCrossReference_0_0() { return cSourceDComplexTypeCrossReference_0_0; }
		
		//DQualifiedName
		public RuleCall getSourceDComplexTypeDQualifiedNameParserRuleCall_0_0_1() { return cSourceDComplexTypeDQualifiedNameParserRuleCall_0_0_1; }
		
		//ChangeComplexType
		public RuleCall getChangeComplexTypeParserRuleCall_1() { return cChangeComplexTypeParserRuleCall_1; }
	}
	public class SFuseComplexTypeRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.sm.sim.Sim.SFuseComplexTypeRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSourceAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cSourceDComplexTypeCrossReference_0_0 = (CrossReference)cSourceAssignment_0.eContents().get(0);
		private final RuleCall cSourceDComplexTypeDQualifiedNameParserRuleCall_0_0_1 = (RuleCall)cSourceDComplexTypeCrossReference_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cAndKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cOtherSourcesAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final CrossReference cOtherSourcesDComplexTypeCrossReference_1_1_0 = (CrossReference)cOtherSourcesAssignment_1_1.eContents().get(0);
		private final RuleCall cOtherSourcesDComplexTypeDQualifiedNameParserRuleCall_1_1_0_1 = (RuleCall)cOtherSourcesDComplexTypeCrossReference_1_1_0.eContents().get(1);
		private final RuleCall cChangeComplexTypeParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//SFuseComplexTypeRule SFuseRule:
		//	source=[DComplexType|DQualifiedName] ('and' otherSources+=[DComplexType|DQualifiedName])+
		//	ChangeComplexType;
		@Override public ParserRule getRule() { return rule; }
		
		//source=[DComplexType|DQualifiedName] ('and' otherSources+=[DComplexType|DQualifiedName])+ ChangeComplexType
		public Group getGroup() { return cGroup; }
		
		//source=[DComplexType|DQualifiedName]
		public Assignment getSourceAssignment_0() { return cSourceAssignment_0; }
		
		//[DComplexType|DQualifiedName]
		public CrossReference getSourceDComplexTypeCrossReference_0_0() { return cSourceDComplexTypeCrossReference_0_0; }
		
		//DQualifiedName
		public RuleCall getSourceDComplexTypeDQualifiedNameParserRuleCall_0_0_1() { return cSourceDComplexTypeDQualifiedNameParserRuleCall_0_0_1; }
		
		//('and' otherSources+=[DComplexType|DQualifiedName])+
		public Group getGroup_1() { return cGroup_1; }
		
		//'and'
		public Keyword getAndKeyword_1_0() { return cAndKeyword_1_0; }
		
		//otherSources+=[DComplexType|DQualifiedName]
		public Assignment getOtherSourcesAssignment_1_1() { return cOtherSourcesAssignment_1_1; }
		
		//[DComplexType|DQualifiedName]
		public CrossReference getOtherSourcesDComplexTypeCrossReference_1_1_0() { return cOtherSourcesDComplexTypeCrossReference_1_1_0; }
		
		//DQualifiedName
		public RuleCall getOtherSourcesDComplexTypeDQualifiedNameParserRuleCall_1_1_0_1() { return cOtherSourcesDComplexTypeDQualifiedNameParserRuleCall_1_1_0_1; }
		
		//ChangeComplexType
		public RuleCall getChangeComplexTypeParserRuleCall_2() { return cChangeComplexTypeParserRuleCall_2; }
	}
	public class ChangeComplexTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.sm.sim.Sim.ChangeComplexType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cToKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cAbstractAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAbstractSAbstractTypeEnumRuleCall_1_0 = (RuleCall)cAbstractAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cRootEntityAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cRootEntitySRootEntityEnumRuleCall_2_0_0 = (RuleCall)cRootEntityAssignment_2_0.eContents().get(0);
		private final Assignment cDetailAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cDetailSDetailTypeEnumRuleCall_2_1_0 = (RuleCall)cDetailAssignment_2_1.eContents().get(0);
		private final Assignment cRenameToAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRenameToIDTerminalRuleCall_3_0 = (RuleCall)cRenameToAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cExtendsKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cExtendFromAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final CrossReference cExtendFromDComplexTypeCrossReference_4_1_0 = (CrossReference)cExtendFromAssignment_4_1.eContents().get(0);
		private final RuleCall cExtendFromDComplexTypeIDTerminalRuleCall_4_1_0_1 = (RuleCall)cExtendFromDComplexTypeCrossReference_4_1_0.eContents().get(1);
		
		//fragment ChangeComplexType returns SStructureChangingRule:
		//	('to'
		//	abstract=SAbstractType? (rootEntity=SRootEntity | detail=SDetailType)?
		//	renameTo=ID? ('extends' extendFrom=[DComplexType])?)?;
		@Override public ParserRule getRule() { return rule; }
		
		//('to' abstract=SAbstractType? (rootEntity=SRootEntity | detail=SDetailType)? renameTo=ID? ('extends'
		//extendFrom=[DComplexType])?)?
		public Group getGroup() { return cGroup; }
		
		//'to'
		public Keyword getToKeyword_0() { return cToKeyword_0; }
		
		//abstract=SAbstractType?
		public Assignment getAbstractAssignment_1() { return cAbstractAssignment_1; }
		
		//SAbstractType
		public RuleCall getAbstractSAbstractTypeEnumRuleCall_1_0() { return cAbstractSAbstractTypeEnumRuleCall_1_0; }
		
		//(rootEntity=SRootEntity | detail=SDetailType)?
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//rootEntity=SRootEntity
		public Assignment getRootEntityAssignment_2_0() { return cRootEntityAssignment_2_0; }
		
		//SRootEntity
		public RuleCall getRootEntitySRootEntityEnumRuleCall_2_0_0() { return cRootEntitySRootEntityEnumRuleCall_2_0_0; }
		
		//detail=SDetailType
		public Assignment getDetailAssignment_2_1() { return cDetailAssignment_2_1; }
		
		//SDetailType
		public RuleCall getDetailSDetailTypeEnumRuleCall_2_1_0() { return cDetailSDetailTypeEnumRuleCall_2_1_0; }
		
		//renameTo=ID?
		public Assignment getRenameToAssignment_3() { return cRenameToAssignment_3; }
		
		//ID
		public RuleCall getRenameToIDTerminalRuleCall_3_0() { return cRenameToIDTerminalRuleCall_3_0; }
		
		//('extends' extendFrom=[DComplexType])?
		public Group getGroup_4() { return cGroup_4; }
		
		//'extends'
		public Keyword getExtendsKeyword_4_0() { return cExtendsKeyword_4_0; }
		
		//extendFrom=[DComplexType]
		public Assignment getExtendFromAssignment_4_1() { return cExtendFromAssignment_4_1; }
		
		//[DComplexType]
		public CrossReference getExtendFromDComplexTypeCrossReference_4_1_0() { return cExtendFromDComplexTypeCrossReference_4_1_0; }
		
		//ID
		public RuleCall getExtendFromDComplexTypeIDTerminalRuleCall_4_1_0_1() { return cExtendFromDComplexTypeIDTerminalRuleCall_4_1_0_1; }
	}
	public class SGrabFeatureRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.sm.sim.Sim.SGrabFeatureRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSourceAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cSourceDFeatureCrossReference_0_0 = (CrossReference)cSourceAssignment_0.eContents().get(0);
		private final RuleCall cSourceDFeatureIDTerminalRuleCall_0_0_1 = (RuleCall)cSourceDFeatureCrossReference_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cAsKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cRenameToAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRenameToIDTerminalRuleCall_1_1_0 = (RuleCall)cRenameToAssignment_1_1.eContents().get(0);
		
		//SGrabFeatureRule SGrabRule:
		//	source=[DFeature] ('as' renameTo=ID)?;
		@Override public ParserRule getRule() { return rule; }
		
		//source=[DFeature] ('as' renameTo=ID)?
		public Group getGroup() { return cGroup; }
		
		//source=[DFeature]
		public Assignment getSourceAssignment_0() { return cSourceAssignment_0; }
		
		//[DFeature]
		public CrossReference getSourceDFeatureCrossReference_0_0() { return cSourceDFeatureCrossReference_0_0; }
		
		//ID
		public RuleCall getSourceDFeatureIDTerminalRuleCall_0_0_1() { return cSourceDFeatureIDTerminalRuleCall_0_0_1; }
		
		//('as' renameTo=ID)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'as'
		public Keyword getAsKeyword_1_0() { return cAsKeyword_1_0; }
		
		//renameTo=ID
		public Assignment getRenameToAssignment_1_1() { return cRenameToAssignment_1_1; }
		
		//ID
		public RuleCall getRenameToIDTerminalRuleCall_1_1_0() { return cRenameToIDTerminalRuleCall_1_1_0; }
	}
	public class SMorphFeatureRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.sm.sim.Sim.SMorphFeatureRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSourceAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cSourceDFeatureCrossReference_0_0 = (CrossReference)cSourceAssignment_0.eContents().get(0);
		private final RuleCall cSourceDFeatureIDTerminalRuleCall_0_0_1 = (RuleCall)cSourceDFeatureCrossReference_0_0.eContents().get(1);
		private final Keyword cToKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cRenameToAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cRenameToIDTerminalRuleCall_2_0_0 = (RuleCall)cRenameToAssignment_2_0.eContents().get(0);
		private final Keyword cColonKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cRetypeToAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cRetypeToDTypeCrossReference_3_0 = (CrossReference)cRetypeToAssignment_3.eContents().get(0);
		private final RuleCall cRetypeToDTypeIDTerminalRuleCall_3_0_1 = (RuleCall)cRetypeToDTypeCrossReference_3_0.eContents().get(1);
		private final Assignment cRemultiplyToAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cRemultiplyToDMultiplicityParserRuleCall_4_0 = (RuleCall)cRemultiplyToAssignment_4.eContents().get(0);
		
		//SMorphFeatureRule SMorphRule:
		//	source=[DFeature]
		//	'to' (renameTo=ID ':')?
		//	retypeTo=[DType] remultiplyTo=DMultiplicity?;
		@Override public ParserRule getRule() { return rule; }
		
		//source=[DFeature] 'to' (renameTo=ID ':')? retypeTo=[DType] remultiplyTo=DMultiplicity?
		public Group getGroup() { return cGroup; }
		
		//source=[DFeature]
		public Assignment getSourceAssignment_0() { return cSourceAssignment_0; }
		
		//[DFeature]
		public CrossReference getSourceDFeatureCrossReference_0_0() { return cSourceDFeatureCrossReference_0_0; }
		
		//ID
		public RuleCall getSourceDFeatureIDTerminalRuleCall_0_0_1() { return cSourceDFeatureIDTerminalRuleCall_0_0_1; }
		
		//'to'
		public Keyword getToKeyword_1() { return cToKeyword_1; }
		
		//(renameTo=ID ':')?
		public Group getGroup_2() { return cGroup_2; }
		
		//renameTo=ID
		public Assignment getRenameToAssignment_2_0() { return cRenameToAssignment_2_0; }
		
		//ID
		public RuleCall getRenameToIDTerminalRuleCall_2_0_0() { return cRenameToIDTerminalRuleCall_2_0_0; }
		
		//':'
		public Keyword getColonKeyword_2_1() { return cColonKeyword_2_1; }
		
		//retypeTo=[DType]
		public Assignment getRetypeToAssignment_3() { return cRetypeToAssignment_3; }
		
		//[DType]
		public CrossReference getRetypeToDTypeCrossReference_3_0() { return cRetypeToDTypeCrossReference_3_0; }
		
		//ID
		public RuleCall getRetypeToDTypeIDTerminalRuleCall_3_0_1() { return cRetypeToDTypeIDTerminalRuleCall_3_0_1; }
		
		//remultiplyTo=DMultiplicity?
		public Assignment getRemultiplyToAssignment_4() { return cRemultiplyToAssignment_4; }
		
		//DMultiplicity
		public RuleCall getRemultiplyToDMultiplicityParserRuleCall_4_0() { return cRemultiplyToDMultiplicityParserRuleCall_4_0; }
	}
	public class SDitchFeatureRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.sm.sim.Sim.SDitchFeatureRule");
		private final Assignment cSourceAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cSourceDFeatureCrossReference_0 = (CrossReference)cSourceAssignment.eContents().get(0);
		private final RuleCall cSourceDFeatureIDTerminalRuleCall_0_1 = (RuleCall)cSourceDFeatureCrossReference_0.eContents().get(1);
		
		//SDitchFeatureRule SDitchRule:
		//	source=[DFeature];
		@Override public ParserRule getRule() { return rule; }
		
		//source=[DFeature]
		public Assignment getSourceAssignment() { return cSourceAssignment; }
		
		//[DFeature]
		public CrossReference getSourceDFeatureCrossReference_0() { return cSourceDFeatureCrossReference_0; }
		
		//ID
		public RuleCall getSourceDFeatureIDTerminalRuleCall_0_1() { return cSourceDFeatureIDTerminalRuleCall_0_1; }
	}
	public class DomainElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.sm.sim.Sim.Domain");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSDomainDeductionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cGrabKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cDomainKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cDeductionRuleAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDeductionRuleSGrabDomainRuleParserRuleCall_3_0 = (RuleCall)cDeductionRuleAssignment_3.eContents().get(0);
		
		//Domain SDomainDeduction:
		//	{SDomainDeduction}
		//	'grab' 'domain' deductionRule=SGrabDomainRule;
		@Override public ParserRule getRule() { return rule; }
		
		//{SDomainDeduction} 'grab' 'domain' deductionRule=SGrabDomainRule
		public Group getGroup() { return cGroup; }
		
		//{SDomainDeduction}
		public Action getSDomainDeductionAction_0() { return cSDomainDeductionAction_0; }
		
		//'grab'
		public Keyword getGrabKeyword_1() { return cGrabKeyword_1; }
		
		//'domain'
		public Keyword getDomainKeyword_2() { return cDomainKeyword_2; }
		
		//deductionRule=SGrabDomainRule
		public Assignment getDeductionRuleAssignment_3() { return cDeductionRuleAssignment_3; }
		
		//SGrabDomainRule
		public RuleCall getDeductionRuleSGrabDomainRuleParserRuleCall_3_0() { return cDeductionRuleSGrabDomainRuleParserRuleCall_3_0; }
	}
	public class AggregateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.sm.sim.Sim.Aggregate");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSAggregateDeductionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDAggregateParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Aggregate DAggregate:
		//	SAggregateDeduction | DAggregate;
		@Override public ParserRule getRule() { return rule; }
		
		//SAggregateDeduction | DAggregate
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//SAggregateDeduction
		public RuleCall getSAggregateDeductionParserRuleCall_0() { return cSAggregateDeductionParserRuleCall_0; }
		
		//DAggregate
		public RuleCall getDAggregateParserRuleCall_1() { return cDAggregateParserRuleCall_1; }
	}
	public class SAggregateDeductionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.sm.sim.Sim.SAggregateDeduction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSAggregateDeductionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cGrabKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cAggregateKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cDeductionRuleAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDeductionRuleSGrabAggregateRuleParserRuleCall_3_0 = (RuleCall)cDeductionRuleAssignment_3.eContents().get(0);
		private final Assignment cDescriptionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cDescriptionDRichTextParserRuleCall_4_0 = (RuleCall)cDescriptionAssignment_4.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cTypesAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cTypesTypeParserRuleCall_6_0 = (RuleCall)cTypesAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//SAggregateDeduction:
		//	{SAggregateDeduction}
		//	'grab' 'aggregate' deductionRule=SGrabAggregateRule
		//	description=DRichText?
		//	'{'
		//	types+=Type*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{SAggregateDeduction} 'grab' 'aggregate' deductionRule=SGrabAggregateRule description=DRichText? '{' types+=Type* '}'
		public Group getGroup() { return cGroup; }
		
		//{SAggregateDeduction}
		public Action getSAggregateDeductionAction_0() { return cSAggregateDeductionAction_0; }
		
		//'grab'
		public Keyword getGrabKeyword_1() { return cGrabKeyword_1; }
		
		//'aggregate'
		public Keyword getAggregateKeyword_2() { return cAggregateKeyword_2; }
		
		//deductionRule=SGrabAggregateRule
		public Assignment getDeductionRuleAssignment_3() { return cDeductionRuleAssignment_3; }
		
		//SGrabAggregateRule
		public RuleCall getDeductionRuleSGrabAggregateRuleParserRuleCall_3_0() { return cDeductionRuleSGrabAggregateRuleParserRuleCall_3_0; }
		
		//description=DRichText?
		public Assignment getDescriptionAssignment_4() { return cDescriptionAssignment_4; }
		
		//DRichText
		public RuleCall getDescriptionDRichTextParserRuleCall_4_0() { return cDescriptionDRichTextParserRuleCall_4_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }
		
		//types+=Type*
		public Assignment getTypesAssignment_6() { return cTypesAssignment_6; }
		
		//Type
		public RuleCall getTypesTypeParserRuleCall_6_0() { return cTypesTypeParserRuleCall_6_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	public class DAggregateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.sm.sim.Sim.DAggregate");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDAggregateAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cAggregateKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cDescriptionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDescriptionDRichTextParserRuleCall_2_0 = (RuleCall)cDescriptionAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTypesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cTypesTypeParserRuleCall_4_0 = (RuleCall)cTypesAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//@Override
		//DAggregate:
		//	{DAggregate}
		//	'aggregate'
		//	description=DRichText?
		//	'{'
		//	types+=Type*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{DAggregate} 'aggregate' description=DRichText? '{' types+=Type* '}'
		public Group getGroup() { return cGroup; }
		
		//{DAggregate}
		public Action getDAggregateAction_0() { return cDAggregateAction_0; }
		
		//'aggregate'
		public Keyword getAggregateKeyword_1() { return cAggregateKeyword_1; }
		
		//description=DRichText?
		public Assignment getDescriptionAssignment_2() { return cDescriptionAssignment_2; }
		
		//DRichText
		public RuleCall getDescriptionDRichTextParserRuleCall_2_0() { return cDescriptionDRichTextParserRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//types+=Type*
		public Assignment getTypesAssignment_4() { return cTypesAssignment_4; }
		
		//Type
		public RuleCall getTypesTypeParserRuleCall_4_0() { return cTypesTypeParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.sm.sim.Sim.Type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSPrimitiveDeductionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDPrimitiveParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cSEnumerationDeductionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cDEnumerationParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cSEntityTypeDeductionParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cDEntityTypeParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cSDetailTypeDeductionParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cDDetailTypeParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		
		///*
		// * TYPES
		// */ Type DType:
		//	SPrimitiveDeduction | DPrimitive
		//	| SEnumerationDeduction | DEnumeration
		//	| SEntityTypeDeduction | DEntityType
		//	| SDetailTypeDeduction | DDetailType;
		@Override public ParserRule getRule() { return rule; }
		
		//SPrimitiveDeduction | DPrimitive | SEnumerationDeduction | DEnumeration | SEntityTypeDeduction | DEntityType |
		//SDetailTypeDeduction | DDetailType
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//SPrimitiveDeduction
		public RuleCall getSPrimitiveDeductionParserRuleCall_0() { return cSPrimitiveDeductionParserRuleCall_0; }
		
		//DPrimitive
		public RuleCall getDPrimitiveParserRuleCall_1() { return cDPrimitiveParserRuleCall_1; }
		
		//SEnumerationDeduction
		public RuleCall getSEnumerationDeductionParserRuleCall_2() { return cSEnumerationDeductionParserRuleCall_2; }
		
		//DEnumeration
		public RuleCall getDEnumerationParserRuleCall_3() { return cDEnumerationParserRuleCall_3; }
		
		//SEntityTypeDeduction
		public RuleCall getSEntityTypeDeductionParserRuleCall_4() { return cSEntityTypeDeductionParserRuleCall_4; }
		
		//DEntityType
		public RuleCall getDEntityTypeParserRuleCall_5() { return cDEntityTypeParserRuleCall_5; }
		
		//SDetailTypeDeduction
		public RuleCall getSDetailTypeDeductionParserRuleCall_6() { return cSDetailTypeDeductionParserRuleCall_6; }
		
		//DDetailType
		public RuleCall getDDetailTypeParserRuleCall_7() { return cDDetailTypeParserRuleCall_7; }
	}
	public class SPrimitiveDeductionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.sm.sim.Sim.SPrimitiveDeduction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSPrimitiveDeductionAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cGrabKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Keyword cPrimitiveKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Assignment cDeductionRuleAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cDeductionRuleSGrabPrimitiveRuleParserRuleCall_1_0_2_0 = (RuleCall)cDeductionRuleAssignment_1_0_2.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cDitchKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Keyword cPrimitiveKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		private final Assignment cDeductionRuleAssignment_1_1_2 = (Assignment)cGroup_1_1.eContents().get(2);
		private final RuleCall cDeductionRuleSDitchPrimitiveRuleParserRuleCall_1_1_2_0 = (RuleCall)cDeductionRuleAssignment_1_1_2.eContents().get(0);
		private final Assignment cDescriptionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDescriptionDRichTextParserRuleCall_2_0 = (RuleCall)cDescriptionAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cConstraintsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cConstraintsDConstraintParserRuleCall_4_0 = (RuleCall)cConstraintsAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//SPrimitiveDeduction:
		//	{SPrimitiveDeduction} ('grab' 'primitive' deductionRule=SGrabPrimitiveRule
		//	| 'ditch' 'primitive' deductionRule=SDitchPrimitiveRule) description=DRichText?
		//	'{'
		//	constraints+=DConstraint*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{SPrimitiveDeduction} ('grab' 'primitive' deductionRule=SGrabPrimitiveRule | 'ditch' 'primitive'
		//deductionRule=SDitchPrimitiveRule) description=DRichText? '{' constraints+=DConstraint* '}'
		public Group getGroup() { return cGroup; }
		
		//{SPrimitiveDeduction}
		public Action getSPrimitiveDeductionAction_0() { return cSPrimitiveDeductionAction_0; }
		
		//'grab' 'primitive' deductionRule=SGrabPrimitiveRule | 'ditch' 'primitive' deductionRule=SDitchPrimitiveRule
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'grab' 'primitive' deductionRule=SGrabPrimitiveRule
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//'grab'
		public Keyword getGrabKeyword_1_0_0() { return cGrabKeyword_1_0_0; }
		
		//'primitive'
		public Keyword getPrimitiveKeyword_1_0_1() { return cPrimitiveKeyword_1_0_1; }
		
		//deductionRule=SGrabPrimitiveRule
		public Assignment getDeductionRuleAssignment_1_0_2() { return cDeductionRuleAssignment_1_0_2; }
		
		//SGrabPrimitiveRule
		public RuleCall getDeductionRuleSGrabPrimitiveRuleParserRuleCall_1_0_2_0() { return cDeductionRuleSGrabPrimitiveRuleParserRuleCall_1_0_2_0; }
		
		//'ditch' 'primitive' deductionRule=SDitchPrimitiveRule
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//'ditch'
		public Keyword getDitchKeyword_1_1_0() { return cDitchKeyword_1_1_0; }
		
		//'primitive'
		public Keyword getPrimitiveKeyword_1_1_1() { return cPrimitiveKeyword_1_1_1; }
		
		//deductionRule=SDitchPrimitiveRule
		public Assignment getDeductionRuleAssignment_1_1_2() { return cDeductionRuleAssignment_1_1_2; }
		
		//SDitchPrimitiveRule
		public RuleCall getDeductionRuleSDitchPrimitiveRuleParserRuleCall_1_1_2_0() { return cDeductionRuleSDitchPrimitiveRuleParserRuleCall_1_1_2_0; }
		
		//description=DRichText?
		public Assignment getDescriptionAssignment_2() { return cDescriptionAssignment_2; }
		
		//DRichText
		public RuleCall getDescriptionDRichTextParserRuleCall_2_0() { return cDescriptionDRichTextParserRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//constraints+=DConstraint*
		public Assignment getConstraintsAssignment_4() { return cConstraintsAssignment_4; }
		
		//DConstraint
		public RuleCall getConstraintsDConstraintParserRuleCall_4_0() { return cConstraintsDConstraintParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class SEnumerationDeductionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.sm.sim.Sim.SEnumerationDeduction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSEnumerationDeductionAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cGrabKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Keyword cEnumerationKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Assignment cDeductionRuleAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cDeductionRuleSGrabEnumerationRuleParserRuleCall_1_0_2_0 = (RuleCall)cDeductionRuleAssignment_1_0_2.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cDitchKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Keyword cEnumerationKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		private final Assignment cDeductionRuleAssignment_1_1_2 = (Assignment)cGroup_1_1.eContents().get(2);
		private final RuleCall cDeductionRuleSDitchEnumerationRuleParserRuleCall_1_1_2_0 = (RuleCall)cDeductionRuleAssignment_1_1_2.eContents().get(0);
		private final Assignment cDescriptionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDescriptionDRichTextParserRuleCall_2_0 = (RuleCall)cDescriptionAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cLiteralsAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cLiteralsLiteralParserRuleCall_4_0_0 = (RuleCall)cLiteralsAssignment_4_0.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cGroup_4.eContents().get(1);
		private final Keyword cCommaKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Assignment cLiteralsAssignment_4_1_1 = (Assignment)cGroup_4_1.eContents().get(1);
		private final RuleCall cLiteralsLiteralParserRuleCall_4_1_1_0 = (RuleCall)cLiteralsAssignment_4_1_1.eContents().get(0);
		private final Assignment cConstraintsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cConstraintsDConstraintParserRuleCall_5_0 = (RuleCall)cConstraintsAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//SEnumerationDeduction:
		//	{SEnumerationDeduction} ('grab' 'enumeration' deductionRule=SGrabEnumerationRule
		//	| 'ditch' 'enumeration' deductionRule=SDitchEnumerationRule) description=DRichText?
		//	'{' (literals+=Literal (',' literals+=Literal)*)?
		//	constraints+=DConstraint*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{SEnumerationDeduction} ('grab' 'enumeration' deductionRule=SGrabEnumerationRule | 'ditch' 'enumeration'
		//deductionRule=SDitchEnumerationRule) description=DRichText? '{' (literals+=Literal (',' literals+=Literal)*)?
		//constraints+=DConstraint* '}'
		public Group getGroup() { return cGroup; }
		
		//{SEnumerationDeduction}
		public Action getSEnumerationDeductionAction_0() { return cSEnumerationDeductionAction_0; }
		
		//'grab' 'enumeration' deductionRule=SGrabEnumerationRule | 'ditch' 'enumeration' deductionRule=SDitchEnumerationRule
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'grab' 'enumeration' deductionRule=SGrabEnumerationRule
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//'grab'
		public Keyword getGrabKeyword_1_0_0() { return cGrabKeyword_1_0_0; }
		
		//'enumeration'
		public Keyword getEnumerationKeyword_1_0_1() { return cEnumerationKeyword_1_0_1; }
		
		//deductionRule=SGrabEnumerationRule
		public Assignment getDeductionRuleAssignment_1_0_2() { return cDeductionRuleAssignment_1_0_2; }
		
		//SGrabEnumerationRule
		public RuleCall getDeductionRuleSGrabEnumerationRuleParserRuleCall_1_0_2_0() { return cDeductionRuleSGrabEnumerationRuleParserRuleCall_1_0_2_0; }
		
		//'ditch' 'enumeration' deductionRule=SDitchEnumerationRule
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//'ditch'
		public Keyword getDitchKeyword_1_1_0() { return cDitchKeyword_1_1_0; }
		
		//'enumeration'
		public Keyword getEnumerationKeyword_1_1_1() { return cEnumerationKeyword_1_1_1; }
		
		//deductionRule=SDitchEnumerationRule
		public Assignment getDeductionRuleAssignment_1_1_2() { return cDeductionRuleAssignment_1_1_2; }
		
		//SDitchEnumerationRule
		public RuleCall getDeductionRuleSDitchEnumerationRuleParserRuleCall_1_1_2_0() { return cDeductionRuleSDitchEnumerationRuleParserRuleCall_1_1_2_0; }
		
		//description=DRichText?
		public Assignment getDescriptionAssignment_2() { return cDescriptionAssignment_2; }
		
		//DRichText
		public RuleCall getDescriptionDRichTextParserRuleCall_2_0() { return cDescriptionDRichTextParserRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//(literals+=Literal (',' literals+=Literal)*)?
		public Group getGroup_4() { return cGroup_4; }
		
		//literals+=Literal
		public Assignment getLiteralsAssignment_4_0() { return cLiteralsAssignment_4_0; }
		
		//Literal
		public RuleCall getLiteralsLiteralParserRuleCall_4_0_0() { return cLiteralsLiteralParserRuleCall_4_0_0; }
		
		//(',' literals+=Literal)*
		public Group getGroup_4_1() { return cGroup_4_1; }
		
		//','
		public Keyword getCommaKeyword_4_1_0() { return cCommaKeyword_4_1_0; }
		
		//literals+=Literal
		public Assignment getLiteralsAssignment_4_1_1() { return cLiteralsAssignment_4_1_1; }
		
		//Literal
		public RuleCall getLiteralsLiteralParserRuleCall_4_1_1_0() { return cLiteralsLiteralParserRuleCall_4_1_1_0; }
		
		//constraints+=DConstraint*
		public Assignment getConstraintsAssignment_5() { return cConstraintsAssignment_5; }
		
		//DConstraint
		public RuleCall getConstraintsDConstraintParserRuleCall_5_0() { return cConstraintsDConstraintParserRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class DEnumerationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.sm.sim.Sim.DEnumeration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEnumerationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cAliasKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cAliasesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cAliasesIDTerminalRuleCall_2_1_0 = (RuleCall)cAliasesAssignment_2_1.eContents().get(0);
		private final Assignment cDescriptionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDescriptionDRichTextParserRuleCall_3_0 = (RuleCall)cDescriptionAssignment_3.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Assignment cLiteralsAssignment_5_0 = (Assignment)cGroup_5.eContents().get(0);
		private final RuleCall cLiteralsLiteralParserRuleCall_5_0_0 = (RuleCall)cLiteralsAssignment_5_0.eContents().get(0);
		private final Group cGroup_5_1 = (Group)cGroup_5.eContents().get(1);
		private final Keyword cCommaKeyword_5_1_0 = (Keyword)cGroup_5_1.eContents().get(0);
		private final Assignment cLiteralsAssignment_5_1_1 = (Assignment)cGroup_5_1.eContents().get(1);
		private final RuleCall cLiteralsLiteralParserRuleCall_5_1_1_0 = (RuleCall)cLiteralsAssignment_5_1_1.eContents().get(0);
		private final Assignment cConstraintsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cConstraintsDConstraintParserRuleCall_6_0 = (RuleCall)cConstraintsAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//@Override
		//DEnumeration:
		//	'enumeration'
		//	name=ID ('alias' aliases+=ID)*
		//	description=DRichText?
		//	'{' (literals+=Literal (',' literals+=Literal)*)?
		//	constraints+=DConstraint*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'enumeration' name=ID ('alias' aliases+=ID)* description=DRichText? '{' (literals+=Literal (',' literals+=Literal)*)?
		//constraints+=DConstraint* '}'
		public Group getGroup() { return cGroup; }
		
		//'enumeration'
		public Keyword getEnumerationKeyword_0() { return cEnumerationKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//('alias' aliases+=ID)*
		public Group getGroup_2() { return cGroup_2; }
		
		//'alias'
		public Keyword getAliasKeyword_2_0() { return cAliasKeyword_2_0; }
		
		//aliases+=ID
		public Assignment getAliasesAssignment_2_1() { return cAliasesAssignment_2_1; }
		
		//ID
		public RuleCall getAliasesIDTerminalRuleCall_2_1_0() { return cAliasesIDTerminalRuleCall_2_1_0; }
		
		//description=DRichText?
		public Assignment getDescriptionAssignment_3() { return cDescriptionAssignment_3; }
		
		//DRichText
		public RuleCall getDescriptionDRichTextParserRuleCall_3_0() { return cDescriptionDRichTextParserRuleCall_3_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//(literals+=Literal (',' literals+=Literal)*)?
		public Group getGroup_5() { return cGroup_5; }
		
		//literals+=Literal
		public Assignment getLiteralsAssignment_5_0() { return cLiteralsAssignment_5_0; }
		
		//Literal
		public RuleCall getLiteralsLiteralParserRuleCall_5_0_0() { return cLiteralsLiteralParserRuleCall_5_0_0; }
		
		//(',' literals+=Literal)*
		public Group getGroup_5_1() { return cGroup_5_1; }
		
		//','
		public Keyword getCommaKeyword_5_1_0() { return cCommaKeyword_5_1_0; }
		
		//literals+=Literal
		public Assignment getLiteralsAssignment_5_1_1() { return cLiteralsAssignment_5_1_1; }
		
		//Literal
		public RuleCall getLiteralsLiteralParserRuleCall_5_1_1_0() { return cLiteralsLiteralParserRuleCall_5_1_1_0; }
		
		//constraints+=DConstraint*
		public Assignment getConstraintsAssignment_6() { return cConstraintsAssignment_6; }
		
		//DConstraint
		public RuleCall getConstraintsDConstraintParserRuleCall_6_0() { return cConstraintsDConstraintParserRuleCall_6_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	public class LiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.sm.sim.Sim.Literal");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSLiteralDeductionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDLiteralParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Literal DLiteral:
		//	SLiteralDeduction | DLiteral;
		@Override public ParserRule getRule() { return rule; }
		
		//SLiteralDeduction | DLiteral
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//SLiteralDeduction
		public RuleCall getSLiteralDeductionParserRuleCall_0() { return cSLiteralDeductionParserRuleCall_0; }
		
		//DLiteral
		public RuleCall getDLiteralParserRuleCall_1() { return cDLiteralParserRuleCall_1; }
	}
	public class SLiteralDeductionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.sm.sim.Sim.SLiteralDeduction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSLiteralDeductionAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cGrabKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Assignment cDeductionRuleAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cDeductionRuleSGrabEnumerationLiteralRuleParserRuleCall_1_0_1_0 = (RuleCall)cDeductionRuleAssignment_1_0_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cDitchKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cDeductionRuleAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cDeductionRuleSDitchEnumerationLiteralRuleParserRuleCall_1_1_1_0 = (RuleCall)cDeductionRuleAssignment_1_1_1.eContents().get(0);
		private final Assignment cDescriptionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDescriptionDRichTextParserRuleCall_2_0 = (RuleCall)cDescriptionAssignment_2.eContents().get(0);
		
		//SLiteralDeduction:
		//	{SLiteralDeduction} ('grab' deductionRule=SGrabEnumerationLiteralRule
		//	| 'ditch' deductionRule=SDitchEnumerationLiteralRule) description=DRichText?;
		@Override public ParserRule getRule() { return rule; }
		
		//{SLiteralDeduction} ('grab' deductionRule=SGrabEnumerationLiteralRule | 'ditch'
		//deductionRule=SDitchEnumerationLiteralRule) description=DRichText?
		public Group getGroup() { return cGroup; }
		
		//{SLiteralDeduction}
		public Action getSLiteralDeductionAction_0() { return cSLiteralDeductionAction_0; }
		
		//'grab' deductionRule=SGrabEnumerationLiteralRule | 'ditch' deductionRule=SDitchEnumerationLiteralRule
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'grab' deductionRule=SGrabEnumerationLiteralRule
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//'grab'
		public Keyword getGrabKeyword_1_0_0() { return cGrabKeyword_1_0_0; }
		
		//deductionRule=SGrabEnumerationLiteralRule
		public Assignment getDeductionRuleAssignment_1_0_1() { return cDeductionRuleAssignment_1_0_1; }
		
		//SGrabEnumerationLiteralRule
		public RuleCall getDeductionRuleSGrabEnumerationLiteralRuleParserRuleCall_1_0_1_0() { return cDeductionRuleSGrabEnumerationLiteralRuleParserRuleCall_1_0_1_0; }
		
		//'ditch' deductionRule=SDitchEnumerationLiteralRule
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//'ditch'
		public Keyword getDitchKeyword_1_1_0() { return cDitchKeyword_1_1_0; }
		
		//deductionRule=SDitchEnumerationLiteralRule
		public Assignment getDeductionRuleAssignment_1_1_1() { return cDeductionRuleAssignment_1_1_1; }
		
		//SDitchEnumerationLiteralRule
		public RuleCall getDeductionRuleSDitchEnumerationLiteralRuleParserRuleCall_1_1_1_0() { return cDeductionRuleSDitchEnumerationLiteralRuleParserRuleCall_1_1_1_0; }
		
		//description=DRichText?
		public Assignment getDescriptionAssignment_2() { return cDescriptionAssignment_2; }
		
		//DRichText
		public RuleCall getDescriptionDRichTextParserRuleCall_2_0() { return cDescriptionDRichTextParserRuleCall_2_0; }
	}
	public class SEntityTypeDeductionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.sm.sim.Sim.SEntityTypeDeduction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSEntityTypeDeductionAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cGrabKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Assignment cRootAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final Keyword cRootRootKeyword_1_0_1_0 = (Keyword)cRootAssignment_1_0_1.eContents().get(0);
		private final Keyword cEntityKeyword_1_0_2 = (Keyword)cGroup_1_0.eContents().get(2);
		private final Assignment cDeductionRuleAssignment_1_0_3 = (Assignment)cGroup_1_0.eContents().get(3);
		private final RuleCall cDeductionRuleSGrabComplexTypeRuleParserRuleCall_1_0_3_0 = (RuleCall)cDeductionRuleAssignment_1_0_3.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cDitchKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cRootAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final Keyword cRootRootKeyword_1_1_1_0 = (Keyword)cRootAssignment_1_1_1.eContents().get(0);
		private final Keyword cEntityKeyword_1_1_2 = (Keyword)cGroup_1_1.eContents().get(2);
		private final Assignment cDeductionRuleAssignment_1_1_3 = (Assignment)cGroup_1_1.eContents().get(3);
		private final RuleCall cDeductionRuleSDitchComplexTypeRuleParserRuleCall_1_1_3_0 = (RuleCall)cDeductionRuleAssignment_1_1_3.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cAlternatives_1.eContents().get(2);
		private final Keyword cMorphKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cRootAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final Keyword cRootRootKeyword_1_2_1_0 = (Keyword)cRootAssignment_1_2_1.eContents().get(0);
		private final Keyword cEntityKeyword_1_2_2 = (Keyword)cGroup_1_2.eContents().get(2);
		private final Assignment cDeductionRuleAssignment_1_2_3 = (Assignment)cGroup_1_2.eContents().get(3);
		private final RuleCall cDeductionRuleSMorphComplexTypeRuleParserRuleCall_1_2_3_0 = (RuleCall)cDeductionRuleAssignment_1_2_3.eContents().get(0);
		private final Group cGroup_1_3 = (Group)cAlternatives_1.eContents().get(3);
		private final Keyword cFuseKeyword_1_3_0 = (Keyword)cGroup_1_3.eContents().get(0);
		private final Assignment cRootAssignment_1_3_1 = (Assignment)cGroup_1_3.eContents().get(1);
		private final Keyword cRootRootKeyword_1_3_1_0 = (Keyword)cRootAssignment_1_3_1.eContents().get(0);
		private final Keyword cEntityKeyword_1_3_2 = (Keyword)cGroup_1_3.eContents().get(2);
		private final Assignment cDeductionRuleAssignment_1_3_3 = (Assignment)cGroup_1_3.eContents().get(3);
		private final RuleCall cDeductionRuleSFuseComplexTypeRuleParserRuleCall_1_3_3_0 = (RuleCall)cDeductionRuleAssignment_1_3_3.eContents().get(0);
		private final Assignment cDescriptionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDescriptionDRichTextParserRuleCall_2_0 = (RuleCall)cDescriptionAssignment_2.eContents().get(0);
		private final RuleCall cSComplexTypeFeaturesParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//SEntityTypeDeduction:
		//	{SEntityTypeDeduction} ('grab' root?='root'? 'entity' deductionRule=SGrabComplexTypeRule
		//	| 'ditch' root?='root'? 'entity' deductionRule=SDitchComplexTypeRule
		//	| 'morph' root?='root'? 'entity' deductionRule=SMorphComplexTypeRule
		//	| 'fuse' root?='root'? 'entity' deductionRule=SFuseComplexTypeRule) description=DRichText?
		//	SComplexTypeFeatures;
		@Override public ParserRule getRule() { return rule; }
		
		//{SEntityTypeDeduction} ('grab' root?='root'? 'entity' deductionRule=SGrabComplexTypeRule | 'ditch' root?='root'?
		//'entity' deductionRule=SDitchComplexTypeRule | 'morph' root?='root'? 'entity' deductionRule=SMorphComplexTypeRule |
		//'fuse' root?='root'? 'entity' deductionRule=SFuseComplexTypeRule) description=DRichText? SComplexTypeFeatures
		public Group getGroup() { return cGroup; }
		
		//{SEntityTypeDeduction}
		public Action getSEntityTypeDeductionAction_0() { return cSEntityTypeDeductionAction_0; }
		
		//'grab' root?='root'? 'entity' deductionRule=SGrabComplexTypeRule | 'ditch' root?='root'? 'entity'
		//deductionRule=SDitchComplexTypeRule | 'morph' root?='root'? 'entity' deductionRule=SMorphComplexTypeRule | 'fuse'
		//root?='root'? 'entity' deductionRule=SFuseComplexTypeRule
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'grab' root?='root'? 'entity' deductionRule=SGrabComplexTypeRule
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//'grab'
		public Keyword getGrabKeyword_1_0_0() { return cGrabKeyword_1_0_0; }
		
		//root?='root'?
		public Assignment getRootAssignment_1_0_1() { return cRootAssignment_1_0_1; }
		
		//'root'
		public Keyword getRootRootKeyword_1_0_1_0() { return cRootRootKeyword_1_0_1_0; }
		
		//'entity'
		public Keyword getEntityKeyword_1_0_2() { return cEntityKeyword_1_0_2; }
		
		//deductionRule=SGrabComplexTypeRule
		public Assignment getDeductionRuleAssignment_1_0_3() { return cDeductionRuleAssignment_1_0_3; }
		
		//SGrabComplexTypeRule
		public RuleCall getDeductionRuleSGrabComplexTypeRuleParserRuleCall_1_0_3_0() { return cDeductionRuleSGrabComplexTypeRuleParserRuleCall_1_0_3_0; }
		
		//'ditch' root?='root'? 'entity' deductionRule=SDitchComplexTypeRule
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//'ditch'
		public Keyword getDitchKeyword_1_1_0() { return cDitchKeyword_1_1_0; }
		
		//root?='root'?
		public Assignment getRootAssignment_1_1_1() { return cRootAssignment_1_1_1; }
		
		//'root'
		public Keyword getRootRootKeyword_1_1_1_0() { return cRootRootKeyword_1_1_1_0; }
		
		//'entity'
		public Keyword getEntityKeyword_1_1_2() { return cEntityKeyword_1_1_2; }
		
		//deductionRule=SDitchComplexTypeRule
		public Assignment getDeductionRuleAssignment_1_1_3() { return cDeductionRuleAssignment_1_1_3; }
		
		//SDitchComplexTypeRule
		public RuleCall getDeductionRuleSDitchComplexTypeRuleParserRuleCall_1_1_3_0() { return cDeductionRuleSDitchComplexTypeRuleParserRuleCall_1_1_3_0; }
		
		//'morph' root?='root'? 'entity' deductionRule=SMorphComplexTypeRule
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//'morph'
		public Keyword getMorphKeyword_1_2_0() { return cMorphKeyword_1_2_0; }
		
		//root?='root'?
		public Assignment getRootAssignment_1_2_1() { return cRootAssignment_1_2_1; }
		
		//'root'
		public Keyword getRootRootKeyword_1_2_1_0() { return cRootRootKeyword_1_2_1_0; }
		
		//'entity'
		public Keyword getEntityKeyword_1_2_2() { return cEntityKeyword_1_2_2; }
		
		//deductionRule=SMorphComplexTypeRule
		public Assignment getDeductionRuleAssignment_1_2_3() { return cDeductionRuleAssignment_1_2_3; }
		
		//SMorphComplexTypeRule
		public RuleCall getDeductionRuleSMorphComplexTypeRuleParserRuleCall_1_2_3_0() { return cDeductionRuleSMorphComplexTypeRuleParserRuleCall_1_2_3_0; }
		
		//'fuse' root?='root'? 'entity' deductionRule=SFuseComplexTypeRule
		public Group getGroup_1_3() { return cGroup_1_3; }
		
		//'fuse'
		public Keyword getFuseKeyword_1_3_0() { return cFuseKeyword_1_3_0; }
		
		//root?='root'?
		public Assignment getRootAssignment_1_3_1() { return cRootAssignment_1_3_1; }
		
		//'root'
		public Keyword getRootRootKeyword_1_3_1_0() { return cRootRootKeyword_1_3_1_0; }
		
		//'entity'
		public Keyword getEntityKeyword_1_3_2() { return cEntityKeyword_1_3_2; }
		
		//deductionRule=SFuseComplexTypeRule
		public Assignment getDeductionRuleAssignment_1_3_3() { return cDeductionRuleAssignment_1_3_3; }
		
		//SFuseComplexTypeRule
		public RuleCall getDeductionRuleSFuseComplexTypeRuleParserRuleCall_1_3_3_0() { return cDeductionRuleSFuseComplexTypeRuleParserRuleCall_1_3_3_0; }
		
		//description=DRichText?
		public Assignment getDescriptionAssignment_2() { return cDescriptionAssignment_2; }
		
		//DRichText
		public RuleCall getDescriptionDRichTextParserRuleCall_2_0() { return cDescriptionDRichTextParserRuleCall_2_0; }
		
		//SComplexTypeFeatures
		public RuleCall getSComplexTypeFeaturesParserRuleCall_3() { return cSComplexTypeFeaturesParserRuleCall_3; }
	}
	public class SDetailTypeDeductionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.sm.sim.Sim.SDetailTypeDeduction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSDetailTypeDeductionAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cGrabKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Keyword cDetailKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Assignment cDeductionRuleAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cDeductionRuleSGrabComplexTypeRuleParserRuleCall_1_0_2_0 = (RuleCall)cDeductionRuleAssignment_1_0_2.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cDitchKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Keyword cDetailKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		private final Assignment cDeductionRuleAssignment_1_1_2 = (Assignment)cGroup_1_1.eContents().get(2);
		private final RuleCall cDeductionRuleSDitchComplexTypeRuleParserRuleCall_1_1_2_0 = (RuleCall)cDeductionRuleAssignment_1_1_2.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cAlternatives_1.eContents().get(2);
		private final Keyword cMorphKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Keyword cDetailKeyword_1_2_1 = (Keyword)cGroup_1_2.eContents().get(1);
		private final Assignment cDeductionRuleAssignment_1_2_2 = (Assignment)cGroup_1_2.eContents().get(2);
		private final RuleCall cDeductionRuleSMorphComplexTypeRuleParserRuleCall_1_2_2_0 = (RuleCall)cDeductionRuleAssignment_1_2_2.eContents().get(0);
		private final Group cGroup_1_3 = (Group)cAlternatives_1.eContents().get(3);
		private final Keyword cFuseKeyword_1_3_0 = (Keyword)cGroup_1_3.eContents().get(0);
		private final Keyword cDetailKeyword_1_3_1 = (Keyword)cGroup_1_3.eContents().get(1);
		private final Assignment cDeductionRuleAssignment_1_3_2 = (Assignment)cGroup_1_3.eContents().get(2);
		private final RuleCall cDeductionRuleSFuseComplexTypeRuleParserRuleCall_1_3_2_0 = (RuleCall)cDeductionRuleAssignment_1_3_2.eContents().get(0);
		private final Assignment cDescriptionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDescriptionDRichTextParserRuleCall_2_0 = (RuleCall)cDescriptionAssignment_2.eContents().get(0);
		private final RuleCall cSComplexTypeFeaturesParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//SDetailTypeDeduction:
		//	{SDetailTypeDeduction} ('grab' 'detail' deductionRule=SGrabComplexTypeRule
		//	| 'ditch' 'detail' deductionRule=SDitchComplexTypeRule
		//	| 'morph' 'detail' deductionRule=SMorphComplexTypeRule
		//	| 'fuse' 'detail' deductionRule=SFuseComplexTypeRule) description=DRichText?
		//	SComplexTypeFeatures;
		@Override public ParserRule getRule() { return rule; }
		
		//{SDetailTypeDeduction} ('grab' 'detail' deductionRule=SGrabComplexTypeRule | 'ditch' 'detail'
		//deductionRule=SDitchComplexTypeRule | 'morph' 'detail' deductionRule=SMorphComplexTypeRule | 'fuse' 'detail'
		//deductionRule=SFuseComplexTypeRule) description=DRichText? SComplexTypeFeatures
		public Group getGroup() { return cGroup; }
		
		//{SDetailTypeDeduction}
		public Action getSDetailTypeDeductionAction_0() { return cSDetailTypeDeductionAction_0; }
		
		//'grab' 'detail' deductionRule=SGrabComplexTypeRule | 'ditch' 'detail' deductionRule=SDitchComplexTypeRule | 'morph'
		//'detail' deductionRule=SMorphComplexTypeRule | 'fuse' 'detail' deductionRule=SFuseComplexTypeRule
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'grab' 'detail' deductionRule=SGrabComplexTypeRule
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//'grab'
		public Keyword getGrabKeyword_1_0_0() { return cGrabKeyword_1_0_0; }
		
		//'detail'
		public Keyword getDetailKeyword_1_0_1() { return cDetailKeyword_1_0_1; }
		
		//deductionRule=SGrabComplexTypeRule
		public Assignment getDeductionRuleAssignment_1_0_2() { return cDeductionRuleAssignment_1_0_2; }
		
		//SGrabComplexTypeRule
		public RuleCall getDeductionRuleSGrabComplexTypeRuleParserRuleCall_1_0_2_0() { return cDeductionRuleSGrabComplexTypeRuleParserRuleCall_1_0_2_0; }
		
		//'ditch' 'detail' deductionRule=SDitchComplexTypeRule
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//'ditch'
		public Keyword getDitchKeyword_1_1_0() { return cDitchKeyword_1_1_0; }
		
		//'detail'
		public Keyword getDetailKeyword_1_1_1() { return cDetailKeyword_1_1_1; }
		
		//deductionRule=SDitchComplexTypeRule
		public Assignment getDeductionRuleAssignment_1_1_2() { return cDeductionRuleAssignment_1_1_2; }
		
		//SDitchComplexTypeRule
		public RuleCall getDeductionRuleSDitchComplexTypeRuleParserRuleCall_1_1_2_0() { return cDeductionRuleSDitchComplexTypeRuleParserRuleCall_1_1_2_0; }
		
		//'morph' 'detail' deductionRule=SMorphComplexTypeRule
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//'morph'
		public Keyword getMorphKeyword_1_2_0() { return cMorphKeyword_1_2_0; }
		
		//'detail'
		public Keyword getDetailKeyword_1_2_1() { return cDetailKeyword_1_2_1; }
		
		//deductionRule=SMorphComplexTypeRule
		public Assignment getDeductionRuleAssignment_1_2_2() { return cDeductionRuleAssignment_1_2_2; }
		
		//SMorphComplexTypeRule
		public RuleCall getDeductionRuleSMorphComplexTypeRuleParserRuleCall_1_2_2_0() { return cDeductionRuleSMorphComplexTypeRuleParserRuleCall_1_2_2_0; }
		
		//'fuse' 'detail' deductionRule=SFuseComplexTypeRule
		public Group getGroup_1_3() { return cGroup_1_3; }
		
		//'fuse'
		public Keyword getFuseKeyword_1_3_0() { return cFuseKeyword_1_3_0; }
		
		//'detail'
		public Keyword getDetailKeyword_1_3_1() { return cDetailKeyword_1_3_1; }
		
		//deductionRule=SFuseComplexTypeRule
		public Assignment getDeductionRuleAssignment_1_3_2() { return cDeductionRuleAssignment_1_3_2; }
		
		//SFuseComplexTypeRule
		public RuleCall getDeductionRuleSFuseComplexTypeRuleParserRuleCall_1_3_2_0() { return cDeductionRuleSFuseComplexTypeRuleParserRuleCall_1_3_2_0; }
		
		//description=DRichText?
		public Assignment getDescriptionAssignment_2() { return cDescriptionAssignment_2; }
		
		//DRichText
		public RuleCall getDescriptionDRichTextParserRuleCall_2_0() { return cDescriptionDRichTextParserRuleCall_2_0; }
		
		//SComplexTypeFeatures
		public RuleCall getSComplexTypeFeaturesParserRuleCall_3() { return cSComplexTypeFeaturesParserRuleCall_3; }
	}
	public class SComplexTypeFeaturesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.sm.sim.Sim.SComplexTypeFeatures");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cFeaturesAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cFeaturesFeatureParserRuleCall_1_0_0 = (RuleCall)cFeaturesAssignment_1_0.eContents().get(0);
		private final Assignment cConstraintsAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cConstraintsDConstraintParserRuleCall_1_1_0 = (RuleCall)cConstraintsAssignment_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//fragment SComplexTypeFeatures returns DComplexType:
		//	'{' (features+=Feature | constraints+=DConstraint)*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'{' (features+=Feature | constraints+=DConstraint)* '}'
		public Group getGroup() { return cGroup; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }
		
		//(features+=Feature | constraints+=DConstraint)*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//features+=Feature
		public Assignment getFeaturesAssignment_1_0() { return cFeaturesAssignment_1_0; }
		
		//Feature
		public RuleCall getFeaturesFeatureParserRuleCall_1_0_0() { return cFeaturesFeatureParserRuleCall_1_0_0; }
		
		//constraints+=DConstraint
		public Assignment getConstraintsAssignment_1_1() { return cConstraintsAssignment_1_1; }
		
		//DConstraint
		public RuleCall getConstraintsDConstraintParserRuleCall_1_1_0() { return cConstraintsDConstraintParserRuleCall_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_2() { return cRightCurlyBracketKeyword_2; }
	}
	public class DEntityTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.sm.sim.Sim.DEntityType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAbstractAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cAbstractAbstractKeyword_0_0 = (Keyword)cAbstractAssignment_0.eContents().get(0);
		private final Assignment cRootAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cRootRootKeyword_1_0 = (Keyword)cRootAssignment_1.eContents().get(0);
		private final Keyword cEntityKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cDComplexTypeParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//@Override
		//DEntityType:
		//	abstract?='abstract'?
		//	root?='root'?
		//	'entity'
		//	DComplexType;
		@Override public ParserRule getRule() { return rule; }
		
		//abstract?='abstract'? root?='root'? 'entity' DComplexType
		public Group getGroup() { return cGroup; }
		
		//abstract?='abstract'?
		public Assignment getAbstractAssignment_0() { return cAbstractAssignment_0; }
		
		//'abstract'
		public Keyword getAbstractAbstractKeyword_0_0() { return cAbstractAbstractKeyword_0_0; }
		
		//root?='root'?
		public Assignment getRootAssignment_1() { return cRootAssignment_1; }
		
		//'root'
		public Keyword getRootRootKeyword_1_0() { return cRootRootKeyword_1_0; }
		
		//'entity'
		public Keyword getEntityKeyword_2() { return cEntityKeyword_2; }
		
		//DComplexType
		public RuleCall getDComplexTypeParserRuleCall_3() { return cDComplexTypeParserRuleCall_3; }
	}
	public class DComplexTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.sm.sim.Sim.DComplexType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cAliasKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cAliasesAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cAliasesIDTerminalRuleCall_1_1_0 = (RuleCall)cAliasesAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cExtendsKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cSuperTypeAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cSuperTypeDComplexTypeCrossReference_2_1_0 = (CrossReference)cSuperTypeAssignment_2_1.eContents().get(0);
		private final RuleCall cSuperTypeDComplexTypeIDTerminalRuleCall_2_1_0_1 = (RuleCall)cSuperTypeDComplexTypeCrossReference_2_1_0.eContents().get(1);
		private final Assignment cDescriptionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDescriptionDRichTextParserRuleCall_3_0 = (RuleCall)cDescriptionAssignment_3.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Alternatives cAlternatives_5 = (Alternatives)cGroup.eContents().get(5);
		private final Assignment cFeaturesAssignment_5_0 = (Assignment)cAlternatives_5.eContents().get(0);
		private final RuleCall cFeaturesFeatureParserRuleCall_5_0_0 = (RuleCall)cFeaturesAssignment_5_0.eContents().get(0);
		private final Assignment cConstraintsAssignment_5_1 = (Assignment)cAlternatives_5.eContents().get(1);
		private final RuleCall cConstraintsDConstraintParserRuleCall_5_1_0 = (RuleCall)cConstraintsAssignment_5_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//@Override
		//fragment DComplexType:
		//	name=ID ('alias' aliases+=ID)* ('extends' superType=[DComplexType])?
		//	description=DRichText?
		//	'{' (features+=Feature | constraints+=DConstraint)*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID ('alias' aliases+=ID)* ('extends' superType=[DComplexType])? description=DRichText? '{' (features+=Feature |
		//constraints+=DConstraint)* '}'
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//('alias' aliases+=ID)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'alias'
		public Keyword getAliasKeyword_1_0() { return cAliasKeyword_1_0; }
		
		//aliases+=ID
		public Assignment getAliasesAssignment_1_1() { return cAliasesAssignment_1_1; }
		
		//ID
		public RuleCall getAliasesIDTerminalRuleCall_1_1_0() { return cAliasesIDTerminalRuleCall_1_1_0; }
		
		//('extends' superType=[DComplexType])?
		public Group getGroup_2() { return cGroup_2; }
		
		//'extends'
		public Keyword getExtendsKeyword_2_0() { return cExtendsKeyword_2_0; }
		
		//superType=[DComplexType]
		public Assignment getSuperTypeAssignment_2_1() { return cSuperTypeAssignment_2_1; }
		
		//[DComplexType]
		public CrossReference getSuperTypeDComplexTypeCrossReference_2_1_0() { return cSuperTypeDComplexTypeCrossReference_2_1_0; }
		
		//ID
		public RuleCall getSuperTypeDComplexTypeIDTerminalRuleCall_2_1_0_1() { return cSuperTypeDComplexTypeIDTerminalRuleCall_2_1_0_1; }
		
		//description=DRichText?
		public Assignment getDescriptionAssignment_3() { return cDescriptionAssignment_3; }
		
		//DRichText
		public RuleCall getDescriptionDRichTextParserRuleCall_3_0() { return cDescriptionDRichTextParserRuleCall_3_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//(features+=Feature | constraints+=DConstraint)*
		public Alternatives getAlternatives_5() { return cAlternatives_5; }
		
		//features+=Feature
		public Assignment getFeaturesAssignment_5_0() { return cFeaturesAssignment_5_0; }
		
		//Feature
		public RuleCall getFeaturesFeatureParserRuleCall_5_0_0() { return cFeaturesFeatureParserRuleCall_5_0_0; }
		
		//constraints+=DConstraint
		public Assignment getConstraintsAssignment_5_1() { return cConstraintsAssignment_5_1; }
		
		//DConstraint
		public RuleCall getConstraintsDConstraintParserRuleCall_5_1_0() { return cConstraintsDConstraintParserRuleCall_5_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class FeatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.sm.sim.Sim.Feature");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSAssociationDeductionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDAssociationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cSAttributeDeductionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cDAttributeParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cSQueryDeductionParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cDQueryParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		///*
		// * FEATURES
		// */ Feature DFeature:
		//	SAssociationDeduction | DAssociation
		//	| SAttributeDeduction | DAttribute
		//	| SQueryDeduction | DQuery;
		@Override public ParserRule getRule() { return rule; }
		
		//SAssociationDeduction | DAssociation | SAttributeDeduction | DAttribute | SQueryDeduction | DQuery
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//SAssociationDeduction
		public RuleCall getSAssociationDeductionParserRuleCall_0() { return cSAssociationDeductionParserRuleCall_0; }
		
		//DAssociation
		public RuleCall getDAssociationParserRuleCall_1() { return cDAssociationParserRuleCall_1; }
		
		//SAttributeDeduction
		public RuleCall getSAttributeDeductionParserRuleCall_2() { return cSAttributeDeductionParserRuleCall_2; }
		
		//DAttribute
		public RuleCall getDAttributeParserRuleCall_3() { return cDAttributeParserRuleCall_3; }
		
		//SQueryDeduction
		public RuleCall getSQueryDeductionParserRuleCall_4() { return cSQueryDeductionParserRuleCall_4; }
		
		//DQuery
		public RuleCall getDQueryParserRuleCall_5() { return cDQueryParserRuleCall_5; }
	}
	public class SAssociationDeductionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.sm.sim.Sim.SAssociationDeduction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSAssociationDeductionAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cGrabKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Alternatives cAlternatives_1_0_1 = (Alternatives)cGroup_1_0.eContents().get(1);
		private final Keyword cReferenceKeyword_1_0_1_0 = (Keyword)cAlternatives_1_0_1.eContents().get(0);
		private final Keyword cCompositeKeyword_1_0_1_1 = (Keyword)cAlternatives_1_0_1.eContents().get(1);
		private final Assignment cDeductionRuleAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cDeductionRuleSGrabFeatureRuleParserRuleCall_1_0_2_0 = (RuleCall)cDeductionRuleAssignment_1_0_2.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cMorphKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1_1 = (Alternatives)cGroup_1_1.eContents().get(1);
		private final Keyword cReferenceKeyword_1_1_1_0 = (Keyword)cAlternatives_1_1_1.eContents().get(0);
		private final Keyword cCompositeKeyword_1_1_1_1 = (Keyword)cAlternatives_1_1_1.eContents().get(1);
		private final Assignment cDeductionRuleAssignment_1_1_2 = (Assignment)cGroup_1_1.eContents().get(2);
		private final RuleCall cDeductionRuleSMorphFeatureRuleParserRuleCall_1_1_2_0 = (RuleCall)cDeductionRuleAssignment_1_1_2.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cAlternatives_1.eContents().get(2);
		private final Keyword cDitchKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Alternatives cAlternatives_1_2_1 = (Alternatives)cGroup_1_2.eContents().get(1);
		private final Keyword cReferenceKeyword_1_2_1_0 = (Keyword)cAlternatives_1_2_1.eContents().get(0);
		private final Keyword cCompositeKeyword_1_2_1_1 = (Keyword)cAlternatives_1_2_1.eContents().get(1);
		private final Assignment cDeductionRuleAssignment_1_2_2 = (Assignment)cGroup_1_2.eContents().get(2);
		private final RuleCall cDeductionRuleSDitchFeatureRuleParserRuleCall_1_2_2_0 = (RuleCall)cDeductionRuleAssignment_1_2_2.eContents().get(0);
		private final Assignment cDescriptionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDescriptionDRichTextParserRuleCall_2_0 = (RuleCall)cDescriptionAssignment_2.eContents().get(0);
		
		//SAssociationDeduction:
		//	{SAssociationDeduction} ('grab' ('reference' | 'composite') deductionRule=SGrabFeatureRule
		//	| 'morph' ('reference' | 'composite') deductionRule=SMorphFeatureRule
		//	| 'ditch' ('reference' | 'composite') deductionRule=SDitchFeatureRule) description=DRichText?;
		@Override public ParserRule getRule() { return rule; }
		
		//{SAssociationDeduction} ('grab' ('reference' | 'composite') deductionRule=SGrabFeatureRule | 'morph' ('reference' |
		//'composite') deductionRule=SMorphFeatureRule | 'ditch' ('reference' | 'composite') deductionRule=SDitchFeatureRule)
		//description=DRichText?
		public Group getGroup() { return cGroup; }
		
		//{SAssociationDeduction}
		public Action getSAssociationDeductionAction_0() { return cSAssociationDeductionAction_0; }
		
		//'grab' ('reference' | 'composite') deductionRule=SGrabFeatureRule | 'morph' ('reference' | 'composite')
		//deductionRule=SMorphFeatureRule | 'ditch' ('reference' | 'composite') deductionRule=SDitchFeatureRule
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'grab' ('reference' | 'composite') deductionRule=SGrabFeatureRule
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//'grab'
		public Keyword getGrabKeyword_1_0_0() { return cGrabKeyword_1_0_0; }
		
		//'reference' | 'composite'
		public Alternatives getAlternatives_1_0_1() { return cAlternatives_1_0_1; }
		
		//'reference'
		public Keyword getReferenceKeyword_1_0_1_0() { return cReferenceKeyword_1_0_1_0; }
		
		//'composite'
		public Keyword getCompositeKeyword_1_0_1_1() { return cCompositeKeyword_1_0_1_1; }
		
		//deductionRule=SGrabFeatureRule
		public Assignment getDeductionRuleAssignment_1_0_2() { return cDeductionRuleAssignment_1_0_2; }
		
		//SGrabFeatureRule
		public RuleCall getDeductionRuleSGrabFeatureRuleParserRuleCall_1_0_2_0() { return cDeductionRuleSGrabFeatureRuleParserRuleCall_1_0_2_0; }
		
		//'morph' ('reference' | 'composite') deductionRule=SMorphFeatureRule
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//'morph'
		public Keyword getMorphKeyword_1_1_0() { return cMorphKeyword_1_1_0; }
		
		//'reference' | 'composite'
		public Alternatives getAlternatives_1_1_1() { return cAlternatives_1_1_1; }
		
		//'reference'
		public Keyword getReferenceKeyword_1_1_1_0() { return cReferenceKeyword_1_1_1_0; }
		
		//'composite'
		public Keyword getCompositeKeyword_1_1_1_1() { return cCompositeKeyword_1_1_1_1; }
		
		//deductionRule=SMorphFeatureRule
		public Assignment getDeductionRuleAssignment_1_1_2() { return cDeductionRuleAssignment_1_1_2; }
		
		//SMorphFeatureRule
		public RuleCall getDeductionRuleSMorphFeatureRuleParserRuleCall_1_1_2_0() { return cDeductionRuleSMorphFeatureRuleParserRuleCall_1_1_2_0; }
		
		//'ditch' ('reference' | 'composite') deductionRule=SDitchFeatureRule
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//'ditch'
		public Keyword getDitchKeyword_1_2_0() { return cDitchKeyword_1_2_0; }
		
		//'reference' | 'composite'
		public Alternatives getAlternatives_1_2_1() { return cAlternatives_1_2_1; }
		
		//'reference'
		public Keyword getReferenceKeyword_1_2_1_0() { return cReferenceKeyword_1_2_1_0; }
		
		//'composite'
		public Keyword getCompositeKeyword_1_2_1_1() { return cCompositeKeyword_1_2_1_1; }
		
		//deductionRule=SDitchFeatureRule
		public Assignment getDeductionRuleAssignment_1_2_2() { return cDeductionRuleAssignment_1_2_2; }
		
		//SDitchFeatureRule
		public RuleCall getDeductionRuleSDitchFeatureRuleParserRuleCall_1_2_2_0() { return cDeductionRuleSDitchFeatureRuleParserRuleCall_1_2_2_0; }
		
		//description=DRichText?
		public Assignment getDescriptionAssignment_2() { return cDescriptionAssignment_2; }
		
		//DRichText
		public RuleCall getDescriptionDRichTextParserRuleCall_2_0() { return cDescriptionDRichTextParserRuleCall_2_0; }
	}
	public class SAttributeDeductionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.sm.sim.Sim.SAttributeDeduction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSAttributeDeductionAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cGrabKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Alternatives cAlternatives_1_0_1 = (Alternatives)cGroup_1_0.eContents().get(1);
		private final Keyword cAttributeKeyword_1_0_1_0 = (Keyword)cAlternatives_1_0_1.eContents().get(0);
		private final Assignment cDetailAssignment_1_0_1_1 = (Assignment)cAlternatives_1_0_1.eContents().get(1);
		private final Keyword cDetailDetailKeyword_1_0_1_1_0 = (Keyword)cDetailAssignment_1_0_1_1.eContents().get(0);
		private final Assignment cDeductionRuleAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cDeductionRuleSGrabFeatureRuleParserRuleCall_1_0_2_0 = (RuleCall)cDeductionRuleAssignment_1_0_2.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cMorphKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1_1 = (Alternatives)cGroup_1_1.eContents().get(1);
		private final Keyword cAttributeKeyword_1_1_1_0 = (Keyword)cAlternatives_1_1_1.eContents().get(0);
		private final Assignment cDetailAssignment_1_1_1_1 = (Assignment)cAlternatives_1_1_1.eContents().get(1);
		private final Keyword cDetailDetailKeyword_1_1_1_1_0 = (Keyword)cDetailAssignment_1_1_1_1.eContents().get(0);
		private final Assignment cDeductionRuleAssignment_1_1_2 = (Assignment)cGroup_1_1.eContents().get(2);
		private final RuleCall cDeductionRuleSMorphFeatureRuleParserRuleCall_1_1_2_0 = (RuleCall)cDeductionRuleAssignment_1_1_2.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cAlternatives_1.eContents().get(2);
		private final Keyword cDitchKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Alternatives cAlternatives_1_2_1 = (Alternatives)cGroup_1_2.eContents().get(1);
		private final Keyword cAttributeKeyword_1_2_1_0 = (Keyword)cAlternatives_1_2_1.eContents().get(0);
		private final Assignment cDetailAssignment_1_2_1_1 = (Assignment)cAlternatives_1_2_1.eContents().get(1);
		private final Keyword cDetailDetailKeyword_1_2_1_1_0 = (Keyword)cDetailAssignment_1_2_1_1.eContents().get(0);
		private final Assignment cDeductionRuleAssignment_1_2_2 = (Assignment)cGroup_1_2.eContents().get(2);
		private final RuleCall cDeductionRuleSDitchFeatureRuleParserRuleCall_1_2_2_0 = (RuleCall)cDeductionRuleAssignment_1_2_2.eContents().get(0);
		private final Assignment cDescriptionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDescriptionDRichTextParserRuleCall_2_0 = (RuleCall)cDescriptionAssignment_2.eContents().get(0);
		
		//SAttributeDeduction:
		//	{SAttributeDeduction} ('grab' ('attribute' | detail?='detail')? deductionRule=SGrabFeatureRule
		//	| 'morph' ('attribute' | detail?='detail')? deductionRule=SMorphFeatureRule
		//	| 'ditch' ('attribute' | detail?='detail')? deductionRule=SDitchFeatureRule) description=DRichText?;
		@Override public ParserRule getRule() { return rule; }
		
		//{SAttributeDeduction} ('grab' ('attribute' | detail?='detail')? deductionRule=SGrabFeatureRule | 'morph' ('attribute' |
		//detail?='detail')? deductionRule=SMorphFeatureRule | 'ditch' ('attribute' | detail?='detail')?
		//deductionRule=SDitchFeatureRule) description=DRichText?
		public Group getGroup() { return cGroup; }
		
		//{SAttributeDeduction}
		public Action getSAttributeDeductionAction_0() { return cSAttributeDeductionAction_0; }
		
		//'grab' ('attribute' | detail?='detail')? deductionRule=SGrabFeatureRule | 'morph' ('attribute' | detail?='detail')?
		//deductionRule=SMorphFeatureRule | 'ditch' ('attribute' | detail?='detail')? deductionRule=SDitchFeatureRule
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'grab' ('attribute' | detail?='detail')? deductionRule=SGrabFeatureRule
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//'grab'
		public Keyword getGrabKeyword_1_0_0() { return cGrabKeyword_1_0_0; }
		
		//('attribute' | detail?='detail')?
		public Alternatives getAlternatives_1_0_1() { return cAlternatives_1_0_1; }
		
		//'attribute'
		public Keyword getAttributeKeyword_1_0_1_0() { return cAttributeKeyword_1_0_1_0; }
		
		//detail?='detail'
		public Assignment getDetailAssignment_1_0_1_1() { return cDetailAssignment_1_0_1_1; }
		
		//'detail'
		public Keyword getDetailDetailKeyword_1_0_1_1_0() { return cDetailDetailKeyword_1_0_1_1_0; }
		
		//deductionRule=SGrabFeatureRule
		public Assignment getDeductionRuleAssignment_1_0_2() { return cDeductionRuleAssignment_1_0_2; }
		
		//SGrabFeatureRule
		public RuleCall getDeductionRuleSGrabFeatureRuleParserRuleCall_1_0_2_0() { return cDeductionRuleSGrabFeatureRuleParserRuleCall_1_0_2_0; }
		
		//'morph' ('attribute' | detail?='detail')? deductionRule=SMorphFeatureRule
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//'morph'
		public Keyword getMorphKeyword_1_1_0() { return cMorphKeyword_1_1_0; }
		
		//('attribute' | detail?='detail')?
		public Alternatives getAlternatives_1_1_1() { return cAlternatives_1_1_1; }
		
		//'attribute'
		public Keyword getAttributeKeyword_1_1_1_0() { return cAttributeKeyword_1_1_1_0; }
		
		//detail?='detail'
		public Assignment getDetailAssignment_1_1_1_1() { return cDetailAssignment_1_1_1_1; }
		
		//'detail'
		public Keyword getDetailDetailKeyword_1_1_1_1_0() { return cDetailDetailKeyword_1_1_1_1_0; }
		
		//deductionRule=SMorphFeatureRule
		public Assignment getDeductionRuleAssignment_1_1_2() { return cDeductionRuleAssignment_1_1_2; }
		
		//SMorphFeatureRule
		public RuleCall getDeductionRuleSMorphFeatureRuleParserRuleCall_1_1_2_0() { return cDeductionRuleSMorphFeatureRuleParserRuleCall_1_1_2_0; }
		
		//'ditch' ('attribute' | detail?='detail')? deductionRule=SDitchFeatureRule
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//'ditch'
		public Keyword getDitchKeyword_1_2_0() { return cDitchKeyword_1_2_0; }
		
		//('attribute' | detail?='detail')?
		public Alternatives getAlternatives_1_2_1() { return cAlternatives_1_2_1; }
		
		//'attribute'
		public Keyword getAttributeKeyword_1_2_1_0() { return cAttributeKeyword_1_2_1_0; }
		
		//detail?='detail'
		public Assignment getDetailAssignment_1_2_1_1() { return cDetailAssignment_1_2_1_1; }
		
		//'detail'
		public Keyword getDetailDetailKeyword_1_2_1_1_0() { return cDetailDetailKeyword_1_2_1_1_0; }
		
		//deductionRule=SDitchFeatureRule
		public Assignment getDeductionRuleAssignment_1_2_2() { return cDeductionRuleAssignment_1_2_2; }
		
		//SDitchFeatureRule
		public RuleCall getDeductionRuleSDitchFeatureRuleParserRuleCall_1_2_2_0() { return cDeductionRuleSDitchFeatureRuleParserRuleCall_1_2_2_0; }
		
		//description=DRichText?
		public Assignment getDescriptionAssignment_2() { return cDescriptionAssignment_2; }
		
		//DRichText
		public RuleCall getDescriptionDRichTextParserRuleCall_2_0() { return cDescriptionDRichTextParserRuleCall_2_0; }
	}
	public class SQueryDeductionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.sm.sim.Sim.SQueryDeduction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSQueryDeductionAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Alternatives cAlternatives_1_0_0 = (Alternatives)cGroup_1_0.eContents().get(0);
		private final Group cGroup_1_0_0_0 = (Group)cAlternatives_1_0_0.eContents().get(0);
		private final Keyword cGrabKeyword_1_0_0_0_0 = (Keyword)cGroup_1_0_0_0.eContents().get(0);
		private final Keyword cQueryKeyword_1_0_0_0_1 = (Keyword)cGroup_1_0_0_0.eContents().get(1);
		private final Assignment cDeductionRuleAssignment_1_0_0_0_2 = (Assignment)cGroup_1_0_0_0.eContents().get(2);
		private final RuleCall cDeductionRuleSGrabFeatureRuleParserRuleCall_1_0_0_0_2_0 = (RuleCall)cDeductionRuleAssignment_1_0_0_0_2.eContents().get(0);
		private final Group cGroup_1_0_0_1 = (Group)cAlternatives_1_0_0.eContents().get(1);
		private final Keyword cMorphKeyword_1_0_0_1_0 = (Keyword)cGroup_1_0_0_1.eContents().get(0);
		private final Keyword cQueryKeyword_1_0_0_1_1 = (Keyword)cGroup_1_0_0_1.eContents().get(1);
		private final Assignment cDeductionRuleAssignment_1_0_0_1_2 = (Assignment)cGroup_1_0_0_1.eContents().get(2);
		private final RuleCall cDeductionRuleSMorphFeatureRuleParserRuleCall_1_0_0_1_2_0 = (RuleCall)cDeductionRuleAssignment_1_0_0_1_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Alternatives cAlternatives_1_0_2 = (Alternatives)cGroup_1_0.eContents().get(2);
		private final Keyword cAsteriskKeyword_1_0_2_0 = (Keyword)cAlternatives_1_0_2.eContents().get(0);
		private final Group cGroup_1_0_2_1 = (Group)cAlternatives_1_0_2.eContents().get(1);
		private final Assignment cParametersAssignment_1_0_2_1_0 = (Assignment)cGroup_1_0_2_1.eContents().get(0);
		private final RuleCall cParametersQueryParameterParserRuleCall_1_0_2_1_0_0 = (RuleCall)cParametersAssignment_1_0_2_1_0.eContents().get(0);
		private final Group cGroup_1_0_2_1_1 = (Group)cGroup_1_0_2_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_0_2_1_1_0 = (Keyword)cGroup_1_0_2_1_1.eContents().get(0);
		private final Assignment cParametersAssignment_1_0_2_1_1_1 = (Assignment)cGroup_1_0_2_1_1.eContents().get(1);
		private final RuleCall cParametersQueryParameterParserRuleCall_1_0_2_1_1_1_0 = (RuleCall)cParametersAssignment_1_0_2_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_0_3 = (Keyword)cGroup_1_0.eContents().get(3);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cDitchKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Keyword cQueryKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		private final Assignment cDeductionRuleAssignment_1_1_2 = (Assignment)cGroup_1_1.eContents().get(2);
		private final RuleCall cDeductionRuleSDitchFeatureRuleParserRuleCall_1_1_2_0 = (RuleCall)cDeductionRuleAssignment_1_1_2.eContents().get(0);
		private final Assignment cDescriptionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDescriptionDRichTextParserRuleCall_2_0 = (RuleCall)cDescriptionAssignment_2.eContents().get(0);
		
		//SQueryDeduction:
		//	{SQueryDeduction} (('grab' 'query' deductionRule=SGrabFeatureRule
		//	| 'morph' 'query' deductionRule=SMorphFeatureRule)
		//	'(' ('*'
		//	| (parameters+=QueryParameter (',' parameters+=QueryParameter)*)?)
		//	')'
		//	| 'ditch' 'query' deductionRule=SDitchFeatureRule) description=DRichText?;
		@Override public ParserRule getRule() { return rule; }
		
		//{SQueryDeduction} (('grab' 'query' deductionRule=SGrabFeatureRule | 'morph' 'query' deductionRule=SMorphFeatureRule) '('
		//('*' | (parameters+=QueryParameter (',' parameters+=QueryParameter)*)?) ')' | 'ditch' 'query'
		//deductionRule=SDitchFeatureRule) description=DRichText?
		public Group getGroup() { return cGroup; }
		
		//{SQueryDeduction}
		public Action getSQueryDeductionAction_0() { return cSQueryDeductionAction_0; }
		
		//('grab' 'query' deductionRule=SGrabFeatureRule | 'morph' 'query' deductionRule=SMorphFeatureRule) '(' ('*' |
		//(parameters+=QueryParameter (',' parameters+=QueryParameter)*)?) ')' | 'ditch' 'query' deductionRule=SDitchFeatureRule
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//('grab' 'query' deductionRule=SGrabFeatureRule | 'morph' 'query' deductionRule=SMorphFeatureRule) '(' ('*' |
		//(parameters+=QueryParameter (',' parameters+=QueryParameter)*)?) ')'
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//'grab' 'query' deductionRule=SGrabFeatureRule | 'morph' 'query' deductionRule=SMorphFeatureRule
		public Alternatives getAlternatives_1_0_0() { return cAlternatives_1_0_0; }
		
		//'grab' 'query' deductionRule=SGrabFeatureRule
		public Group getGroup_1_0_0_0() { return cGroup_1_0_0_0; }
		
		//'grab'
		public Keyword getGrabKeyword_1_0_0_0_0() { return cGrabKeyword_1_0_0_0_0; }
		
		//'query'
		public Keyword getQueryKeyword_1_0_0_0_1() { return cQueryKeyword_1_0_0_0_1; }
		
		//deductionRule=SGrabFeatureRule
		public Assignment getDeductionRuleAssignment_1_0_0_0_2() { return cDeductionRuleAssignment_1_0_0_0_2; }
		
		//SGrabFeatureRule
		public RuleCall getDeductionRuleSGrabFeatureRuleParserRuleCall_1_0_0_0_2_0() { return cDeductionRuleSGrabFeatureRuleParserRuleCall_1_0_0_0_2_0; }
		
		//'morph' 'query' deductionRule=SMorphFeatureRule
		public Group getGroup_1_0_0_1() { return cGroup_1_0_0_1; }
		
		//'morph'
		public Keyword getMorphKeyword_1_0_0_1_0() { return cMorphKeyword_1_0_0_1_0; }
		
		//'query'
		public Keyword getQueryKeyword_1_0_0_1_1() { return cQueryKeyword_1_0_0_1_1; }
		
		//deductionRule=SMorphFeatureRule
		public Assignment getDeductionRuleAssignment_1_0_0_1_2() { return cDeductionRuleAssignment_1_0_0_1_2; }
		
		//SMorphFeatureRule
		public RuleCall getDeductionRuleSMorphFeatureRuleParserRuleCall_1_0_0_1_2_0() { return cDeductionRuleSMorphFeatureRuleParserRuleCall_1_0_0_1_2_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_0_1() { return cLeftParenthesisKeyword_1_0_1; }
		
		//'*' | (parameters+=QueryParameter (',' parameters+=QueryParameter)*)?
		public Alternatives getAlternatives_1_0_2() { return cAlternatives_1_0_2; }
		
		//'*'
		public Keyword getAsteriskKeyword_1_0_2_0() { return cAsteriskKeyword_1_0_2_0; }
		
		//(parameters+=QueryParameter (',' parameters+=QueryParameter)*)?
		public Group getGroup_1_0_2_1() { return cGroup_1_0_2_1; }
		
		//parameters+=QueryParameter
		public Assignment getParametersAssignment_1_0_2_1_0() { return cParametersAssignment_1_0_2_1_0; }
		
		//QueryParameter
		public RuleCall getParametersQueryParameterParserRuleCall_1_0_2_1_0_0() { return cParametersQueryParameterParserRuleCall_1_0_2_1_0_0; }
		
		//(',' parameters+=QueryParameter)*
		public Group getGroup_1_0_2_1_1() { return cGroup_1_0_2_1_1; }
		
		//','
		public Keyword getCommaKeyword_1_0_2_1_1_0() { return cCommaKeyword_1_0_2_1_1_0; }
		
		//parameters+=QueryParameter
		public Assignment getParametersAssignment_1_0_2_1_1_1() { return cParametersAssignment_1_0_2_1_1_1; }
		
		//QueryParameter
		public RuleCall getParametersQueryParameterParserRuleCall_1_0_2_1_1_1_0() { return cParametersQueryParameterParserRuleCall_1_0_2_1_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_0_3() { return cRightParenthesisKeyword_1_0_3; }
		
		//'ditch' 'query' deductionRule=SDitchFeatureRule
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//'ditch'
		public Keyword getDitchKeyword_1_1_0() { return cDitchKeyword_1_1_0; }
		
		//'query'
		public Keyword getQueryKeyword_1_1_1() { return cQueryKeyword_1_1_1; }
		
		//deductionRule=SDitchFeatureRule
		public Assignment getDeductionRuleAssignment_1_1_2() { return cDeductionRuleAssignment_1_1_2; }
		
		//SDitchFeatureRule
		public RuleCall getDeductionRuleSDitchFeatureRuleParserRuleCall_1_1_2_0() { return cDeductionRuleSDitchFeatureRuleParserRuleCall_1_1_2_0; }
		
		//description=DRichText?
		public Assignment getDescriptionAssignment_2() { return cDescriptionAssignment_2; }
		
		//DRichText
		public RuleCall getDescriptionDRichTextParserRuleCall_2_0() { return cDescriptionDRichTextParserRuleCall_2_0; }
	}
	public class DQueryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.sm.sim.Sim.DQuery");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cAliasKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cAliasesAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cAliasesIDTerminalRuleCall_1_1_0 = (RuleCall)cAliasesAssignment_1_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cParametersAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cParametersQueryParameterParserRuleCall_3_0_0 = (RuleCall)cParametersAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cParametersAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cParametersQueryParameterParserRuleCall_3_1_1_0 = (RuleCall)cParametersAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cColonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cTypeAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final CrossReference cTypeDTypeCrossReference_6_0 = (CrossReference)cTypeAssignment_6.eContents().get(0);
		private final RuleCall cTypeDTypeIDTerminalRuleCall_6_0_1 = (RuleCall)cTypeDTypeCrossReference_6_0.eContents().get(1);
		private final Assignment cMultiplicityAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cMultiplicityDMultiplicityParserRuleCall_7_0 = (RuleCall)cMultiplicityAssignment_7.eContents().get(0);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cReturnsKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Assignment cReturnsAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final RuleCall cReturnsDExpressionParserRuleCall_8_1_0 = (RuleCall)cReturnsAssignment_8_1.eContents().get(0);
		private final Assignment cDescriptionAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cDescriptionDRichTextParserRuleCall_9_0 = (RuleCall)cDescriptionAssignment_9.eContents().get(0);
		
		//@Override
		//DQuery:
		//	name=ID ('alias' aliases+=ID)*
		//	'(' (parameters+=QueryParameter ("," parameters+=QueryParameter)*)? ')'
		//	':'
		//	type=[DType] multiplicity=DMultiplicity? ('returns' ^returns=DExpression)?
		//	description=DRichText?;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID ('alias' aliases+=ID)* '(' (parameters+=QueryParameter ("," parameters+=QueryParameter)*)? ')' ':' type=[DType]
		//multiplicity=DMultiplicity? ('returns' ^returns=DExpression)? description=DRichText?
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//('alias' aliases+=ID)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'alias'
		public Keyword getAliasKeyword_1_0() { return cAliasKeyword_1_0; }
		
		//aliases+=ID
		public Assignment getAliasesAssignment_1_1() { return cAliasesAssignment_1_1; }
		
		//ID
		public RuleCall getAliasesIDTerminalRuleCall_1_1_0() { return cAliasesIDTerminalRuleCall_1_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//(parameters+=QueryParameter ("," parameters+=QueryParameter)*)?
		public Group getGroup_3() { return cGroup_3; }
		
		//parameters+=QueryParameter
		public Assignment getParametersAssignment_3_0() { return cParametersAssignment_3_0; }
		
		//QueryParameter
		public RuleCall getParametersQueryParameterParserRuleCall_3_0_0() { return cParametersQueryParameterParserRuleCall_3_0_0; }
		
		//("," parameters+=QueryParameter)*
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//","
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }
		
		//parameters+=QueryParameter
		public Assignment getParametersAssignment_3_1_1() { return cParametersAssignment_3_1_1; }
		
		//QueryParameter
		public RuleCall getParametersQueryParameterParserRuleCall_3_1_1_0() { return cParametersQueryParameterParserRuleCall_3_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
		
		//':'
		public Keyword getColonKeyword_5() { return cColonKeyword_5; }
		
		//type=[DType]
		public Assignment getTypeAssignment_6() { return cTypeAssignment_6; }
		
		//[DType]
		public CrossReference getTypeDTypeCrossReference_6_0() { return cTypeDTypeCrossReference_6_0; }
		
		//ID
		public RuleCall getTypeDTypeIDTerminalRuleCall_6_0_1() { return cTypeDTypeIDTerminalRuleCall_6_0_1; }
		
		//multiplicity=DMultiplicity?
		public Assignment getMultiplicityAssignment_7() { return cMultiplicityAssignment_7; }
		
		//DMultiplicity
		public RuleCall getMultiplicityDMultiplicityParserRuleCall_7_0() { return cMultiplicityDMultiplicityParserRuleCall_7_0; }
		
		//('returns' ^returns=DExpression)?
		public Group getGroup_8() { return cGroup_8; }
		
		//'returns'
		public Keyword getReturnsKeyword_8_0() { return cReturnsKeyword_8_0; }
		
		//^returns=DExpression
		public Assignment getReturnsAssignment_8_1() { return cReturnsAssignment_8_1; }
		
		//DExpression
		public RuleCall getReturnsDExpressionParserRuleCall_8_1_0() { return cReturnsDExpressionParserRuleCall_8_1_0; }
		
		//description=DRichText?
		public Assignment getDescriptionAssignment_9() { return cDescriptionAssignment_9; }
		
		//DRichText
		public RuleCall getDescriptionDRichTextParserRuleCall_9_0() { return cDescriptionDRichTextParserRuleCall_9_0; }
	}
	public class QueryParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.sm.sim.Sim.QueryParameter");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSQueryParameterDeductionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDQueryParameterParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//QueryParameter DQueryParameter:
		//	SQueryParameterDeduction | DQueryParameter;
		@Override public ParserRule getRule() { return rule; }
		
		//SQueryParameterDeduction | DQueryParameter
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//SQueryParameterDeduction
		public RuleCall getSQueryParameterDeductionParserRuleCall_0() { return cSQueryParameterDeductionParserRuleCall_0; }
		
		//DQueryParameter
		public RuleCall getDQueryParameterParserRuleCall_1() { return cDQueryParameterParserRuleCall_1; }
	}
	public class SQueryParameterDeductionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.sm.sim.Sim.SQueryParameterDeduction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSQueryParameterDeductionAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cGrabKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Assignment cDeductionRuleAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cDeductionRuleSGrabFeatureRuleParserRuleCall_1_0_1_0 = (RuleCall)cDeductionRuleAssignment_1_0_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cMorphKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cDeductionRuleAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cDeductionRuleSMorphFeatureRuleParserRuleCall_1_1_1_0 = (RuleCall)cDeductionRuleAssignment_1_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cAlternatives_1.eContents().get(2);
		private final Keyword cDitchKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cDeductionRuleAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cDeductionRuleSDitchFeatureRuleParserRuleCall_1_2_1_0 = (RuleCall)cDeductionRuleAssignment_1_2_1.eContents().get(0);
		private final Assignment cDescriptionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDescriptionDRichTextParserRuleCall_2_0 = (RuleCall)cDescriptionAssignment_2.eContents().get(0);
		
		//SQueryParameterDeduction:
		//	{SQueryParameterDeduction} ('grab' deductionRule=SGrabFeatureRule
		//	| 'morph' deductionRule=SMorphFeatureRule
		//	| 'ditch' deductionRule=SDitchFeatureRule) description=DRichText?;
		@Override public ParserRule getRule() { return rule; }
		
		//{SQueryParameterDeduction} ('grab' deductionRule=SGrabFeatureRule | 'morph' deductionRule=SMorphFeatureRule | 'ditch'
		//deductionRule=SDitchFeatureRule) description=DRichText?
		public Group getGroup() { return cGroup; }
		
		//{SQueryParameterDeduction}
		public Action getSQueryParameterDeductionAction_0() { return cSQueryParameterDeductionAction_0; }
		
		//'grab' deductionRule=SGrabFeatureRule | 'morph' deductionRule=SMorphFeatureRule | 'ditch'
		//deductionRule=SDitchFeatureRule
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'grab' deductionRule=SGrabFeatureRule
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//'grab'
		public Keyword getGrabKeyword_1_0_0() { return cGrabKeyword_1_0_0; }
		
		//deductionRule=SGrabFeatureRule
		public Assignment getDeductionRuleAssignment_1_0_1() { return cDeductionRuleAssignment_1_0_1; }
		
		//SGrabFeatureRule
		public RuleCall getDeductionRuleSGrabFeatureRuleParserRuleCall_1_0_1_0() { return cDeductionRuleSGrabFeatureRuleParserRuleCall_1_0_1_0; }
		
		//'morph' deductionRule=SMorphFeatureRule
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//'morph'
		public Keyword getMorphKeyword_1_1_0() { return cMorphKeyword_1_1_0; }
		
		//deductionRule=SMorphFeatureRule
		public Assignment getDeductionRuleAssignment_1_1_1() { return cDeductionRuleAssignment_1_1_1; }
		
		//SMorphFeatureRule
		public RuleCall getDeductionRuleSMorphFeatureRuleParserRuleCall_1_1_1_0() { return cDeductionRuleSMorphFeatureRuleParserRuleCall_1_1_1_0; }
		
		//'ditch' deductionRule=SDitchFeatureRule
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//'ditch'
		public Keyword getDitchKeyword_1_2_0() { return cDitchKeyword_1_2_0; }
		
		//deductionRule=SDitchFeatureRule
		public Assignment getDeductionRuleAssignment_1_2_1() { return cDeductionRuleAssignment_1_2_1; }
		
		//SDitchFeatureRule
		public RuleCall getDeductionRuleSDitchFeatureRuleParserRuleCall_1_2_1_0() { return cDeductionRuleSDitchFeatureRuleParserRuleCall_1_2_1_0; }
		
		//description=DRichText?
		public Assignment getDescriptionAssignment_2() { return cDescriptionAssignment_2; }
		
		//DRichText
		public RuleCall getDescriptionDRichTextParserRuleCall_2_0() { return cDescriptionDRichTextParserRuleCall_2_0; }
	}
	public class SCoreQueryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.sm.sim.Sim.SCoreQuery");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cQueryKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cAliasKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cAliasesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cAliasesIDTerminalRuleCall_2_1_0 = (RuleCall)cAliasesAssignment_2_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cParametersAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cParametersDQueryParameterParserRuleCall_4_0_0 = (RuleCall)cParametersAssignment_4_0.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cGroup_4.eContents().get(1);
		private final Keyword cCommaKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Assignment cParametersAssignment_4_1_1 = (Assignment)cGroup_4_1.eContents().get(1);
		private final RuleCall cParametersDQueryParameterParserRuleCall_4_1_1_0 = (RuleCall)cParametersAssignment_4_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cColonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cTypeAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final CrossReference cTypeDTypeCrossReference_7_0 = (CrossReference)cTypeAssignment_7.eContents().get(0);
		private final RuleCall cTypeDTypeIDTerminalRuleCall_7_0_1 = (RuleCall)cTypeDTypeCrossReference_7_0.eContents().get(1);
		private final Assignment cMultiplicityAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cMultiplicityDMultiplicityParserRuleCall_8_0 = (RuleCall)cMultiplicityAssignment_8.eContents().get(0);
		private final Group cGroup_9 = (Group)cGroup.eContents().get(9);
		private final Keyword cReturnsKeyword_9_0 = (Keyword)cGroup_9.eContents().get(0);
		private final Assignment cReturnsAssignment_9_1 = (Assignment)cGroup_9.eContents().get(1);
		private final RuleCall cReturnsDExpressionParserRuleCall_9_1_0 = (RuleCall)cReturnsAssignment_9_1.eContents().get(0);
		private final Assignment cDescriptionAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cDescriptionDRichTextParserRuleCall_10_0 = (RuleCall)cDescriptionAssignment_10.eContents().get(0);
		
		//SCoreQuery:
		//	'query'
		//	name=ID ('alias' aliases+=ID)*
		//	'(' (parameters+=DQueryParameter ("," parameters+=DQueryParameter)*)? ')'
		//	':'
		//	type=[DType] multiplicity=DMultiplicity? ('returns' ^returns=DExpression)?
		//	description=DRichText?;
		@Override public ParserRule getRule() { return rule; }
		
		//'query' name=ID ('alias' aliases+=ID)* '(' (parameters+=DQueryParameter ("," parameters+=DQueryParameter)*)? ')' ':'
		//type=[DType] multiplicity=DMultiplicity? ('returns' ^returns=DExpression)? description=DRichText?
		public Group getGroup() { return cGroup; }
		
		//'query'
		public Keyword getQueryKeyword_0() { return cQueryKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//('alias' aliases+=ID)*
		public Group getGroup_2() { return cGroup_2; }
		
		//'alias'
		public Keyword getAliasKeyword_2_0() { return cAliasKeyword_2_0; }
		
		//aliases+=ID
		public Assignment getAliasesAssignment_2_1() { return cAliasesAssignment_2_1; }
		
		//ID
		public RuleCall getAliasesIDTerminalRuleCall_2_1_0() { return cAliasesIDTerminalRuleCall_2_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }
		
		//(parameters+=DQueryParameter ("," parameters+=DQueryParameter)*)?
		public Group getGroup_4() { return cGroup_4; }
		
		//parameters+=DQueryParameter
		public Assignment getParametersAssignment_4_0() { return cParametersAssignment_4_0; }
		
		//DQueryParameter
		public RuleCall getParametersDQueryParameterParserRuleCall_4_0_0() { return cParametersDQueryParameterParserRuleCall_4_0_0; }
		
		//("," parameters+=DQueryParameter)*
		public Group getGroup_4_1() { return cGroup_4_1; }
		
		//","
		public Keyword getCommaKeyword_4_1_0() { return cCommaKeyword_4_1_0; }
		
		//parameters+=DQueryParameter
		public Assignment getParametersAssignment_4_1_1() { return cParametersAssignment_4_1_1; }
		
		//DQueryParameter
		public RuleCall getParametersDQueryParameterParserRuleCall_4_1_1_0() { return cParametersDQueryParameterParserRuleCall_4_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
		
		//':'
		public Keyword getColonKeyword_6() { return cColonKeyword_6; }
		
		//type=[DType]
		public Assignment getTypeAssignment_7() { return cTypeAssignment_7; }
		
		//[DType]
		public CrossReference getTypeDTypeCrossReference_7_0() { return cTypeDTypeCrossReference_7_0; }
		
		//ID
		public RuleCall getTypeDTypeIDTerminalRuleCall_7_0_1() { return cTypeDTypeIDTerminalRuleCall_7_0_1; }
		
		//multiplicity=DMultiplicity?
		public Assignment getMultiplicityAssignment_8() { return cMultiplicityAssignment_8; }
		
		//DMultiplicity
		public RuleCall getMultiplicityDMultiplicityParserRuleCall_8_0() { return cMultiplicityDMultiplicityParserRuleCall_8_0; }
		
		//('returns' ^returns=DExpression)?
		public Group getGroup_9() { return cGroup_9; }
		
		//'returns'
		public Keyword getReturnsKeyword_9_0() { return cReturnsKeyword_9_0; }
		
		//^returns=DExpression
		public Assignment getReturnsAssignment_9_1() { return cReturnsAssignment_9_1; }
		
		//DExpression
		public RuleCall getReturnsDExpressionParserRuleCall_9_1_0() { return cReturnsDExpressionParserRuleCall_9_1_0; }
		
		//description=DRichText?
		public Assignment getDescriptionAssignment_10() { return cDescriptionAssignment_10; }
		
		//DRichText
		public RuleCall getDescriptionDRichTextParserRuleCall_10_0() { return cDescriptionDRichTextParserRuleCall_10_0; }
	}
	
	public class SInformationModelKindElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.sm.sim.Sim.SInformationModelKind");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cBASEEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cBASEBaseKeyword_0_0 = (Keyword)cBASEEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cINTERFACEEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cINTERFACEInterfaceKeyword_1_0 = (Keyword)cINTERFACEEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cCOREEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cCORECoreKeyword_2_0 = (Keyword)cCOREEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum SInformationModelKind:
		//	BASE='base' | INTERFACE='interface' | CORE='core';
		public EnumRule getRule() { return rule; }
		
		//BASE='base' | INTERFACE='interface' | CORE='core'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//BASE='base'
		public EnumLiteralDeclaration getBASEEnumLiteralDeclaration_0() { return cBASEEnumLiteralDeclaration_0; }
		
		//'base'
		public Keyword getBASEBaseKeyword_0_0() { return cBASEBaseKeyword_0_0; }
		
		//INTERFACE='interface'
		public EnumLiteralDeclaration getINTERFACEEnumLiteralDeclaration_1() { return cINTERFACEEnumLiteralDeclaration_1; }
		
		//'interface'
		public Keyword getINTERFACEInterfaceKeyword_1_0() { return cINTERFACEInterfaceKeyword_1_0; }
		
		//CORE='core'
		public EnumLiteralDeclaration getCOREEnumLiteralDeclaration_2() { return cCOREEnumLiteralDeclaration_2; }
		
		//'core'
		public Keyword getCORECoreKeyword_2_0() { return cCORECoreKeyword_2_0; }
	}
	public class SAbstractTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.sm.sim.Sim.SAbstractType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cFALSEEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cFALSENonabstractKeyword_0_0 = (Keyword)cFALSEEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cTRUEEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cTRUEAbstractKeyword_1_0 = (Keyword)cTRUEEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum SAbstractType returns STristate:
		//	FALSE='nonabstract' | TRUE='abstract';
		public EnumRule getRule() { return rule; }
		
		//FALSE='nonabstract' | TRUE='abstract'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//FALSE='nonabstract'
		public EnumLiteralDeclaration getFALSEEnumLiteralDeclaration_0() { return cFALSEEnumLiteralDeclaration_0; }
		
		//'nonabstract'
		public Keyword getFALSENonabstractKeyword_0_0() { return cFALSENonabstractKeyword_0_0; }
		
		//TRUE='abstract'
		public EnumLiteralDeclaration getTRUEEnumLiteralDeclaration_1() { return cTRUEEnumLiteralDeclaration_1; }
		
		//'abstract'
		public Keyword getTRUEAbstractKeyword_1_0() { return cTRUEAbstractKeyword_1_0; }
	}
	public class SRootEntityElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.sm.sim.Sim.SRootEntity");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cFALSEEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cFALSENonrootKeyword_0_0 = (Keyword)cFALSEEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cTRUEEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cTRUERootKeyword_1_0 = (Keyword)cTRUEEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum SRootEntity returns STristate:
		//	FALSE='nonroot' | TRUE='root';
		public EnumRule getRule() { return rule; }
		
		//FALSE='nonroot' | TRUE='root'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//FALSE='nonroot'
		public EnumLiteralDeclaration getFALSEEnumLiteralDeclaration_0() { return cFALSEEnumLiteralDeclaration_0; }
		
		//'nonroot'
		public Keyword getFALSENonrootKeyword_0_0() { return cFALSENonrootKeyword_0_0; }
		
		//TRUE='root'
		public EnumLiteralDeclaration getTRUEEnumLiteralDeclaration_1() { return cTRUEEnumLiteralDeclaration_1; }
		
		//'root'
		public Keyword getTRUERootKeyword_1_0() { return cTRUERootKeyword_1_0; }
	}
	public class SDetailTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.sm.sim.Sim.SDetailType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cFALSEEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cFALSEEntityKeyword_0_0 = (Keyword)cFALSEEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cTRUEEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cTRUEDetailKeyword_1_0 = (Keyword)cTRUEEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum SDetailType returns STristate:
		//	FALSE='entity' | TRUE='detail';
		public EnumRule getRule() { return rule; }
		
		//FALSE='entity' | TRUE='detail'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//FALSE='entity'
		public EnumLiteralDeclaration getFALSEEnumLiteralDeclaration_0() { return cFALSEEnumLiteralDeclaration_0; }
		
		//'entity'
		public Keyword getFALSEEntityKeyword_0_0() { return cFALSEEntityKeyword_0_0; }
		
		//TRUE='detail'
		public EnumLiteralDeclaration getTRUEEnumLiteralDeclaration_1() { return cTRUEEnumLiteralDeclaration_1; }
		
		//'detail'
		public Keyword getTRUEDetailKeyword_1_0() { return cTRUEDetailKeyword_1_0; }
	}
	
	private final SInformationModelElements pSInformationModel;
	private final SInformationModelKindElements eSInformationModelKind;
	private final SGrabDomainRuleElements pSGrabDomainRule;
	private final SGrabAggregateRuleElements pSGrabAggregateRule;
	private final SGrabPrimitiveRuleElements pSGrabPrimitiveRule;
	private final SDitchPrimitiveRuleElements pSDitchPrimitiveRule;
	private final SGrabEnumerationRuleElements pSGrabEnumerationRule;
	private final SDitchEnumerationRuleElements pSDitchEnumerationRule;
	private final SGrabEnumerationLiteralRuleElements pSGrabEnumerationLiteralRule;
	private final SDitchEnumerationLiteralRuleElements pSDitchEnumerationLiteralRule;
	private final SGrabComplexTypeRuleElements pSGrabComplexTypeRule;
	private final SDitchComplexTypeRuleElements pSDitchComplexTypeRule;
	private final SMorphComplexTypeRuleElements pSMorphComplexTypeRule;
	private final SFuseComplexTypeRuleElements pSFuseComplexTypeRule;
	private final ChangeComplexTypeElements pChangeComplexType;
	private final SGrabFeatureRuleElements pSGrabFeatureRule;
	private final SMorphFeatureRuleElements pSMorphFeatureRule;
	private final SDitchFeatureRuleElements pSDitchFeatureRule;
	private final SAbstractTypeElements eSAbstractType;
	private final SRootEntityElements eSRootEntity;
	private final SDetailTypeElements eSDetailType;
	private final DomainElements pDomain;
	private final AggregateElements pAggregate;
	private final SAggregateDeductionElements pSAggregateDeduction;
	private final DAggregateElements pDAggregate;
	private final TypeElements pType;
	private final SPrimitiveDeductionElements pSPrimitiveDeduction;
	private final SEnumerationDeductionElements pSEnumerationDeduction;
	private final DEnumerationElements pDEnumeration;
	private final LiteralElements pLiteral;
	private final SLiteralDeductionElements pSLiteralDeduction;
	private final SEntityTypeDeductionElements pSEntityTypeDeduction;
	private final SDetailTypeDeductionElements pSDetailTypeDeduction;
	private final SComplexTypeFeaturesElements pSComplexTypeFeatures;
	private final DEntityTypeElements pDEntityType;
	private final DComplexTypeElements pDComplexType;
	private final FeatureElements pFeature;
	private final SAssociationDeductionElements pSAssociationDeduction;
	private final SAttributeDeductionElements pSAttributeDeduction;
	private final SQueryDeductionElements pSQueryDeduction;
	private final DQueryElements pDQuery;
	private final QueryParameterElements pQueryParameter;
	private final SQueryParameterDeductionElements pSQueryParameterDeduction;
	private final SCoreQueryElements pSCoreQuery;
	
	private final Grammar grammar;
	
	private final DimGrammarAccess gaDim;
	
	private final DmxGrammarAccess gaDmx;

	@Inject
	public SimGrammarAccess(GrammarProvider grammarProvider,
			DimGrammarAccess gaDim,
			DmxGrammarAccess gaDmx) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaDim = gaDim;
		this.gaDmx = gaDmx;
		this.pSInformationModel = new SInformationModelElements();
		this.eSInformationModelKind = new SInformationModelKindElements();
		this.pSGrabDomainRule = new SGrabDomainRuleElements();
		this.pSGrabAggregateRule = new SGrabAggregateRuleElements();
		this.pSGrabPrimitiveRule = new SGrabPrimitiveRuleElements();
		this.pSDitchPrimitiveRule = new SDitchPrimitiveRuleElements();
		this.pSGrabEnumerationRule = new SGrabEnumerationRuleElements();
		this.pSDitchEnumerationRule = new SDitchEnumerationRuleElements();
		this.pSGrabEnumerationLiteralRule = new SGrabEnumerationLiteralRuleElements();
		this.pSDitchEnumerationLiteralRule = new SDitchEnumerationLiteralRuleElements();
		this.pSGrabComplexTypeRule = new SGrabComplexTypeRuleElements();
		this.pSDitchComplexTypeRule = new SDitchComplexTypeRuleElements();
		this.pSMorphComplexTypeRule = new SMorphComplexTypeRuleElements();
		this.pSFuseComplexTypeRule = new SFuseComplexTypeRuleElements();
		this.pChangeComplexType = new ChangeComplexTypeElements();
		this.pSGrabFeatureRule = new SGrabFeatureRuleElements();
		this.pSMorphFeatureRule = new SMorphFeatureRuleElements();
		this.pSDitchFeatureRule = new SDitchFeatureRuleElements();
		this.eSAbstractType = new SAbstractTypeElements();
		this.eSRootEntity = new SRootEntityElements();
		this.eSDetailType = new SDetailTypeElements();
		this.pDomain = new DomainElements();
		this.pAggregate = new AggregateElements();
		this.pSAggregateDeduction = new SAggregateDeductionElements();
		this.pDAggregate = new DAggregateElements();
		this.pType = new TypeElements();
		this.pSPrimitiveDeduction = new SPrimitiveDeductionElements();
		this.pSEnumerationDeduction = new SEnumerationDeductionElements();
		this.pDEnumeration = new DEnumerationElements();
		this.pLiteral = new LiteralElements();
		this.pSLiteralDeduction = new SLiteralDeductionElements();
		this.pSEntityTypeDeduction = new SEntityTypeDeductionElements();
		this.pSDetailTypeDeduction = new SDetailTypeDeductionElements();
		this.pSComplexTypeFeatures = new SComplexTypeFeaturesElements();
		this.pDEntityType = new DEntityTypeElements();
		this.pDComplexType = new DComplexTypeElements();
		this.pFeature = new FeatureElements();
		this.pSAssociationDeduction = new SAssociationDeductionElements();
		this.pSAttributeDeduction = new SAttributeDeductionElements();
		this.pSQueryDeduction = new SQueryDeductionElements();
		this.pDQuery = new DQueryElements();
		this.pQueryParameter = new QueryParameterElements();
		this.pSQueryParameterDeduction = new SQueryParameterDeductionElements();
		this.pSCoreQuery = new SCoreQueryElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("com.mimacom.ddd.sm.sim.Sim".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public DimGrammarAccess getDimGrammarAccess() {
		return gaDim;
	}
	
	public DmxGrammarAccess getDmxGrammarAccess() {
		return gaDmx;
	}

	
	//SInformationModel:
	//	imports+=DImport*
	//	kind=SInformationModelKind 'information' 'model'
	//	name=DQualifiedName
	//	^generate?='generate'?
	//	description=DRichText?
	//	queries+=SCoreQuery* (types+=Type | aggregates+=Aggregate | domainProxies+=Domain)*;
	public SInformationModelElements getSInformationModelAccess() {
		return pSInformationModel;
	}
	
	public ParserRule getSInformationModelRule() {
		return getSInformationModelAccess().getRule();
	}
	
	//enum SInformationModelKind:
	//	BASE='base' | INTERFACE='interface' | CORE='core';
	public SInformationModelKindElements getSInformationModelKindAccess() {
		return eSInformationModelKind;
	}
	
	public EnumRule getSInformationModelKindRule() {
		return getSInformationModelKindAccess().getRule();
	}
	
	///*
	// * RULEs
	// */ SGrabDomainRule:
	//	source=[DDomain|DQualifiedName];
	public SGrabDomainRuleElements getSGrabDomainRuleAccess() {
		return pSGrabDomainRule;
	}
	
	public ParserRule getSGrabDomainRuleRule() {
		return getSGrabDomainRuleAccess().getRule();
	}
	
	//SGrabAggregateRule:
	//	source=[DAggregate|DQualifiedName];
	public SGrabAggregateRuleElements getSGrabAggregateRuleAccess() {
		return pSGrabAggregateRule;
	}
	
	public ParserRule getSGrabAggregateRuleRule() {
		return getSGrabAggregateRuleAccess().getRule();
	}
	
	//SGrabPrimitiveRule SGrabRule:
	//	source=[DPrimitive|DQualifiedName] ('as' renameTo=ID)?;
	public SGrabPrimitiveRuleElements getSGrabPrimitiveRuleAccess() {
		return pSGrabPrimitiveRule;
	}
	
	public ParserRule getSGrabPrimitiveRuleRule() {
		return getSGrabPrimitiveRuleAccess().getRule();
	}
	
	//SDitchPrimitiveRule SDitchRule:
	//	source=[DPrimitive|DQualifiedName];
	public SDitchPrimitiveRuleElements getSDitchPrimitiveRuleAccess() {
		return pSDitchPrimitiveRule;
	}
	
	public ParserRule getSDitchPrimitiveRuleRule() {
		return getSDitchPrimitiveRuleAccess().getRule();
	}
	
	//SGrabEnumerationRule SGrabRule:
	//	source=[DEnumeration|DQualifiedName] ('as' renameTo=ID)?;
	public SGrabEnumerationRuleElements getSGrabEnumerationRuleAccess() {
		return pSGrabEnumerationRule;
	}
	
	public ParserRule getSGrabEnumerationRuleRule() {
		return getSGrabEnumerationRuleAccess().getRule();
	}
	
	//SDitchEnumerationRule SDitchRule:
	//	source=[DEnumeration|DQualifiedName];
	public SDitchEnumerationRuleElements getSDitchEnumerationRuleAccess() {
		return pSDitchEnumerationRule;
	}
	
	public ParserRule getSDitchEnumerationRuleRule() {
		return getSDitchEnumerationRuleAccess().getRule();
	}
	
	//SGrabEnumerationLiteralRule SGrabRule:
	//	source=[DLiteral] ('as' renameTo=ID)?;
	public SGrabEnumerationLiteralRuleElements getSGrabEnumerationLiteralRuleAccess() {
		return pSGrabEnumerationLiteralRule;
	}
	
	public ParserRule getSGrabEnumerationLiteralRuleRule() {
		return getSGrabEnumerationLiteralRuleAccess().getRule();
	}
	
	//SDitchEnumerationLiteralRule SDitchRule:
	//	source=[DLiteral];
	public SDitchEnumerationLiteralRuleElements getSDitchEnumerationLiteralRuleAccess() {
		return pSDitchEnumerationLiteralRule;
	}
	
	public ParserRule getSDitchEnumerationLiteralRuleRule() {
		return getSDitchEnumerationLiteralRuleAccess().getRule();
	}
	
	//SGrabComplexTypeRule SGrabRule:
	//	source=[DComplexType|DQualifiedName] ('as' renameTo=ID)?;
	public SGrabComplexTypeRuleElements getSGrabComplexTypeRuleAccess() {
		return pSGrabComplexTypeRule;
	}
	
	public ParserRule getSGrabComplexTypeRuleRule() {
		return getSGrabComplexTypeRuleAccess().getRule();
	}
	
	//SDitchComplexTypeRule SDitchRule:
	//	source=[DComplexType|DQualifiedName];
	public SDitchComplexTypeRuleElements getSDitchComplexTypeRuleAccess() {
		return pSDitchComplexTypeRule;
	}
	
	public ParserRule getSDitchComplexTypeRuleRule() {
		return getSDitchComplexTypeRuleAccess().getRule();
	}
	
	//SMorphComplexTypeRule SMorphRule:
	//	source=[DComplexType|DQualifiedName] ChangeComplexType;
	public SMorphComplexTypeRuleElements getSMorphComplexTypeRuleAccess() {
		return pSMorphComplexTypeRule;
	}
	
	public ParserRule getSMorphComplexTypeRuleRule() {
		return getSMorphComplexTypeRuleAccess().getRule();
	}
	
	//SFuseComplexTypeRule SFuseRule:
	//	source=[DComplexType|DQualifiedName] ('and' otherSources+=[DComplexType|DQualifiedName])+
	//	ChangeComplexType;
	public SFuseComplexTypeRuleElements getSFuseComplexTypeRuleAccess() {
		return pSFuseComplexTypeRule;
	}
	
	public ParserRule getSFuseComplexTypeRuleRule() {
		return getSFuseComplexTypeRuleAccess().getRule();
	}
	
	//fragment ChangeComplexType returns SStructureChangingRule:
	//	('to'
	//	abstract=SAbstractType? (rootEntity=SRootEntity | detail=SDetailType)?
	//	renameTo=ID? ('extends' extendFrom=[DComplexType])?)?;
	public ChangeComplexTypeElements getChangeComplexTypeAccess() {
		return pChangeComplexType;
	}
	
	public ParserRule getChangeComplexTypeRule() {
		return getChangeComplexTypeAccess().getRule();
	}
	
	//SGrabFeatureRule SGrabRule:
	//	source=[DFeature] ('as' renameTo=ID)?;
	public SGrabFeatureRuleElements getSGrabFeatureRuleAccess() {
		return pSGrabFeatureRule;
	}
	
	public ParserRule getSGrabFeatureRuleRule() {
		return getSGrabFeatureRuleAccess().getRule();
	}
	
	//SMorphFeatureRule SMorphRule:
	//	source=[DFeature]
	//	'to' (renameTo=ID ':')?
	//	retypeTo=[DType] remultiplyTo=DMultiplicity?;
	public SMorphFeatureRuleElements getSMorphFeatureRuleAccess() {
		return pSMorphFeatureRule;
	}
	
	public ParserRule getSMorphFeatureRuleRule() {
		return getSMorphFeatureRuleAccess().getRule();
	}
	
	//SDitchFeatureRule SDitchRule:
	//	source=[DFeature];
	public SDitchFeatureRuleElements getSDitchFeatureRuleAccess() {
		return pSDitchFeatureRule;
	}
	
	public ParserRule getSDitchFeatureRuleRule() {
		return getSDitchFeatureRuleAccess().getRule();
	}
	
	//enum SAbstractType returns STristate:
	//	FALSE='nonabstract' | TRUE='abstract';
	public SAbstractTypeElements getSAbstractTypeAccess() {
		return eSAbstractType;
	}
	
	public EnumRule getSAbstractTypeRule() {
		return getSAbstractTypeAccess().getRule();
	}
	
	//enum SRootEntity returns STristate:
	//	FALSE='nonroot' | TRUE='root';
	public SRootEntityElements getSRootEntityAccess() {
		return eSRootEntity;
	}
	
	public EnumRule getSRootEntityRule() {
		return getSRootEntityAccess().getRule();
	}
	
	//enum SDetailType returns STristate:
	//	FALSE='entity' | TRUE='detail';
	public SDetailTypeElements getSDetailTypeAccess() {
		return eSDetailType;
	}
	
	public EnumRule getSDetailTypeRule() {
		return getSDetailTypeAccess().getRule();
	}
	
	//Domain SDomainDeduction:
	//	{SDomainDeduction}
	//	'grab' 'domain' deductionRule=SGrabDomainRule;
	public DomainElements getDomainAccess() {
		return pDomain;
	}
	
	public ParserRule getDomainRule() {
		return getDomainAccess().getRule();
	}
	
	//Aggregate DAggregate:
	//	SAggregateDeduction | DAggregate;
	public AggregateElements getAggregateAccess() {
		return pAggregate;
	}
	
	public ParserRule getAggregateRule() {
		return getAggregateAccess().getRule();
	}
	
	//SAggregateDeduction:
	//	{SAggregateDeduction}
	//	'grab' 'aggregate' deductionRule=SGrabAggregateRule
	//	description=DRichText?
	//	'{'
	//	types+=Type*
	//	'}';
	public SAggregateDeductionElements getSAggregateDeductionAccess() {
		return pSAggregateDeduction;
	}
	
	public ParserRule getSAggregateDeductionRule() {
		return getSAggregateDeductionAccess().getRule();
	}
	
	//@Override
	//DAggregate:
	//	{DAggregate}
	//	'aggregate'
	//	description=DRichText?
	//	'{'
	//	types+=Type*
	//	'}';
	public DAggregateElements getDAggregateAccess() {
		return pDAggregate;
	}
	
	public ParserRule getDAggregateRule() {
		return getDAggregateAccess().getRule();
	}
	
	///*
	// * TYPES
	// */ Type DType:
	//	SPrimitiveDeduction | DPrimitive
	//	| SEnumerationDeduction | DEnumeration
	//	| SEntityTypeDeduction | DEntityType
	//	| SDetailTypeDeduction | DDetailType;
	public TypeElements getTypeAccess() {
		return pType;
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}
	
	//SPrimitiveDeduction:
	//	{SPrimitiveDeduction} ('grab' 'primitive' deductionRule=SGrabPrimitiveRule
	//	| 'ditch' 'primitive' deductionRule=SDitchPrimitiveRule) description=DRichText?
	//	'{'
	//	constraints+=DConstraint*
	//	'}';
	public SPrimitiveDeductionElements getSPrimitiveDeductionAccess() {
		return pSPrimitiveDeduction;
	}
	
	public ParserRule getSPrimitiveDeductionRule() {
		return getSPrimitiveDeductionAccess().getRule();
	}
	
	//SEnumerationDeduction:
	//	{SEnumerationDeduction} ('grab' 'enumeration' deductionRule=SGrabEnumerationRule
	//	| 'ditch' 'enumeration' deductionRule=SDitchEnumerationRule) description=DRichText?
	//	'{' (literals+=Literal (',' literals+=Literal)*)?
	//	constraints+=DConstraint*
	//	'}';
	public SEnumerationDeductionElements getSEnumerationDeductionAccess() {
		return pSEnumerationDeduction;
	}
	
	public ParserRule getSEnumerationDeductionRule() {
		return getSEnumerationDeductionAccess().getRule();
	}
	
	//@Override
	//DEnumeration:
	//	'enumeration'
	//	name=ID ('alias' aliases+=ID)*
	//	description=DRichText?
	//	'{' (literals+=Literal (',' literals+=Literal)*)?
	//	constraints+=DConstraint*
	//	'}';
	public DEnumerationElements getDEnumerationAccess() {
		return pDEnumeration;
	}
	
	public ParserRule getDEnumerationRule() {
		return getDEnumerationAccess().getRule();
	}
	
	//Literal DLiteral:
	//	SLiteralDeduction | DLiteral;
	public LiteralElements getLiteralAccess() {
		return pLiteral;
	}
	
	public ParserRule getLiteralRule() {
		return getLiteralAccess().getRule();
	}
	
	//SLiteralDeduction:
	//	{SLiteralDeduction} ('grab' deductionRule=SGrabEnumerationLiteralRule
	//	| 'ditch' deductionRule=SDitchEnumerationLiteralRule) description=DRichText?;
	public SLiteralDeductionElements getSLiteralDeductionAccess() {
		return pSLiteralDeduction;
	}
	
	public ParserRule getSLiteralDeductionRule() {
		return getSLiteralDeductionAccess().getRule();
	}
	
	//SEntityTypeDeduction:
	//	{SEntityTypeDeduction} ('grab' root?='root'? 'entity' deductionRule=SGrabComplexTypeRule
	//	| 'ditch' root?='root'? 'entity' deductionRule=SDitchComplexTypeRule
	//	| 'morph' root?='root'? 'entity' deductionRule=SMorphComplexTypeRule
	//	| 'fuse' root?='root'? 'entity' deductionRule=SFuseComplexTypeRule) description=DRichText?
	//	SComplexTypeFeatures;
	public SEntityTypeDeductionElements getSEntityTypeDeductionAccess() {
		return pSEntityTypeDeduction;
	}
	
	public ParserRule getSEntityTypeDeductionRule() {
		return getSEntityTypeDeductionAccess().getRule();
	}
	
	//SDetailTypeDeduction:
	//	{SDetailTypeDeduction} ('grab' 'detail' deductionRule=SGrabComplexTypeRule
	//	| 'ditch' 'detail' deductionRule=SDitchComplexTypeRule
	//	| 'morph' 'detail' deductionRule=SMorphComplexTypeRule
	//	| 'fuse' 'detail' deductionRule=SFuseComplexTypeRule) description=DRichText?
	//	SComplexTypeFeatures;
	public SDetailTypeDeductionElements getSDetailTypeDeductionAccess() {
		return pSDetailTypeDeduction;
	}
	
	public ParserRule getSDetailTypeDeductionRule() {
		return getSDetailTypeDeductionAccess().getRule();
	}
	
	//fragment SComplexTypeFeatures returns DComplexType:
	//	'{' (features+=Feature | constraints+=DConstraint)*
	//	'}';
	public SComplexTypeFeaturesElements getSComplexTypeFeaturesAccess() {
		return pSComplexTypeFeatures;
	}
	
	public ParserRule getSComplexTypeFeaturesRule() {
		return getSComplexTypeFeaturesAccess().getRule();
	}
	
	//@Override
	//DEntityType:
	//	abstract?='abstract'?
	//	root?='root'?
	//	'entity'
	//	DComplexType;
	public DEntityTypeElements getDEntityTypeAccess() {
		return pDEntityType;
	}
	
	public ParserRule getDEntityTypeRule() {
		return getDEntityTypeAccess().getRule();
	}
	
	//@Override
	//fragment DComplexType:
	//	name=ID ('alias' aliases+=ID)* ('extends' superType=[DComplexType])?
	//	description=DRichText?
	//	'{' (features+=Feature | constraints+=DConstraint)*
	//	'}';
	public DComplexTypeElements getDComplexTypeAccess() {
		return pDComplexType;
	}
	
	public ParserRule getDComplexTypeRule() {
		return getDComplexTypeAccess().getRule();
	}
	
	///*
	// * FEATURES
	// */ Feature DFeature:
	//	SAssociationDeduction | DAssociation
	//	| SAttributeDeduction | DAttribute
	//	| SQueryDeduction | DQuery;
	public FeatureElements getFeatureAccess() {
		return pFeature;
	}
	
	public ParserRule getFeatureRule() {
		return getFeatureAccess().getRule();
	}
	
	//SAssociationDeduction:
	//	{SAssociationDeduction} ('grab' ('reference' | 'composite') deductionRule=SGrabFeatureRule
	//	| 'morph' ('reference' | 'composite') deductionRule=SMorphFeatureRule
	//	| 'ditch' ('reference' | 'composite') deductionRule=SDitchFeatureRule) description=DRichText?;
	public SAssociationDeductionElements getSAssociationDeductionAccess() {
		return pSAssociationDeduction;
	}
	
	public ParserRule getSAssociationDeductionRule() {
		return getSAssociationDeductionAccess().getRule();
	}
	
	//SAttributeDeduction:
	//	{SAttributeDeduction} ('grab' ('attribute' | detail?='detail')? deductionRule=SGrabFeatureRule
	//	| 'morph' ('attribute' | detail?='detail')? deductionRule=SMorphFeatureRule
	//	| 'ditch' ('attribute' | detail?='detail')? deductionRule=SDitchFeatureRule) description=DRichText?;
	public SAttributeDeductionElements getSAttributeDeductionAccess() {
		return pSAttributeDeduction;
	}
	
	public ParserRule getSAttributeDeductionRule() {
		return getSAttributeDeductionAccess().getRule();
	}
	
	//SQueryDeduction:
	//	{SQueryDeduction} (('grab' 'query' deductionRule=SGrabFeatureRule
	//	| 'morph' 'query' deductionRule=SMorphFeatureRule)
	//	'(' ('*'
	//	| (parameters+=QueryParameter (',' parameters+=QueryParameter)*)?)
	//	')'
	//	| 'ditch' 'query' deductionRule=SDitchFeatureRule) description=DRichText?;
	public SQueryDeductionElements getSQueryDeductionAccess() {
		return pSQueryDeduction;
	}
	
	public ParserRule getSQueryDeductionRule() {
		return getSQueryDeductionAccess().getRule();
	}
	
	//@Override
	//DQuery:
	//	name=ID ('alias' aliases+=ID)*
	//	'(' (parameters+=QueryParameter ("," parameters+=QueryParameter)*)? ')'
	//	':'
	//	type=[DType] multiplicity=DMultiplicity? ('returns' ^returns=DExpression)?
	//	description=DRichText?;
	public DQueryElements getDQueryAccess() {
		return pDQuery;
	}
	
	public ParserRule getDQueryRule() {
		return getDQueryAccess().getRule();
	}
	
	//QueryParameter DQueryParameter:
	//	SQueryParameterDeduction | DQueryParameter;
	public QueryParameterElements getQueryParameterAccess() {
		return pQueryParameter;
	}
	
	public ParserRule getQueryParameterRule() {
		return getQueryParameterAccess().getRule();
	}
	
	//SQueryParameterDeduction:
	//	{SQueryParameterDeduction} ('grab' deductionRule=SGrabFeatureRule
	//	| 'morph' deductionRule=SMorphFeatureRule
	//	| 'ditch' deductionRule=SDitchFeatureRule) description=DRichText?;
	public SQueryParameterDeductionElements getSQueryParameterDeductionAccess() {
		return pSQueryParameterDeduction;
	}
	
	public ParserRule getSQueryParameterDeductionRule() {
		return getSQueryParameterDeductionAccess().getRule();
	}
	
	//SCoreQuery:
	//	'query'
	//	name=ID ('alias' aliases+=ID)*
	//	'(' (parameters+=DQueryParameter ("," parameters+=DQueryParameter)*)? ')'
	//	':'
	//	type=[DType] multiplicity=DMultiplicity? ('returns' ^returns=DExpression)?
	//	description=DRichText?;
	public SCoreQueryElements getSCoreQueryAccess() {
		return pSCoreQuery;
	}
	
	public ParserRule getSCoreQueryRule() {
		return getSCoreQueryAccess().getRule();
	}
	
	///*
	// * MODEL STRUCTURE
	// */ DDomain:
	//	imports+=DImport*
	//	'domain'
	//	name=DQualifiedName ('alias' aliases+=ID)*
	//	description=DRichText? (types+=DType | aggregates+=super::DAggregate)*;
	public DimGrammarAccess.DDomainElements getDDomainAccess() {
		return gaDim.getDDomainAccess();
	}
	
	public ParserRule getDDomainRule() {
		return getDDomainAccess().getRule();
	}
	
	///*
	// * TYPES
	// */ DType:
	//	DPrimitive | super::DEnumeration | super::DEntityType | DDetailType;
	public DimGrammarAccess.DTypeElements getDTypeAccess() {
		return gaDim.getDTypeAccess();
	}
	
	public ParserRule getDTypeRule() {
		return getDTypeAccess().getRule();
	}
	
	//DConstraint DNamedPredicate:
	//	'constraint'
	//	name=ID ('alias' aliases+=ID)*
	//	':'
	//	predicate=DExpression
	//	description=DRichText?;
	public DimGrammarAccess.DConstraintElements getDConstraintAccess() {
		return gaDim.getDConstraintAccess();
	}
	
	public ParserRule getDConstraintRule() {
		return getDConstraintAccess().getRule();
	}
	
	//DPrimitive:
	//	'primitive'
	//	name=ID ('alias' aliases+=ID)*
	//	'redefines' redefines=[DmxArchetype] description=DRichText? ('{'
	//	constraints+=DConstraint+
	//	'}')?;
	public DimGrammarAccess.DPrimitiveElements getDPrimitiveAccess() {
		return gaDim.getDPrimitiveAccess();
	}
	
	public ParserRule getDPrimitiveRule() {
		return getDPrimitiveAccess().getRule();
	}
	
	//DLiteral:
	//	name=ID ('alias' aliases+=ID)*
	//	description=DRichText?;
	public DimGrammarAccess.DLiteralElements getDLiteralAccess() {
		return gaDim.getDLiteralAccess();
	}
	
	public ParserRule getDLiteralRule() {
		return getDLiteralAccess().getRule();
	}
	
	//enum DEntityOriginGeneric returns DEntityOrigin:
	//	GENERIC_ENTITY='entity';
	public DimGrammarAccess.DEntityOriginGenericElements getDEntityOriginGenericAccess() {
		return gaDim.getDEntityOriginGenericAccess();
	}
	
	public EnumRule getDEntityOriginGenericRule() {
		return getDEntityOriginGenericAccess().getRule();
	}
	
	//enum DEntityOriginObject returns DEntityOrigin:
	//	PHYSICAL_OBJECT='object';
	public DimGrammarAccess.DEntityOriginObjectElements getDEntityOriginObjectAccess() {
		return gaDim.getDEntityOriginObjectAccess();
	}
	
	public EnumRule getDEntityOriginObjectRule() {
		return getDEntityOriginObjectAccess().getRule();
	}
	
	//enum DEntityOriginConcept returns DEntityOrigin:
	//	VIRTUAL_CONCEPT='concept';
	public DimGrammarAccess.DEntityOriginConceptElements getDEntityOriginConceptAccess() {
		return gaDim.getDEntityOriginConceptAccess();
	}
	
	public EnumRule getDEntityOriginConceptRule() {
		return getDEntityOriginConceptAccess().getRule();
	}
	
	//enum DEntityOriginRelationship returns DEntityOrigin:
	//	RELATIONSHIP='relationship';
	public DimGrammarAccess.DEntityOriginRelationshipElements getDEntityOriginRelationshipAccess() {
		return gaDim.getDEntityOriginRelationshipAccess();
	}
	
	public EnumRule getDEntityOriginRelationshipRule() {
		return getDEntityOriginRelationshipAccess().getRule();
	}
	
	//DState:
	//	name=ID;
	public DimGrammarAccess.DStateElements getDStateAccess() {
		return gaDim.getDStateAccess();
	}
	
	public ParserRule getDStateRule() {
		return getDStateAccess().getRule();
	}
	
	//DStateEvent:
	//	name=ID;
	public DimGrammarAccess.DStateEventElements getDStateEventAccess() {
		return gaDim.getDStateEventAccess();
	}
	
	public ParserRule getDStateEventRule() {
		return getDStateEventAccess().getRule();
	}
	
	//DDetailType:
	//	abstract?='abstract'?
	//	'detail'
	//	super::DComplexType
	//	'{' (features+=DFeature | constraints+=DConstraint)*
	//	'}';
	public DimGrammarAccess.DDetailTypeElements getDDetailTypeAccess() {
		return gaDim.getDDetailTypeAccess();
	}
	
	public ParserRule getDDetailTypeRule() {
		return getDDetailTypeAccess().getRule();
	}
	
	//DFeature:
	//	DAssociation | DAttribute | super::DQuery;
	public DimGrammarAccess.DFeatureElements getDFeatureAccess() {
		return gaDim.getDFeatureAccess();
	}
	
	public ParserRule getDFeatureRule() {
		return getDFeatureAccess().getRule();
	}
	
	//DAssociation:
	//	derived?='derived'?
	//	name=ID ('alias' aliases+=ID)* (kind=DAssociationKind | kind=DAssociationKindInverse "contains") type=[DEntityType]
	//	multiplicity=DMultiplicity?
	//	description=DRichText?;
	public DimGrammarAccess.DAssociationElements getDAssociationAccess() {
		return gaDim.getDAssociationAccess();
	}
	
	public ParserRule getDAssociationRule() {
		return getDAssociationAccess().getRule();
	}
	
	//enum DAssociationKind:
	//	REFERENCE="references" | COMPOSITE="contains";
	public DimGrammarAccess.DAssociationKindElements getDAssociationKindAccess() {
		return gaDim.getDAssociationKindAccess();
	}
	
	public EnumRule getDAssociationKindRule() {
		return getDAssociationKindAccess().getRule();
	}
	
	//enum DAssociationKindInverse returns DAssociationKind:
	//	INVERSE_COMPOSITE="inverse";
	public DimGrammarAccess.DAssociationKindInverseElements getDAssociationKindInverseAccess() {
		return gaDim.getDAssociationKindInverseAccess();
	}
	
	public EnumRule getDAssociationKindInverseRule() {
		return getDAssociationKindInverseAccess().getRule();
	}
	
	//DAttribute:
	//	detail?='detail'? (name=ID ('alias' aliases+=ID)*
	//	':'
	//	type=[DType]) multiplicity=DMultiplicity?
	//	key?='key'?
	//	description=DRichText?;
	public DimGrammarAccess.DAttributeElements getDAttributeAccess() {
		return gaDim.getDAttributeAccess();
	}
	
	public ParserRule getDAttributeRule() {
		return getDAttributeAccess().getRule();
	}
	
	//DQueryParameter:
	//	name=ID
	//	':'
	//	type=[DType] multiplicity=DMultiplicity?
	//	description=DRichText?;
	public DimGrammarAccess.DQueryParameterElements getDQueryParameterAccess() {
		return gaDim.getDQueryParameterAccess();
	}
	
	public ParserRule getDQueryParameterRule() {
		return getDQueryParameterAccess().getRule();
	}
	
	//DmxNamespace:
	//	imports+=DImport*
	//	'namespace'
	//	name=DQualifiedName
	//	types+=DmxArchetype*
	//	filters+=DmxFilter*
	//	// For unit-testing purposes:
	//	tests+=DmxTest*;
	public DmxGrammarAccess.DmxNamespaceElements getDmxNamespaceAccess() {
		return gaDmx.getDmxNamespaceAccess();
	}
	
	public ParserRule getDmxNamespaceRule() {
		return getDmxNamespaceAccess().getRule();
	}
	
	//DImport:
	//	'import' importedNamespace=DQualifiedNameWithWildcard;
	public DmxGrammarAccess.DImportElements getDImportAccess() {
		return gaDmx.getDImportAccess();
	}
	
	public ParserRule getDImportRule() {
		return getDImportAccess().getRule();
	}
	
	///* 
	// * Testing
	// */ DmxTest:
	//	'test'
	//	name=ID ('context'
	//	context+=DmxTestContext (',' context+=DmxTestContext)*)?
	//	'{'
	//	expr=DExpression
	//	'}';
	public DmxGrammarAccess.DmxTestElements getDmxTestAccess() {
		return gaDmx.getDmxTestAccess();
	}
	
	public ParserRule getDmxTestRule() {
		return getDmxTestAccess().getRule();
	}
	
	//DmxTestContext DContext:
	//	name=ID
	//	':'
	//	type=[DType] multiplicity=DMultiplicity?;
	public DmxGrammarAccess.DmxTestContextElements getDmxTestContextAccess() {
		return gaDmx.getDmxTestContextAccess();
	}
	
	public ParserRule getDmxTestContextRule() {
		return getDmxTestContextAccess().getRule();
	}
	
	//enum DmxBaseType:
	//	VOID | BOOLEAN | NUMBER | TEXT | IDENTIFIER | TIMEPOINT | STATE /*transition*/ | STATE_EVENT | COMPLEX | NOTIFICATION
	//	/*sent* */ | SERVICE /*invoked* */;
	public DmxGrammarAccess.DmxBaseTypeElements getDmxBaseTypeAccess() {
		return gaDmx.getDmxBaseTypeAccess();
	}
	
	public EnumRule getDmxBaseTypeRule() {
		return getDmxBaseTypeAccess().getRule();
	}
	
	//DmxBaseTypeSet:
	//	name=ID
	//	'in'
	//	'(' members+=DmxBaseType (',' members+=DmxBaseType)+ ')';
	public DmxGrammarAccess.DmxBaseTypeSetElements getDmxBaseTypeSetAccess() {
		return gaDmx.getDmxBaseTypeSetAccess();
	}
	
	public ParserRule getDmxBaseTypeSetRule() {
		return getDmxBaseTypeSetAccess().getRule();
	}
	
	//DmxArchetype:
	//	'archetype'
	//	name=ID
	//	'is'
	//	baseType=DmxBaseType
	//	description=DRichText?;
	public DmxGrammarAccess.DmxArchetypeElements getDmxArchetypeAccess() {
		return gaDmx.getDmxArchetypeAccess();
	}
	
	public ParserRule getDmxArchetypeRule() {
		return getDmxArchetypeAccess().getRule();
	}
	
	//DmxFilter:
	//	'filter'
	//	name=ID
	//	'(' (parameters+=DmxFilterParameter (',' parameters+=DmxFilterParameter)*)? ')'
	//	':'
	//	typeDesc=DmxFilterTypeDescriptor ('with' withTypeSet=DmxBaseTypeSet)?;
	public DmxGrammarAccess.DmxFilterElements getDmxFilterAccess() {
		return gaDmx.getDmxFilterAccess();
	}
	
	public ParserRule getDmxFilterRule() {
		return getDmxFilterAccess().getRule();
	}
	
	//DmxFilterTypeDescriptor:
	//	(single=DmxBaseType
	//	| multiple=[DmxBaseTypeSet]) collection?='*'?;
	public DmxGrammarAccess.DmxFilterTypeDescriptorElements getDmxFilterTypeDescriptorAccess() {
		return gaDmx.getDmxFilterTypeDescriptorAccess();
	}
	
	public ParserRule getDmxFilterTypeDescriptorRule() {
		return getDmxFilterTypeDescriptorAccess().getRule();
	}
	
	//DmxFilterParameter:
	//	name=ID
	//	':'
	//	typeDesc=DmxFilterTypeDescriptor;
	public DmxGrammarAccess.DmxFilterParameterElements getDmxFilterParameterAccess() {
		return gaDmx.getDmxFilterParameterAccess();
	}
	
	public ParserRule getDmxFilterParameterRule() {
		return getDmxFilterParameterAccess().getRule();
	}
	
	///*
	// * Expressions
	// */ DExpression:
	//	DmxAssignment | DmxPredicateWithCorrelationVariable | DRichText;
	public DmxGrammarAccess.DExpressionElements getDExpressionAccess() {
		return gaDmx.getDExpressionAccess();
	}
	
	public ParserRule getDExpressionRule() {
		return getDExpressionAccess().getRule();
	}
	
	//DRichText:
	//	segments+=DmxTextOnly
	//	| segments+=DmxTextStart
	//	segments+=DExpression (segments+=DmxTextMiddle segments+=DExpression)*
	//	segments+=DmxTextEnd;
	public DmxGrammarAccess.DRichTextElements getDRichTextAccess() {
		return gaDmx.getDRichTextAccess();
	}
	
	public ParserRule getDRichTextRule() {
		return getDRichTextAccess().getRule();
	}
	
	//DmxTextOnly DTextSegment:
	//	value=PLAIN_TEXT_ONLY;
	public DmxGrammarAccess.DmxTextOnlyElements getDmxTextOnlyAccess() {
		return gaDmx.getDmxTextOnlyAccess();
	}
	
	public ParserRule getDmxTextOnlyRule() {
		return getDmxTextOnlyAccess().getRule();
	}
	
	//DmxTextStart DTextSegment:
	//	value=PLAIN_TEXT_START;
	public DmxGrammarAccess.DmxTextStartElements getDmxTextStartAccess() {
		return gaDmx.getDmxTextStartAccess();
	}
	
	public ParserRule getDmxTextStartRule() {
		return getDmxTextStartAccess().getRule();
	}
	
	//DmxTextMiddle DTextSegment:
	//	value=PLAIN_TEXT_MIDDLE;
	public DmxGrammarAccess.DmxTextMiddleElements getDmxTextMiddleAccess() {
		return gaDmx.getDmxTextMiddleAccess();
	}
	
	public ParserRule getDmxTextMiddleRule() {
		return getDmxTextMiddleAccess().getRule();
	}
	
	//DmxTextEnd DTextSegment:
	//	value=PLAIN_TEXT_END;
	public DmxGrammarAccess.DmxTextEndElements getDmxTextEndAccess() {
		return gaDmx.getDmxTextEndAccess();
	}
	
	public ParserRule getDmxTextEndRule() {
		return getDmxTextEndAccess().getRule();
	}
	
	//DmxNavigableMemberReference DExpression:
	//	DmxPrimaryExpression (=> ({DmxAssignment.precedingNavigationSegment=current} '.'
	//	assignToMember=[DNavigableMember] DmxOpSingleAssign) value=DmxOrExpression
	//	| => ({DmxMemberNavigation.precedingNavigationSegment=current} '.') member=[DNavigableMember] (=>
	//	explicitOperationCall?='(' // => boolean => has 0.n explicit arguments
	//	callArguments=DmxCallArguments
	//	')'
	//	| before?="@before")?)*;
	public DmxGrammarAccess.DmxNavigableMemberReferenceElements getDmxNavigableMemberReferenceAccess() {
		return gaDmx.getDmxNavigableMemberReferenceAccess();
	}
	
	public ParserRule getDmxNavigableMemberReferenceRule() {
		return getDmxNavigableMemberReferenceAccess().getRule();
	}
	
	//DmxCallArguments:
	//	{DmxCallArguments} (arguments+=DmxPredicateWithCorrelationVariable (','
	//	arguments+=DmxPredicateWithCorrelationVariable)*)?;
	public DmxGrammarAccess.DmxCallArgumentsElements getDmxCallArgumentsAccess() {
		return gaDmx.getDmxCallArgumentsAccess();
	}
	
	public ParserRule getDmxCallArgumentsRule() {
		return getDmxCallArgumentsAccess().getRule();
	}
	
	//DmxAssignment DExpression:
	//	{DmxAssignment} assignToMember=[DNavigableMember] DmxOpSingleAssign value=DmxOrExpression;
	public DmxGrammarAccess.DmxAssignmentElements getDmxAssignmentAccess() {
		return gaDmx.getDmxAssignmentAccess();
	}
	
	public ParserRule getDmxAssignmentRule() {
		return getDmxAssignmentAccess().getRule();
	}
	
	//DmxOpSingleAssign:
	//	':=';
	public DmxGrammarAccess.DmxOpSingleAssignElements getDmxOpSingleAssignAccess() {
		return gaDmx.getDmxOpSingleAssignAccess();
	}
	
	public ParserRule getDmxOpSingleAssignRule() {
		return getDmxOpSingleAssignAccess().getRule();
	}
	
	//DmxPredicateWithCorrelationVariable DExpression:
	//	{DmxPredicateWithCorrelationVariable} correlationVariable=DmxCorrelationVariable
	//	'|'
	//	predicate=DmxOrExpression
	//	| DmxOrExpression;
	public DmxGrammarAccess.DmxPredicateWithCorrelationVariableElements getDmxPredicateWithCorrelationVariableAccess() {
		return gaDmx.getDmxPredicateWithCorrelationVariableAccess();
	}
	
	public ParserRule getDmxPredicateWithCorrelationVariableRule() {
		return getDmxPredicateWithCorrelationVariableAccess().getRule();
	}
	
	//DmxCorrelationVariable:
	//	name=ID;
	public DmxGrammarAccess.DmxCorrelationVariableElements getDmxCorrelationVariableAccess() {
		return gaDmx.getDmxCorrelationVariableAccess();
	}
	
	public ParserRule getDmxCorrelationVariableRule() {
		return getDmxCorrelationVariableAccess().getRule();
	}
	
	////	(':' type=[DType])? => type is always NULL!
	//DmxOrExpression DExpression:
	//	DmxAndExpression (=> ({DmxBinaryOperation.leftOperand=current} operator=DmxOpOr) rightOperand=DmxAndExpression)*;
	public DmxGrammarAccess.DmxOrExpressionElements getDmxOrExpressionAccess() {
		return gaDmx.getDmxOrExpressionAccess();
	}
	
	public ParserRule getDmxOrExpressionRule() {
		return getDmxOrExpressionAccess().getRule();
	}
	
	//enum DmxOpOr returns DmxBinaryOperator:
	//	OR | OR='or' | XOR | XOR='xor';
	public DmxGrammarAccess.DmxOpOrElements getDmxOpOrAccess() {
		return gaDmx.getDmxOpOrAccess();
	}
	
	public EnumRule getDmxOpOrRule() {
		return getDmxOpOrAccess().getRule();
	}
	
	//DmxAndExpression DExpression:
	//	DmxEqualityExpression (=> ({DmxBinaryOperation.leftOperand=current} operator=DmxOpAnd)
	//	rightOperand=DmxEqualityExpression)*;
	public DmxGrammarAccess.DmxAndExpressionElements getDmxAndExpressionAccess() {
		return gaDmx.getDmxAndExpressionAccess();
	}
	
	public ParserRule getDmxAndExpressionRule() {
		return getDmxAndExpressionAccess().getRule();
	}
	
	//enum DmxOpAnd returns DmxBinaryOperator:
	//	AND | AND='and';
	public DmxGrammarAccess.DmxOpAndElements getDmxOpAndAccess() {
		return gaDmx.getDmxOpAndAccess();
	}
	
	public EnumRule getDmxOpAndRule() {
		return getDmxOpAndAccess().getRule();
	}
	
	//DmxEqualityExpression DExpression:
	//	DmxRelationalExpression (=> ({DmxBinaryOperation.leftOperand=current} operator=DmxOpEquality)
	//	rightOperand=DmxRelationalExpression)*;
	public DmxGrammarAccess.DmxEqualityExpressionElements getDmxEqualityExpressionAccess() {
		return gaDmx.getDmxEqualityExpressionAccess();
	}
	
	public ParserRule getDmxEqualityExpressionRule() {
		return getDmxEqualityExpressionAccess().getRule();
	}
	
	//enum DmxOpEquality returns DmxBinaryOperator:
	//	EQUAL='=' | NOT_EQUAL='!=' | NOT_EQUAL='<>';
	public DmxGrammarAccess.DmxOpEqualityElements getDmxOpEqualityAccess() {
		return gaDmx.getDmxOpEqualityAccess();
	}
	
	public EnumRule getDmxOpEqualityRule() {
		return getDmxOpEqualityAccess().getRule();
	}
	
	//DmxRelationalExpression DExpression:
	//	DmxOtherOperatorExpression (=> ({DmxInstanceOfExpression.expression=current} DmxOpInstanceOf) type=[DType] | =>
	//	({DmxBinaryOperation.leftOperand=current} operator=OpCompare) rightOperand=DmxOtherOperatorExpression)*;
	public DmxGrammarAccess.DmxRelationalExpressionElements getDmxRelationalExpressionAccess() {
		return gaDmx.getDmxRelationalExpressionAccess();
	}
	
	public ParserRule getDmxRelationalExpressionRule() {
		return getDmxRelationalExpressionAccess().getRule();
	}
	
	//DmxOpInstanceOf:
	//	'ISA' | 'isa';
	public DmxGrammarAccess.DmxOpInstanceOfElements getDmxOpInstanceOfAccess() {
		return gaDmx.getDmxOpInstanceOfAccess();
	}
	
	public ParserRule getDmxOpInstanceOfRule() {
		return getDmxOpInstanceOfAccess().getRule();
	}
	
	//enum OpCompare returns DmxBinaryOperator:
	//	LESS='<' | LESS_OR_EQUAL='<=' | LESS_OR_EQUAL='≤' | GREATER_OR_EQUAL='>=' | GREATER_OR_EQUAL='≥' | GREATER='>';
	public DmxGrammarAccess.OpCompareElements getOpCompareAccess() {
		return gaDmx.getOpCompareAccess();
	}
	
	public EnumRule getOpCompareRule() {
		return getOpCompareAccess().getRule();
	}
	
	//DmxOtherOperatorExpression DExpression:
	//	DmxAdditiveExpression (=> ({DmxBinaryOperation.leftOperand=current} operator=OpOther)
	//	rightOperand=DmxAdditiveExpression)*;
	public DmxGrammarAccess.DmxOtherOperatorExpressionElements getDmxOtherOperatorExpressionAccess() {
		return gaDmx.getDmxOtherOperatorExpressionAccess();
	}
	
	public ParserRule getDmxOtherOperatorExpressionRule() {
		return getDmxOtherOperatorExpressionAccess().getRule();
	}
	
	//enum OpOther returns DmxBinaryOperator:
	//	UNTIL='..' | SINGLE_ARROW='->' | DOUBLE_ARROW='=>';
	public DmxGrammarAccess.OpOtherElements getOpOtherAccess() {
		return gaDmx.getOpOtherAccess();
	}
	
	public EnumRule getOpOtherRule() {
		return getOpOtherAccess().getRule();
	}
	
	//DmxAdditiveExpression DExpression:
	//	DmxMultiplicativeExpression (=> ({DmxBinaryOperation.leftOperand=current} operator=OpAdd)
	//	rightOperand=DmxMultiplicativeExpression)*;
	public DmxGrammarAccess.DmxAdditiveExpressionElements getDmxAdditiveExpressionAccess() {
		return gaDmx.getDmxAdditiveExpressionAccess();
	}
	
	public ParserRule getDmxAdditiveExpressionRule() {
		return getDmxAdditiveExpressionAccess().getRule();
	}
	
	//enum OpAdd returns DmxBinaryOperator:
	//	ADD='+' | SUBTRACT='-';
	public DmxGrammarAccess.OpAddElements getOpAddAccess() {
		return gaDmx.getOpAddAccess();
	}
	
	public EnumRule getOpAddRule() {
		return getOpAddAccess().getRule();
	}
	
	//DmxMultiplicativeExpression DExpression:
	//	DmxUnaryOperation (=> ({DmxBinaryOperation.leftOperand=current} operator=OpMulti) rightOperand=DmxUnaryOperation)*;
	public DmxGrammarAccess.DmxMultiplicativeExpressionElements getDmxMultiplicativeExpressionAccess() {
		return gaDmx.getDmxMultiplicativeExpressionAccess();
	}
	
	public ParserRule getDmxMultiplicativeExpressionRule() {
		return getDmxMultiplicativeExpressionAccess().getRule();
	}
	
	//enum OpMulti returns DmxBinaryOperator:
	//	MULTIPLY='*' | DIVIDE='/' | POWER='**' | MODULO='%';
	public DmxGrammarAccess.OpMultiElements getOpMultiAccess() {
		return gaDmx.getOpMultiAccess();
	}
	
	public EnumRule getOpMultiRule() {
		return getOpMultiAccess().getRule();
	}
	
	//DmxUnaryOperation DExpression:
	//	{DmxUnaryOperation} operator=OpUnary operand=DmxUnaryOperation
	//	| DmxCastExpression;
	public DmxGrammarAccess.DmxUnaryOperationElements getDmxUnaryOperationAccess() {
		return gaDmx.getDmxUnaryOperationAccess();
	}
	
	public ParserRule getDmxUnaryOperationRule() {
		return getDmxUnaryOperationAccess().getRule();
	}
	
	//enum OpUnary returns DmxUnaryOperator:
	//	PLUS='+' | MINUS='-' | NOT='!' | NOT | NOT='not';
	public DmxGrammarAccess.OpUnaryElements getOpUnaryAccess() {
		return gaDmx.getOpUnaryAccess();
	}
	
	public EnumRule getOpUnaryRule() {
		return getOpUnaryAccess().getRule();
	}
	
	//DmxCastExpression DExpression:
	//	DmxNavigableMemberReference (=> ({DmxCastExpression.target=current} DmxOpCast) type=[DType])?;
	public DmxGrammarAccess.DmxCastExpressionElements getDmxCastExpressionAccess() {
		return gaDmx.getDmxCastExpressionAccess();
	}
	
	public ParserRule getDmxCastExpressionRule() {
		return getDmxCastExpressionAccess().getRule();
	}
	
	//DmxOpCast:
	//	'AS' | 'as';
	public DmxGrammarAccess.DmxOpCastElements getDmxOpCastAccess() {
		return gaDmx.getDmxOpCastAccess();
	}
	
	public ParserRule getDmxOpCastRule() {
		return getDmxOpCastAccess().getRule();
	}
	
	//DmxPrimaryExpression DExpression:
	//	DmxLiteralExpression | DmxParenthesizedExpression | DmxFunctionCall | DmxConstructorCall | DmxStaticReference |
	//	DmxContextReference | DmxIfExpression;
	public DmxGrammarAccess.DmxPrimaryExpressionElements getDmxPrimaryExpressionAccess() {
		return gaDmx.getDmxPrimaryExpressionAccess();
	}
	
	public ParserRule getDmxPrimaryExpressionRule() {
		return getDmxPrimaryExpressionAccess().getRule();
	}
	
	//DmxLiteralExpression DExpression:
	//	DmxBooleanLiteral | DmxStringLiteral | DmxNaturalLiteral | DmxDecimalLiteral | DmxUndefinedLiteral;
	public DmxGrammarAccess.DmxLiteralExpressionElements getDmxLiteralExpressionAccess() {
		return gaDmx.getDmxLiteralExpressionAccess();
	}
	
	public ParserRule getDmxLiteralExpressionRule() {
		return getDmxLiteralExpressionAccess().getRule();
	}
	
	//DmxParenthesizedExpression DExpression:
	//	'(' DExpression ')';
	public DmxGrammarAccess.DmxParenthesizedExpressionElements getDmxParenthesizedExpressionAccess() {
		return gaDmx.getDmxParenthesizedExpressionAccess();
	}
	
	public ParserRule getDmxParenthesizedExpressionRule() {
		return getDmxParenthesizedExpressionAccess().getRule();
	}
	
	//DmxFunctionCall DExpression:
	//	{DmxFunctionCall} function=[DmxFilter]
	//	'('
	//	callArguments=DmxFunctionCallArguments
	//	')';
	public DmxGrammarAccess.DmxFunctionCallElements getDmxFunctionCallAccess() {
		return gaDmx.getDmxFunctionCallAccess();
	}
	
	public ParserRule getDmxFunctionCallRule() {
		return getDmxFunctionCallAccess().getRule();
	}
	
	//DmxFunctionCallArguments DmxCallArguments:
	//	{DmxCallArguments} (arguments+=DExpression (',' arguments+=DExpression)*)?;
	public DmxGrammarAccess.DmxFunctionCallArgumentsElements getDmxFunctionCallArgumentsAccess() {
		return gaDmx.getDmxFunctionCallArgumentsAccess();
	}
	
	public ParserRule getDmxFunctionCallArgumentsRule() {
		return getDmxFunctionCallArgumentsAccess().getRule();
	}
	
	//DmxConstructorCall DExpression:
	//	{DmxConstructorCall} DmxOpConstructor
	//	constructor=[DComplexType] (=> explicitConstructorCall?='(' // => boolean => has 0.n explicit arguments
	//	callArguments=DmxFunctionCallArguments
	//	')')?;
	public DmxGrammarAccess.DmxConstructorCallElements getDmxConstructorCallAccess() {
		return gaDmx.getDmxConstructorCallAccess();
	}
	
	public ParserRule getDmxConstructorCallRule() {
		return getDmxConstructorCallAccess().getRule();
	}
	
	//DmxOpConstructor:
	//	'NEW' | 'new';
	public DmxGrammarAccess.DmxOpConstructorElements getDmxOpConstructorAccess() {
		return gaDmx.getDmxOpConstructorAccess();
	}
	
	public ParserRule getDmxOpConstructorRule() {
		return getDmxOpConstructorAccess().getRule();
	}
	
	//DmxStaticReference DExpression:
	//	{DmxStaticReference}
	//	'['
	//	target=[IStaticReferenceTarget|DQualifiedName] ('#' member=[DNavigableMember])? ("|" (displayName=ID | plural?="*"))?
	//	-> ']';
	public DmxGrammarAccess.DmxStaticReferenceElements getDmxStaticReferenceAccess() {
		return gaDmx.getDmxStaticReferenceAccess();
	}
	
	public ParserRule getDmxStaticReferenceRule() {
		return getDmxStaticReferenceAccess().getRule();
	}
	
	//// '->' gives precedence to this ']' over PLAIN_TEXT_MIDDLE ('=>' works too but generates more lookahead overhead)
	//DmxContextReference DExpression:
	//	{DmxContextReference} target=[DNamedElement] (before?="@before"
	//	| '.' all?='all')?;
	public DmxGrammarAccess.DmxContextReferenceElements getDmxContextReferenceAccess() {
		return gaDmx.getDmxContextReferenceAccess();
	}
	
	public ParserRule getDmxContextReferenceRule() {
		return getDmxContextReferenceAccess().getRule();
	}
	
	//DmxIfExpression DExpression:
	//	{DmxIfExpression}
	//	'if' if=DExpression
	//	'then' then=DExpression (=> 'else' else=DExpression)?
	//	'end';
	public DmxGrammarAccess.DmxIfExpressionElements getDmxIfExpressionAccess() {
		return gaDmx.getDmxIfExpressionAccess();
	}
	
	public ParserRule getDmxIfExpressionRule() {
		return getDmxIfExpressionAccess().getRule();
	}
	
	//DMultiplicity:
	//	shorthand=DMultiplicityShorthand | '(' minOccurs=NATURAL '..' maxOccurs=MULTIPLICITY ')';
	public DmxGrammarAccess.DMultiplicityElements getDMultiplicityAccess() {
		return gaDmx.getDMultiplicityAccess();
	}
	
	public ParserRule getDMultiplicityRule() {
		return getDMultiplicityAccess().getRule();
	}
	
	//enum DMultiplicityShorthand:
	//	ZERO_OR_ONE='?' | ONE_OR_MORE='+' | ZERO_OR_MORE='*';
	public DmxGrammarAccess.DMultiplicityShorthandElements getDMultiplicityShorthandAccess() {
		return gaDmx.getDMultiplicityShorthandAccess();
	}
	
	public EnumRule getDMultiplicityShorthandRule() {
		return getDMultiplicityShorthandAccess().getRule();
	}
	
	//MULTIPLICITY ecore::EInt:
	//	NATURAL | '*';
	public DmxGrammarAccess.MULTIPLICITYElements getMULTIPLICITYAccess() {
		return gaDmx.getMULTIPLICITYAccess();
	}
	
	public ParserRule getMULTIPLICITYRule() {
		return getMULTIPLICITYAccess().getRule();
	}
	
	//DmxBooleanLiteral DExpression:
	//	{DmxBooleanLiteral} (value?='TRUE' | value?='true' | 'FALSE' | 'false');
	public DmxGrammarAccess.DmxBooleanLiteralElements getDmxBooleanLiteralAccess() {
		return gaDmx.getDmxBooleanLiteralAccess();
	}
	
	public ParserRule getDmxBooleanLiteralRule() {
		return getDmxBooleanLiteralAccess().getRule();
	}
	
	//DmxNaturalLiteral DExpression:
	//	{DmxNaturalLiteral} value=NATURAL;
	public DmxGrammarAccess.DmxNaturalLiteralElements getDmxNaturalLiteralAccess() {
		return gaDmx.getDmxNaturalLiteralAccess();
	}
	
	public ParserRule getDmxNaturalLiteralRule() {
		return getDmxNaturalLiteralAccess().getRule();
	}
	
	//DmxDecimalLiteral DExpression:
	//	{DmxDecimalLiteral} value=DECIMAL;
	public DmxGrammarAccess.DmxDecimalLiteralElements getDmxDecimalLiteralAccess() {
		return gaDmx.getDmxDecimalLiteralAccess();
	}
	
	public ParserRule getDmxDecimalLiteralRule() {
		return getDmxDecimalLiteralAccess().getRule();
	}
	
	//DmxStringLiteral DExpression:
	//	{DmxStringLiteral} value=STRING;
	public DmxGrammarAccess.DmxStringLiteralElements getDmxStringLiteralAccess() {
		return gaDmx.getDmxStringLiteralAccess();
	}
	
	public ParserRule getDmxStringLiteralRule() {
		return getDmxStringLiteralAccess().getRule();
	}
	
	//DmxUndefinedLiteral DExpression:
	//	{DmxUndefinedLiteral} ('UNDEFINED' | 'undefined');
	public DmxGrammarAccess.DmxUndefinedLiteralElements getDmxUndefinedLiteralAccess() {
		return gaDmx.getDmxUndefinedLiteralAccess();
	}
	
	public ParserRule getDmxUndefinedLiteralRule() {
		return getDmxUndefinedLiteralAccess().getRule();
	}
	
	//DECIMAL:
	//	NATURAL '.' NATURAL (('E' | 'e') ('+' | '-')? NATURAL)?;
	public DmxGrammarAccess.DECIMALElements getDECIMALAccess() {
		return gaDmx.getDECIMALAccess();
	}
	
	public ParserRule getDECIMALRule() {
		return getDECIMALAccess().getRule();
	}
	
	//DQualifiedNameWithWildcard:
	//	DQualifiedName '.*'?;
	public DmxGrammarAccess.DQualifiedNameWithWildcardElements getDQualifiedNameWithWildcardAccess() {
		return gaDmx.getDQualifiedNameWithWildcardAccess();
	}
	
	public ParserRule getDQualifiedNameWithWildcardRule() {
		return getDQualifiedNameWithWildcardAccess().getRule();
	}
	
	//DQualifiedName:
	//	ID ('.' ID)*;
	public DmxGrammarAccess.DQualifiedNameElements getDQualifiedNameAccess() {
		return gaDmx.getDQualifiedNameAccess();
	}
	
	public ParserRule getDQualifiedNameRule() {
		return getDQualifiedNameAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? (LETTER | '_') (LETTER | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaDmx.getIDRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"';
	public TerminalRule getSTRINGRule() {
		return gaDmx.getSTRINGRule();
	}
	
	//terminal NATURAL returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getNATURALRule() {
		return gaDmx.getNATURALRule();
	}
	
	//terminal fragment LETTER:
	//	'a'..'z' | 'A'..'Z' | '\\u00c0'..'\\u00d6' | '\\u00d8'..'\\u00f6' | '\\u00f8'..'\\u00ff';
	public TerminalRule getLETTERRule() {
		return gaDmx.getLETTERRule();
	}
	
	//terminal fragment PLAIN_TEXT:
	//	!('»' | ']' | '[');
	public TerminalRule getPLAIN_TEXTRule() {
		return gaDmx.getPLAIN_TEXTRule();
	}
	
	//terminal PLAIN_TEXT_ONLY:
	//	'«' PLAIN_TEXT* '»';
	public TerminalRule getPLAIN_TEXT_ONLYRule() {
		return gaDmx.getPLAIN_TEXT_ONLYRule();
	}
	
	//terminal PLAIN_TEXT_START:
	//	'«' PLAIN_TEXT* '[';
	public TerminalRule getPLAIN_TEXT_STARTRule() {
		return gaDmx.getPLAIN_TEXT_STARTRule();
	}
	
	//terminal PLAIN_TEXT_MIDDLE:
	//	']' PLAIN_TEXT* '[';
	public TerminalRule getPLAIN_TEXT_MIDDLERule() {
		return gaDmx.getPLAIN_TEXT_MIDDLERule();
	}
	
	//terminal PLAIN_TEXT_END:
	//	']' PLAIN_TEXT* '»';
	public TerminalRule getPLAIN_TEXT_ENDRule() {
		return gaDmx.getPLAIN_TEXT_ENDRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaDmx.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaDmx.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaDmx.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaDmx.getANY_OTHERRule();
	}
}
