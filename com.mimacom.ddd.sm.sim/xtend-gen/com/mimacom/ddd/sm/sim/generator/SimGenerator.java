/**
 * generated by Xtext 2.16.0
 */
package com.mimacom.ddd.sm.sim.generator;

import com.google.common.collect.Iterators;
import com.google.common.collect.Lists;
import com.google.inject.Inject;
import com.mimacom.ddd.sm.sim.SDeducibleElement;
import com.mimacom.ddd.sm.sim.SDeductionRule;
import com.mimacom.ddd.sm.sim.SInformationModel;
import java.util.ArrayList;
import java.util.Iterator;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.serializer.ISerializer;
import org.eclipse.xtext.xbase.lib.IterableExtensions;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class SimGenerator extends AbstractGenerator {
  @Inject
  private ISerializer serializer;
  
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
  }
  
  public boolean removeTransformationItems(final Resource resource) {
    boolean hadSyntheticItems = false;
    final EObject model = IterableExtensions.<EObject>head(resource.getContents());
    if ((model instanceof SInformationModel)) {
      ((SInformationModel)model).setDeduced(true);
      final Iterator<SDeducibleElement> deducibles = Iterators.<SDeducibleElement>filter(resource.getAllContents(), SDeducibleElement.class);
      final ArrayList<SDeducibleElement> elementsToRemove = Lists.<SDeducibleElement>newArrayList();
      while (deducibles.hasNext()) {
        {
          final SDeducibleElement e = deducibles.next();
          SDeductionRule _deductionRule = e.getDeductionRule();
          boolean _tripleNotEquals = (_deductionRule != null);
          if (_tripleNotEquals) {
            elementsToRemove.add(e);
          } else {
            e.setDeductionRule(null);
            hadSyntheticItems = (hadSyntheticItems || ((e.getSynthetic() != null) && (e.getSynthetic()).booleanValue()));
            e.unsetSynthetic();
          }
        }
      }
      for (final SDeducibleElement e : elementsToRemove) {
        EcoreUtil.remove(e);
      }
    }
    return hadSyntheticItems;
  }
}
