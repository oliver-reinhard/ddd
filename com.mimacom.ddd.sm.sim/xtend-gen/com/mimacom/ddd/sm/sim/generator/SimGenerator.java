/**
 * generated by Xtext 2.16.0
 */
package com.mimacom.ddd.sm.sim.generator;

import com.google.common.collect.Iterators;
import com.google.inject.Inject;
import com.mimacom.ddd.dm.base.IDeducibleElement;
import com.mimacom.ddd.dm.base.IDeductionDefinition;
import com.mimacom.ddd.sm.sim.SInformationModel;
import java.io.CharArrayWriter;
import java.util.Iterator;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.xtext.EcoreUtil2;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.resource.SaveOptions;
import org.eclipse.xtext.resource.XtextResourceSet;
import org.eclipse.xtext.serializer.ISerializer;
import org.eclipse.xtext.xbase.lib.Exceptions;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;
import org.eclipse.xtext.xbase.lib.StringExtensions;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class SimGenerator extends AbstractGenerator {
  @Inject
  private ISerializer serializer;
  
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    try {
      final EObject model = IterableExtensions.<EObject>head(resource.getContents());
      if ((model instanceof SInformationModel)) {
        boolean _isGenerate = ((SInformationModel)model).isGenerate();
        if (_isGenerate) {
          final XtextResourceSet targetRS = new XtextResourceSet();
          EcoreUtil2.<XtextResourceSet>clone(targetRS, resource.getResourceSet());
          final Resource resourceCopy = targetRS.getResource(resource.getURI(), true);
          boolean _removeTransformationItems = this.removeTransformationItems(resourceCopy);
          if (_removeTransformationItems) {
            final EObject modelCopy = IterableExtensions.<EObject>head(resourceCopy.getContents());
            final CharArrayWriter writer = new CharArrayWriter(1000);
            final SaveOptions saveOptions = SaveOptions.getOptions(null);
            this.serializer.serialize(modelCopy, writer, saveOptions);
            String _firstUpper = StringExtensions.toFirstUpper(resource.getURI().lastSegment());
            String _plus = ("Deduced" + _firstUpper);
            fsa.generateFile(_plus, writer.toString());
          }
        }
      }
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  public boolean removeTransformationItems(final Resource resource) {
    boolean hadSyntheticItems = false;
    final EObject model = IterableExtensions.<EObject>head(resource.getContents());
    if ((model instanceof SInformationModel)) {
      ((SInformationModel)model).setGenerate(false);
      String _name = ((SInformationModel)model).getName();
      String _plus = (_name + ".generated");
      ((SInformationModel)model).setName(_plus);
      final List<IDeductionDefinition> deductionDefinitions = IteratorExtensions.<IDeductionDefinition>toList(Iterators.<IDeductionDefinition>filter(resource.getAllContents(), IDeductionDefinition.class));
      for (final IDeductionDefinition d : deductionDefinitions) {
        EcoreUtil.remove(d);
      }
      final Iterator<IDeducibleElement> deducibleElements = Iterators.<IDeducibleElement>filter(resource.getAllContents(), IDeducibleElement.class);
      while (deducibleElements.hasNext()) {
        {
          final IDeducibleElement e = deducibleElements.next();
          e.setDeducedFrom(null);
          hadSyntheticItems = (hadSyntheticItems || e.isSynthetic());
          e.setSynthetic(false);
        }
      }
    }
    return hadSyntheticItems;
  }
}
