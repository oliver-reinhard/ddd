/**
 * generated by Xtext 2.16.0
 */
package com.mimacom.ddd.sm.sim.scoping;

import com.google.common.base.Objects;
import com.google.common.collect.Iterables;
import com.google.inject.Inject;
import com.mimacom.ddd.dm.base.BasePackage;
import com.mimacom.ddd.dm.base.DAggregate;
import com.mimacom.ddd.dm.base.DComplexType;
import com.mimacom.ddd.dm.base.DDeductionRule;
import com.mimacom.ddd.dm.base.DEnumeration;
import com.mimacom.ddd.dm.base.DFeature;
import com.mimacom.ddd.dm.base.DQuery;
import com.mimacom.ddd.dm.base.DQueryParameter;
import com.mimacom.ddd.dm.base.DType;
import com.mimacom.ddd.dm.base.IDeducibleElement;
import com.mimacom.ddd.dm.base.ITypeContainer;
import com.mimacom.ddd.sm.sim.SAggregateDeduction;
import com.mimacom.ddd.sm.sim.SComplexTypeDeduction;
import com.mimacom.ddd.sm.sim.SDetailTypeDeduction;
import com.mimacom.ddd.sm.sim.SEntityTypeDeduction;
import com.mimacom.ddd.sm.sim.SEnumerationDeduction;
import com.mimacom.ddd.sm.sim.SFeatureDeduction;
import com.mimacom.ddd.sm.sim.SLiteralDeduction;
import com.mimacom.ddd.sm.sim.SPrimitiveDeduction;
import com.mimacom.ddd.sm.sim.SQueryDeduction;
import com.mimacom.ddd.sm.sim.SQueryParameterDeduction;
import com.mimacom.ddd.sm.sim.SimUtil;
import com.mimacom.ddd.sm.sim.scoping.AbstractSimScopeProvider;
import java.util.List;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.xtext.EcoreUtil2;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.scoping.Scopes;
import org.eclipse.xtext.xbase.lib.Extension;

@SuppressWarnings("all")
public class SimScopeProvider extends AbstractSimScopeProvider {
  @Inject
  @Extension
  private SimUtil _simUtil;
  
  private static final BasePackage BASE = BasePackage.eINSTANCE;
  
  @Override
  public IScope getScope(final EObject context, final EReference reference) {
    IScope _xblockexpression = null;
    {
      EReference _dDeductionRule_Source = SimScopeProvider.BASE.getDDeductionRule_Source();
      boolean _equals = Objects.equal(reference, _dDeductionRule_Source);
      if (_equals) {
        EObject _xifexpression = null;
        if ((context instanceof DDeductionRule)) {
          _xifexpression = ((DDeductionRule)context).eContainer();
        } else {
          _xifexpression = context;
        }
        final EObject decduction = _xifexpression;
        final EObject container = decduction.eContainer();
        if ((decduction instanceof SAggregateDeduction)) {
          return this.getDefaultScopeOfType(decduction, SimScopeProvider.BASE.getDAggregate());
        } else {
          if ((decduction instanceof SPrimitiveDeduction)) {
            return this.getDefaultScopeOfType(decduction, SimScopeProvider.BASE.getDPrimitive());
          } else {
            if ((decduction instanceof SEntityTypeDeduction)) {
              return this.getDefaultScopeOfType(decduction, SimScopeProvider.BASE.getDEntityType());
            } else {
              if ((decduction instanceof SDetailTypeDeduction)) {
                return this.getDefaultScopeOfType(decduction, SimScopeProvider.BASE.getDDetailType());
              } else {
                if ((decduction instanceof SLiteralDeduction)) {
                  if ((container instanceof SEnumerationDeduction)) {
                    DDeductionRule _deductionRule = ((SEnumerationDeduction)container).getDeductionRule();
                    IDeducibleElement _source = null;
                    if (_deductionRule!=null) {
                      _source=_deductionRule.getSource();
                    }
                    final IDeducibleElement sourceType = _source;
                    if ((sourceType instanceof DEnumeration)) {
                      return Scopes.scopeFor(((DEnumeration)sourceType).getLiterals());
                    }
                  }
                  return IScope.NULLSCOPE;
                } else {
                  if ((decduction instanceof SFeatureDeduction)) {
                    if ((container instanceof SComplexTypeDeduction)) {
                      DDeductionRule _deductionRule_1 = ((SComplexTypeDeduction)container).getDeductionRule();
                      IDeducibleElement _source_1 = null;
                      if (_deductionRule_1!=null) {
                        _source_1=_deductionRule_1.getSource();
                      }
                      final IDeducibleElement sourceType_1 = _source_1;
                      if ((sourceType_1 instanceof DComplexType)) {
                        final Class<? extends DFeature> requiredFeatureType = this._simUtil.baseClass(((SFeatureDeduction)decduction));
                        return this.getInheritedFeaturesScope(((DComplexType)sourceType_1), requiredFeatureType, IScope.NULLSCOPE);
                      }
                    } else {
                      if ((container instanceof SAggregateDeduction)) {
                        DDeductionRule _deductionRule_2 = ((SAggregateDeduction)container).getDeductionRule();
                        IDeducibleElement _source_2 = null;
                        if (_deductionRule_2!=null) {
                          _source_2=_deductionRule_2.getSource();
                        }
                        final IDeducibleElement source = _source_2;
                        if ((source instanceof DAggregate)) {
                          return Scopes.scopeFor(Iterables.<DQuery>filter(((DAggregate)source).getFeatures(), DQuery.class));
                        }
                      }
                    }
                    return IScope.NULLSCOPE;
                  } else {
                    if ((decduction instanceof SQueryParameterDeduction)) {
                      if ((container instanceof SQueryDeduction)) {
                        DDeductionRule _deductionRule_3 = ((SQueryDeduction)container).getDeductionRule();
                        IDeducibleElement _source_3 = null;
                        if (_deductionRule_3!=null) {
                          _source_3=_deductionRule_3.getSource();
                        }
                        final IDeducibleElement source_1 = _source_3;
                        if ((source_1 instanceof DQuery)) {
                          return Scopes.scopeFor(((DQuery)source_1).getParameters());
                        }
                      }
                      return IScope.NULLSCOPE;
                    }
                  }
                }
              }
            }
          }
        }
      }
      _xblockexpression = super.getScope(context, reference);
    }
    return _xblockexpression;
  }
  
  @Override
  public IScope getDefaultScopeOfType(final EObject context, final EClass type) {
    if (((context instanceof DQuery) || (context instanceof DQueryParameter))) {
      final ITypeContainer container = EcoreUtil2.<ITypeContainer>getContainerOfType(context, ITypeContainer.class);
      if ((container instanceof SAggregateDeduction)) {
        final IScope outerScope = this.getDefaultScopeOfType(container, SimScopeProvider.BASE.getIValueType());
        final List<DType> syntheticTypes = this._simUtil.syntheticTypes(((SAggregateDeduction)container));
        boolean _isEmpty = syntheticTypes.isEmpty();
        boolean _not = (!_isEmpty);
        if (_not) {
          return Scopes.scopeFor(syntheticTypes, outerScope);
        }
        return outerScope;
      }
    }
    return super.getDefaultScopeOfType(context, type);
  }
  
  protected IScope getInheritedFeaturesScope(final DComplexType owner, final Class<? extends EObject> featureType, final IScope outerScope) {
    final Iterable<? extends EObject> features = Iterables.filter(owner.getFeatures(), featureType);
    DComplexType _superType = owner.getSuperType();
    boolean _tripleNotEquals = (_superType != null);
    if (_tripleNotEquals) {
      return Scopes.scopeFor(features, this.getInheritedFeaturesScope(owner.getSuperType(), featureType, outerScope));
    } else {
      return Scopes.scopeFor(features, outerScope);
    }
  }
}
