/**
 * generated by Xtext 2.16.0
 */
package com.mimacom.ddd.sm.sim.scoping;

import com.google.common.base.Objects;
import com.google.common.collect.Iterables;
import com.mimacom.ddd.dm.base.DAssociation;
import com.mimacom.ddd.dm.base.DAttribute;
import com.mimacom.ddd.dm.base.DComplexType;
import com.mimacom.ddd.dm.base.DEnumeration;
import com.mimacom.ddd.dm.base.DFeature;
import com.mimacom.ddd.dm.base.DQuery;
import com.mimacom.ddd.sm.sim.SAssociation;
import com.mimacom.ddd.sm.sim.SAttribute;
import com.mimacom.ddd.sm.sim.SComplexType;
import com.mimacom.ddd.sm.sim.SEnumeration;
import com.mimacom.ddd.sm.sim.SFeature;
import com.mimacom.ddd.sm.sim.SLiteral;
import com.mimacom.ddd.sm.sim.SQuery;
import com.mimacom.ddd.sm.sim.SQueryParameter;
import com.mimacom.ddd.sm.sim.SimPackage;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.emf.ecore.EcoreFactory;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.scoping.Scopes;
import org.eclipse.xtext.scoping.impl.ImportedNamespaceAwareLocalScopeProvider;

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
@SuppressWarnings("all")
public class SimScopeProvider extends ImportedNamespaceAwareLocalScopeProvider {
  private static final SimPackage epackage = SimPackage.eINSTANCE;
  
  @Override
  public IScope getScope(final EObject context, final EReference reference) {
    IScope _xblockexpression = null;
    {
      EReference _sDeductionRule_Source = SimScopeProvider.epackage.getSDeductionRule_Source();
      boolean _equals = Objects.equal(reference, _sDeductionRule_Source);
      if (_equals) {
        final EObject container = context.eContainer();
        if ((context instanceof SLiteral)) {
          if ((container instanceof SEnumeration)) {
            final EObject sourceType = ((SEnumeration)container).getDeductionRule().getSource();
            if ((sourceType instanceof DEnumeration)) {
              return Scopes.scopeFor(((DEnumeration)sourceType).getLiterals());
            }
          }
        } else {
          if ((context instanceof SFeature)) {
            if ((container instanceof SComplexType)) {
              final EObject sourceType_1 = ((SComplexType)container).getDeductionRule().getSource();
              if ((sourceType_1 instanceof DComplexType)) {
                Class<? extends DFeature> _switchResult = null;
                boolean _matched = false;
                if (context instanceof SAttribute) {
                  _matched=true;
                  _switchResult = DAttribute.class;
                }
                if (!_matched) {
                  if (context instanceof SAssociation) {
                    _matched=true;
                    _switchResult = DAssociation.class;
                  }
                }
                if (!_matched) {
                  if (context instanceof SQuery) {
                    _matched=true;
                    _switchResult = DQuery.class;
                  }
                }
                final Class<? extends DFeature> requiredFeatureType = _switchResult;
                return this.getInheritedFeaturesScope(((DComplexType)sourceType_1), requiredFeatureType, IScope.NULLSCOPE);
              }
            }
          } else {
            if ((context instanceof SQueryParameter)) {
              if ((container instanceof SQuery)) {
                final EObject sourceType_2 = ((SQuery)container).getDeductionRule().getSource();
                if ((sourceType_2 instanceof DQuery)) {
                  return Scopes.scopeFor(((DQuery)sourceType_2).getParameters());
                }
              }
            }
          }
        }
      }
      _xblockexpression = super.getScope(context, reference);
    }
    return _xblockexpression;
  }
  
  protected IScope getInheritedFeaturesScope(final DComplexType owner, final Class<? extends EObject> featureType, final IScope outerScope) {
    final Iterable<? extends EObject> features = Iterables.filter(owner.getFeatures(), featureType);
    DComplexType _superType = owner.getSuperType();
    boolean _tripleNotEquals = (_superType != null);
    if (_tripleNotEquals) {
      return Scopes.scopeFor(features, this.getInheritedFeaturesScope(owner.getSuperType(), featureType, outerScope));
    } else {
      return Scopes.scopeFor(features, outerScope);
    }
  }
  
  /**
   * Obtains the default scope for the given reference narrowed down to the given type.
   */
  public IScope getDefaultScopeForType(final EObject context, final EClass type) {
    final EReference reference = EcoreFactory.eINSTANCE.createEReference();
    reference.setEType(type);
    final IScope scope = super.getScope(context, reference);
    return scope;
  }
}
