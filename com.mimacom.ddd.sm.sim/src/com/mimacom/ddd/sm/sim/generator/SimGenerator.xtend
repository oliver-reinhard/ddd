/*
 * generated by Xtext 2.16.0
 */
package com.mimacom.ddd.sm.sim.generator

import com.google.inject.Inject
import com.mimacom.ddd.dm.base.base.ITransposableElement
import com.mimacom.ddd.dm.base.base.ITransposition
import java.io.CharArrayWriter
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.emf.ecore.util.EcoreUtil
import org.eclipse.xtext.EcoreUtil2
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import org.eclipse.xtext.resource.SaveOptions
import org.eclipse.xtext.resource.XtextResourceSet
import org.eclipse.xtext.serializer.ISerializer
import com.mimacom.ddd.sm.sim.SystemInformationModel

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class SimGenerator extends AbstractGenerator {

	@Inject ISerializer serializer;
	
	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		val model = resource.contents.head
		if (model instanceof SystemInformationModel) {
			if (model.isGenerate) {
				val targetRS = new XtextResourceSet
				EcoreUtil2.clone(targetRS, resource.resourceSet)
				val resourceCopy = targetRS.getResource(resource.URI, true)
				if (resourceCopy.removeTransformationItems) {
					// if no synthetic members were present, then resource is already a generated file.
					val modelCopy = resourceCopy.contents.head;
					val writer = new CharArrayWriter(1000)
					val  saveOptions = SaveOptions.getOptions(null)
					serializer.serialize(modelCopy, writer, saveOptions)
					fsa.generateFile("Deduced" + resource.URI.lastSegment.toFirstUpper, writer.toString)
				}
			}
		}
	}
	
	def boolean removeTransformationItems(Resource resource) {
		var hadSyntheticItems = false
		val model = resource.contents.head
		if (model instanceof SystemInformationModel) {
			model.generate = false
			// change name space so index entries to avoid conflict with original Sim file:
			model.name = model.name + ".generated"
			
			val deductionDefinitions = resource.allContents.filter(ITransposition).toList
			for (d : deductionDefinitions) {
				EcoreUtil.remove(d)
			}
			
			val deducibleElements = resource.allContents.filter(ITransposableElement)
			while (deducibleElements.hasNext) {
				val e = deducibleElements.next
				e.transposedBy = null
				hadSyntheticItems = hadSyntheticItems || (e.isSynthetic)
				e.synthetic = false
			}
		}
		return hadSyntheticItems
	}
}
