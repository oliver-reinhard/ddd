/*
 * generated by Xtext 2.16.0
 */
package com.mimacom.ddd.sm.sim.validation

import com.mimacom.ddd.sm.sim.SComplexType
import com.mimacom.ddd.sm.sim.SDitchRule
import com.mimacom.ddd.sm.sim.SGrabRule
import com.mimacom.ddd.sm.sim.SimPackage
import org.eclipse.xtext.validation.Check

import static com.mimacom.ddd.sm.sim.SElementNature.*

/**
 * This class contains custom validation rules. 
 *
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
class SimValidator extends AbstractSimValidator {
	
	@Check
	def checkDeducedFeatures(SComplexType type) {
		if (type.nature == DEDUCTION_RULE) {
			if (type.deductionRule instanceof SGrabRule) {
				val hasDitchElements= type.features.exists[deductionRule instanceof SDitchRule]
				val hasGrabElements= type.features.exists[deductionRule instanceof SGrabRule]
				if ( hasDitchElements && hasGrabElements) {
					error("Cannot use both grab rule and ditch rules together.", SimPackage.Literals.SNAMED_ELEMENT__NAME)
				}
			}
		}
	}
	
	// - only 1 SPrimitive can realize a given DPrimitive
	
	// - Complex types must map to same metatype (root -> root, etc.)
	
	// - features of a complex type cannot be deduced if complex type is not deduced
	// - same for literals
	
	// - check feature types (DetailType => value, etc.)
	
}
