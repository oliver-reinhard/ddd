grammar com.mimacom.ddd.sm.sim.Sim with com.mimacom.ddd.dm.dim.Dim

import "http://www.mimacom.com/ddd/dm/base" 
import "http://www.mimacom.com/ddd/dm/transpose" 
import "http://www.mimacom.com/ddd/dm/dim"
import "http://www.mimacom.com/ddd/sm/sim"


@Override 
DNamespace:
	'system'
	name=DQualifiedName
	(imports+=DImport)*
	model=SystemInformationModel;
	
SystemInformationModel:
	(	kind=STypeModelKind 'type' 'model'
	|	kind=SystemInformationModelKind 'information' 'model'		
	)
	name=ID
	('alias' alias=ID)?
	 (^generate?='generate')?
	(description=DRichText)?
	(notes+=DNote)*
	'{'
	(types+=SimType | aggregates+=SimAggregate)*
	'}';
	
enum STypeModelKind returns SystemInformationModelKind:
	BASE='base';
	
enum SystemInformationModelKind:
	INTERFACE='interface' | CORE='core';

/*
 * RULEs
 */
		
SimGrabAggregateRule returns TGrabAggregateRule:
	source=[DimAggregate|DQualifiedName]
	('as' renameTo=ID)?;
	
SimGrabPrimitiveRule returns TGrabRule:
	source=[DimPrimitive|DQualifiedName]
	('as' renameTo=ID)?;
	
SimDitchPrimitiveRule returns TDitchRule:
	source=[DimPrimitive|DQualifiedName];
	
SimGrabEnumerationRule returns TGrabRule:
	source=[DimEnumeration|DQualifiedName]
	('as' renameTo=ID)?;
	
SimDitchEnumerationRule returns TDitchRule:
	source=[DimEnumeration|DQualifiedName];

SimGrabEnumerationLiteralRule returns TGrabRule:
	source=[DimLiteral|ID]
	('as' renameTo=ID)?;
	
SimDitchEnumerationLiteralRule returns TDitchRule:
	source=[DimLiteral|ID];
	
SimGrabComplexTypeRule returns TGrabRule:
	source=[DimComplexType|DQualifiedName]
	('as' renameTo=ID)?;
	
SimDitchComplexTypeRule returns TDitchRule:
	source=[DimComplexType|DQualifiedName];
	
SimMorphComplexTypeRule returns TMorphRule:
	source=[DimComplexType|DQualifiedName]
	ChangeComplexType;
	
SimFuseComplexTypeRule returns TFuseRule:
	source=[DimComplexType|DQualifiedName]
	('and' otherSources+=[DComplexType|DQualifiedName])+
	ChangeComplexType;

fragment ChangeComplexType returns TStructureChangingRule:
	'to' 
	abstract=SimAbstractType? 
	(	detail=SimDetailType
	|	rootEntity=SimRootEntity? detail=SimEntityType
	)
	(renameTo=ID)?
	('extends' extendFrom=[DComplexType|ID])?;

SimGrabFeatureRule returns TGrabRule:
	source=[DimFeature|ID]
	('as' renameTo=ID)?;
	
SimMorphFeatureRule returns TMorphRule:
	source=[DimFeature|ID]
	'to'
	(renameTo=ID ':')? 
	retypeTo=[DType|ID] (remultiplyTo=DMultiplicity)?;	

SimDitchFeatureRule returns TDitchRule:
	source=[DimFeature|ID];
	
SimGrabQueryParameterRule returns TGrabRule:
	source=[DimQueryParameter|ID]
	('as' renameTo=ID)?;
	
SimMorphQueryParameterRule returns TMorphRule:
	source=[DimQueryParameter|ID]
	'to'
	(renameTo=ID ':')? 
	retypeTo=[DType|ID] (remultiplyTo=DMultiplicity)?;	

SimDitchQueryParameterRule returns TDitchRule:
	source=[DimQueryParameter|ID];

enum SimAbstractType returns TTristate:
	FALSE='nonabstract' | TRUE='abstract';
	
enum SimRootEntity returns TTristate:
	FALSE='nonroot' | TRUE='root';
	
enum SimDetailType returns TTristate:
	TRUE='detail';

enum SimEntityType returns TTristate:
	FALSE='entity';

/*
 * AGGREGATES
 */
SimAggregate returns DAggregate:
SimAggregateTransposition | DimAggregate;

SimAggregateTransposition returns TAggregateTransposition:
	{TAggregateTransposition}
	'grab' 'aggregate' rule=SimGrabAggregateRule
	(description=DRichText)?
	(	'{'
			(features+=SimQueryTransposition | 'add' 'query' features+=DimQuery)*
			(types+=SimType)*
		'}'
	)?;
		
@Override 
DAggregateKeyword:
	'aggregate';  // replace DIM keyword 'component'

/*
 * TYPES
 */

@Override
DimType returns DType:
SimPrimitiveTransposition | DimPrimitive
	| SimEnumerationTransposition | DimEnumeration
	| SimEntityTypeTransposition | DimEntityType
	| SimDetailTypeTransposition | DimDetailType;
	
SimType returns DType:
SimPrimitiveTransposition | 'add' DimPrimitive
	| SimEnumerationTransposition | 'add' DimEnumeration
	| SimEntityTypeTransposition | 'add' DimEntityType
	| SimDetailTypeTransposition | 'add' DimDetailType;

SimPrimitiveTransposition returns TPrimitiveTransposition:
	{TPrimitiveTransposition}
	(	'grab' 'primitive' rule=SimGrabPrimitiveRule
	|	'ditch' 'primitive' rule=SimDitchPrimitiveRule
	)
	(description=DRichText)?
	(notes+=DNote)*
	(	'{'
		('add' constraints+=DConstraint)*
		'}'
	)?;
	
SimEnumerationTransposition returns TEnumerationTransposition:
	{TEnumerationTransposition} 
	(	'grab' 'enumeration' rule=SimGrabEnumerationRule
	|	'ditch' 'enumeration' rule=SimDitchEnumerationRule
	)
	(description=DRichText)?
	(notes+=DNote)*
	(	'{'
		 	(literals+=SimLiteral (',' literals+=SimLiteral)*)?
			('add' constraints+=DConstraint)*
		 '}'
	)?;
	 
SimLiteral returns DLiteral:
SimLiteralTransposition | 'add' DimLiteral;
	
SimLiteralTransposition returns TLiteralTransposition:
	{TLiteralTransposition}
	(	 'grab' rule=SimGrabEnumerationLiteralRule
	|	 'ditch' rule=SimDitchEnumerationLiteralRule
	)
	(description=DRichText)?
	(notes+=DNote)*;

SimEntityTypeTransposition returns TEntityTypeTransposition:
	{TEntityTypeTransposition}
	(	'grab'(root?='root')? 'entity' rule=SimGrabComplexTypeRule
	|	'ditch' (root?='root')? 'entity' rule=SimDitchComplexTypeRule
	|	'morph' (root?='root')? 'entity' rule=SimMorphComplexTypeRule
	|	'fuse'(root?='root')?  'entity' rule=SimFuseComplexTypeRule
	)
	(description=DRichText)?
	(notes+=DNote)*
	TComplexTypeFeatures?;

SimDetailTypeTransposition returns TDetailTypeTransposition:
	{TDetailTypeTransposition} 
	(	'grab' 'detail' rule=SimGrabComplexTypeRule
	|	'ditch' 'detail' rule=SimDitchComplexTypeRule
	|	'morph' 'detail' rule=SimMorphComplexTypeRule
	|	'fuse' 'detail' rule=SimFuseComplexTypeRule
	)
	(description=DRichText)?
	(notes+=DNote)*
	TComplexTypeFeatures?;

fragment TComplexTypeFeatures returns DComplexType:
	'{'
			(features+=SimFeature | 'add' constraints+=DConstraint)*
	'}';
	
/*
 * FEATURES
 */	
	
SimFeature returns DFeature:
SimAssociationTransposition | 'add' DimAssociation
	| SimAttributeTransposition | 'add' DimAttribute
	| SimQueryTransposition | 'add' DimQuery;

SimAssociationTransposition returns TAssociationTransposition:
	{TAssociationTransposition} 
	(	'grab' ('reference' | 'composite') rule=SimGrabFeatureRule
	|	'morph' ('reference' | 'composite')rule=SimMorphFeatureRule
	|	'ditch' ('reference' | 'composite') rule=SimDitchFeatureRule
	)
	(description=DRichText)?;
	
SimAttributeTransposition returns TAttributeTransposition:
	{TAttributeTransposition} 
	(	'grab' ('attribute' | detail?='detail')? rule=SimGrabFeatureRule
	|	'morph' ('attribute' | detail?='detail')? rule=SimMorphFeatureRule
	|	'ditch' ('attribute' | detail?='detail')? rule=SimDitchFeatureRule
	)
	(description=DRichText)?;

SimQueryTransposition returns TQueryTransposition:
	{TQueryTransposition} 
	(	(	'grab' 'query' rule=SimGrabFeatureRule
		|	'morph' 'query' rule=SimMorphFeatureRule
		)
		'('
		(	'*'
		|	parameters+=SimQueryParameter ( ',' parameters+=SimQueryParameter)*
		)
		')'
	|	'ditch' 'query' rule=SimDitchFeatureRule
	)
	(description=DRichText)?
	(notes+=DNote)*;
		
SimQueryParameter returns DQueryParameter:
SimQueryParameterTransposition | 'add' DimQueryParameter;
	
SimQueryParameterTransposition returns TQueryParameterTransposition:
	{TQueryParameterTransposition} 
	(	'grab' rule=SimGrabQueryParameterRule
	|	'morph' rule=SimMorphQueryParameterRule
	|	'ditch' rule=SimDitchQueryParameterRule
	)
	(description=DRichText)?
	(notes+=DNote)*;
