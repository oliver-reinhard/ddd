grammar com.mimacom.ddd.sm.sim.Sim with com.mimacom.ddd.dm.dim.Dim

import "http://www.mimacom.com/ddd/dm/base" 
import "http://www.mimacom.com/ddd/dm/transpose" 
import "http://www.mimacom.com/ddd/sm/sim"


@Override 
DNamespace:
	'system'
	name=DQualifiedName
	(imports+=DImport)*
	model=SInformationModel;
	
SInformationModel:
	(	kind=STypeModelKind 'type' 'model'
	|	kind=SInformationModelKind 'information' 'model'		
	)
	name=ID
	 (^generate?='generate')?
	(description=DRichText)?
	'{'
	(types+=SimType | aggregates+=SimAggregate)*
	'}';
	
enum STypeModelKind returns SInformationModelKind:
	BASE='base';
	
enum SInformationModelKind:
	INTERFACE='interface' | CORE='core';

/*
 * RULEs
 */
		
SimGrabAggregateRule returns TGrabAggregateRule:
	source=[DAggregate|DQualifiedName]
	('as' renameTo=ID)?;
	
SimGrabPrimitiveRule returns TGrabRule:
	source=[DPrimitive|DQualifiedName]
	('as' renameTo=ID)?;
	
SimDitchPrimitiveRule returns TDitchRule:
	source=[DPrimitive|DQualifiedName];
	
SimGrabEnumerationRule returns TGrabRule:
	source=[DEnumeration|DQualifiedName]
	('as' renameTo=ID)?;
	
SimDitchEnumerationRule returns TDitchRule:
	source=[DEnumeration|DQualifiedName];

SimGrabEnumerationLiteralRule returns TGrabRule:
	source=[DLiteral|ID]
	('as' renameTo=ID)?;
	
SimDitchEnumerationLiteralRule returns TDitchRule:
	source=[DLiteral|ID];
	
SimGrabComplexTypeRule returns TGrabRule:
	source=[DComplexType|DQualifiedName]
	('as' renameTo=ID)?;
	
SimDitchComplexTypeRule returns TDitchRule:
	source=[DComplexType|DQualifiedName];
	
SimMorphComplexTypeRule returns TMorphRule:
	source=[DComplexType|DQualifiedName]
	ChangeComplexType;
	
SimFuseComplexTypeRule returns TFuseRule:
	source=[DComplexType|DQualifiedName]
	('and' otherSources+=[DComplexType|DQualifiedName])+
	ChangeComplexType;

fragment ChangeComplexType returns TStructureChangingRule:
	'to' 
	abstract=SimAbstractType? 
	(	detail=SimDetailType
	|	rootEntity=SimRootEntity? detail=SimEntityType
	)
	(renameTo=ID)?
	('extends' extendFrom=[DComplexType|ID])?;

SimGrabFeatureRule returns TGrabRule:
	source=[DFeature|ID]
	('as' renameTo=ID)?;
	
SimMorphFeatureRule returns TMorphRule:
	source=[DFeature|ID]
	'to'
	(renameTo=ID ':')? 
	retypeTo=[DType|ID] (remultiplyTo=DMultiplicity)?;	

SimDitchFeatureRule returns TDitchRule:
	source=[DFeature|ID];
	
SimGrabQueryParameterRule returns TGrabRule:
	source=[DQueryParameter|ID]
	('as' renameTo=ID)?;
	
SimMorphQueryParameterRule returns TMorphRule:
	source=[DQueryParameter|ID]
	'to'
	(renameTo=ID ':')? 
	retypeTo=[DType|ID] (remultiplyTo=DMultiplicity)?;	

SimDitchQueryParameterRule returns TDitchRule:
	source=[DQueryParameter|ID];

enum SimAbstractType returns TTristate:
	FALSE='nonabstract' | TRUE='abstract';
	
enum SimRootEntity returns TTristate:
	FALSE='nonroot' | TRUE='root';
	
enum SimDetailType returns TTristate:
	TRUE='detail';

enum SimEntityType returns TTristate:
	FALSE='entity';

SimAggregate returns DAggregate:
SimAggregateTransposition | DAggregate;

SimAggregateTransposition returns TAggregateTransposition:
	{TAggregateTransposition}
	'grab' 'aggregate' transpositionRule=SimGrabAggregateRule
	(description=DRichText)?
	(	'{'
			(features+=SimQueryTransposition | 'add' 'query' features+=DQuery)*
			( types+=SimType)*
		'}'
	)?;
		
@Override 
DAggregateKeyword:
	'aggregate';  // replace DIM keyword 'component'

/*
 * TYPES
 */

@Override
DType:
SimPrimitiveTransposition | DPrimitive
	| SimEnumerationTransposition | DEnumeration
	| SimEntityTypeTransposition | DEntityType
	| SimDetailTypeTransposition | DDetailType;
	
SimType returns DType:
SimPrimitiveTransposition | 'add' DPrimitive
	| SimEnumerationTransposition | 'add' DEnumeration
	| SimEntityTypeTransposition | 'add' DEntityType
	| SimDetailTypeTransposition | 'add' DDetailType;

SimPrimitiveTransposition returns TPrimitiveTransposition:
	{TPrimitiveTransposition}
	(	'grab' 'primitive' transpositionRule=SimGrabPrimitiveRule
	|	'ditch' 'primitive' transpositionRule=SimDitchPrimitiveRule
	)
	(description=DRichText)?
	(	'{'
		('add' constraints+=DConstraint)*
		'}'
	)?;
	
SimEnumerationTransposition returns TEnumerationTransposition:
	{TEnumerationTransposition} 
	(	'grab' 'enumeration' transpositionRule=SimGrabEnumerationRule
	|	'ditch' 'enumeration' transpositionRule=SimDitchEnumerationRule
	)
	(description=DRichText)?
	(	'{'
		 	(literals+=SimLiteral (',' literals+=SimLiteral)*)?
			('add' constraints+=DConstraint)*
		 '}'
	)?;
	 
SimLiteral returns DLiteral:
SimLiteralTransposition | 'add' DLiteral;
	
SimLiteralTransposition returns TLiteralTransposition:
	{TLiteralTransposition}
	(	 'grab' transpositionRule=SimGrabEnumerationLiteralRule
	|	 'ditch' transpositionRule=SimDitchEnumerationLiteralRule
	)
	(description=DRichText)?;

SimEntityTypeTransposition returns TEntityTypeTransposition:
	{TEntityTypeTransposition}
	(	'grab'(root?='root')? 'entity' transpositionRule=SimGrabComplexTypeRule
	|	'ditch' (root?='root')? 'entity' transpositionRule=SimDitchComplexTypeRule
	|	'morph' (root?='root')? 'entity' transpositionRule=SimMorphComplexTypeRule
	|	'fuse'(root?='root')?  'entity' transpositionRule=SimFuseComplexTypeRule
	)
	(description=DRichText)?
	TComplexTypeFeatures?;

SimDetailTypeTransposition returns TDetailTypeTransposition:
	{TDetailTypeTransposition} 
	(	'grab' 'detail' transpositionRule=SimGrabComplexTypeRule
	|	'ditch' 'detail' transpositionRule=SimDitchComplexTypeRule
	|	'morph' 'detail' transpositionRule=SimMorphComplexTypeRule
	|	'fuse' 'detail' transpositionRule=SimFuseComplexTypeRule
	)
	(description=DRichText)?
	TComplexTypeFeatures?;

fragment TComplexTypeFeatures returns DComplexType:
	'{'
			(features+=SimFeature | 'add' constraints+=DConstraint)*
	'}';
	
/*
 * FEATURES
 */	
	
SimFeature returns DFeature:
SimAssociationTransposition | 'add' DAssociation
	| SimAttributeTransposition | 'add' DAttribute
	| SimQueryTransposition | 'add' DQuery;

SimAssociationTransposition returns TAssociationTransposition:
	{TAssociationTransposition} 
	(	'grab' ('reference' | 'composite') transpositionRule=SimGrabFeatureRule
	|	'morph' ('reference' | 'composite')transpositionRule=SimMorphFeatureRule
	|	'ditch' ('reference' | 'composite') transpositionRule=SimDitchFeatureRule
	)
	(description=DRichText)?;
	
SimAttributeTransposition returns TAttributeTransposition:
	{TAttributeTransposition} 
	(	'grab' ('attribute' | detail?='detail')? transpositionRule=SimGrabFeatureRule
	|	'morph' ('attribute' | detail?='detail')? transpositionRule=SimMorphFeatureRule
	|	'ditch' ('attribute' | detail?='detail')? transpositionRule=SimDitchFeatureRule
	)
	(description=DRichText)?;

SimQueryTransposition returns TQueryTransposition:
	{TQueryTransposition} 
	(	(	'grab' 'query' transpositionRule=SimGrabFeatureRule
		|	'morph' 'query' transpositionRule=SimMorphFeatureRule
		)
		'('
		(	'*'
		|	parameters+=SimQueryParameter ( ',' parameters+=SimQueryParameter)*
		)
		')'
	|	'ditch' 'query' transpositionRule=SimDitchFeatureRule
	)
	(description=DRichText)?;
		
SimQueryParameter returns DQueryParameter:
SimQueryParameterTransposition | 'add' DQueryParameter;
	
SimQueryParameterTransposition returns TQueryParameterTransposition:
	{TQueryParameterTransposition} 
	(	'grab' transpositionRule=SimGrabQueryParameterRule
	|	'morph' transpositionRule=SimMorphQueryParameterRule
	|	'ditch' transpositionRule=SimDitchQueryParameterRule
	)
	(description=DRichText)?;
