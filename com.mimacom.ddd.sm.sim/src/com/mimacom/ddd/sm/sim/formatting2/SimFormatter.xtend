/*
 * generated by Xtext 2.16.0
 */
package com.mimacom.ddd.sm.sim.formatting2

import com.google.inject.Inject
import com.mimacom.ddd.sm.sim.SAggregate
import com.mimacom.ddd.sm.sim.SComplexType
import com.mimacom.ddd.sm.sim.SInformationModel
import com.mimacom.ddd.sm.sim.SEnumeration
import com.mimacom.ddd.sm.sim.SImport
import com.mimacom.ddd.sm.sim.SMorphRule
import com.mimacom.ddd.sm.sim.SType
import com.mimacom.ddd.sm.sim.services.SimGrammarAccess
import org.eclipse.xtext.formatting2.AbstractFormatter2
import org.eclipse.xtext.formatting2.IFormattableDocument

class SimFormatter extends AbstractFormatter2 {
	
	@Inject extension SimGrammarAccess

	def dispatch void format(SInformationModel model, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		model.regionFor.assignment(SInformationModelAccess.nameAssignment_4).append[newLines = 2]
		for (i : model.imports) {
			i.append[if (i == model.imports.last) newLines=2 else newLine]
		}
		model.imports.last.append[newLines = 2]
		
		for (type : model.types) {
			type.format
		}
		for (aggregate : model.aggregates) {
			aggregate.format
		}
	}
	
	def dispatch void format(SImport imp, extension IFormattableDocument document) {
		imp.append[newLine]
	}

	def dispatch void format(SMorphRule sMorphRule, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		sMorphRule.remultiplyTo.format
	}
	
	def dispatch void format(SAggregate aggregate, extension IFormattableDocument document) {
		val open = aggregate.regionFor.keyword(SAggregateAccess.leftCurlyBracketKeyword_2)
		val close = aggregate.regionFor.keyword(SAggregateAccess.rightCurlyBracketKeyword_4)
		open.append[newLines = 2]
		interior(open, close) [indent]
		
		for (type : aggregate.types) {
			type.format
		}
	}
	
	def dispatch void format(SEnumeration  en, extension IFormattableDocument document) {
		if (en.literals.size > 3) {
			val open = en.regionFor.keyword(SEnumerationAccess.leftCurlyBracketKeyword_1)
			val close = en.regionFor.keyword(SEnumerationAccess.rightCurlyBracketKeyword_4)
			open.append[newLine]
			interior(open, close) [indent]
			
			for( literal : en.literals) {
				literal.regionFor.assignment(SLiteralAccess.nameAssignment_2).surround[noSpace]
			}
			for( comma : en.regionFor.keywords(SEnumerationAccess.commaKeyword_2_1_0)) {
				comma.append[newLine]
			}
			en.literals.last.append[newLine]
		}
		en.append[newLines = 2]
	}
	
	def dispatch void format(SComplexType type, extension IFormattableDocument document) {
		val open = type.regionFor.keyword(SComplexTypeFeaturesAccess.leftCurlyBracketKeyword_0)
		val close = type.regionFor.keyword(SComplexTypeFeaturesAccess.rightCurlyBracketKeyword_2)
		open.append[newLine]
		interior(open, close) [indent]
		close.append[newLines = 2]
		
		for (feature: type.features) {
			feature.append[newLine]
		}
		
		for (constraint: type.constraints) {
			constraint.append[newLine]
		}
	}
	
	def dispatch void format(SType type, extension IFormattableDocument document) {
		type.append[newLines = 2]
	}
}
