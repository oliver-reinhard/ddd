/*
 * generated by Xtext 2.21.0
 */
package com.mimacom.ddd.pub.proto.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import com.mimacom.ddd.dm.dmx.services.DmxGrammarAccess;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class PubProtoGrammarAccess extends AbstractGrammarElementFinder {
	
	public class PublicationClassElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.pub.proto.PubProto.PublicationClass");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPublicationClassAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cPublicationKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cClassKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Keyword cNatureKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cNatureAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cNaturePublicationNatureEnumRuleCall_5_0 = (RuleCall)cNatureAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cSymbolKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cSymbolsAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cSymbolsProtoSymbolParserRuleCall_6_1_0 = (RuleCall)cSymbolsAssignment_6_1.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cHtmlPreambleKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cHtmlPreambleAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cHtmlPreambleDRichTextParserRuleCall_7_1_0 = (RuleCall)cHtmlPreambleAssignment_7_1.eContents().get(0);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cLatexClassKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Assignment cLaTeXClassAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final RuleCall cLaTeXClassIDTerminalRuleCall_8_1_0 = (RuleCall)cLaTeXClassAssignment_8_1.eContents().get(0);
		private final Group cGroup_9 = (Group)cGroup.eContents().get(9);
		private final Keyword cLatexPreambleKeyword_9_0 = (Keyword)cGroup_9.eContents().get(0);
		private final Assignment cLaTeXPreambleAssignment_9_1 = (Assignment)cGroup_9.eContents().get(1);
		private final RuleCall cLaTeXPreambleDRichTextParserRuleCall_9_1_0 = (RuleCall)cLaTeXPreambleAssignment_9_1.eContents().get(0);
		private final Keyword cSegmentsKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Assignment cSegmentsAssignment_11 = (Assignment)cGroup.eContents().get(11);
		private final RuleCall cSegmentsProtoDocumentSegmentParserRuleCall_11_0 = (RuleCall)cSegmentsAssignment_11.eContents().get(0);
		private final Keyword cDivisionsKeyword_12 = (Keyword)cGroup.eContents().get(12);
		private final Assignment cDivisionsAssignment_13 = (Assignment)cGroup.eContents().get(13);
		private final RuleCall cDivisionsProtoDivisionParserRuleCall_13_0 = (RuleCall)cDivisionsAssignment_13.eContents().get(0);
		
		//PublicationClass:
		//	{PublicationClass}
		//	'publication' 'class'
		//	name=ID
		//	'nature:' nature=PublicationNature ('symbol:' symbols+=ProtoSymbol)* ('htmlPreamble:' htmlPreamble=DRichText)?
		//	('latexClass:' laTeXClass=ID)? ('latexPreamble:' laTeXPreamble=DRichText)?
		//	'segments:' segments+=ProtoDocumentSegment*
		//	'divisions:' divisions+=ProtoDivision*;
		@Override public ParserRule getRule() { return rule; }
		
		//{PublicationClass} 'publication' 'class' name=ID 'nature:' nature=PublicationNature ('symbol:' symbols+=ProtoSymbol)*
		//('htmlPreamble:' htmlPreamble=DRichText)? ('latexClass:' laTeXClass=ID)? ('latexPreamble:' laTeXPreamble=DRichText)?
		//'segments:' segments+=ProtoDocumentSegment* 'divisions:' divisions+=ProtoDivision*
		public Group getGroup() { return cGroup; }
		
		//{PublicationClass}
		public Action getPublicationClassAction_0() { return cPublicationClassAction_0; }
		
		//'publication'
		public Keyword getPublicationKeyword_1() { return cPublicationKeyword_1; }
		
		//'class'
		public Keyword getClassKeyword_2() { return cClassKeyword_2; }
		
		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }
		
		//'nature:'
		public Keyword getNatureKeyword_4() { return cNatureKeyword_4; }
		
		//nature=PublicationNature
		public Assignment getNatureAssignment_5() { return cNatureAssignment_5; }
		
		//PublicationNature
		public RuleCall getNaturePublicationNatureEnumRuleCall_5_0() { return cNaturePublicationNatureEnumRuleCall_5_0; }
		
		//('symbol:' symbols+=ProtoSymbol)*
		public Group getGroup_6() { return cGroup_6; }
		
		//'symbol:'
		public Keyword getSymbolKeyword_6_0() { return cSymbolKeyword_6_0; }
		
		//symbols+=ProtoSymbol
		public Assignment getSymbolsAssignment_6_1() { return cSymbolsAssignment_6_1; }
		
		//ProtoSymbol
		public RuleCall getSymbolsProtoSymbolParserRuleCall_6_1_0() { return cSymbolsProtoSymbolParserRuleCall_6_1_0; }
		
		//('htmlPreamble:' htmlPreamble=DRichText)?
		public Group getGroup_7() { return cGroup_7; }
		
		//'htmlPreamble:'
		public Keyword getHtmlPreambleKeyword_7_0() { return cHtmlPreambleKeyword_7_0; }
		
		//htmlPreamble=DRichText
		public Assignment getHtmlPreambleAssignment_7_1() { return cHtmlPreambleAssignment_7_1; }
		
		//DRichText
		public RuleCall getHtmlPreambleDRichTextParserRuleCall_7_1_0() { return cHtmlPreambleDRichTextParserRuleCall_7_1_0; }
		
		//('latexClass:' laTeXClass=ID)?
		public Group getGroup_8() { return cGroup_8; }
		
		//'latexClass:'
		public Keyword getLatexClassKeyword_8_0() { return cLatexClassKeyword_8_0; }
		
		//laTeXClass=ID
		public Assignment getLaTeXClassAssignment_8_1() { return cLaTeXClassAssignment_8_1; }
		
		//ID
		public RuleCall getLaTeXClassIDTerminalRuleCall_8_1_0() { return cLaTeXClassIDTerminalRuleCall_8_1_0; }
		
		//('latexPreamble:' laTeXPreamble=DRichText)?
		public Group getGroup_9() { return cGroup_9; }
		
		//'latexPreamble:'
		public Keyword getLatexPreambleKeyword_9_0() { return cLatexPreambleKeyword_9_0; }
		
		//laTeXPreamble=DRichText
		public Assignment getLaTeXPreambleAssignment_9_1() { return cLaTeXPreambleAssignment_9_1; }
		
		//DRichText
		public RuleCall getLaTeXPreambleDRichTextParserRuleCall_9_1_0() { return cLaTeXPreambleDRichTextParserRuleCall_9_1_0; }
		
		//'segments:'
		public Keyword getSegmentsKeyword_10() { return cSegmentsKeyword_10; }
		
		//segments+=ProtoDocumentSegment*
		public Assignment getSegmentsAssignment_11() { return cSegmentsAssignment_11; }
		
		//ProtoDocumentSegment
		public RuleCall getSegmentsProtoDocumentSegmentParserRuleCall_11_0() { return cSegmentsProtoDocumentSegmentParserRuleCall_11_0; }
		
		//'divisions:'
		public Keyword getDivisionsKeyword_12() { return cDivisionsKeyword_12; }
		
		//divisions+=ProtoDivision*
		public Assignment getDivisionsAssignment_13() { return cDivisionsAssignment_13; }
		
		//ProtoDivision
		public RuleCall getDivisionsProtoDivisionParserRuleCall_13_0() { return cDivisionsProtoDivisionParserRuleCall_13_0; }
	}
	public class ProtoSymbolElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.pub.proto.PubProto.ProtoSymbol");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//ProtoSymbol:
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class DExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.pub.proto.PubProto.DExpression");
		private final RuleCall cProtoSymbolReferenceParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//@Override
		//DExpression:
		//	ProtoSymbolReference;
		@Override public ParserRule getRule() { return rule; }
		
		//// used only as DRichText segment
		//ProtoSymbolReference
		public RuleCall getProtoSymbolReferenceParserRuleCall() { return cProtoSymbolReferenceParserRuleCall; }
	}
	public class ProtoSymbolReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.pub.proto.PubProto.ProtoSymbolReference");
		private final Assignment cTargetAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cTargetProtoSymbolCrossReference_0 = (CrossReference)cTargetAssignment.eContents().get(0);
		private final RuleCall cTargetProtoSymbolIDTerminalRuleCall_0_1 = (RuleCall)cTargetProtoSymbolCrossReference_0.eContents().get(1);
		
		//ProtoSymbolReference:
		//	target=[ProtoSymbol];
		@Override public ParserRule getRule() { return rule; }
		
		//target=[ProtoSymbol]
		public Assignment getTargetAssignment() { return cTargetAssignment; }
		
		//[ProtoSymbol]
		public CrossReference getTargetProtoSymbolCrossReference_0() { return cTargetProtoSymbolCrossReference_0; }
		
		//ID
		public RuleCall getTargetProtoSymbolIDTerminalRuleCall_0_1() { return cTargetProtoSymbolIDTerminalRuleCall_0_1; }
	}
	public class ProtoDocumentSegmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.pub.proto.PubProto.ProtoDocumentSegment");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cProtoAbstractParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cProtoPrefaceParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cProtoPublicationBodyParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cProtoEpilogueParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cProtoChangeHistoryParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cProtoTOCParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cProtoAbbreviationsParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cProtoListOfTablesParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cProtoListOfFiguresParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cProtoBibliographyParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cProtoGlossaryParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		private final RuleCall cProtoIndexParserRuleCall_11 = (RuleCall)cAlternatives.eContents().get(11);
		
		//ProtoDocumentSegment:
		//	ProtoAbstract | ProtoPreface | ProtoPublicationBody | ProtoEpilogue | ProtoChangeHistory | ProtoTOC |
		//	ProtoAbbreviations | ProtoListOfTables | ProtoListOfFigures | ProtoBibliography | ProtoGlossary | ProtoIndex;
		@Override public ParserRule getRule() { return rule; }
		
		//ProtoAbstract | ProtoPreface | ProtoPublicationBody | ProtoEpilogue | ProtoChangeHistory | ProtoTOC | ProtoAbbreviations
		//| ProtoListOfTables | ProtoListOfFigures | ProtoBibliography | ProtoGlossary | ProtoIndex
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ProtoAbstract
		public RuleCall getProtoAbstractParserRuleCall_0() { return cProtoAbstractParserRuleCall_0; }
		
		//ProtoPreface
		public RuleCall getProtoPrefaceParserRuleCall_1() { return cProtoPrefaceParserRuleCall_1; }
		
		//ProtoPublicationBody
		public RuleCall getProtoPublicationBodyParserRuleCall_2() { return cProtoPublicationBodyParserRuleCall_2; }
		
		//ProtoEpilogue
		public RuleCall getProtoEpilogueParserRuleCall_3() { return cProtoEpilogueParserRuleCall_3; }
		
		//ProtoChangeHistory
		public RuleCall getProtoChangeHistoryParserRuleCall_4() { return cProtoChangeHistoryParserRuleCall_4; }
		
		//ProtoTOC
		public RuleCall getProtoTOCParserRuleCall_5() { return cProtoTOCParserRuleCall_5; }
		
		//ProtoAbbreviations
		public RuleCall getProtoAbbreviationsParserRuleCall_6() { return cProtoAbbreviationsParserRuleCall_6; }
		
		//ProtoListOfTables
		public RuleCall getProtoListOfTablesParserRuleCall_7() { return cProtoListOfTablesParserRuleCall_7; }
		
		//ProtoListOfFigures
		public RuleCall getProtoListOfFiguresParserRuleCall_8() { return cProtoListOfFiguresParserRuleCall_8; }
		
		//ProtoBibliography
		public RuleCall getProtoBibliographyParserRuleCall_9() { return cProtoBibliographyParserRuleCall_9; }
		
		//ProtoGlossary
		public RuleCall getProtoGlossaryParserRuleCall_10() { return cProtoGlossaryParserRuleCall_10; }
		
		//ProtoIndex
		public RuleCall getProtoIndexParserRuleCall_11() { return cProtoIndexParserRuleCall_11; }
	}
	public class SegmentBodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.pub.proto.PubProto.SegmentBody");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Keyword cTitleKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cTitleAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cTitleSTRINGTerminalRuleCall_0_1_0 = (RuleCall)cTitleAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cOptionalKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final Assignment cOptionalAssignment_1_1_0 = (Assignment)cAlternatives_1_1.eContents().get(0);
		private final Keyword cOptionalTrueKeyword_1_1_0_0 = (Keyword)cOptionalAssignment_1_1_0.eContents().get(0);
		private final Keyword cFalseKeyword_1_1_1 = (Keyword)cAlternatives_1_1.eContents().get(1);
		
		//fragment SegmentBody returns ProtoDocumentSegment:
		//	('title:' title=STRING)? ('optional:' (optional?='true' | 'false'))?;
		@Override public ParserRule getRule() { return rule; }
		
		//('title:' title=STRING)? ('optional:' (optional?='true' | 'false'))?
		public Group getGroup() { return cGroup; }
		
		//('title:' title=STRING)?
		public Group getGroup_0() { return cGroup_0; }
		
		//'title:'
		public Keyword getTitleKeyword_0_0() { return cTitleKeyword_0_0; }
		
		//title=STRING
		public Assignment getTitleAssignment_0_1() { return cTitleAssignment_0_1; }
		
		//STRING
		public RuleCall getTitleSTRINGTerminalRuleCall_0_1_0() { return cTitleSTRINGTerminalRuleCall_0_1_0; }
		
		//('optional:' (optional?='true' | 'false'))?
		public Group getGroup_1() { return cGroup_1; }
		
		//'optional:'
		public Keyword getOptionalKeyword_1_0() { return cOptionalKeyword_1_0; }
		
		//(optional?='true' | 'false')
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }
		
		//optional?='true'
		public Assignment getOptionalAssignment_1_1_0() { return cOptionalAssignment_1_1_0; }
		
		//'true'
		public Keyword getOptionalTrueKeyword_1_1_0_0() { return cOptionalTrueKeyword_1_1_0_0; }
		
		//'false'
		public Keyword getFalseKeyword_1_1_1() { return cFalseKeyword_1_1_1; }
	}
	public class ProtoAbstractElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.pub.proto.PubProto.ProtoAbstract");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cProtoAbstractAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cAbstractKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cSegmentBodyParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ProtoAbstract:
		//	{ProtoAbstract}
		//	'Abstract'
		//	'{'
		//	SegmentBody
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{ProtoAbstract} 'Abstract' '{' SegmentBody '}'
		public Group getGroup() { return cGroup; }
		
		//{ProtoAbstract}
		public Action getProtoAbstractAction_0() { return cProtoAbstractAction_0; }
		
		//'Abstract'
		public Keyword getAbstractKeyword_1() { return cAbstractKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//SegmentBody
		public RuleCall getSegmentBodyParserRuleCall_3() { return cSegmentBodyParserRuleCall_3; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class ProtoPrefaceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.pub.proto.PubProto.ProtoPreface");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cProtoPrefaceAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cPrefaceKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cSegmentBodyParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ProtoPreface:
		//	{ProtoPreface}
		//	'Preface'
		//	'{'
		//	SegmentBody
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{ProtoPreface} 'Preface' '{' SegmentBody '}'
		public Group getGroup() { return cGroup; }
		
		//{ProtoPreface}
		public Action getProtoPrefaceAction_0() { return cProtoPrefaceAction_0; }
		
		//'Preface'
		public Keyword getPrefaceKeyword_1() { return cPrefaceKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//SegmentBody
		public RuleCall getSegmentBodyParserRuleCall_3() { return cSegmentBodyParserRuleCall_3; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class ProtoEpilogueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.pub.proto.PubProto.ProtoEpilogue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cProtoEpilogueAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cEpilogueKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cSegmentBodyParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ProtoEpilogue:
		//	{ProtoEpilogue}
		//	'Epilogue'
		//	'{'
		//	SegmentBody
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{ProtoEpilogue} 'Epilogue' '{' SegmentBody '}'
		public Group getGroup() { return cGroup; }
		
		//{ProtoEpilogue}
		public Action getProtoEpilogueAction_0() { return cProtoEpilogueAction_0; }
		
		//'Epilogue'
		public Keyword getEpilogueKeyword_1() { return cEpilogueKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//SegmentBody
		public RuleCall getSegmentBodyParserRuleCall_3() { return cSegmentBodyParserRuleCall_3; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class ProtoPublicationBodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.pub.proto.PubProto.ProtoPublicationBody");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cProtoPublicationBodyAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cBodyKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ProtoPublicationBody:
		//	{ProtoPublicationBody}
		//	'Body'
		//	'{'
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{ProtoPublicationBody} 'Body' '{' '}'
		public Group getGroup() { return cGroup; }
		
		//{ProtoPublicationBody}
		public Action getProtoPublicationBodyAction_0() { return cProtoPublicationBodyAction_0; }
		
		//'Body'
		public Keyword getBodyKeyword_1() { return cBodyKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class ProtoChangeHistoryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.pub.proto.PubProto.ProtoChangeHistory");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cProtoChangeHistoryAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cChangeHistoryKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cSegmentBodyParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ProtoChangeHistory:
		//	{ProtoChangeHistory}
		//	'ChangeHistory'
		//	'{'
		//	SegmentBody
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{ProtoChangeHistory} 'ChangeHistory' '{' SegmentBody '}'
		public Group getGroup() { return cGroup; }
		
		//{ProtoChangeHistory}
		public Action getProtoChangeHistoryAction_0() { return cProtoChangeHistoryAction_0; }
		
		//'ChangeHistory'
		public Keyword getChangeHistoryKeyword_1() { return cChangeHistoryKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//SegmentBody
		public RuleCall getSegmentBodyParserRuleCall_3() { return cSegmentBodyParserRuleCall_3; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class ProtoTOCElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.pub.proto.PubProto.ProtoTOC");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cProtoTOCAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cTableOfContentsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cSegmentBodyParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cMaxLevelKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cMaxLevelAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cMaxLevelNATURALTerminalRuleCall_4_1_0 = (RuleCall)cMaxLevelAssignment_4_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//ProtoTOC:
		//	{ProtoTOC}
		//	'TableOfContents'
		//	'{'
		//	SegmentBody ('maxLevel:' maxLevel=NATURAL)?
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{ProtoTOC} 'TableOfContents' '{' SegmentBody ('maxLevel:' maxLevel=NATURAL)? '}'
		public Group getGroup() { return cGroup; }
		
		//{ProtoTOC}
		public Action getProtoTOCAction_0() { return cProtoTOCAction_0; }
		
		//'TableOfContents'
		public Keyword getTableOfContentsKeyword_1() { return cTableOfContentsKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//SegmentBody
		public RuleCall getSegmentBodyParserRuleCall_3() { return cSegmentBodyParserRuleCall_3; }
		
		//('maxLevel:' maxLevel=NATURAL)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'maxLevel:'
		public Keyword getMaxLevelKeyword_4_0() { return cMaxLevelKeyword_4_0; }
		
		//maxLevel=NATURAL
		public Assignment getMaxLevelAssignment_4_1() { return cMaxLevelAssignment_4_1; }
		
		//NATURAL
		public RuleCall getMaxLevelNATURALTerminalRuleCall_4_1_0() { return cMaxLevelNATURALTerminalRuleCall_4_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class ProtoAbbreviationsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.pub.proto.PubProto.ProtoAbbreviations");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cProtoAbbreviationsAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cAbbreviationsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cSegmentBodyParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ProtoAbbreviations:
		//	{ProtoAbbreviations}
		//	'Abbreviations'
		//	'{'
		//	SegmentBody
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{ProtoAbbreviations} 'Abbreviations' '{' SegmentBody '}'
		public Group getGroup() { return cGroup; }
		
		//{ProtoAbbreviations}
		public Action getProtoAbbreviationsAction_0() { return cProtoAbbreviationsAction_0; }
		
		//'Abbreviations'
		public Keyword getAbbreviationsKeyword_1() { return cAbbreviationsKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//SegmentBody
		public RuleCall getSegmentBodyParserRuleCall_3() { return cSegmentBodyParserRuleCall_3; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class ProtoListOfTablesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.pub.proto.PubProto.ProtoListOfTables");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cProtoListOfTablesAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cListOfTablesKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cSegmentBodyParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ProtoListOfTables:
		//	{ProtoListOfTables}
		//	'ListOfTables'
		//	'{'
		//	SegmentBody
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{ProtoListOfTables} 'ListOfTables' '{' SegmentBody '}'
		public Group getGroup() { return cGroup; }
		
		//{ProtoListOfTables}
		public Action getProtoListOfTablesAction_0() { return cProtoListOfTablesAction_0; }
		
		//'ListOfTables'
		public Keyword getListOfTablesKeyword_1() { return cListOfTablesKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//SegmentBody
		public RuleCall getSegmentBodyParserRuleCall_3() { return cSegmentBodyParserRuleCall_3; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class ProtoListOfFiguresElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.pub.proto.PubProto.ProtoListOfFigures");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cProtoListOfFiguresAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cListOfFiguresKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cSegmentBodyParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ProtoListOfFigures:
		//	{ProtoListOfFigures}
		//	'ListOfFigures'
		//	'{'
		//	SegmentBody
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{ProtoListOfFigures} 'ListOfFigures' '{' SegmentBody '}'
		public Group getGroup() { return cGroup; }
		
		//{ProtoListOfFigures}
		public Action getProtoListOfFiguresAction_0() { return cProtoListOfFiguresAction_0; }
		
		//'ListOfFigures'
		public Keyword getListOfFiguresKeyword_1() { return cListOfFiguresKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//SegmentBody
		public RuleCall getSegmentBodyParserRuleCall_3() { return cSegmentBodyParserRuleCall_3; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class ProtoBibliographyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.pub.proto.PubProto.ProtoBibliography");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cProtoBibliographyAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cBibliographyKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cSegmentBodyParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ProtoBibliography:
		//	{ProtoBibliography}
		//	'Bibliography'
		//	'{'
		//	SegmentBody
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{ProtoBibliography} 'Bibliography' '{' SegmentBody '}'
		public Group getGroup() { return cGroup; }
		
		//{ProtoBibliography}
		public Action getProtoBibliographyAction_0() { return cProtoBibliographyAction_0; }
		
		//'Bibliography'
		public Keyword getBibliographyKeyword_1() { return cBibliographyKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//SegmentBody
		public RuleCall getSegmentBodyParserRuleCall_3() { return cSegmentBodyParserRuleCall_3; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class ProtoGlossaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.pub.proto.PubProto.ProtoGlossary");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cProtoGlossaryAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cGlossaryKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cSegmentBodyParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ProtoGlossary:
		//	{ProtoGlossary}
		//	'Glossary'
		//	'{'
		//	SegmentBody
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{ProtoGlossary} 'Glossary' '{' SegmentBody '}'
		public Group getGroup() { return cGroup; }
		
		//{ProtoGlossary}
		public Action getProtoGlossaryAction_0() { return cProtoGlossaryAction_0; }
		
		//'Glossary'
		public Keyword getGlossaryKeyword_1() { return cGlossaryKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//SegmentBody
		public RuleCall getSegmentBodyParserRuleCall_3() { return cSegmentBodyParserRuleCall_3; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class ProtoIndexElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.pub.proto.PubProto.ProtoIndex");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cProtoIndexAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cIndexKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cSegmentBodyParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ProtoIndex:
		//	{ProtoIndex}
		//	'Index'
		//	'{'
		//	SegmentBody
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{ProtoIndex} 'Index' '{' SegmentBody '}'
		public Group getGroup() { return cGroup; }
		
		//{ProtoIndex}
		public Action getProtoIndexAction_0() { return cProtoIndexAction_0; }
		
		//'Index'
		public Keyword getIndexKeyword_1() { return cIndexKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//SegmentBody
		public RuleCall getSegmentBodyParserRuleCall_3() { return cSegmentBodyParserRuleCall_3; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class ProtoDivisionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.pub.proto.PubProto.ProtoDivision");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cProtoPartParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cProtoAppendixParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cProtoChapterParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cProtoSectionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cProtoSubsectionParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cProtoSubsubsectionParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		///*
		// * DIVISIONS
		// */ ProtoDivision:
		//	ProtoPart | ProtoAppendix | ProtoChapter | ProtoSection | ProtoSubsection | ProtoSubsubsection;
		@Override public ParserRule getRule() { return rule; }
		
		//ProtoPart | ProtoAppendix | ProtoChapter | ProtoSection | ProtoSubsection | ProtoSubsubsection
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ProtoPart
		public RuleCall getProtoPartParserRuleCall_0() { return cProtoPartParserRuleCall_0; }
		
		//ProtoAppendix
		public RuleCall getProtoAppendixParserRuleCall_1() { return cProtoAppendixParserRuleCall_1; }
		
		//ProtoChapter
		public RuleCall getProtoChapterParserRuleCall_2() { return cProtoChapterParserRuleCall_2; }
		
		//ProtoSection
		public RuleCall getProtoSectionParserRuleCall_3() { return cProtoSectionParserRuleCall_3; }
		
		//ProtoSubsection
		public RuleCall getProtoSubsectionParserRuleCall_4() { return cProtoSubsectionParserRuleCall_4; }
		
		//ProtoSubsubsection
		public RuleCall getProtoSubsubsectionParserRuleCall_5() { return cProtoSubsubsectionParserRuleCall_5; }
	}
	public class ProtoDivisionBodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.pub.proto.PubProto.ProtoDivisionBody");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNumberingKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNumberingStyleAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNumberingStyleProtoSequenceNumberStyleEnumRuleCall_1_0 = (RuleCall)cNumberingStyleAssignment_1.eContents().get(0);
		
		//fragment ProtoDivisionBody returns ProtoDivision:
		//	('numbering:' numberingStyle=ProtoSequenceNumberStyle)?;
		@Override public ParserRule getRule() { return rule; }
		
		//('numbering:' numberingStyle=ProtoSequenceNumberStyle)?
		public Group getGroup() { return cGroup; }
		
		//'numbering:'
		public Keyword getNumberingKeyword_0() { return cNumberingKeyword_0; }
		
		//numberingStyle=ProtoSequenceNumberStyle
		public Assignment getNumberingStyleAssignment_1() { return cNumberingStyleAssignment_1; }
		
		//ProtoSequenceNumberStyle
		public RuleCall getNumberingStyleProtoSequenceNumberStyleEnumRuleCall_1_0() { return cNumberingStyleProtoSequenceNumberStyleEnumRuleCall_1_0; }
	}
	public class ProtoPartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.pub.proto.PubProto.ProtoPart");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cProtoPartAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cPartKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cProtoDivisionBodyParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ProtoPart:
		//	{ProtoPart}
		//	'Part'
		//	'{'
		//	ProtoDivisionBody
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{ProtoPart} 'Part' '{' ProtoDivisionBody '}'
		public Group getGroup() { return cGroup; }
		
		//{ProtoPart}
		public Action getProtoPartAction_0() { return cProtoPartAction_0; }
		
		//'Part'
		public Keyword getPartKeyword_1() { return cPartKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//ProtoDivisionBody
		public RuleCall getProtoDivisionBodyParserRuleCall_3() { return cProtoDivisionBodyParserRuleCall_3; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class ProtoAppendixElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.pub.proto.PubProto.ProtoAppendix");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cProtoAppendixAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cAppendixKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cProtoDivisionBodyParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ProtoAppendix:
		//	{ProtoAppendix}
		//	'Appendix'
		//	'{'
		//	ProtoDivisionBody
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{ProtoAppendix} 'Appendix' '{' ProtoDivisionBody '}'
		public Group getGroup() { return cGroup; }
		
		//{ProtoAppendix}
		public Action getProtoAppendixAction_0() { return cProtoAppendixAction_0; }
		
		//'Appendix'
		public Keyword getAppendixKeyword_1() { return cAppendixKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//ProtoDivisionBody
		public RuleCall getProtoDivisionBodyParserRuleCall_3() { return cProtoDivisionBodyParserRuleCall_3; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class ProtoChapterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.pub.proto.PubProto.ProtoChapter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cProtoChapterAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cChapterKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cProtoDivisionBodyParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ProtoChapter:
		//	{ProtoChapter}
		//	'Chapter'
		//	'{'
		//	ProtoDivisionBody
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{ProtoChapter} 'Chapter' '{' ProtoDivisionBody '}'
		public Group getGroup() { return cGroup; }
		
		//{ProtoChapter}
		public Action getProtoChapterAction_0() { return cProtoChapterAction_0; }
		
		//'Chapter'
		public Keyword getChapterKeyword_1() { return cChapterKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//ProtoDivisionBody
		public RuleCall getProtoDivisionBodyParserRuleCall_3() { return cProtoDivisionBodyParserRuleCall_3; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class ProtoSectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.pub.proto.PubProto.ProtoSection");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cProtoSectionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSectionKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cProtoDivisionBodyParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ProtoSection:
		//	{ProtoSection}
		//	'Section'
		//	'{'
		//	ProtoDivisionBody
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{ProtoSection} 'Section' '{' ProtoDivisionBody '}'
		public Group getGroup() { return cGroup; }
		
		//{ProtoSection}
		public Action getProtoSectionAction_0() { return cProtoSectionAction_0; }
		
		//'Section'
		public Keyword getSectionKeyword_1() { return cSectionKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//ProtoDivisionBody
		public RuleCall getProtoDivisionBodyParserRuleCall_3() { return cProtoDivisionBodyParserRuleCall_3; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class ProtoSubsectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.pub.proto.PubProto.ProtoSubsection");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cProtoSubsectionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSubKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cProtoDivisionBodyParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ProtoSubsection:
		//	{ProtoSubsection}
		//	'Sub'
		//	'{'
		//	ProtoDivisionBody
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{ProtoSubsection} 'Sub' '{' ProtoDivisionBody '}'
		public Group getGroup() { return cGroup; }
		
		//{ProtoSubsection}
		public Action getProtoSubsectionAction_0() { return cProtoSubsectionAction_0; }
		
		//'Sub'
		public Keyword getSubKeyword_1() { return cSubKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//ProtoDivisionBody
		public RuleCall getProtoDivisionBodyParserRuleCall_3() { return cProtoDivisionBodyParserRuleCall_3; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class ProtoSubsubsectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.pub.proto.PubProto.ProtoSubsubsection");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cProtoSubsubsectionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSubsubKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cProtoDivisionBodyParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ProtoSubsubsection:
		//	{ProtoSubsubsection}
		//	'Subsub'
		//	'{'
		//	ProtoDivisionBody
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{ProtoSubsubsection} 'Subsub' '{' ProtoDivisionBody '}'
		public Group getGroup() { return cGroup; }
		
		//{ProtoSubsubsection}
		public Action getProtoSubsubsectionAction_0() { return cProtoSubsubsectionAction_0; }
		
		//'Subsub'
		public Keyword getSubsubKeyword_1() { return cSubsubKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//ProtoDivisionBody
		public RuleCall getProtoDivisionBodyParserRuleCall_3() { return cProtoDivisionBodyParserRuleCall_3; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	
	public class PublicationNatureElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.pub.proto.PubProto.PublicationNature");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cPrintEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cPrintPrintKeyword_0_0 = (Keyword)cPrintEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cWebEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cWebWebKeyword_1_0 = (Keyword)cWebEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum PublicationNature:
		//	Print | Web;
		public EnumRule getRule() { return rule; }
		
		//Print | Web
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Print
		public EnumLiteralDeclaration getPrintEnumLiteralDeclaration_0() { return cPrintEnumLiteralDeclaration_0; }
		
		//'Print'
		public Keyword getPrintPrintKeyword_0_0() { return cPrintPrintKeyword_0_0; }
		
		//Web
		public EnumLiteralDeclaration getWebEnumLiteralDeclaration_1() { return cWebEnumLiteralDeclaration_1; }
		
		//'Web'
		public Keyword getWebWebKeyword_1_0() { return cWebWebKeyword_1_0; }
	}
	public class ProtoSequenceNumberStyleElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.pub.proto.PubProto.ProtoSequenceNumberStyle");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cArabicEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cArabicArabicKeyword_0_0 = (Keyword)cArabicEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cCapitalLetterEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cCapitalLetterCapitalLetterKeyword_1_0 = (Keyword)cCapitalLetterEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cSmallLetterEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cSmallLetterSmallLetterKeyword_2_0 = (Keyword)cSmallLetterEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cCapitalRomanEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cCapitalRomanCapitalRomanKeyword_3_0 = (Keyword)cCapitalRomanEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cSmallRomanEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cSmallRomanSmallRomanKeyword_4_0 = (Keyword)cSmallRomanEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cNoneEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cNoneNoneKeyword_5_0 = (Keyword)cNoneEnumLiteralDeclaration_5.eContents().get(0);
		
		//enum ProtoSequenceNumberStyle:
		//	Arabic='arabic' | CapitalLetter='capitalLetter' | SmallLetter='smallLetter' | CapitalRoman='capitalRoman' |
		//	SmallRoman='smallRoman' | None='none';
		public EnumRule getRule() { return rule; }
		
		//Arabic='arabic' | CapitalLetter='capitalLetter' | SmallLetter='smallLetter' | CapitalRoman='capitalRoman' |
		//SmallRoman='smallRoman' | None='none'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Arabic='arabic'
		public EnumLiteralDeclaration getArabicEnumLiteralDeclaration_0() { return cArabicEnumLiteralDeclaration_0; }
		
		//'arabic'
		public Keyword getArabicArabicKeyword_0_0() { return cArabicArabicKeyword_0_0; }
		
		//CapitalLetter='capitalLetter'
		public EnumLiteralDeclaration getCapitalLetterEnumLiteralDeclaration_1() { return cCapitalLetterEnumLiteralDeclaration_1; }
		
		//'capitalLetter'
		public Keyword getCapitalLetterCapitalLetterKeyword_1_0() { return cCapitalLetterCapitalLetterKeyword_1_0; }
		
		//SmallLetter='smallLetter'
		public EnumLiteralDeclaration getSmallLetterEnumLiteralDeclaration_2() { return cSmallLetterEnumLiteralDeclaration_2; }
		
		//'smallLetter'
		public Keyword getSmallLetterSmallLetterKeyword_2_0() { return cSmallLetterSmallLetterKeyword_2_0; }
		
		//CapitalRoman='capitalRoman'
		public EnumLiteralDeclaration getCapitalRomanEnumLiteralDeclaration_3() { return cCapitalRomanEnumLiteralDeclaration_3; }
		
		//'capitalRoman'
		public Keyword getCapitalRomanCapitalRomanKeyword_3_0() { return cCapitalRomanCapitalRomanKeyword_3_0; }
		
		//SmallRoman='smallRoman'
		public EnumLiteralDeclaration getSmallRomanEnumLiteralDeclaration_4() { return cSmallRomanEnumLiteralDeclaration_4; }
		
		//'smallRoman'
		public Keyword getSmallRomanSmallRomanKeyword_4_0() { return cSmallRomanSmallRomanKeyword_4_0; }
		
		//None='none'
		public EnumLiteralDeclaration getNoneEnumLiteralDeclaration_5() { return cNoneEnumLiteralDeclaration_5; }
		
		//'none'
		public Keyword getNoneNoneKeyword_5_0() { return cNoneNoneKeyword_5_0; }
	}
	
	private final PublicationClassElements pPublicationClass;
	private final PublicationNatureElements ePublicationNature;
	private final ProtoSymbolElements pProtoSymbol;
	private final DExpressionElements pDExpression;
	private final ProtoSymbolReferenceElements pProtoSymbolReference;
	private final ProtoDocumentSegmentElements pProtoDocumentSegment;
	private final SegmentBodyElements pSegmentBody;
	private final ProtoAbstractElements pProtoAbstract;
	private final ProtoPrefaceElements pProtoPreface;
	private final ProtoEpilogueElements pProtoEpilogue;
	private final ProtoPublicationBodyElements pProtoPublicationBody;
	private final ProtoChangeHistoryElements pProtoChangeHistory;
	private final ProtoTOCElements pProtoTOC;
	private final ProtoAbbreviationsElements pProtoAbbreviations;
	private final ProtoListOfTablesElements pProtoListOfTables;
	private final ProtoListOfFiguresElements pProtoListOfFigures;
	private final ProtoBibliographyElements pProtoBibliography;
	private final ProtoGlossaryElements pProtoGlossary;
	private final ProtoIndexElements pProtoIndex;
	private final ProtoDivisionElements pProtoDivision;
	private final ProtoDivisionBodyElements pProtoDivisionBody;
	private final ProtoPartElements pProtoPart;
	private final ProtoAppendixElements pProtoAppendix;
	private final ProtoChapterElements pProtoChapter;
	private final ProtoSectionElements pProtoSection;
	private final ProtoSubsectionElements pProtoSubsection;
	private final ProtoSubsubsectionElements pProtoSubsubsection;
	private final ProtoSequenceNumberStyleElements eProtoSequenceNumberStyle;
	
	private final Grammar grammar;
	
	private final DmxGrammarAccess gaDmx;

	@Inject
	public PubProtoGrammarAccess(GrammarProvider grammarProvider,
			DmxGrammarAccess gaDmx) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaDmx = gaDmx;
		this.pPublicationClass = new PublicationClassElements();
		this.ePublicationNature = new PublicationNatureElements();
		this.pProtoSymbol = new ProtoSymbolElements();
		this.pDExpression = new DExpressionElements();
		this.pProtoSymbolReference = new ProtoSymbolReferenceElements();
		this.pProtoDocumentSegment = new ProtoDocumentSegmentElements();
		this.pSegmentBody = new SegmentBodyElements();
		this.pProtoAbstract = new ProtoAbstractElements();
		this.pProtoPreface = new ProtoPrefaceElements();
		this.pProtoEpilogue = new ProtoEpilogueElements();
		this.pProtoPublicationBody = new ProtoPublicationBodyElements();
		this.pProtoChangeHistory = new ProtoChangeHistoryElements();
		this.pProtoTOC = new ProtoTOCElements();
		this.pProtoAbbreviations = new ProtoAbbreviationsElements();
		this.pProtoListOfTables = new ProtoListOfTablesElements();
		this.pProtoListOfFigures = new ProtoListOfFiguresElements();
		this.pProtoBibliography = new ProtoBibliographyElements();
		this.pProtoGlossary = new ProtoGlossaryElements();
		this.pProtoIndex = new ProtoIndexElements();
		this.pProtoDivision = new ProtoDivisionElements();
		this.pProtoDivisionBody = new ProtoDivisionBodyElements();
		this.pProtoPart = new ProtoPartElements();
		this.pProtoAppendix = new ProtoAppendixElements();
		this.pProtoChapter = new ProtoChapterElements();
		this.pProtoSection = new ProtoSectionElements();
		this.pProtoSubsection = new ProtoSubsectionElements();
		this.pProtoSubsubsection = new ProtoSubsubsectionElements();
		this.eProtoSequenceNumberStyle = new ProtoSequenceNumberStyleElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("com.mimacom.ddd.pub.proto.PubProto".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public DmxGrammarAccess getDmxGrammarAccess() {
		return gaDmx;
	}

	
	//PublicationClass:
	//	{PublicationClass}
	//	'publication' 'class'
	//	name=ID
	//	'nature:' nature=PublicationNature ('symbol:' symbols+=ProtoSymbol)* ('htmlPreamble:' htmlPreamble=DRichText)?
	//	('latexClass:' laTeXClass=ID)? ('latexPreamble:' laTeXPreamble=DRichText)?
	//	'segments:' segments+=ProtoDocumentSegment*
	//	'divisions:' divisions+=ProtoDivision*;
	public PublicationClassElements getPublicationClassAccess() {
		return pPublicationClass;
	}
	
	public ParserRule getPublicationClassRule() {
		return getPublicationClassAccess().getRule();
	}
	
	//enum PublicationNature:
	//	Print | Web;
	public PublicationNatureElements getPublicationNatureAccess() {
		return ePublicationNature;
	}
	
	public EnumRule getPublicationNatureRule() {
		return getPublicationNatureAccess().getRule();
	}
	
	//ProtoSymbol:
	//	name=ID;
	public ProtoSymbolElements getProtoSymbolAccess() {
		return pProtoSymbol;
	}
	
	public ParserRule getProtoSymbolRule() {
		return getProtoSymbolAccess().getRule();
	}
	
	//@Override
	//DExpression:
	//	ProtoSymbolReference;
	public DExpressionElements getDExpressionAccess() {
		return pDExpression;
	}
	
	public ParserRule getDExpressionRule() {
		return getDExpressionAccess().getRule();
	}
	
	//ProtoSymbolReference:
	//	target=[ProtoSymbol];
	public ProtoSymbolReferenceElements getProtoSymbolReferenceAccess() {
		return pProtoSymbolReference;
	}
	
	public ParserRule getProtoSymbolReferenceRule() {
		return getProtoSymbolReferenceAccess().getRule();
	}
	
	//ProtoDocumentSegment:
	//	ProtoAbstract | ProtoPreface | ProtoPublicationBody | ProtoEpilogue | ProtoChangeHistory | ProtoTOC |
	//	ProtoAbbreviations | ProtoListOfTables | ProtoListOfFigures | ProtoBibliography | ProtoGlossary | ProtoIndex;
	public ProtoDocumentSegmentElements getProtoDocumentSegmentAccess() {
		return pProtoDocumentSegment;
	}
	
	public ParserRule getProtoDocumentSegmentRule() {
		return getProtoDocumentSegmentAccess().getRule();
	}
	
	//fragment SegmentBody returns ProtoDocumentSegment:
	//	('title:' title=STRING)? ('optional:' (optional?='true' | 'false'))?;
	public SegmentBodyElements getSegmentBodyAccess() {
		return pSegmentBody;
	}
	
	public ParserRule getSegmentBodyRule() {
		return getSegmentBodyAccess().getRule();
	}
	
	//ProtoAbstract:
	//	{ProtoAbstract}
	//	'Abstract'
	//	'{'
	//	SegmentBody
	//	'}';
	public ProtoAbstractElements getProtoAbstractAccess() {
		return pProtoAbstract;
	}
	
	public ParserRule getProtoAbstractRule() {
		return getProtoAbstractAccess().getRule();
	}
	
	//ProtoPreface:
	//	{ProtoPreface}
	//	'Preface'
	//	'{'
	//	SegmentBody
	//	'}';
	public ProtoPrefaceElements getProtoPrefaceAccess() {
		return pProtoPreface;
	}
	
	public ParserRule getProtoPrefaceRule() {
		return getProtoPrefaceAccess().getRule();
	}
	
	//ProtoEpilogue:
	//	{ProtoEpilogue}
	//	'Epilogue'
	//	'{'
	//	SegmentBody
	//	'}';
	public ProtoEpilogueElements getProtoEpilogueAccess() {
		return pProtoEpilogue;
	}
	
	public ParserRule getProtoEpilogueRule() {
		return getProtoEpilogueAccess().getRule();
	}
	
	//ProtoPublicationBody:
	//	{ProtoPublicationBody}
	//	'Body'
	//	'{'
	//	'}';
	public ProtoPublicationBodyElements getProtoPublicationBodyAccess() {
		return pProtoPublicationBody;
	}
	
	public ParserRule getProtoPublicationBodyRule() {
		return getProtoPublicationBodyAccess().getRule();
	}
	
	//ProtoChangeHistory:
	//	{ProtoChangeHistory}
	//	'ChangeHistory'
	//	'{'
	//	SegmentBody
	//	'}';
	public ProtoChangeHistoryElements getProtoChangeHistoryAccess() {
		return pProtoChangeHistory;
	}
	
	public ParserRule getProtoChangeHistoryRule() {
		return getProtoChangeHistoryAccess().getRule();
	}
	
	//ProtoTOC:
	//	{ProtoTOC}
	//	'TableOfContents'
	//	'{'
	//	SegmentBody ('maxLevel:' maxLevel=NATURAL)?
	//	'}';
	public ProtoTOCElements getProtoTOCAccess() {
		return pProtoTOC;
	}
	
	public ParserRule getProtoTOCRule() {
		return getProtoTOCAccess().getRule();
	}
	
	//ProtoAbbreviations:
	//	{ProtoAbbreviations}
	//	'Abbreviations'
	//	'{'
	//	SegmentBody
	//	'}';
	public ProtoAbbreviationsElements getProtoAbbreviationsAccess() {
		return pProtoAbbreviations;
	}
	
	public ParserRule getProtoAbbreviationsRule() {
		return getProtoAbbreviationsAccess().getRule();
	}
	
	//ProtoListOfTables:
	//	{ProtoListOfTables}
	//	'ListOfTables'
	//	'{'
	//	SegmentBody
	//	'}';
	public ProtoListOfTablesElements getProtoListOfTablesAccess() {
		return pProtoListOfTables;
	}
	
	public ParserRule getProtoListOfTablesRule() {
		return getProtoListOfTablesAccess().getRule();
	}
	
	//ProtoListOfFigures:
	//	{ProtoListOfFigures}
	//	'ListOfFigures'
	//	'{'
	//	SegmentBody
	//	'}';
	public ProtoListOfFiguresElements getProtoListOfFiguresAccess() {
		return pProtoListOfFigures;
	}
	
	public ParserRule getProtoListOfFiguresRule() {
		return getProtoListOfFiguresAccess().getRule();
	}
	
	//ProtoBibliography:
	//	{ProtoBibliography}
	//	'Bibliography'
	//	'{'
	//	SegmentBody
	//	'}';
	public ProtoBibliographyElements getProtoBibliographyAccess() {
		return pProtoBibliography;
	}
	
	public ParserRule getProtoBibliographyRule() {
		return getProtoBibliographyAccess().getRule();
	}
	
	//ProtoGlossary:
	//	{ProtoGlossary}
	//	'Glossary'
	//	'{'
	//	SegmentBody
	//	'}';
	public ProtoGlossaryElements getProtoGlossaryAccess() {
		return pProtoGlossary;
	}
	
	public ParserRule getProtoGlossaryRule() {
		return getProtoGlossaryAccess().getRule();
	}
	
	//ProtoIndex:
	//	{ProtoIndex}
	//	'Index'
	//	'{'
	//	SegmentBody
	//	'}';
	public ProtoIndexElements getProtoIndexAccess() {
		return pProtoIndex;
	}
	
	public ParserRule getProtoIndexRule() {
		return getProtoIndexAccess().getRule();
	}
	
	///*
	// * DIVISIONS
	// */ ProtoDivision:
	//	ProtoPart | ProtoAppendix | ProtoChapter | ProtoSection | ProtoSubsection | ProtoSubsubsection;
	public ProtoDivisionElements getProtoDivisionAccess() {
		return pProtoDivision;
	}
	
	public ParserRule getProtoDivisionRule() {
		return getProtoDivisionAccess().getRule();
	}
	
	//fragment ProtoDivisionBody returns ProtoDivision:
	//	('numbering:' numberingStyle=ProtoSequenceNumberStyle)?;
	public ProtoDivisionBodyElements getProtoDivisionBodyAccess() {
		return pProtoDivisionBody;
	}
	
	public ParserRule getProtoDivisionBodyRule() {
		return getProtoDivisionBodyAccess().getRule();
	}
	
	//ProtoPart:
	//	{ProtoPart}
	//	'Part'
	//	'{'
	//	ProtoDivisionBody
	//	'}';
	public ProtoPartElements getProtoPartAccess() {
		return pProtoPart;
	}
	
	public ParserRule getProtoPartRule() {
		return getProtoPartAccess().getRule();
	}
	
	//ProtoAppendix:
	//	{ProtoAppendix}
	//	'Appendix'
	//	'{'
	//	ProtoDivisionBody
	//	'}';
	public ProtoAppendixElements getProtoAppendixAccess() {
		return pProtoAppendix;
	}
	
	public ParserRule getProtoAppendixRule() {
		return getProtoAppendixAccess().getRule();
	}
	
	//ProtoChapter:
	//	{ProtoChapter}
	//	'Chapter'
	//	'{'
	//	ProtoDivisionBody
	//	'}';
	public ProtoChapterElements getProtoChapterAccess() {
		return pProtoChapter;
	}
	
	public ParserRule getProtoChapterRule() {
		return getProtoChapterAccess().getRule();
	}
	
	//ProtoSection:
	//	{ProtoSection}
	//	'Section'
	//	'{'
	//	ProtoDivisionBody
	//	'}';
	public ProtoSectionElements getProtoSectionAccess() {
		return pProtoSection;
	}
	
	public ParserRule getProtoSectionRule() {
		return getProtoSectionAccess().getRule();
	}
	
	//ProtoSubsection:
	//	{ProtoSubsection}
	//	'Sub'
	//	'{'
	//	ProtoDivisionBody
	//	'}';
	public ProtoSubsectionElements getProtoSubsectionAccess() {
		return pProtoSubsection;
	}
	
	public ParserRule getProtoSubsectionRule() {
		return getProtoSubsectionAccess().getRule();
	}
	
	//ProtoSubsubsection:
	//	{ProtoSubsubsection}
	//	'Subsub'
	//	'{'
	//	ProtoDivisionBody
	//	'}';
	public ProtoSubsubsectionElements getProtoSubsubsectionAccess() {
		return pProtoSubsubsection;
	}
	
	public ParserRule getProtoSubsubsectionRule() {
		return getProtoSubsubsectionAccess().getRule();
	}
	
	//enum ProtoSequenceNumberStyle:
	//	Arabic='arabic' | CapitalLetter='capitalLetter' | SmallLetter='smallLetter' | CapitalRoman='capitalRoman' |
	//	SmallRoman='smallRoman' | None='none';
	public ProtoSequenceNumberStyleElements getProtoSequenceNumberStyleAccess() {
		return eProtoSequenceNumberStyle;
	}
	
	public EnumRule getProtoSequenceNumberStyleRule() {
		return getProtoSequenceNumberStyleAccess().getRule();
	}
	
	//DNamespace:
	//	'namespace'
	//	name=DQualifiedName
	//	imports+=DImport*
	//	model=DmxModel;
	public DmxGrammarAccess.DNamespaceElements getDNamespaceAccess() {
		return gaDmx.getDNamespaceAccess();
	}
	
	public ParserRule getDNamespaceRule() {
		return getDNamespaceAccess().getRule();
	}
	
	//DNote:
	//	'NOTE'
	//	name=ID
	//	'{'
	//	text=DRichText
	//	color=DNoteColor?
	//	'}';
	public DmxGrammarAccess.DNoteElements getDNoteAccess() {
		return gaDmx.getDNoteAccess();
	}
	
	public ParserRule getDNoteRule() {
		return getDNoteAccess().getRule();
	}
	
	//enum DNoteColor:
	//	WHITE='white' | RED='red' | ORANGE='orange' | YELLOW='yellow' | GREEN='green' | BLUE='blue' | PINK='pink' |
	//	GREY='grey';
	public DmxGrammarAccess.DNoteColorElements getDNoteColorAccess() {
		return gaDmx.getDNoteColorAccess();
	}
	
	public EnumRule getDNoteColorRule() {
		return getDNoteColorAccess().getRule();
	}
	
	//DmxModel:
	//	{DmxModel} types+=DmxArchetype*
	//	filters+=DmxFilter*
	//	// For unit-testing purposes:
	//	tests+=DmxTest*;
	public DmxGrammarAccess.DmxModelElements getDmxModelAccess() {
		return gaDmx.getDmxModelAccess();
	}
	
	public ParserRule getDmxModelRule() {
		return getDmxModelAccess().getRule();
	}
	
	//DImport:
	//	'import' importedNamespace=DQualifiedNameWithWildcard;
	public DmxGrammarAccess.DImportElements getDImportAccess() {
		return gaDmx.getDImportAccess();
	}
	
	public ParserRule getDImportRule() {
		return getDImportAccess().getRule();
	}
	
	///* 
	// * Testing
	// */ DmxTest:
	//	'test'
	//	name=ID ('context'
	//	context+=DmxTestContext (',' context+=DmxTestContext)*)?
	//	'{'
	//	expr=super::DExpression
	//	'}';
	public DmxGrammarAccess.DmxTestElements getDmxTestAccess() {
		return gaDmx.getDmxTestAccess();
	}
	
	public ParserRule getDmxTestRule() {
		return getDmxTestAccess().getRule();
	}
	
	//DmxTestContext:
	//	name=ID
	//	':'
	//	type=[DType] multiplicity=DMultiplicity? (':=' (value=DmxLiteralExpression | value=DmxLiteralListExpression))?;
	public DmxGrammarAccess.DmxTestContextElements getDmxTestContextAccess() {
		return gaDmx.getDmxTestContextAccess();
	}
	
	public ParserRule getDmxTestContextRule() {
		return getDmxTestContextAccess().getRule();
	}
	
	//enum DmxBaseType:
	//	VOID | BOOLEAN | NUMBER | TEXT | IDENTIFIER | TIMEPOINT | STATE /*transition*/ | STATE_EVENT | COMPLEX | NOTIFICATION
	//	/*sent* */ | SERVICE /*invoked* */;
	public DmxGrammarAccess.DmxBaseTypeElements getDmxBaseTypeAccess() {
		return gaDmx.getDmxBaseTypeAccess();
	}
	
	public EnumRule getDmxBaseTypeRule() {
		return getDmxBaseTypeAccess().getRule();
	}
	
	//DmxBaseTypeSet:
	//	name=ID
	//	'in'
	//	'(' members+=DmxBaseType (',' members+=DmxBaseType)+ ')';
	public DmxGrammarAccess.DmxBaseTypeSetElements getDmxBaseTypeSetAccess() {
		return gaDmx.getDmxBaseTypeSetAccess();
	}
	
	public ParserRule getDmxBaseTypeSetRule() {
		return getDmxBaseTypeSetAccess().getRule();
	}
	
	//DmxArchetype:
	//	'archetype'
	//	name=ID
	//	'is'
	//	baseType=DmxBaseType
	//	description=DRichText?;
	public DmxGrammarAccess.DmxArchetypeElements getDmxArchetypeAccess() {
		return gaDmx.getDmxArchetypeAccess();
	}
	
	public ParserRule getDmxArchetypeRule() {
		return getDmxArchetypeAccess().getRule();
	}
	
	//DmxFilter:
	//	'filter'
	//	name=ID
	//	'(' (parameters+=DmxFilterParameter (',' parameters+=DmxFilterParameter)*)? ')'
	//	':'
	//	typeDesc=DmxFilterTypeDescriptor ('with' withTypeSet=DmxBaseTypeSet)?;
	public DmxGrammarAccess.DmxFilterElements getDmxFilterAccess() {
		return gaDmx.getDmxFilterAccess();
	}
	
	public ParserRule getDmxFilterRule() {
		return getDmxFilterAccess().getRule();
	}
	
	//DmxFilterTypeDescriptor:
	//	(single=DmxBaseType
	//	| multiple=[DmxBaseTypeSet]) collection?='*'?;
	public DmxGrammarAccess.DmxFilterTypeDescriptorElements getDmxFilterTypeDescriptorAccess() {
		return gaDmx.getDmxFilterTypeDescriptorAccess();
	}
	
	public ParserRule getDmxFilterTypeDescriptorRule() {
		return getDmxFilterTypeDescriptorAccess().getRule();
	}
	
	//DmxFilterParameter:
	//	name=ID
	//	':'
	//	typeDesc=DmxFilterTypeDescriptor;
	public DmxGrammarAccess.DmxFilterParameterElements getDmxFilterParameterAccess() {
		return gaDmx.getDmxFilterParameterAccess();
	}
	
	public ParserRule getDmxFilterParameterRule() {
		return getDmxFilterParameterAccess().getRule();
	}
	
	//DRichText:
	//	segments+=DmxTextOnly
	//	| segments+=DmxTextStart
	//	segments+=super::DExpression (segments+=DmxTextMiddle segments+=super::DExpression)*
	//	segments+=DmxTextEnd;
	public DmxGrammarAccess.DRichTextElements getDRichTextAccess() {
		return gaDmx.getDRichTextAccess();
	}
	
	public ParserRule getDRichTextRule() {
		return getDRichTextAccess().getRule();
	}
	
	//DmxTextOnly DTextSegment:
	//	value=PLAIN_TEXT_ONLY;
	public DmxGrammarAccess.DmxTextOnlyElements getDmxTextOnlyAccess() {
		return gaDmx.getDmxTextOnlyAccess();
	}
	
	public ParserRule getDmxTextOnlyRule() {
		return getDmxTextOnlyAccess().getRule();
	}
	
	//DmxTextStart DTextSegment:
	//	value=RICH_TEXT_START;
	public DmxGrammarAccess.DmxTextStartElements getDmxTextStartAccess() {
		return gaDmx.getDmxTextStartAccess();
	}
	
	public ParserRule getDmxTextStartRule() {
		return getDmxTextStartAccess().getRule();
	}
	
	//DmxTextMiddle DTextSegment:
	//	value=RICH_TEXT_MIDDLE;
	public DmxGrammarAccess.DmxTextMiddleElements getDmxTextMiddleAccess() {
		return gaDmx.getDmxTextMiddleAccess();
	}
	
	public ParserRule getDmxTextMiddleRule() {
		return getDmxTextMiddleAccess().getRule();
	}
	
	//DmxTextEnd DTextSegment:
	//	value=RICH_TEXT_END;
	public DmxGrammarAccess.DmxTextEndElements getDmxTextEndAccess() {
		return gaDmx.getDmxTextEndAccess();
	}
	
	public ParserRule getDmxTextEndRule() {
		return getDmxTextEndAccess().getRule();
	}
	
	//DmxNavigableMemberReference DExpression:
	//	DmxPrimaryExpression (=> ({DmxAssignment.precedingNavigationSegment=current} '.'
	//	assignToMember=[DNavigableMember] DmxOpSingleAssign) value=DmxOrExpression
	//	| => ({DmxMemberNavigation.precedingNavigationSegment=current} '.') member=[DNavigableMember] (=>
	//	explicitOperationCall?='(' // => boolean => has 0.n explicit arguments
	//	callArguments=DmxCallArguments
	//	')'
	//	| before?="@before")?)*;
	public DmxGrammarAccess.DmxNavigableMemberReferenceElements getDmxNavigableMemberReferenceAccess() {
		return gaDmx.getDmxNavigableMemberReferenceAccess();
	}
	
	public ParserRule getDmxNavigableMemberReferenceRule() {
		return getDmxNavigableMemberReferenceAccess().getRule();
	}
	
	//DmxCallArguments:
	//	{DmxCallArguments} (arguments+=DmxPredicateWithCorrelationVariable (','
	//	arguments+=DmxPredicateWithCorrelationVariable)*)?;
	public DmxGrammarAccess.DmxCallArgumentsElements getDmxCallArgumentsAccess() {
		return gaDmx.getDmxCallArgumentsAccess();
	}
	
	public ParserRule getDmxCallArgumentsRule() {
		return getDmxCallArgumentsAccess().getRule();
	}
	
	//DmxAssignment DExpression:
	//	{DmxAssignment} assignToMember=[DNavigableMember] DmxOpSingleAssign value=DmxOrExpression;
	public DmxGrammarAccess.DmxAssignmentElements getDmxAssignmentAccess() {
		return gaDmx.getDmxAssignmentAccess();
	}
	
	public ParserRule getDmxAssignmentRule() {
		return getDmxAssignmentAccess().getRule();
	}
	
	//DmxOpSingleAssign:
	//	':=';
	public DmxGrammarAccess.DmxOpSingleAssignElements getDmxOpSingleAssignAccess() {
		return gaDmx.getDmxOpSingleAssignAccess();
	}
	
	public ParserRule getDmxOpSingleAssignRule() {
		return getDmxOpSingleAssignAccess().getRule();
	}
	
	//DmxPredicateWithCorrelationVariable DExpression:
	//	{DmxPredicateWithCorrelationVariable} correlationVariable=DmxCorrelationVariable
	//	'|'
	//	predicate=DmxOrExpression
	//	| DmxOrExpression;
	public DmxGrammarAccess.DmxPredicateWithCorrelationVariableElements getDmxPredicateWithCorrelationVariableAccess() {
		return gaDmx.getDmxPredicateWithCorrelationVariableAccess();
	}
	
	public ParserRule getDmxPredicateWithCorrelationVariableRule() {
		return getDmxPredicateWithCorrelationVariableAccess().getRule();
	}
	
	//DmxCorrelationVariable:
	//	name=ID;
	public DmxGrammarAccess.DmxCorrelationVariableElements getDmxCorrelationVariableAccess() {
		return gaDmx.getDmxCorrelationVariableAccess();
	}
	
	public ParserRule getDmxCorrelationVariableRule() {
		return getDmxCorrelationVariableAccess().getRule();
	}
	
	////	(':' type=[DType])? => type is always NULL!
	//DmxOrExpression DExpression:
	//	DmxAndExpression (=> ({DmxBinaryOperation.leftOperand=current} operator=DmxOpOr) rightOperand=DmxAndExpression)*;
	public DmxGrammarAccess.DmxOrExpressionElements getDmxOrExpressionAccess() {
		return gaDmx.getDmxOrExpressionAccess();
	}
	
	public ParserRule getDmxOrExpressionRule() {
		return getDmxOrExpressionAccess().getRule();
	}
	
	//enum DmxOpOr returns DmxBinaryOperator:
	//	OR | OR='or' | XOR | XOR='xor';
	public DmxGrammarAccess.DmxOpOrElements getDmxOpOrAccess() {
		return gaDmx.getDmxOpOrAccess();
	}
	
	public EnumRule getDmxOpOrRule() {
		return getDmxOpOrAccess().getRule();
	}
	
	//DmxAndExpression DExpression:
	//	DmxEqualityExpression (=> ({DmxBinaryOperation.leftOperand=current} operator=DmxOpAnd)
	//	rightOperand=DmxEqualityExpression)*;
	public DmxGrammarAccess.DmxAndExpressionElements getDmxAndExpressionAccess() {
		return gaDmx.getDmxAndExpressionAccess();
	}
	
	public ParserRule getDmxAndExpressionRule() {
		return getDmxAndExpressionAccess().getRule();
	}
	
	//enum DmxOpAnd returns DmxBinaryOperator:
	//	AND | AND='and';
	public DmxGrammarAccess.DmxOpAndElements getDmxOpAndAccess() {
		return gaDmx.getDmxOpAndAccess();
	}
	
	public EnumRule getDmxOpAndRule() {
		return getDmxOpAndAccess().getRule();
	}
	
	//DmxEqualityExpression DExpression:
	//	DmxRelationalExpression (=> ({DmxBinaryOperation.leftOperand=current} operator=DmxOpEquality)
	//	rightOperand=DmxRelationalExpression)*;
	public DmxGrammarAccess.DmxEqualityExpressionElements getDmxEqualityExpressionAccess() {
		return gaDmx.getDmxEqualityExpressionAccess();
	}
	
	public ParserRule getDmxEqualityExpressionRule() {
		return getDmxEqualityExpressionAccess().getRule();
	}
	
	//enum DmxOpEquality returns DmxBinaryOperator:
	//	EQUAL='=' | NOT_EQUAL='!=' | NOT_EQUAL='<>';
	public DmxGrammarAccess.DmxOpEqualityElements getDmxOpEqualityAccess() {
		return gaDmx.getDmxOpEqualityAccess();
	}
	
	public EnumRule getDmxOpEqualityRule() {
		return getDmxOpEqualityAccess().getRule();
	}
	
	//DmxRelationalExpression DExpression:
	//	DmxOtherOperatorExpression (=> ({DmxInstanceOfExpression.expression=current} DmxOpInstanceOf) type=[DType] | =>
	//	({DmxBinaryOperation.leftOperand=current} operator=OpCompare) rightOperand=DmxOtherOperatorExpression)*;
	public DmxGrammarAccess.DmxRelationalExpressionElements getDmxRelationalExpressionAccess() {
		return gaDmx.getDmxRelationalExpressionAccess();
	}
	
	public ParserRule getDmxRelationalExpressionRule() {
		return getDmxRelationalExpressionAccess().getRule();
	}
	
	//DmxOpInstanceOf:
	//	'ISA' | 'isa';
	public DmxGrammarAccess.DmxOpInstanceOfElements getDmxOpInstanceOfAccess() {
		return gaDmx.getDmxOpInstanceOfAccess();
	}
	
	public ParserRule getDmxOpInstanceOfRule() {
		return getDmxOpInstanceOfAccess().getRule();
	}
	
	//enum OpCompare returns DmxBinaryOperator:
	//	LESS='<' | LESS_OR_EQUAL='<=' | LESS_OR_EQUAL='≤' | GREATER_OR_EQUAL='>=' | GREATER_OR_EQUAL='≥' | GREATER='>';
	public DmxGrammarAccess.OpCompareElements getOpCompareAccess() {
		return gaDmx.getOpCompareAccess();
	}
	
	public EnumRule getOpCompareRule() {
		return getOpCompareAccess().getRule();
	}
	
	//DmxOtherOperatorExpression DExpression:
	//	DmxAdditiveExpression (=> ({DmxBinaryOperation.leftOperand=current} operator=OpOther)
	//	rightOperand=DmxAdditiveExpression)*;
	public DmxGrammarAccess.DmxOtherOperatorExpressionElements getDmxOtherOperatorExpressionAccess() {
		return gaDmx.getDmxOtherOperatorExpressionAccess();
	}
	
	public ParserRule getDmxOtherOperatorExpressionRule() {
		return getDmxOtherOperatorExpressionAccess().getRule();
	}
	
	//enum OpOther returns DmxBinaryOperator:
	//	IN | IN='in' | UNTIL='..' | SINGLE_ARROW='->' | DOUBLE_ARROW='=>';
	public DmxGrammarAccess.OpOtherElements getOpOtherAccess() {
		return gaDmx.getOpOtherAccess();
	}
	
	public EnumRule getOpOtherRule() {
		return getOpOtherAccess().getRule();
	}
	
	//DmxAdditiveExpression DExpression:
	//	DmxMultiplicativeExpression (=> ({DmxBinaryOperation.leftOperand=current} operator=OpAdd)
	//	rightOperand=DmxMultiplicativeExpression)*;
	public DmxGrammarAccess.DmxAdditiveExpressionElements getDmxAdditiveExpressionAccess() {
		return gaDmx.getDmxAdditiveExpressionAccess();
	}
	
	public ParserRule getDmxAdditiveExpressionRule() {
		return getDmxAdditiveExpressionAccess().getRule();
	}
	
	//enum OpAdd returns DmxBinaryOperator:
	//	ADD='+' | SUBTRACT='-';
	public DmxGrammarAccess.OpAddElements getOpAddAccess() {
		return gaDmx.getOpAddAccess();
	}
	
	public EnumRule getOpAddRule() {
		return getOpAddAccess().getRule();
	}
	
	//DmxMultiplicativeExpression DExpression:
	//	DmxUnaryOperation (=> ({DmxBinaryOperation.leftOperand=current} operator=OpMulti) rightOperand=DmxUnaryOperation)*;
	public DmxGrammarAccess.DmxMultiplicativeExpressionElements getDmxMultiplicativeExpressionAccess() {
		return gaDmx.getDmxMultiplicativeExpressionAccess();
	}
	
	public ParserRule getDmxMultiplicativeExpressionRule() {
		return getDmxMultiplicativeExpressionAccess().getRule();
	}
	
	//enum OpMulti returns DmxBinaryOperator:
	//	MULTIPLY='*' | DIVIDE='/' | POWER='**' | MODULO='%';
	public DmxGrammarAccess.OpMultiElements getOpMultiAccess() {
		return gaDmx.getOpMultiAccess();
	}
	
	public EnumRule getOpMultiRule() {
		return getOpMultiAccess().getRule();
	}
	
	//DmxUnaryOperation DExpression:
	//	{DmxUnaryOperation} operator=OpUnary operand=DmxUnaryOperation
	//	| DmxCastExpression;
	public DmxGrammarAccess.DmxUnaryOperationElements getDmxUnaryOperationAccess() {
		return gaDmx.getDmxUnaryOperationAccess();
	}
	
	public ParserRule getDmxUnaryOperationRule() {
		return getDmxUnaryOperationAccess().getRule();
	}
	
	//enum OpUnary returns DmxUnaryOperator:
	//	PLUS='+' | MINUS='-' | NOT='!' | NOT | NOT='not';
	public DmxGrammarAccess.OpUnaryElements getOpUnaryAccess() {
		return gaDmx.getOpUnaryAccess();
	}
	
	public EnumRule getOpUnaryRule() {
		return getOpUnaryAccess().getRule();
	}
	
	//DmxCastExpression DExpression:
	//	DmxNavigableMemberReference (=> ({DmxCastExpression.target=current} DmxOpCast) type=[DType])?;
	public DmxGrammarAccess.DmxCastExpressionElements getDmxCastExpressionAccess() {
		return gaDmx.getDmxCastExpressionAccess();
	}
	
	public ParserRule getDmxCastExpressionRule() {
		return getDmxCastExpressionAccess().getRule();
	}
	
	//DmxOpCast:
	//	'AS' | 'as';
	public DmxGrammarAccess.DmxOpCastElements getDmxOpCastAccess() {
		return gaDmx.getDmxOpCastAccess();
	}
	
	public ParserRule getDmxOpCastRule() {
		return getDmxOpCastAccess().getRule();
	}
	
	//DmxPrimaryExpression DExpression:
	//	DmxLiteralExpression | DmxParenthesizedExpression | DmxListExpression | DmxFunctionCall | DmxStaticReference |
	//	DmxContextReference | DmxIfExpression;
	public DmxGrammarAccess.DmxPrimaryExpressionElements getDmxPrimaryExpressionAccess() {
		return gaDmx.getDmxPrimaryExpressionAccess();
	}
	
	public ParserRule getDmxPrimaryExpressionRule() {
		return getDmxPrimaryExpressionAccess().getRule();
	}
	
	//DmxLiteralExpression DExpression:
	//	DmxBooleanLiteral | DmxStringLiteral | DmxNaturalLiteral | DmxDecimalLiteral | DmxUndefinedLiteral | DmxEntity |
	//	DmxDetail;
	public DmxGrammarAccess.DmxLiteralExpressionElements getDmxLiteralExpressionAccess() {
		return gaDmx.getDmxLiteralExpressionAccess();
	}
	
	public ParserRule getDmxLiteralExpressionRule() {
		return getDmxLiteralExpressionAccess().getRule();
	}
	
	//DmxParenthesizedExpression DExpression:
	//	'(' super::DExpression ')';
	public DmxGrammarAccess.DmxParenthesizedExpressionElements getDmxParenthesizedExpressionAccess() {
		return gaDmx.getDmxParenthesizedExpressionAccess();
	}
	
	public ParserRule getDmxParenthesizedExpressionRule() {
		return getDmxParenthesizedExpressionAccess().getRule();
	}
	
	//DmxListExpression DExpression:
	//	{DmxListExpression}
	//	'{' (elements+=super::DExpression (',' elements+=super::DExpression)*)?
	//	'}';
	public DmxGrammarAccess.DmxListExpressionElements getDmxListExpressionAccess() {
		return gaDmx.getDmxListExpressionAccess();
	}
	
	public ParserRule getDmxListExpressionRule() {
		return getDmxListExpressionAccess().getRule();
	}
	
	//DmxLiteralListExpression DExpression:
	//	{DmxListExpression}
	//	'{' (elements+=DmxLiteralExpression (',' elements+=DmxLiteralExpression)*)?
	//	'}';
	public DmxGrammarAccess.DmxLiteralListExpressionElements getDmxLiteralListExpressionAccess() {
		return gaDmx.getDmxLiteralListExpressionAccess();
	}
	
	public ParserRule getDmxLiteralListExpressionRule() {
		return getDmxLiteralListExpressionAccess().getRule();
	}
	
	//DmxFunctionCall DExpression:
	//	{DmxFunctionCall} function=[DmxFilter]
	//	'('
	//	callArguments=DmxFunctionCallArguments
	//	')';
	public DmxGrammarAccess.DmxFunctionCallElements getDmxFunctionCallAccess() {
		return gaDmx.getDmxFunctionCallAccess();
	}
	
	public ParserRule getDmxFunctionCallRule() {
		return getDmxFunctionCallAccess().getRule();
	}
	
	//DmxFunctionCallArguments DmxCallArguments:
	//	{DmxCallArguments} (arguments+=super::DExpression (',' arguments+=super::DExpression)*)?;
	public DmxGrammarAccess.DmxFunctionCallArgumentsElements getDmxFunctionCallArgumentsAccess() {
		return gaDmx.getDmxFunctionCallArgumentsAccess();
	}
	
	public ParserRule getDmxFunctionCallArgumentsRule() {
		return getDmxFunctionCallArgumentsAccess().getRule();
	}
	
	//DmxEntity:
	//	'entity'
	//	DmxComplexObject;
	public DmxGrammarAccess.DmxEntityElements getDmxEntityAccess() {
		return gaDmx.getDmxEntityAccess();
	}
	
	public ParserRule getDmxEntityRule() {
		return getDmxEntityAccess().getRule();
	}
	
	//DmxDetail:
	//	'detail'
	//	DmxComplexObject;
	public DmxGrammarAccess.DmxDetailElements getDmxDetailAccess() {
		return gaDmx.getDmxDetailAccess();
	}
	
	public ParserRule getDmxDetailRule() {
		return getDmxDetailAccess().getRule();
	}
	
	//fragment DmxComplexObject:
	//	type=[DComplexType] DmxFieldListStartSymbol
	//	fields+=DmxField*
	//	'}';
	public DmxGrammarAccess.DmxComplexObjectElements getDmxComplexObjectAccess() {
		return gaDmx.getDmxComplexObjectAccess();
	}
	
	public ParserRule getDmxComplexObjectRule() {
		return getDmxComplexObjectAccess().getRule();
	}
	
	//DmxField:
	//	feature=[DFeature] "=" value=super::DExpression
	//	description=DRichText?
	//	notes+=DNote*;
	public DmxGrammarAccess.DmxFieldElements getDmxFieldAccess() {
		return gaDmx.getDmxFieldAccess();
	}
	
	public ParserRule getDmxFieldRule() {
		return getDmxFieldAccess().getRule();
	}
	
	//DmxStaticReference DExpression:
	//	{DmxStaticReference}
	//	'['
	//	target=[IStaticReferenceTarget|DQualifiedName] ('#' member=[DNavigableMember])? ("|" (displayName=ID | plural?="*"))?
	//	-> ']';
	public DmxGrammarAccess.DmxStaticReferenceElements getDmxStaticReferenceAccess() {
		return gaDmx.getDmxStaticReferenceAccess();
	}
	
	public ParserRule getDmxStaticReferenceRule() {
		return getDmxStaticReferenceAccess().getRule();
	}
	
	//// '->' gives precedence to this ']' over PLAIN_TEXT_MIDDLE ('=>' works too but generates more lookahead overhead)
	//DmxContextReference DExpression:
	//	{DmxContextReference} target=[DNamedElement] (before?="@before"
	//	| '.' all?='all')?;
	public DmxGrammarAccess.DmxContextReferenceElements getDmxContextReferenceAccess() {
		return gaDmx.getDmxContextReferenceAccess();
	}
	
	public ParserRule getDmxContextReferenceRule() {
		return getDmxContextReferenceAccess().getRule();
	}
	
	//DmxIfExpression DExpression:
	//	{DmxIfExpression}
	//	'if' if=super::DExpression
	//	'then' then=super::DExpression (=> 'else' else=super::DExpression)?
	//	'end';
	public DmxGrammarAccess.DmxIfExpressionElements getDmxIfExpressionAccess() {
		return gaDmx.getDmxIfExpressionAccess();
	}
	
	public ParserRule getDmxIfExpressionRule() {
		return getDmxIfExpressionAccess().getRule();
	}
	
	//DMultiplicity:
	//	shorthand=DMultiplicityShorthand | '(' minOccurs=NATURAL '..' maxOccurs=MULTIPLICITY ')';
	public DmxGrammarAccess.DMultiplicityElements getDMultiplicityAccess() {
		return gaDmx.getDMultiplicityAccess();
	}
	
	public ParserRule getDMultiplicityRule() {
		return getDMultiplicityAccess().getRule();
	}
	
	//enum DMultiplicityShorthand:
	//	ZERO_OR_ONE='?' | ONE_OR_MORE='+' | ZERO_OR_MORE='*';
	public DmxGrammarAccess.DMultiplicityShorthandElements getDMultiplicityShorthandAccess() {
		return gaDmx.getDMultiplicityShorthandAccess();
	}
	
	public EnumRule getDMultiplicityShorthandRule() {
		return getDMultiplicityShorthandAccess().getRule();
	}
	
	//MULTIPLICITY ecore::EInt:
	//	NATURAL | '*';
	public DmxGrammarAccess.MULTIPLICITYElements getMULTIPLICITYAccess() {
		return gaDmx.getMULTIPLICITYAccess();
	}
	
	public ParserRule getMULTIPLICITYRule() {
		return getMULTIPLICITYAccess().getRule();
	}
	
	//DmxBooleanLiteral DExpression:
	//	{DmxBooleanLiteral} (value?='TRUE' | value?='true' | 'FALSE' | 'false');
	public DmxGrammarAccess.DmxBooleanLiteralElements getDmxBooleanLiteralAccess() {
		return gaDmx.getDmxBooleanLiteralAccess();
	}
	
	public ParserRule getDmxBooleanLiteralRule() {
		return getDmxBooleanLiteralAccess().getRule();
	}
	
	//DmxNaturalLiteral DExpression:
	//	{DmxNaturalLiteral} value=NATURAL;
	public DmxGrammarAccess.DmxNaturalLiteralElements getDmxNaturalLiteralAccess() {
		return gaDmx.getDmxNaturalLiteralAccess();
	}
	
	public ParserRule getDmxNaturalLiteralRule() {
		return getDmxNaturalLiteralAccess().getRule();
	}
	
	//DmxDecimalLiteral DExpression:
	//	{DmxDecimalLiteral} value=DECIMAL;
	public DmxGrammarAccess.DmxDecimalLiteralElements getDmxDecimalLiteralAccess() {
		return gaDmx.getDmxDecimalLiteralAccess();
	}
	
	public ParserRule getDmxDecimalLiteralRule() {
		return getDmxDecimalLiteralAccess().getRule();
	}
	
	//DmxStringLiteral DExpression:
	//	{DmxStringLiteral} value=STRING;
	public DmxGrammarAccess.DmxStringLiteralElements getDmxStringLiteralAccess() {
		return gaDmx.getDmxStringLiteralAccess();
	}
	
	public ParserRule getDmxStringLiteralRule() {
		return getDmxStringLiteralAccess().getRule();
	}
	
	//DmxUndefinedLiteral DExpression:
	//	{DmxUndefinedLiteral} ('UNDEFINED' | 'undefined');
	public DmxGrammarAccess.DmxUndefinedLiteralElements getDmxUndefinedLiteralAccess() {
		return gaDmx.getDmxUndefinedLiteralAccess();
	}
	
	public ParserRule getDmxUndefinedLiteralRule() {
		return getDmxUndefinedLiteralAccess().getRule();
	}
	
	//DmxUrlLiteral DExpression:
	//	{DmxUrlLiteral}
	//	'URL:'
	//	value=STRING ('|' display=STRING)?;
	public DmxGrammarAccess.DmxUrlLiteralElements getDmxUrlLiteralAccess() {
		return gaDmx.getDmxUrlLiteralAccess();
	}
	
	public ParserRule getDmxUrlLiteralRule() {
		return getDmxUrlLiteralAccess().getRule();
	}
	
	//DECIMAL:
	//	NATURAL '.' NATURAL (('E' | 'e') ('+' | '-')? NATURAL)?;
	public DmxGrammarAccess.DECIMALElements getDECIMALAccess() {
		return gaDmx.getDECIMALAccess();
	}
	
	public ParserRule getDECIMALRule() {
		return getDECIMALAccess().getRule();
	}
	
	//DmxFieldListStartSymbol:
	//	'{';
	public DmxGrammarAccess.DmxFieldListStartSymbolElements getDmxFieldListStartSymbolAccess() {
		return gaDmx.getDmxFieldListStartSymbolAccess();
	}
	
	public ParserRule getDmxFieldListStartSymbolRule() {
		return getDmxFieldListStartSymbolAccess().getRule();
	}
	
	//DQualifiedNameWithWildcard:
	//	DQualifiedName '.*'?;
	public DmxGrammarAccess.DQualifiedNameWithWildcardElements getDQualifiedNameWithWildcardAccess() {
		return gaDmx.getDQualifiedNameWithWildcardAccess();
	}
	
	public ParserRule getDQualifiedNameWithWildcardRule() {
		return getDQualifiedNameWithWildcardAccess().getRule();
	}
	
	//DQualifiedName:
	//	ID ('.' ID)*;
	public DmxGrammarAccess.DQualifiedNameElements getDQualifiedNameAccess() {
		return gaDmx.getDQualifiedNameAccess();
	}
	
	public ParserRule getDQualifiedNameRule() {
		return getDQualifiedNameAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? (LETTER | '_') (LETTER | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaDmx.getIDRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"';
	public TerminalRule getSTRINGRule() {
		return gaDmx.getSTRINGRule();
	}
	
	//terminal NATURAL returns ecore::EInt:
	//	'0'..'9'+ | '∞';
	public TerminalRule getNATURALRule() {
		return gaDmx.getNATURALRule();
	}
	
	//terminal fragment LETTER:
	//	'a'..'z' | 'A'..'Z' | '\\u00c0'..'\\u00d6' | '\\u00d8'..'\\u00f6' | '\\u00f8'..'\\u00ff';
	public TerminalRule getLETTERRule() {
		return gaDmx.getLETTERRule();
	}
	
	//terminal fragment PLAIN_TEXT:
	//	!('»' | ']' | '[');
	public TerminalRule getPLAIN_TEXTRule() {
		return gaDmx.getPLAIN_TEXTRule();
	}
	
	//terminal PLAIN_TEXT_ONLY:
	//	'«' PLAIN_TEXT* '»';
	public TerminalRule getPLAIN_TEXT_ONLYRule() {
		return gaDmx.getPLAIN_TEXT_ONLYRule();
	}
	
	//terminal RICH_TEXT_START:
	//	'«' PLAIN_TEXT* '[';
	public TerminalRule getRICH_TEXT_STARTRule() {
		return gaDmx.getRICH_TEXT_STARTRule();
	}
	
	//terminal RICH_TEXT_MIDDLE:
	//	']' PLAIN_TEXT* '[';
	public TerminalRule getRICH_TEXT_MIDDLERule() {
		return gaDmx.getRICH_TEXT_MIDDLERule();
	}
	
	//terminal RICH_TEXT_END:
	//	']' PLAIN_TEXT* '»';
	public TerminalRule getRICH_TEXT_ENDRule() {
		return gaDmx.getRICH_TEXT_ENDRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaDmx.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaDmx.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaDmx.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaDmx.getANY_OTHERRule();
	}
}
