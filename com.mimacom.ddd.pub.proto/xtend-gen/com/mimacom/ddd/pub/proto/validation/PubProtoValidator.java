/**
 * generated by Xtext 2.19.0
 */
package com.mimacom.ddd.pub.proto.validation;

import com.mimacom.ddd.pub.proto.ProtoDocumentSegment;
import com.mimacom.ddd.pub.proto.ProtoPackage;
import com.mimacom.ddd.pub.proto.PublicationClass;
import com.mimacom.ddd.pub.proto.validation.AbstractPubProtoValidator;
import org.eclipse.emf.common.util.EList;
import org.eclipse.xtext.validation.Check;

/**
 * This class contains custom validation rules.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
@SuppressWarnings("all")
public class PubProtoValidator extends AbstractPubProtoValidator {
  private static final ProtoPackage PROTO = ProtoPackage.eINSTANCE;
  
  @Check
  public void titleNotEmpty(final PublicationClass pub) {
    if (((pub.getTitle() != null) && (pub.getTitle().length() == 0))) {
      this.error("Segment title cannot be empty when defined", PubProtoValidator.PROTO.getProtoDocumentSegment_Title());
    }
  }
  
  @Check
  public void symbolNameIsUppercase(final PublicationClass pub) {
    int i = 0;
    EList<String> _symbols = pub.getSymbols();
    for (final String symbol : _symbols) {
      {
        boolean _equals = symbol.equals(symbol.toUpperCase());
        boolean _not = (!_equals);
        if (_not) {
          this.warning("Symbol name should be ALL UPPPERCASE", PubProtoValidator.PROTO.getPublicationClass_Symbols(), i);
        }
        i++;
      }
    }
  }
  
  @Check
  public void titleNotEmpty(final ProtoDocumentSegment seg) {
    if (((seg.getTitle() != null) && (seg.getTitle().length() == 0))) {
      this.error("Segment title cannot be empty when defined", PubProtoValidator.PROTO.getProtoDocumentSegment_Title());
    }
  }
}
