/*
 * generated by Xtext 2.17.1
 */
package com.mimacom.ddd.dm.esm.serializer;

import com.google.inject.Inject;
import com.mimacom.ddd.dm.base.BasePackage;
import com.mimacom.ddd.dm.base.DDomain;
import com.mimacom.ddd.dm.base.DImport;
import com.mimacom.ddd.dm.base.DMultiplicity;
import com.mimacom.ddd.dm.base.DRichText;
import com.mimacom.ddd.dm.base.DTextSegment;
import com.mimacom.ddd.dm.dmx.DArchetype;
import com.mimacom.ddd.dm.dmx.DAssignment;
import com.mimacom.ddd.dm.dmx.DBinaryOperation;
import com.mimacom.ddd.dm.dmx.DBooleanLiteral;
import com.mimacom.ddd.dm.dmx.DCastExpression;
import com.mimacom.ddd.dm.dmx.DConstructorCall;
import com.mimacom.ddd.dm.dmx.DContextReference;
import com.mimacom.ddd.dm.dmx.DDecimalLiteral;
import com.mimacom.ddd.dm.dmx.DForLoopExpression;
import com.mimacom.ddd.dm.dmx.DFunction;
import com.mimacom.ddd.dm.dmx.DFunctionCall;
import com.mimacom.ddd.dm.dmx.DFunctionParameter;
import com.mimacom.ddd.dm.dmx.DIfExpression;
import com.mimacom.ddd.dm.dmx.DInstanceOfExpression;
import com.mimacom.ddd.dm.dmx.DIterator;
import com.mimacom.ddd.dm.dmx.DNaturalLiteral;
import com.mimacom.ddd.dm.dmx.DNavigableMemberReference;
import com.mimacom.ddd.dm.dmx.DRaiseExpression;
import com.mimacom.ddd.dm.dmx.DReturnExpression;
import com.mimacom.ddd.dm.dmx.DSelfExpression;
import com.mimacom.ddd.dm.dmx.DStringLiteral;
import com.mimacom.ddd.dm.dmx.DUnaryOperation;
import com.mimacom.ddd.dm.dmx.DUndefinedLiteral;
import com.mimacom.ddd.dm.dmx.DmxNamespace;
import com.mimacom.ddd.dm.dmx.DmxPackage;
import com.mimacom.ddd.dm.dmx.serializer.DmxSemanticSequencer;
import com.mimacom.ddd.dm.esm.DEntityStateModel;
import com.mimacom.ddd.dm.esm.DEvent;
import com.mimacom.ddd.dm.esm.DState;
import com.mimacom.ddd.dm.esm.DTransition;
import com.mimacom.ddd.dm.esm.EsmPackage;
import com.mimacom.ddd.dm.esm.services.EsmGrammarAccess;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class EsmSemanticSequencer extends DmxSemanticSequencer {

	@Inject
	private EsmGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == BasePackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case BasePackage.DDOMAIN:
				sequence_DDomain(context, (DDomain) semanticObject); 
				return; 
			case BasePackage.DIMPORT:
				sequence_DImport(context, (DImport) semanticObject); 
				return; 
			case BasePackage.DMULTIPLICITY:
				sequence_DMultiplicity(context, (DMultiplicity) semanticObject); 
				return; 
			case BasePackage.DRICH_TEXT:
				sequence_DRichText(context, (DRichText) semanticObject); 
				return; 
			case BasePackage.DTEXT_SEGMENT:
				if (rule == grammarAccess.getDTextEndRule()) {
					sequence_DTextEnd(context, (DTextSegment) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getDTextMiddleRule()) {
					sequence_DTextMiddle(context, (DTextSegment) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getDTextOnlyRule()) {
					sequence_DTextOnly(context, (DTextSegment) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getDTextStartRule()) {
					sequence_DTextStart(context, (DTextSegment) semanticObject); 
					return; 
				}
				else break;
			}
		else if (epackage == DmxPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case DmxPackage.DARCHETYPE:
				sequence_DArchetype(context, (DArchetype) semanticObject); 
				return; 
			case DmxPackage.DASSIGNMENT:
				if (rule == grammarAccess.getDAssignmentRule()) {
					sequence_DAssignment_DNavigableMemberReference(context, (DAssignment) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getDExpressionRule()
						|| rule == grammarAccess.getDPrimaryExpressionRule()
						|| rule == grammarAccess.getDOrExpressionRule()
						|| action == grammarAccess.getDOrExpressionAccess().getDBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getDAndExpressionRule()
						|| action == grammarAccess.getDAndExpressionAccess().getDBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getDEqualityExpressionRule()
						|| action == grammarAccess.getDEqualityExpressionAccess().getDBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getDRelationalExpressionRule()
						|| action == grammarAccess.getDRelationalExpressionAccess().getDInstanceOfExpressionExpressionAction_1_0_0_0_0()
						|| action == grammarAccess.getDRelationalExpressionAccess().getDBinaryOperationLeftOperandAction_1_1_0_0_0()
						|| rule == grammarAccess.getDOtherOperatorExpressionRule()
						|| action == grammarAccess.getDOtherOperatorExpressionAccess().getDBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getDAdditiveExpressionRule()
						|| action == grammarAccess.getDAdditiveExpressionAccess().getDBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getDMultiplicativeExpressionRule()
						|| action == grammarAccess.getDMultiplicativeExpressionAccess().getDBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getDUnaryOperationRule()
						|| rule == grammarAccess.getDCastExpressionRule()
						|| action == grammarAccess.getDCastExpressionAccess().getDCastExpressionTargetAction_1_0_0_0()
						|| rule == grammarAccess.getDNavigableMemberReferenceRule()
						|| action == grammarAccess.getDNavigableMemberReferenceAccess().getDAssignmentMemberContainerAction_1_0_0_0_0()
						|| action == grammarAccess.getDNavigableMemberReferenceAccess().getDNavigableMemberReferenceMemberContainerReferenceAction_1_1_0_0_0()
						|| rule == grammarAccess.getDParenthesizedExpressionRule()) {
					sequence_DNavigableMemberReference(context, (DAssignment) semanticObject); 
					return; 
				}
				else break;
			case DmxPackage.DBINARY_OPERATION:
				sequence_DAdditiveExpression_DAndExpression_DEqualityExpression_DMultiplicativeExpression_DOrExpression_DOtherOperatorExpression_DRelationalExpression(context, (DBinaryOperation) semanticObject); 
				return; 
			case DmxPackage.DBOOLEAN_LITERAL:
				sequence_DBooleanLiteral(context, (DBooleanLiteral) semanticObject); 
				return; 
			case DmxPackage.DCAST_EXPRESSION:
				sequence_DCastExpression(context, (DCastExpression) semanticObject); 
				return; 
			case DmxPackage.DCONSTRUCTOR_CALL:
				sequence_DConstructorCall(context, (DConstructorCall) semanticObject); 
				return; 
			case DmxPackage.DCONTEXT_REFERENCE:
				sequence_DContextReference(context, (DContextReference) semanticObject); 
				return; 
			case DmxPackage.DDECIMAL_LITERAL:
				sequence_DDecimalLiteral(context, (DDecimalLiteral) semanticObject); 
				return; 
			case DmxPackage.DFOR_LOOP_EXPRESSION:
				sequence_DForLoopExpression(context, (DForLoopExpression) semanticObject); 
				return; 
			case DmxPackage.DFUNCTION:
				sequence_DFunction(context, (DFunction) semanticObject); 
				return; 
			case DmxPackage.DFUNCTION_CALL:
				sequence_DFunctionCall(context, (DFunctionCall) semanticObject); 
				return; 
			case DmxPackage.DFUNCTION_PARAMETER:
				sequence_DFunctionParameter(context, (DFunctionParameter) semanticObject); 
				return; 
			case DmxPackage.DIF_EXPRESSION:
				sequence_DIfExpression(context, (DIfExpression) semanticObject); 
				return; 
			case DmxPackage.DINSTANCE_OF_EXPRESSION:
				sequence_DRelationalExpression(context, (DInstanceOfExpression) semanticObject); 
				return; 
			case DmxPackage.DITERATOR:
				sequence_DIterator(context, (DIterator) semanticObject); 
				return; 
			case DmxPackage.DNATURAL_LITERAL:
				sequence_DNaturalLiteral(context, (DNaturalLiteral) semanticObject); 
				return; 
			case DmxPackage.DNAVIGABLE_MEMBER_REFERENCE:
				sequence_DNavigableMemberReference(context, (DNavigableMemberReference) semanticObject); 
				return; 
			case DmxPackage.DRAISE_EXPRESSION:
				sequence_DRaiseExpression(context, (DRaiseExpression) semanticObject); 
				return; 
			case DmxPackage.DRETURN_EXPRESSION:
				sequence_DReturnExpression(context, (DReturnExpression) semanticObject); 
				return; 
			case DmxPackage.DSELF_EXPRESSION:
				sequence_DSelfExpression(context, (DSelfExpression) semanticObject); 
				return; 
			case DmxPackage.DSTRING_LITERAL:
				sequence_DStringLiteral(context, (DStringLiteral) semanticObject); 
				return; 
			case DmxPackage.DUNARY_OPERATION:
				sequence_DUnaryOperation(context, (DUnaryOperation) semanticObject); 
				return; 
			case DmxPackage.DUNDEFINED_LITERAL:
				sequence_DNilLiteral(context, (DUndefinedLiteral) semanticObject); 
				return; 
			case DmxPackage.DMX_NAMESPACE:
				sequence_DmxNamespace(context, (DmxNamespace) semanticObject); 
				return; 
			}
		else if (epackage == EsmPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case EsmPackage.DENTITY_STATE_MODEL:
				sequence_DEntityStateModel(context, (DEntityStateModel) semanticObject); 
				return; 
			case EsmPackage.DEVENT:
				sequence_DEvent(context, (DEvent) semanticObject); 
				return; 
			case EsmPackage.DSTATE:
				sequence_DState(context, (DState) semanticObject); 
				return; 
			case EsmPackage.DTRANSITION:
				sequence_DTransition(context, (DTransition) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     DDomain returns DDomain
	 *
	 * Constraint:
	 *     (imports+=DImport* name=DQualifiedName aliases+=ID* description=DRichText? stateModels+=DEntityStateModel)
	 */
	protected void sequence_DDomain(ISerializationContext context, DDomain semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DEntityStateModel returns DEntityStateModel
	 *
	 * Constraint:
	 *     (
	 *         name=DQualifiedName 
	 *         forType=[DIdentityType|ID] 
	 *         description=DRichText? 
	 *         states+=DState+ 
	 *         events+=DEvent+ 
	 *         transition+=DTransition+
	 *     )
	 */
	protected void sequence_DEntityStateModel(ISerializationContext context, DEntityStateModel semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DEvent returns DEvent
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_DEvent(ISerializationContext context, DEvent semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, EsmPackage.Literals.DEVENT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, EsmPackage.Literals.DEVENT__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDEventAccess().getNameIDTerminalRuleCall_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     DImport returns DImport
	 *
	 * Constraint:
	 *     importedNamespace=DQualifiedNameWithWildcard
	 */
	protected void sequence_DImport(ISerializationContext context, DImport semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, BasePackage.Literals.DIMPORT__IMPORTED_NAMESPACE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, BasePackage.Literals.DIMPORT__IMPORTED_NAMESPACE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDImportAccess().getImportedNamespaceDQualifiedNameWithWildcardParserRuleCall_1_0(), semanticObject.getImportedNamespace());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     DExpression returns DAssignment
	 *     DPrimaryExpression returns DAssignment
	 *     DOrExpression returns DAssignment
	 *     DOrExpression.DBinaryOperation_1_0_0_0 returns DAssignment
	 *     DAndExpression returns DAssignment
	 *     DAndExpression.DBinaryOperation_1_0_0_0 returns DAssignment
	 *     DEqualityExpression returns DAssignment
	 *     DEqualityExpression.DBinaryOperation_1_0_0_0 returns DAssignment
	 *     DRelationalExpression returns DAssignment
	 *     DRelationalExpression.DInstanceOfExpression_1_0_0_0_0 returns DAssignment
	 *     DRelationalExpression.DBinaryOperation_1_1_0_0_0 returns DAssignment
	 *     DOtherOperatorExpression returns DAssignment
	 *     DOtherOperatorExpression.DBinaryOperation_1_0_0_0 returns DAssignment
	 *     DAdditiveExpression returns DAssignment
	 *     DAdditiveExpression.DBinaryOperation_1_0_0_0 returns DAssignment
	 *     DMultiplicativeExpression returns DAssignment
	 *     DMultiplicativeExpression.DBinaryOperation_1_0_0_0 returns DAssignment
	 *     DUnaryOperation returns DAssignment
	 *     DCastExpression returns DAssignment
	 *     DCastExpression.DCastExpression_1_0_0_0 returns DAssignment
	 *     DNavigableMemberReference returns DAssignment
	 *     DNavigableMemberReference.DAssignment_1_0_0_0_0 returns DAssignment
	 *     DNavigableMemberReference.DNavigableMemberReference_1_1_0_0_0 returns DAssignment
	 *     DParenthesizedExpression returns DAssignment
	 *
	 * Constraint:
	 *     (memberContainer=DNavigableMemberReference_DAssignment_1_0_0_0_0 assignToMember=[DNavigableMember|ID] value=DAssignment)
	 */
	protected void sequence_DNavigableMemberReference(ISerializationContext context, DAssignment semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DmxPackage.Literals.DASSIGNMENT__MEMBER_CONTAINER) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DmxPackage.Literals.DASSIGNMENT__MEMBER_CONTAINER));
			if (transientValues.isValueTransient(semanticObject, DmxPackage.Literals.DASSIGNMENT__ASSIGN_TO_MEMBER) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DmxPackage.Literals.DASSIGNMENT__ASSIGN_TO_MEMBER));
			if (transientValues.isValueTransient(semanticObject, DmxPackage.Literals.DASSIGNMENT__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DmxPackage.Literals.DASSIGNMENT__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDNavigableMemberReferenceAccess().getDAssignmentMemberContainerAction_1_0_0_0_0(), semanticObject.getMemberContainer());
		feeder.accept(grammarAccess.getDNavigableMemberReferenceAccess().getAssignToMemberDNavigableMemberIDTerminalRuleCall_1_0_0_0_2_0_1(), semanticObject.eGet(DmxPackage.Literals.DASSIGNMENT__ASSIGN_TO_MEMBER, false));
		feeder.accept(grammarAccess.getDNavigableMemberReferenceAccess().getValueDAssignmentParserRuleCall_1_0_1_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     DState returns DState
	 *
	 * Constraint:
	 *     (name=ID expression=DExpression?)
	 */
	protected void sequence_DState(ISerializationContext context, DState semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DTransition returns DTransition
	 *
	 * Constraint:
	 *     (from=[DState|ID] to=[DState|ID] event=[DEvent|ID] guard=DExpression?)
	 */
	protected void sequence_DTransition(ISerializationContext context, DTransition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
