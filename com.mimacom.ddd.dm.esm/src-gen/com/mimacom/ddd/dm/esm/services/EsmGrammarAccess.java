/*
 * generated by Xtext 2.17.1
 */
package com.mimacom.ddd.dm.esm.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import com.mimacom.ddd.dm.dmx.services.DmxGrammarAccess;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class EsmGrammarAccess extends AbstractGrammarElementFinder {
	
	public class DDomainElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.esm.Esm.DDomain");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cImportsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cImportsDImportParserRuleCall_0_0 = (RuleCall)cImportsAssignment_0.eContents().get(0);
		private final Keyword cDomainKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameDQualifiedNameParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cAliasKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cAliasesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cAliasesIDTerminalRuleCall_3_1_0 = (RuleCall)cAliasesAssignment_3_1.eContents().get(0);
		private final Assignment cDescriptionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cDescriptionDRichTextParserRuleCall_4_0 = (RuleCall)cDescriptionAssignment_4.eContents().get(0);
		private final Assignment cStateModelsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cStateModelsDEntityStateModelParserRuleCall_5_0 = (RuleCall)cStateModelsAssignment_5.eContents().get(0);
		
		//DDomain:
		//	imports+=DImport*
		//	'domain'
		//	name=DQualifiedName ('alias' aliases+=ID)*
		//	description=DRichText?
		//	stateModels+=DEntityStateModel;
		@Override public ParserRule getRule() { return rule; }
		
		//imports+=DImport* 'domain' name=DQualifiedName ('alias' aliases+=ID)* description=DRichText?
		//stateModels+=DEntityStateModel
		public Group getGroup() { return cGroup; }
		
		//imports+=DImport*
		public Assignment getImportsAssignment_0() { return cImportsAssignment_0; }
		
		//DImport
		public RuleCall getImportsDImportParserRuleCall_0_0() { return cImportsDImportParserRuleCall_0_0; }
		
		//'domain'
		public Keyword getDomainKeyword_1() { return cDomainKeyword_1; }
		
		//name=DQualifiedName
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//DQualifiedName
		public RuleCall getNameDQualifiedNameParserRuleCall_2_0() { return cNameDQualifiedNameParserRuleCall_2_0; }
		
		//('alias' aliases+=ID)*
		public Group getGroup_3() { return cGroup_3; }
		
		//'alias'
		public Keyword getAliasKeyword_3_0() { return cAliasKeyword_3_0; }
		
		//aliases+=ID
		public Assignment getAliasesAssignment_3_1() { return cAliasesAssignment_3_1; }
		
		//ID
		public RuleCall getAliasesIDTerminalRuleCall_3_1_0() { return cAliasesIDTerminalRuleCall_3_1_0; }
		
		//description=DRichText?
		public Assignment getDescriptionAssignment_4() { return cDescriptionAssignment_4; }
		
		//DRichText
		public RuleCall getDescriptionDRichTextParserRuleCall_4_0() { return cDescriptionDRichTextParserRuleCall_4_0; }
		
		//stateModels+=DEntityStateModel
		public Assignment getStateModelsAssignment_5() { return cStateModelsAssignment_5; }
		
		//DEntityStateModel
		public RuleCall getStateModelsDEntityStateModelParserRuleCall_5_0() { return cStateModelsDEntityStateModelParserRuleCall_5_0; }
	}
	public class DEntityStateModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.esm.Esm.DEntityStateModel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStateKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cModelKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameDQualifiedNameParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cForKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cForTypeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cForTypeDIdentityTypeCrossReference_4_0 = (CrossReference)cForTypeAssignment_4.eContents().get(0);
		private final RuleCall cForTypeDIdentityTypeIDTerminalRuleCall_4_0_1 = (RuleCall)cForTypeDIdentityTypeCrossReference_4_0.eContents().get(1);
		private final Assignment cDescriptionAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cDescriptionDRichTextParserRuleCall_5_0 = (RuleCall)cDescriptionAssignment_5.eContents().get(0);
		private final Keyword cStatesKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cStatesAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cStatesDStateParserRuleCall_7_0 = (RuleCall)cStatesAssignment_7.eContents().get(0);
		private final Keyword cEventsKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cEventsAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cEventsDEventParserRuleCall_9_0 = (RuleCall)cEventsAssignment_9.eContents().get(0);
		private final Keyword cTransitionsKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Assignment cTransitionAssignment_11 = (Assignment)cGroup.eContents().get(11);
		private final RuleCall cTransitionDTransitionParserRuleCall_11_0 = (RuleCall)cTransitionAssignment_11.eContents().get(0);
		
		//DEntityStateModel:
		//	'state' 'model'
		//	name=DQualifiedName
		//	'for'
		//	forType=[DIdentityType] description=DRichText?
		//	'states'
		//	states+=DState+
		//	'events'
		//	events+=DEvent+
		//	'transitions'
		//	transition+=DTransition+;
		@Override public ParserRule getRule() { return rule; }
		
		//'state' 'model' name=DQualifiedName 'for' forType=[DIdentityType] description=DRichText? 'states' states+=DState+
		//'events' events+=DEvent+ 'transitions' transition+=DTransition+
		public Group getGroup() { return cGroup; }
		
		//'state'
		public Keyword getStateKeyword_0() { return cStateKeyword_0; }
		
		//'model'
		public Keyword getModelKeyword_1() { return cModelKeyword_1; }
		
		//name=DQualifiedName
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//DQualifiedName
		public RuleCall getNameDQualifiedNameParserRuleCall_2_0() { return cNameDQualifiedNameParserRuleCall_2_0; }
		
		//'for'
		public Keyword getForKeyword_3() { return cForKeyword_3; }
		
		//forType=[DIdentityType]
		public Assignment getForTypeAssignment_4() { return cForTypeAssignment_4; }
		
		//[DIdentityType]
		public CrossReference getForTypeDIdentityTypeCrossReference_4_0() { return cForTypeDIdentityTypeCrossReference_4_0; }
		
		//ID
		public RuleCall getForTypeDIdentityTypeIDTerminalRuleCall_4_0_1() { return cForTypeDIdentityTypeIDTerminalRuleCall_4_0_1; }
		
		//description=DRichText?
		public Assignment getDescriptionAssignment_5() { return cDescriptionAssignment_5; }
		
		//DRichText
		public RuleCall getDescriptionDRichTextParserRuleCall_5_0() { return cDescriptionDRichTextParserRuleCall_5_0; }
		
		//'states'
		public Keyword getStatesKeyword_6() { return cStatesKeyword_6; }
		
		//states+=DState+
		public Assignment getStatesAssignment_7() { return cStatesAssignment_7; }
		
		//DState
		public RuleCall getStatesDStateParserRuleCall_7_0() { return cStatesDStateParserRuleCall_7_0; }
		
		//'events'
		public Keyword getEventsKeyword_8() { return cEventsKeyword_8; }
		
		//events+=DEvent+
		public Assignment getEventsAssignment_9() { return cEventsAssignment_9; }
		
		//DEvent
		public RuleCall getEventsDEventParserRuleCall_9_0() { return cEventsDEventParserRuleCall_9_0; }
		
		//'transitions'
		public Keyword getTransitionsKeyword_10() { return cTransitionsKeyword_10; }
		
		//transition+=DTransition+
		public Assignment getTransitionAssignment_11() { return cTransitionAssignment_11; }
		
		//DTransition
		public RuleCall getTransitionDTransitionParserRuleCall_11_0() { return cTransitionDTransitionParserRuleCall_11_0; }
	}
	public class DImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.esm.Esm.DImport");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImportedNamespaceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportedNamespaceDQualifiedNameWithWildcardParserRuleCall_1_0 = (RuleCall)cImportedNamespaceAssignment_1.eContents().get(0);
		
		//DImport:
		//	'import' importedNamespace=DQualifiedNameWithWildcard;
		@Override public ParserRule getRule() { return rule; }
		
		//'import' importedNamespace=DQualifiedNameWithWildcard
		public Group getGroup() { return cGroup; }
		
		//'import'
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }
		
		//importedNamespace=DQualifiedNameWithWildcard
		public Assignment getImportedNamespaceAssignment_1() { return cImportedNamespaceAssignment_1; }
		
		//DQualifiedNameWithWildcard
		public RuleCall getImportedNamespaceDQualifiedNameWithWildcardParserRuleCall_1_0() { return cImportedNamespaceDQualifiedNameWithWildcardParserRuleCall_1_0; }
	}
	public class DStateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.esm.Esm.DState");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cWhenKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cExpressionAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cExpressionDExpressionParserRuleCall_1_1_0 = (RuleCall)cExpressionAssignment_1_1.eContents().get(0);
		
		//DState:
		//	name=ID ('when' expression=DExpression)?;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID ('when' expression=DExpression)?
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//('when' expression=DExpression)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'when'
		public Keyword getWhenKeyword_1_0() { return cWhenKeyword_1_0; }
		
		//expression=DExpression
		public Assignment getExpressionAssignment_1_1() { return cExpressionAssignment_1_1; }
		
		//DExpression
		public RuleCall getExpressionDExpressionParserRuleCall_1_1_0() { return cExpressionDExpressionParserRuleCall_1_1_0; }
	}
	public class DEventElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.esm.Esm.DEvent");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//DEvent:
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class DTransitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.esm.Esm.DTransition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFromAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cFromDStateCrossReference_0_0 = (CrossReference)cFromAssignment_0.eContents().get(0);
		private final RuleCall cFromDStateIDTerminalRuleCall_0_0_1 = (RuleCall)cFromDStateCrossReference_0_0.eContents().get(1);
		private final Keyword cToKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cToAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cToDStateCrossReference_2_0 = (CrossReference)cToAssignment_2.eContents().get(0);
		private final RuleCall cToDStateIDTerminalRuleCall_2_0_1 = (RuleCall)cToDStateCrossReference_2_0.eContents().get(1);
		private final Keyword cAsKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cEventAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cEventDEventCrossReference_4_0 = (CrossReference)cEventAssignment_4.eContents().get(0);
		private final RuleCall cEventDEventIDTerminalRuleCall_4_0_1 = (RuleCall)cEventDEventCrossReference_4_0.eContents().get(1);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cWhenKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cGuardAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cGuardDExpressionParserRuleCall_5_1_0 = (RuleCall)cGuardAssignment_5_1.eContents().get(0);
		
		//DTransition:
		//	from=[DState]
		//	'to'
		//	to=[DState]
		//	'as' event=[DEvent] ('when'
		//	guard=DExpression)?;
		@Override public ParserRule getRule() { return rule; }
		
		//from=[DState] 'to' to=[DState] 'as' event=[DEvent] ('when' guard=DExpression)?
		public Group getGroup() { return cGroup; }
		
		//from=[DState]
		public Assignment getFromAssignment_0() { return cFromAssignment_0; }
		
		//[DState]
		public CrossReference getFromDStateCrossReference_0_0() { return cFromDStateCrossReference_0_0; }
		
		//ID
		public RuleCall getFromDStateIDTerminalRuleCall_0_0_1() { return cFromDStateIDTerminalRuleCall_0_0_1; }
		
		//'to'
		public Keyword getToKeyword_1() { return cToKeyword_1; }
		
		//to=[DState]
		public Assignment getToAssignment_2() { return cToAssignment_2; }
		
		//[DState]
		public CrossReference getToDStateCrossReference_2_0() { return cToDStateCrossReference_2_0; }
		
		//ID
		public RuleCall getToDStateIDTerminalRuleCall_2_0_1() { return cToDStateIDTerminalRuleCall_2_0_1; }
		
		//'as'
		public Keyword getAsKeyword_3() { return cAsKeyword_3; }
		
		//event=[DEvent]
		public Assignment getEventAssignment_4() { return cEventAssignment_4; }
		
		//[DEvent]
		public CrossReference getEventDEventCrossReference_4_0() { return cEventDEventCrossReference_4_0; }
		
		//ID
		public RuleCall getEventDEventIDTerminalRuleCall_4_0_1() { return cEventDEventIDTerminalRuleCall_4_0_1; }
		
		//('when' guard=DExpression)?
		public Group getGroup_5() { return cGroup_5; }
		
		//'when'
		public Keyword getWhenKeyword_5_0() { return cWhenKeyword_5_0; }
		
		//guard=DExpression
		public Assignment getGuardAssignment_5_1() { return cGuardAssignment_5_1; }
		
		//DExpression
		public RuleCall getGuardDExpressionParserRuleCall_5_1_0() { return cGuardDExpressionParserRuleCall_5_1_0; }
	}
	public class DExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.esm.Esm.DExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDOrExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDRichTextParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//@Override
		//DExpression:
		//	DOrExpression | DRichText;
		@Override public ParserRule getRule() { return rule; }
		
		//DOrExpression | DRichText
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//DOrExpression
		public RuleCall getDOrExpressionParserRuleCall_0() { return cDOrExpressionParserRuleCall_0; }
		
		//DRichText
		public RuleCall getDRichTextParserRuleCall_1() { return cDRichTextParserRuleCall_1; }
	}
	public class DPrimaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.esm.Esm.DPrimaryExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDLiteralExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDSelfExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cDParenthesizedExpressionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cDFunctionCallParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cDContextReferenceParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cDIfExpressionParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//@Override
		//DPrimaryExpression DExpression:
		//	DLiteralExpression | DSelfExpression | DParenthesizedExpression | DFunctionCall | DContextReference | DIfExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//DLiteralExpression | DSelfExpression | DParenthesizedExpression | DFunctionCall | DContextReference | DIfExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//DLiteralExpression
		public RuleCall getDLiteralExpressionParserRuleCall_0() { return cDLiteralExpressionParserRuleCall_0; }
		
		//DSelfExpression
		public RuleCall getDSelfExpressionParserRuleCall_1() { return cDSelfExpressionParserRuleCall_1; }
		
		//DParenthesizedExpression
		public RuleCall getDParenthesizedExpressionParserRuleCall_2() { return cDParenthesizedExpressionParserRuleCall_2; }
		
		//DFunctionCall
		public RuleCall getDFunctionCallParserRuleCall_3() { return cDFunctionCallParserRuleCall_3; }
		
		//DContextReference
		public RuleCall getDContextReferenceParserRuleCall_4() { return cDContextReferenceParserRuleCall_4; }
		
		//DIfExpression
		public RuleCall getDIfExpressionParserRuleCall_5() { return cDIfExpressionParserRuleCall_5; }
	}
	
	
	private final DDomainElements pDDomain;
	private final DEntityStateModelElements pDEntityStateModel;
	private final DImportElements pDImport;
	private final DStateElements pDState;
	private final DEventElements pDEvent;
	private final DTransitionElements pDTransition;
	private final DExpressionElements pDExpression;
	private final DPrimaryExpressionElements pDPrimaryExpression;
	
	private final Grammar grammar;
	
	private final DmxGrammarAccess gaDmx;

	@Inject
	public EsmGrammarAccess(GrammarProvider grammarProvider,
			DmxGrammarAccess gaDmx) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaDmx = gaDmx;
		this.pDDomain = new DDomainElements();
		this.pDEntityStateModel = new DEntityStateModelElements();
		this.pDImport = new DImportElements();
		this.pDState = new DStateElements();
		this.pDEvent = new DEventElements();
		this.pDTransition = new DTransitionElements();
		this.pDExpression = new DExpressionElements();
		this.pDPrimaryExpression = new DPrimaryExpressionElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("com.mimacom.ddd.dm.esm.Esm".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public DmxGrammarAccess getDmxGrammarAccess() {
		return gaDmx;
	}

	
	//DDomain:
	//	imports+=DImport*
	//	'domain'
	//	name=DQualifiedName ('alias' aliases+=ID)*
	//	description=DRichText?
	//	stateModels+=DEntityStateModel;
	public DDomainElements getDDomainAccess() {
		return pDDomain;
	}
	
	public ParserRule getDDomainRule() {
		return getDDomainAccess().getRule();
	}
	
	//DEntityStateModel:
	//	'state' 'model'
	//	name=DQualifiedName
	//	'for'
	//	forType=[DIdentityType] description=DRichText?
	//	'states'
	//	states+=DState+
	//	'events'
	//	events+=DEvent+
	//	'transitions'
	//	transition+=DTransition+;
	public DEntityStateModelElements getDEntityStateModelAccess() {
		return pDEntityStateModel;
	}
	
	public ParserRule getDEntityStateModelRule() {
		return getDEntityStateModelAccess().getRule();
	}
	
	//DImport:
	//	'import' importedNamespace=DQualifiedNameWithWildcard;
	public DImportElements getDImportAccess() {
		return pDImport;
	}
	
	public ParserRule getDImportRule() {
		return getDImportAccess().getRule();
	}
	
	//DState:
	//	name=ID ('when' expression=DExpression)?;
	public DStateElements getDStateAccess() {
		return pDState;
	}
	
	public ParserRule getDStateRule() {
		return getDStateAccess().getRule();
	}
	
	//DEvent:
	//	name=ID;
	public DEventElements getDEventAccess() {
		return pDEvent;
	}
	
	public ParserRule getDEventRule() {
		return getDEventAccess().getRule();
	}
	
	//DTransition:
	//	from=[DState]
	//	'to'
	//	to=[DState]
	//	'as' event=[DEvent] ('when'
	//	guard=DExpression)?;
	public DTransitionElements getDTransitionAccess() {
		return pDTransition;
	}
	
	public ParserRule getDTransitionRule() {
		return getDTransitionAccess().getRule();
	}
	
	//@Override
	//DExpression:
	//	DOrExpression | DRichText;
	public DExpressionElements getDExpressionAccess() {
		return pDExpression;
	}
	
	public ParserRule getDExpressionRule() {
		return getDExpressionAccess().getRule();
	}
	
	//@Override
	//DPrimaryExpression DExpression:
	//	DLiteralExpression | DSelfExpression | DParenthesizedExpression | DFunctionCall | DContextReference | DIfExpression;
	public DPrimaryExpressionElements getDPrimaryExpressionAccess() {
		return pDPrimaryExpression;
	}
	
	public ParserRule getDPrimaryExpressionRule() {
		return getDPrimaryExpressionAccess().getRule();
	}
	
	//DmxNamespace:
	//	imports+=super::DImport*
	//	'namespace'
	//	name=DQualifiedName
	//	types+=DArchetype*
	//	filters+=DFilter* ('text' NATURAL ':' texts+=DRichText ';')* ('expr' NATURAL ':' expressions+=super::DExpression
	//	';')*;
	public DmxGrammarAccess.DmxNamespaceElements getDmxNamespaceAccess() {
		return gaDmx.getDmxNamespaceAccess();
	}
	
	public ParserRule getDmxNamespaceRule() {
		return getDmxNamespaceAccess().getRule();
	}
	
	//enum DSystemType:
	//	VOID | BOOLEAN | NUMBER | TEXT | ID | TIMEPOINT | TYPE | OBJECT | ACTOR | OPERATION | LAMBDA;
	public DmxGrammarAccess.DSystemTypeElements getDSystemTypeAccess() {
		return gaDmx.getDSystemTypeAccess();
	}
	
	public EnumRule getDSystemTypeRule() {
		return getDSystemTypeAccess().getRule();
	}
	
	//DArchetype:
	//	'archetype'
	//	name=ID
	//	'is'
	//	systemType=DSystemType
	//	description=DRichText?;
	public DmxGrammarAccess.DArchetypeElements getDArchetypeAccess() {
		return gaDmx.getDArchetypeAccess();
	}
	
	public ParserRule getDArchetypeRule() {
		return getDArchetypeAccess().getRule();
	}
	
	//DFilter:
	//	DFunction | DIterator;
	public DmxGrammarAccess.DFilterElements getDFilterAccess() {
		return gaDmx.getDFilterAccess();
	}
	
	public ParserRule getDFilterRule() {
		return getDFilterAccess().getRule();
	}
	
	//DFunction:
	//	'function' name=ID
	//	'(' (parameters+=DFunctionParameter (',' parameters+=DFunctionParameter)*)? ')'
	//	':'
	//	systemType=DSystemType
	//	systemTypeMany?='*'?;
	public DmxGrammarAccess.DFunctionElements getDFunctionAccess() {
		return gaDmx.getDFunctionAccess();
	}
	
	public ParserRule getDFunctionRule() {
		return getDFunctionAccess().getRule();
	}
	
	//DFunctionParameter:
	//	name=ID
	//	':'
	//	systemType=DSystemType
	//	systemTypeMany?='*'?;
	public DmxGrammarAccess.DFunctionParameterElements getDFunctionParameterAccess() {
		return gaDmx.getDFunctionParameterAccess();
	}
	
	public ParserRule getDFunctionParameterRule() {
		return getDFunctionParameterAccess().getRule();
	}
	
	//DIterator:
	//	'iterator' name=ID
	//	':'
	//	systemType=DSystemType
	//	systemTypeMany?='*'?;
	public DmxGrammarAccess.DIteratorElements getDIteratorAccess() {
		return gaDmx.getDIteratorAccess();
	}
	
	public ParserRule getDIteratorRule() {
		return getDIteratorAccess().getRule();
	}
	
	//DRichText:
	//	segments+=DTextOnly
	//	| segments+=DTextStart
	//	segments+=super::DExpression (segments+=DTextMiddle segments+=super::DExpression)*
	//	segments+=DTextEnd;
	public DmxGrammarAccess.DRichTextElements getDRichTextAccess() {
		return gaDmx.getDRichTextAccess();
	}
	
	public ParserRule getDRichTextRule() {
		return getDRichTextAccess().getRule();
	}
	
	//DTextOnly DTextSegment:
	//	value=PLAIN_TEXT_ONLY;
	public DmxGrammarAccess.DTextOnlyElements getDTextOnlyAccess() {
		return gaDmx.getDTextOnlyAccess();
	}
	
	public ParserRule getDTextOnlyRule() {
		return getDTextOnlyAccess().getRule();
	}
	
	//DTextStart DTextSegment:
	//	value=PLAIN_TEXT_START;
	public DmxGrammarAccess.DTextStartElements getDTextStartAccess() {
		return gaDmx.getDTextStartAccess();
	}
	
	public ParserRule getDTextStartRule() {
		return getDTextStartAccess().getRule();
	}
	
	//DTextMiddle DTextSegment:
	//	value=PLAIN_TEXT_MIDDLE;
	public DmxGrammarAccess.DTextMiddleElements getDTextMiddleAccess() {
		return gaDmx.getDTextMiddleAccess();
	}
	
	public ParserRule getDTextMiddleRule() {
		return getDTextMiddleAccess().getRule();
	}
	
	//DTextEnd DTextSegment:
	//	value=PLAIN_TEXT_END;
	public DmxGrammarAccess.DTextEndElements getDTextEndAccess() {
		return gaDmx.getDTextEndAccess();
	}
	
	public ParserRule getDTextEndRule() {
		return getDTextEndAccess().getRule();
	}
	
	//DAssignment DExpression:
	//	{DAssignment} assignToMember=[DNavigableMember] OpSingleAssign value=DAssignment
	//	| DOrExpression;
	public DmxGrammarAccess.DAssignmentElements getDAssignmentAccess() {
		return gaDmx.getDAssignmentAccess();
	}
	
	public ParserRule getDAssignmentRule() {
		return getDAssignmentAccess().getRule();
	}
	
	//OpSingleAssign:
	//	':=';
	public DmxGrammarAccess.OpSingleAssignElements getOpSingleAssignAccess() {
		return gaDmx.getOpSingleAssignAccess();
	}
	
	public ParserRule getOpSingleAssignRule() {
		return getOpSingleAssignAccess().getRule();
	}
	
	//DOrExpression DExpression:
	//	DAndExpression (=> ({DBinaryOperation.leftOperand=current} operator=OpOr) rightOperand=DAndExpression)*;
	public DmxGrammarAccess.DOrExpressionElements getDOrExpressionAccess() {
		return gaDmx.getDOrExpressionAccess();
	}
	
	public ParserRule getDOrExpressionRule() {
		return getDOrExpressionAccess().getRule();
	}
	
	//enum OpOr returns DBinaryOperator:
	//	OR | OR='or' | XOR | XOR='xor';
	public DmxGrammarAccess.OpOrElements getOpOrAccess() {
		return gaDmx.getOpOrAccess();
	}
	
	public EnumRule getOpOrRule() {
		return getOpOrAccess().getRule();
	}
	
	//DAndExpression DExpression:
	//	DEqualityExpression (=> ({DBinaryOperation.leftOperand=current} operator=OpAnd) rightOperand=DEqualityExpression)*;
	public DmxGrammarAccess.DAndExpressionElements getDAndExpressionAccess() {
		return gaDmx.getDAndExpressionAccess();
	}
	
	public ParserRule getDAndExpressionRule() {
		return getDAndExpressionAccess().getRule();
	}
	
	//enum OpAnd returns DBinaryOperator:
	//	AND | AND='and';
	public DmxGrammarAccess.OpAndElements getOpAndAccess() {
		return gaDmx.getOpAndAccess();
	}
	
	public EnumRule getOpAndRule() {
		return getOpAndAccess().getRule();
	}
	
	//DEqualityExpression DExpression:
	//	DRelationalExpression (=> ({DBinaryOperation.leftOperand=current} operator=OpEquality)
	//	rightOperand=DRelationalExpression)*;
	public DmxGrammarAccess.DEqualityExpressionElements getDEqualityExpressionAccess() {
		return gaDmx.getDEqualityExpressionAccess();
	}
	
	public ParserRule getDEqualityExpressionRule() {
		return getDEqualityExpressionAccess().getRule();
	}
	
	//enum OpEquality returns DBinaryOperator:
	//	EQUAL='=' | NOT_EQUAL='!=' | NOT_EQUAL='<>';
	public DmxGrammarAccess.OpEqualityElements getOpEqualityAccess() {
		return gaDmx.getOpEqualityAccess();
	}
	
	public EnumRule getOpEqualityRule() {
		return getOpEqualityAccess().getRule();
	}
	
	//DRelationalExpression DExpression:
	//	DOtherOperatorExpression (=> ({DInstanceOfExpression.expression=current} OpInstanceOf) type=[DType] | =>
	//	({DBinaryOperation.leftOperand=current} operator=OpCompare) rightOperand=DOtherOperatorExpression)*;
	public DmxGrammarAccess.DRelationalExpressionElements getDRelationalExpressionAccess() {
		return gaDmx.getDRelationalExpressionAccess();
	}
	
	public ParserRule getDRelationalExpressionRule() {
		return getDRelationalExpressionAccess().getRule();
	}
	
	//OpInstanceOf:
	//	'ISA' | 'isa';
	public DmxGrammarAccess.OpInstanceOfElements getOpInstanceOfAccess() {
		return gaDmx.getOpInstanceOfAccess();
	}
	
	public ParserRule getOpInstanceOfRule() {
		return getOpInstanceOfAccess().getRule();
	}
	
	//enum OpCompare returns DBinaryOperator:
	//	LESS='<' | LESS_OR_EQUAL='<=' | LESS_OR_EQUAL='≤' | GREATER_OR_EQUAL='>=' | GREATER_OR_EQUAL='≥' | GREATER='>';
	public DmxGrammarAccess.OpCompareElements getOpCompareAccess() {
		return gaDmx.getOpCompareAccess();
	}
	
	public EnumRule getOpCompareRule() {
		return getOpCompareAccess().getRule();
	}
	
	//DOtherOperatorExpression DExpression:
	//	DAdditiveExpression (=> ({DBinaryOperation.leftOperand=current} operator=OpOther) rightOperand=DAdditiveExpression)*;
	public DmxGrammarAccess.DOtherOperatorExpressionElements getDOtherOperatorExpressionAccess() {
		return gaDmx.getDOtherOperatorExpressionAccess();
	}
	
	public ParserRule getDOtherOperatorExpressionRule() {
		return getDOtherOperatorExpressionAccess().getRule();
	}
	
	//enum OpOther returns DBinaryOperator:
	//	UNTIL='..' | SINGLE_ARROW='->' | DOUBLE_ARROW='=>';
	public DmxGrammarAccess.OpOtherElements getOpOtherAccess() {
		return gaDmx.getOpOtherAccess();
	}
	
	public EnumRule getOpOtherRule() {
		return getOpOtherAccess().getRule();
	}
	
	//DAdditiveExpression DExpression:
	//	DMultiplicativeExpression (=> ({DBinaryOperation.leftOperand=current} operator=OpAdd)
	//	rightOperand=DMultiplicativeExpression)*;
	public DmxGrammarAccess.DAdditiveExpressionElements getDAdditiveExpressionAccess() {
		return gaDmx.getDAdditiveExpressionAccess();
	}
	
	public ParserRule getDAdditiveExpressionRule() {
		return getDAdditiveExpressionAccess().getRule();
	}
	
	//enum OpAdd returns DBinaryOperator:
	//	ADD='+' | SUBTRACT='-';
	public DmxGrammarAccess.OpAddElements getOpAddAccess() {
		return gaDmx.getOpAddAccess();
	}
	
	public EnumRule getOpAddRule() {
		return getOpAddAccess().getRule();
	}
	
	//DMultiplicativeExpression DExpression:
	//	DUnaryOperation (=> ({DBinaryOperation.leftOperand=current} operator=OpMulti) rightOperand=DUnaryOperation)*;
	public DmxGrammarAccess.DMultiplicativeExpressionElements getDMultiplicativeExpressionAccess() {
		return gaDmx.getDMultiplicativeExpressionAccess();
	}
	
	public ParserRule getDMultiplicativeExpressionRule() {
		return getDMultiplicativeExpressionAccess().getRule();
	}
	
	//enum OpMulti returns DBinaryOperator:
	//	MULTIPLY='*' | DIVIDE='/' | POWER='**' | MODULO='%';
	public DmxGrammarAccess.OpMultiElements getOpMultiAccess() {
		return gaDmx.getOpMultiAccess();
	}
	
	public EnumRule getOpMultiRule() {
		return getOpMultiAccess().getRule();
	}
	
	//DUnaryOperation DExpression:
	//	{DUnaryOperation} operator=OpUnary operand=DUnaryOperation
	//	| DCastExpression;
	public DmxGrammarAccess.DUnaryOperationElements getDUnaryOperationAccess() {
		return gaDmx.getDUnaryOperationAccess();
	}
	
	public ParserRule getDUnaryOperationRule() {
		return getDUnaryOperationAccess().getRule();
	}
	
	//enum OpUnary returns DUnaryOperator:
	//	PLUS='+' | MINUS='-' | NOT='!' | NOT | NOT='not';
	public DmxGrammarAccess.OpUnaryElements getOpUnaryAccess() {
		return gaDmx.getOpUnaryAccess();
	}
	
	public EnumRule getOpUnaryRule() {
		return getOpUnaryAccess().getRule();
	}
	
	//DCastExpression DExpression:
	//	DNavigableMemberReference (=> ({DCastExpression.target=current} OpCast) type=[DType])?;
	public DmxGrammarAccess.DCastExpressionElements getDCastExpressionAccess() {
		return gaDmx.getDCastExpressionAccess();
	}
	
	public ParserRule getDCastExpressionRule() {
		return getDCastExpressionAccess().getRule();
	}
	
	//OpCast:
	//	'AS' | 'as';
	public DmxGrammarAccess.OpCastElements getOpCastAccess() {
		return gaDmx.getOpCastAccess();
	}
	
	public ParserRule getOpCastRule() {
		return getOpCastAccess().getRule();
	}
	
	//DNavigableMemberReference DExpression:
	//	super::DPrimaryExpression (=> ({DAssignment.memberContainer=current} '.' assignToMember=[DNavigableMember]
	//	OpSingleAssign) value=DAssignment
	//	| => ({DNavigableMemberReference.memberContainerReference=current} '.') member=[DNavigableMember] (=>
	//	explicitOperationCall?='(' (memberCallArguments+=super::DExpression (',' memberCallArguments+=super::DExpression)*)?
	//	')'
	//	| before?="@before")?)*;
	public DmxGrammarAccess.DNavigableMemberReferenceElements getDNavigableMemberReferenceAccess() {
		return gaDmx.getDNavigableMemberReferenceAccess();
	}
	
	public ParserRule getDNavigableMemberReferenceRule() {
		return getDNavigableMemberReferenceAccess().getRule();
	}
	
	//DLiteralExpression DExpression:
	//	DBooleanLiteral | DStringLiteral | DNaturalLiteral | DDecimalLiteral | DNilLiteral;
	public DmxGrammarAccess.DLiteralExpressionElements getDLiteralExpressionAccess() {
		return gaDmx.getDLiteralExpressionAccess();
	}
	
	public ParserRule getDLiteralExpressionRule() {
		return getDLiteralExpressionAccess().getRule();
	}
	
	//DSelfExpression DExpression:
	//	{DSelfExpression} ('SELF' | 'self');
	public DmxGrammarAccess.DSelfExpressionElements getDSelfExpressionAccess() {
		return gaDmx.getDSelfExpressionAccess();
	}
	
	public ParserRule getDSelfExpressionRule() {
		return getDSelfExpressionAccess().getRule();
	}
	
	//DReturnExpression DExpression:
	//	{DReturnExpression} ('RETURN' | 'return') -> expression=super::DExpression?;
	public DmxGrammarAccess.DReturnExpressionElements getDReturnExpressionAccess() {
		return gaDmx.getDReturnExpressionAccess();
	}
	
	public ParserRule getDReturnExpressionRule() {
		return getDReturnExpressionAccess().getRule();
	}
	
	//DRaiseExpression DExpression:
	//	{DRaiseExpression} ('RAISE' | 'raise') expression=super::DExpression;
	public DmxGrammarAccess.DRaiseExpressionElements getDRaiseExpressionAccess() {
		return gaDmx.getDRaiseExpressionAccess();
	}
	
	public ParserRule getDRaiseExpressionRule() {
		return getDRaiseExpressionAccess().getRule();
	}
	
	//DParenthesizedExpression DExpression:
	//	'(' super::DExpression ')';
	public DmxGrammarAccess.DParenthesizedExpressionElements getDParenthesizedExpressionAccess() {
		return gaDmx.getDParenthesizedExpressionAccess();
	}
	
	public ParserRule getDParenthesizedExpressionRule() {
		return getDParenthesizedExpressionAccess().getRule();
	}
	
	//DFunctionCall DExpression:
	//	{DFunctionCall} function=[DFunction]
	//	'(' (functionCallArguments+=super::DExpression (',' functionCallArguments+=super::DExpression)*)?
	//	')';
	public DmxGrammarAccess.DFunctionCallElements getDFunctionCallAccess() {
		return gaDmx.getDFunctionCallAccess();
	}
	
	public ParserRule getDFunctionCallRule() {
		return getDFunctionCallAccess().getRule();
	}
	
	//DConstructorCall DExpression:
	//	{DConstructorCall} OpConstructor constructor=[DComplexType] (=> explicitConstructorCall?='('
	//	(arguments+=super::DExpression (',' arguments+=super::DExpression)*)?
	//	')')?;
	public DmxGrammarAccess.DConstructorCallElements getDConstructorCallAccess() {
		return gaDmx.getDConstructorCallAccess();
	}
	
	public ParserRule getDConstructorCallRule() {
		return getDConstructorCallAccess().getRule();
	}
	
	//OpConstructor:
	//	'NEW' | 'new';
	public DmxGrammarAccess.OpConstructorElements getOpConstructorAccess() {
		return gaDmx.getOpConstructorAccess();
	}
	
	public ParserRule getOpConstructorRule() {
		return getOpConstructorAccess().getRule();
	}
	
	//DContextReference DExpression:
	//	{DContextReference} (target=[DNamedElement] before?="@before"?
	//	| '['
	//	target=[IPrimaryNavigationTarget|DQualifiedName] ('#' member=[DNavigableMember])? ("|" (displayName=ID |
	//	plural?="*"))?
	//	-> ']');
	public DmxGrammarAccess.DContextReferenceElements getDContextReferenceAccess() {
		return gaDmx.getDContextReferenceAccess();
	}
	
	public ParserRule getDContextReferenceRule() {
		return getDContextReferenceAccess().getRule();
	}
	
	//DIfExpression DExpression:
	//	{DIfExpression}
	//	'if' if=super::DExpression
	//	'then' then=super::DExpression (=> 'else' else=super::DExpression)?
	//	'end';
	public DmxGrammarAccess.DIfExpressionElements getDIfExpressionAccess() {
		return gaDmx.getDIfExpressionAccess();
	}
	
	public ParserRule getDIfExpressionRule() {
		return getDIfExpressionAccess().getRule();
	}
	
	//DForLoopExpression DExpression:
	//	=> ({DForLoopExpression}
	//	'for' declaredParam=ID ':') forExpression=super::DExpression 'do'
	//	eachExpression=super::DExpression
	//	'end';
	public DmxGrammarAccess.DForLoopExpressionElements getDForLoopExpressionAccess() {
		return gaDmx.getDForLoopExpressionAccess();
	}
	
	public ParserRule getDForLoopExpressionRule() {
		return getDForLoopExpressionAccess().getRule();
	}
	
	//DMultiplicity:
	//	'(' minOccurs=NATURAL '..' maxOccurs=MULTIPLICITY ')';
	public DmxGrammarAccess.DMultiplicityElements getDMultiplicityAccess() {
		return gaDmx.getDMultiplicityAccess();
	}
	
	public ParserRule getDMultiplicityRule() {
		return getDMultiplicityAccess().getRule();
	}
	
	//MULTIPLICITY ecore::EInt:
	//	NATURAL | '*';
	public DmxGrammarAccess.MULTIPLICITYElements getMULTIPLICITYAccess() {
		return gaDmx.getMULTIPLICITYAccess();
	}
	
	public ParserRule getMULTIPLICITYRule() {
		return getMULTIPLICITYAccess().getRule();
	}
	
	//DBooleanLiteral DExpression:
	//	{DBooleanLiteral} (value?='TRUE' | value?='true' | 'FALSE' | 'false');
	public DmxGrammarAccess.DBooleanLiteralElements getDBooleanLiteralAccess() {
		return gaDmx.getDBooleanLiteralAccess();
	}
	
	public ParserRule getDBooleanLiteralRule() {
		return getDBooleanLiteralAccess().getRule();
	}
	
	//DStringLiteral DExpression:
	//	{DStringLiteral} value=STRING;
	public DmxGrammarAccess.DStringLiteralElements getDStringLiteralAccess() {
		return gaDmx.getDStringLiteralAccess();
	}
	
	public ParserRule getDStringLiteralRule() {
		return getDStringLiteralAccess().getRule();
	}
	
	//DNaturalLiteral DExpression:
	//	{DNaturalLiteral} value=NATURAL;
	public DmxGrammarAccess.DNaturalLiteralElements getDNaturalLiteralAccess() {
		return gaDmx.getDNaturalLiteralAccess();
	}
	
	public ParserRule getDNaturalLiteralRule() {
		return getDNaturalLiteralAccess().getRule();
	}
	
	//DDecimalLiteral DExpression:
	//	{DDecimalLiteral} value=DECIMAL;
	public DmxGrammarAccess.DDecimalLiteralElements getDDecimalLiteralAccess() {
		return gaDmx.getDDecimalLiteralAccess();
	}
	
	public ParserRule getDDecimalLiteralRule() {
		return getDDecimalLiteralAccess().getRule();
	}
	
	//DNilLiteral DExpression:
	//	{DUndefinedLiteral} ('UNDEFINED' | 'undefined');
	public DmxGrammarAccess.DNilLiteralElements getDNilLiteralAccess() {
		return gaDmx.getDNilLiteralAccess();
	}
	
	public ParserRule getDNilLiteralRule() {
		return getDNilLiteralAccess().getRule();
	}
	
	//DECIMAL:
	//	NATURAL '.' NATURAL (('E' | 'e') ('+' | '-')? NATURAL)?;
	public DmxGrammarAccess.DECIMALElements getDECIMALAccess() {
		return gaDmx.getDECIMALAccess();
	}
	
	public ParserRule getDECIMALRule() {
		return getDECIMALAccess().getRule();
	}
	
	//DQualifiedNameWithWildcard:
	//	DQualifiedName '.*'?;
	public DmxGrammarAccess.DQualifiedNameWithWildcardElements getDQualifiedNameWithWildcardAccess() {
		return gaDmx.getDQualifiedNameWithWildcardAccess();
	}
	
	public ParserRule getDQualifiedNameWithWildcardRule() {
		return getDQualifiedNameWithWildcardAccess().getRule();
	}
	
	//DQualifiedName:
	//	ID ('.' ID)*;
	public DmxGrammarAccess.DQualifiedNameElements getDQualifiedNameAccess() {
		return gaDmx.getDQualifiedNameAccess();
	}
	
	public ParserRule getDQualifiedNameRule() {
		return getDQualifiedNameAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? (LETTER | '_') (LETTER | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaDmx.getIDRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"';
	public TerminalRule getSTRINGRule() {
		return gaDmx.getSTRINGRule();
	}
	
	//terminal NATURAL returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getNATURALRule() {
		return gaDmx.getNATURALRule();
	}
	
	//terminal fragment LETTER:
	//	'a'..'z' | 'A'..'Z' | '\\u00c0'..'\\u00d6' | '\\u00d8'..'\\u00f6' | '\\u00f8'..'\\u00ff';
	public TerminalRule getLETTERRule() {
		return gaDmx.getLETTERRule();
	}
	
	//terminal fragment PLAIN_TEXT:
	//	!('»' | ']' | '[');
	public TerminalRule getPLAIN_TEXTRule() {
		return gaDmx.getPLAIN_TEXTRule();
	}
	
	//terminal PLAIN_TEXT_ONLY:
	//	'«' PLAIN_TEXT* '»';
	public TerminalRule getPLAIN_TEXT_ONLYRule() {
		return gaDmx.getPLAIN_TEXT_ONLYRule();
	}
	
	//terminal PLAIN_TEXT_START:
	//	'«' PLAIN_TEXT* '[';
	public TerminalRule getPLAIN_TEXT_STARTRule() {
		return gaDmx.getPLAIN_TEXT_STARTRule();
	}
	
	//terminal PLAIN_TEXT_MIDDLE:
	//	']' PLAIN_TEXT* '[';
	public TerminalRule getPLAIN_TEXT_MIDDLERule() {
		return gaDmx.getPLAIN_TEXT_MIDDLERule();
	}
	
	//terminal PLAIN_TEXT_END:
	//	']' PLAIN_TEXT* '»';
	public TerminalRule getPLAIN_TEXT_ENDRule() {
		return gaDmx.getPLAIN_TEXT_ENDRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaDmx.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaDmx.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaDmx.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaDmx.getANY_OTHERRule();
	}
}
