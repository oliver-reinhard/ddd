/*
 * generated by Xtext 2.19.0
 */
package com.mimacom.ddd.dm.esm.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import com.mimacom.ddd.dm.dmx.services.DmxGrammarAccess;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class EsmGrammarAccess extends AbstractGrammarElementFinder {
	
	public class EsmDomainElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.esm.Esm.EsmDomain");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cImportsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cImportsDImportParserRuleCall_0_0 = (RuleCall)cImportsAssignment_0.eContents().get(0);
		private final Keyword cDomainKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameDQualifiedNameParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cAliasKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cAliasesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cAliasesIDTerminalRuleCall_3_1_0 = (RuleCall)cAliasesAssignment_3_1.eContents().get(0);
		private final Assignment cDescriptionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cDescriptionDRichTextParserRuleCall_4_0 = (RuleCall)cDescriptionAssignment_4.eContents().get(0);
		private final Assignment cStateModelAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cStateModelEsmEntityStateModelParserRuleCall_5_0 = (RuleCall)cStateModelAssignment_5.eContents().get(0);
		
		//EsmDomain:
		//	imports+=DImport*
		//	'domain'
		//	name=DQualifiedName ('alias' aliases+=ID)*
		//	description=DRichText?
		//	stateModel=EsmEntityStateModel;
		@Override public ParserRule getRule() { return rule; }
		
		//imports+=DImport* 'domain' name=DQualifiedName ('alias' aliases+=ID)* description=DRichText?
		//stateModel=EsmEntityStateModel
		public Group getGroup() { return cGroup; }
		
		//imports+=DImport*
		public Assignment getImportsAssignment_0() { return cImportsAssignment_0; }
		
		//DImport
		public RuleCall getImportsDImportParserRuleCall_0_0() { return cImportsDImportParserRuleCall_0_0; }
		
		//'domain'
		public Keyword getDomainKeyword_1() { return cDomainKeyword_1; }
		
		//name=DQualifiedName
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//DQualifiedName
		public RuleCall getNameDQualifiedNameParserRuleCall_2_0() { return cNameDQualifiedNameParserRuleCall_2_0; }
		
		//('alias' aliases+=ID)*
		public Group getGroup_3() { return cGroup_3; }
		
		//'alias'
		public Keyword getAliasKeyword_3_0() { return cAliasKeyword_3_0; }
		
		//aliases+=ID
		public Assignment getAliasesAssignment_3_1() { return cAliasesAssignment_3_1; }
		
		//ID
		public RuleCall getAliasesIDTerminalRuleCall_3_1_0() { return cAliasesIDTerminalRuleCall_3_1_0; }
		
		//description=DRichText?
		public Assignment getDescriptionAssignment_4() { return cDescriptionAssignment_4; }
		
		//DRichText
		public RuleCall getDescriptionDRichTextParserRuleCall_4_0() { return cDescriptionDRichTextParserRuleCall_4_0; }
		
		//stateModel=EsmEntityStateModel
		public Assignment getStateModelAssignment_5() { return cStateModelAssignment_5; }
		
		//EsmEntityStateModel
		public RuleCall getStateModelEsmEntityStateModelParserRuleCall_5_0() { return cStateModelEsmEntityStateModelParserRuleCall_5_0; }
	}
	public class EsmEntityStateModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.esm.Esm.EsmEntityStateModel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStateKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cModelKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameDQualifiedNameParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cForKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cForTypeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cForTypeDEntityTypeCrossReference_4_0 = (CrossReference)cForTypeAssignment_4.eContents().get(0);
		private final RuleCall cForTypeDEntityTypeDQualifiedNameParserRuleCall_4_0_1 = (RuleCall)cForTypeDEntityTypeCrossReference_4_0.eContents().get(1);
		private final Assignment cDescriptionAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cDescriptionDRichTextParserRuleCall_5_0 = (RuleCall)cDescriptionAssignment_5.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cDirectionKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cDirectionAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cDirectionEsmLayoutDirectionEnumRuleCall_7_1_0 = (RuleCall)cDirectionAssignment_7_1.eContents().get(0);
		private final Assignment cStatesAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cStatesEsmStateParserRuleCall_8_0 = (RuleCall)cStatesAssignment_8.eContents().get(0);
		private final Assignment cTransitionsAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cTransitionsEsmTransitionParserRuleCall_9_0 = (RuleCall)cTransitionsAssignment_9.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_10 = (Keyword)cGroup.eContents().get(10);
		
		//EsmEntityStateModel:
		//	'state' 'model'
		//	name=DQualifiedName
		//	'for'
		//	forType=[DEntityType|DQualifiedName] description=DRichText?
		//	'{' ('direction' direction=EsmLayoutDirection)?
		//	states+=EsmState+
		//	transitions+=EsmTransition+
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'state' 'model' name=DQualifiedName 'for' forType=[DEntityType|DQualifiedName] description=DRichText? '{' ('direction'
		//direction=EsmLayoutDirection)? states+=EsmState+ transitions+=EsmTransition+ '}'
		public Group getGroup() { return cGroup; }
		
		//'state'
		public Keyword getStateKeyword_0() { return cStateKeyword_0; }
		
		//'model'
		public Keyword getModelKeyword_1() { return cModelKeyword_1; }
		
		//name=DQualifiedName
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//DQualifiedName
		public RuleCall getNameDQualifiedNameParserRuleCall_2_0() { return cNameDQualifiedNameParserRuleCall_2_0; }
		
		//'for'
		public Keyword getForKeyword_3() { return cForKeyword_3; }
		
		//forType=[DEntityType|DQualifiedName]
		public Assignment getForTypeAssignment_4() { return cForTypeAssignment_4; }
		
		//[DEntityType|DQualifiedName]
		public CrossReference getForTypeDEntityTypeCrossReference_4_0() { return cForTypeDEntityTypeCrossReference_4_0; }
		
		//DQualifiedName
		public RuleCall getForTypeDEntityTypeDQualifiedNameParserRuleCall_4_0_1() { return cForTypeDEntityTypeDQualifiedNameParserRuleCall_4_0_1; }
		
		//description=DRichText?
		public Assignment getDescriptionAssignment_5() { return cDescriptionAssignment_5; }
		
		//DRichText
		public RuleCall getDescriptionDRichTextParserRuleCall_5_0() { return cDescriptionDRichTextParserRuleCall_5_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_6() { return cLeftCurlyBracketKeyword_6; }
		
		//('direction' direction=EsmLayoutDirection)?
		public Group getGroup_7() { return cGroup_7; }
		
		//'direction'
		public Keyword getDirectionKeyword_7_0() { return cDirectionKeyword_7_0; }
		
		//direction=EsmLayoutDirection
		public Assignment getDirectionAssignment_7_1() { return cDirectionAssignment_7_1; }
		
		//EsmLayoutDirection
		public RuleCall getDirectionEsmLayoutDirectionEnumRuleCall_7_1_0() { return cDirectionEsmLayoutDirectionEnumRuleCall_7_1_0; }
		
		//states+=EsmState+
		public Assignment getStatesAssignment_8() { return cStatesAssignment_8; }
		
		//EsmState
		public RuleCall getStatesEsmStateParserRuleCall_8_0() { return cStatesEsmStateParserRuleCall_8_0; }
		
		//transitions+=EsmTransition+
		public Assignment getTransitionsAssignment_9() { return cTransitionsAssignment_9; }
		
		//EsmTransition
		public RuleCall getTransitionsEsmTransitionParserRuleCall_9_0() { return cTransitionsEsmTransitionParserRuleCall_9_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_10() { return cRightCurlyBracketKeyword_10; }
	}
	public class DExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.esm.Esm.DExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDmxOrExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDRichTextParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//@Override
		//DExpression:
		//	DmxOrExpression | DRichText;
		@Override public ParserRule getRule() { return rule; }
		
		//DmxOrExpression | DRichText
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//DmxOrExpression
		public RuleCall getDmxOrExpressionParserRuleCall_0() { return cDmxOrExpressionParserRuleCall_0; }
		
		//DRichText
		public RuleCall getDRichTextParserRuleCall_1() { return cDRichTextParserRuleCall_1; }
	}
	public class EsmStateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.esm.Esm.EsmState");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEsmNormalStateParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cEsmDerivedStateParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cEsmCompositeStateParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cEsmConcurrentStateParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//EsmState IEsmState:
		//	EsmNormalState | EsmDerivedState | EsmCompositeState | EsmConcurrentState;
		@Override public ParserRule getRule() { return rule; }
		
		//EsmNormalState | EsmDerivedState | EsmCompositeState | EsmConcurrentState
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//EsmNormalState
		public RuleCall getEsmNormalStateParserRuleCall_0() { return cEsmNormalStateParserRuleCall_0; }
		
		//EsmDerivedState
		public RuleCall getEsmDerivedStateParserRuleCall_1() { return cEsmDerivedStateParserRuleCall_1; }
		
		//EsmCompositeState
		public RuleCall getEsmCompositeStateParserRuleCall_2() { return cEsmCompositeStateParserRuleCall_2; }
		
		//EsmConcurrentState
		public RuleCall getEsmConcurrentStateParserRuleCall_3() { return cEsmConcurrentStateParserRuleCall_3; }
	}
	public class EsmNormalStateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.esm.Esm.EsmNormalState");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cAlternatives_0.eContents().get(0);
		private final Assignment cKindAssignment_0_0_0 = (Assignment)cGroup_0_0.eContents().get(0);
		private final RuleCall cKindEsmStateKindEnumRuleCall_0_0_0_0 = (RuleCall)cKindAssignment_0_0_0.eContents().get(0);
		private final Keyword cStateKeyword_0_0_1 = (Keyword)cGroup_0_0.eContents().get(1);
		private final Keyword cStateKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Assignment cStateAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cStateDStateCrossReference_1_0 = (CrossReference)cStateAssignment_1.eContents().get(0);
		private final RuleCall cStateDStateIDTerminalRuleCall_1_0_1 = (RuleCall)cStateDStateCrossReference_1_0.eContents().get(1);
		private final Assignment cDescriptionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDescriptionDRichTextParserRuleCall_2_0 = (RuleCall)cDescriptionAssignment_2.eContents().get(0);
		
		//EsmNormalState EsmState:
		//	(kind=EsmStateKind 'state'?
		//	| 'state') state=[DState] description=DRichText?;
		@Override public ParserRule getRule() { return rule; }
		
		//(kind=EsmStateKind 'state'? | 'state') state=[DState] description=DRichText?
		public Group getGroup() { return cGroup; }
		
		//(kind=EsmStateKind 'state'? | 'state')
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//kind=EsmStateKind 'state'?
		public Group getGroup_0_0() { return cGroup_0_0; }
		
		//kind=EsmStateKind
		public Assignment getKindAssignment_0_0_0() { return cKindAssignment_0_0_0; }
		
		//EsmStateKind
		public RuleCall getKindEsmStateKindEnumRuleCall_0_0_0_0() { return cKindEsmStateKindEnumRuleCall_0_0_0_0; }
		
		//'state'?
		public Keyword getStateKeyword_0_0_1() { return cStateKeyword_0_0_1; }
		
		//'state'
		public Keyword getStateKeyword_0_1() { return cStateKeyword_0_1; }
		
		//state=[DState]
		public Assignment getStateAssignment_1() { return cStateAssignment_1; }
		
		//[DState]
		public CrossReference getStateDStateCrossReference_1_0() { return cStateDStateCrossReference_1_0; }
		
		//ID
		public RuleCall getStateDStateIDTerminalRuleCall_1_0_1() { return cStateDStateIDTerminalRuleCall_1_0_1; }
		
		//description=DRichText?
		public Assignment getDescriptionAssignment_2() { return cDescriptionAssignment_2; }
		
		//DRichText
		public RuleCall getDescriptionDRichTextParserRuleCall_2_0() { return cDescriptionDRichTextParserRuleCall_2_0; }
	}
	public class EsmDerivedStateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.esm.Esm.EsmDerivedState");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDerivedKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cKindAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cKindEsmStateKindEnumRuleCall_1_0 = (RuleCall)cKindAssignment_1.eContents().get(0);
		private final Keyword cStateKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cStateAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cStateDStateCrossReference_3_0 = (CrossReference)cStateAssignment_3.eContents().get(0);
		private final RuleCall cStateDStateIDTerminalRuleCall_3_0_1 = (RuleCall)cStateDStateCrossReference_3_0.eContents().get(1);
		private final Assignment cDescriptionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cDescriptionDRichTextParserRuleCall_4_0 = (RuleCall)cDescriptionAssignment_4.eContents().get(0);
		private final Keyword cWhenKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cExpressionAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cExpressionDExpressionParserRuleCall_6_0 = (RuleCall)cExpressionAssignment_6.eContents().get(0);
		
		//EsmDerivedState:
		//	'derived'
		//	kind=EsmStateKind?
		//	'state'?
		//	state=[DState] description=DRichText?
		//	'when' expression=DExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//'derived' kind=EsmStateKind? 'state'? state=[DState] description=DRichText? 'when' expression=DExpression
		public Group getGroup() { return cGroup; }
		
		//'derived'
		public Keyword getDerivedKeyword_0() { return cDerivedKeyword_0; }
		
		//kind=EsmStateKind?
		public Assignment getKindAssignment_1() { return cKindAssignment_1; }
		
		//EsmStateKind
		public RuleCall getKindEsmStateKindEnumRuleCall_1_0() { return cKindEsmStateKindEnumRuleCall_1_0; }
		
		//'state'?
		public Keyword getStateKeyword_2() { return cStateKeyword_2; }
		
		//state=[DState]
		public Assignment getStateAssignment_3() { return cStateAssignment_3; }
		
		//[DState]
		public CrossReference getStateDStateCrossReference_3_0() { return cStateDStateCrossReference_3_0; }
		
		//ID
		public RuleCall getStateDStateIDTerminalRuleCall_3_0_1() { return cStateDStateIDTerminalRuleCall_3_0_1; }
		
		//description=DRichText?
		public Assignment getDescriptionAssignment_4() { return cDescriptionAssignment_4; }
		
		//DRichText
		public RuleCall getDescriptionDRichTextParserRuleCall_4_0() { return cDescriptionDRichTextParserRuleCall_4_0; }
		
		//'when'
		public Keyword getWhenKeyword_5() { return cWhenKeyword_5; }
		
		//expression=DExpression
		public Assignment getExpressionAssignment_6() { return cExpressionAssignment_6; }
		
		//DExpression
		public RuleCall getExpressionDExpressionParserRuleCall_6_0() { return cExpressionDExpressionParserRuleCall_6_0; }
	}
	public class EsmCompositeStateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.esm.Esm.EsmCompositeState");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCompositeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cKindAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cKindEsmStateKindEnumRuleCall_1_0 = (RuleCall)cKindAssignment_1.eContents().get(0);
		private final Keyword cStateKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cStateAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cStateDStateCrossReference_3_0 = (CrossReference)cStateAssignment_3.eContents().get(0);
		private final RuleCall cStateDStateIDTerminalRuleCall_3_0_1 = (RuleCall)cStateDStateCrossReference_3_0.eContents().get(1);
		private final Assignment cDescriptionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cDescriptionDRichTextParserRuleCall_4_0 = (RuleCall)cDescriptionAssignment_4.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cDirectionKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cDirectionAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cDirectionEsmLayoutDirectionEnumRuleCall_6_1_0 = (RuleCall)cDirectionAssignment_6_1.eContents().get(0);
		private final Assignment cStatesAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cStatesEsmStateParserRuleCall_7_0 = (RuleCall)cStatesAssignment_7.eContents().get(0);
		private final Assignment cTransitionsAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cTransitionsEsmTransitionParserRuleCall_8_0 = (RuleCall)cTransitionsAssignment_8.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//EsmCompositeState:
		//	'composite'
		//	kind=EsmStateKind?
		//	'state'?
		//	state=[DState] description=DRichText?
		//	'{' ('direction' direction=EsmLayoutDirection)?
		//	states+=EsmState+
		//	transitions+=EsmTransition+
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'composite' kind=EsmStateKind? 'state'? state=[DState] description=DRichText? '{' ('direction'
		//direction=EsmLayoutDirection)? states+=EsmState+ transitions+=EsmTransition+ '}'
		public Group getGroup() { return cGroup; }
		
		//'composite'
		public Keyword getCompositeKeyword_0() { return cCompositeKeyword_0; }
		
		//kind=EsmStateKind?
		public Assignment getKindAssignment_1() { return cKindAssignment_1; }
		
		//EsmStateKind
		public RuleCall getKindEsmStateKindEnumRuleCall_1_0() { return cKindEsmStateKindEnumRuleCall_1_0; }
		
		//'state'?
		public Keyword getStateKeyword_2() { return cStateKeyword_2; }
		
		//state=[DState]
		public Assignment getStateAssignment_3() { return cStateAssignment_3; }
		
		//[DState]
		public CrossReference getStateDStateCrossReference_3_0() { return cStateDStateCrossReference_3_0; }
		
		//ID
		public RuleCall getStateDStateIDTerminalRuleCall_3_0_1() { return cStateDStateIDTerminalRuleCall_3_0_1; }
		
		//description=DRichText?
		public Assignment getDescriptionAssignment_4() { return cDescriptionAssignment_4; }
		
		//DRichText
		public RuleCall getDescriptionDRichTextParserRuleCall_4_0() { return cDescriptionDRichTextParserRuleCall_4_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }
		
		//('direction' direction=EsmLayoutDirection)?
		public Group getGroup_6() { return cGroup_6; }
		
		//'direction'
		public Keyword getDirectionKeyword_6_0() { return cDirectionKeyword_6_0; }
		
		//direction=EsmLayoutDirection
		public Assignment getDirectionAssignment_6_1() { return cDirectionAssignment_6_1; }
		
		//EsmLayoutDirection
		public RuleCall getDirectionEsmLayoutDirectionEnumRuleCall_6_1_0() { return cDirectionEsmLayoutDirectionEnumRuleCall_6_1_0; }
		
		//states+=EsmState+
		public Assignment getStatesAssignment_7() { return cStatesAssignment_7; }
		
		//EsmState
		public RuleCall getStatesEsmStateParserRuleCall_7_0() { return cStatesEsmStateParserRuleCall_7_0; }
		
		//transitions+=EsmTransition+
		public Assignment getTransitionsAssignment_8() { return cTransitionsAssignment_8; }
		
		//EsmTransition
		public RuleCall getTransitionsEsmTransitionParserRuleCall_8_0() { return cTransitionsEsmTransitionParserRuleCall_8_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_9() { return cRightCurlyBracketKeyword_9; }
	}
	public class EsmConcurrentStateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.esm.Esm.EsmConcurrentState");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cConcurrentKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cKindAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cKindEsmStateKindEnumRuleCall_1_0 = (RuleCall)cKindAssignment_1.eContents().get(0);
		private final Keyword cStateKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cStateAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cStateDStateCrossReference_3_0 = (CrossReference)cStateAssignment_3.eContents().get(0);
		private final RuleCall cStateDStateIDTerminalRuleCall_3_0_1 = (RuleCall)cStateDStateCrossReference_3_0.eContents().get(1);
		private final Assignment cDescriptionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cDescriptionDRichTextParserRuleCall_4_0 = (RuleCall)cDescriptionAssignment_4.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cSubStatesAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cSubStatesEsmSubStateModelParserRuleCall_6_0 = (RuleCall)cSubStatesAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//EsmConcurrentState:
		//	'concurrent'
		//	kind=EsmStateKind?
		//	'state'?
		//	state=[DState] description=DRichText?
		//	'{'
		//	// direction is always 'right' (PlantUML only supports horizontal dividers between regions)
		//	subStates+=EsmSubStateModel+
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'concurrent' kind=EsmStateKind? 'state'? state=[DState] description=DRichText? '{' // direction is always 'right' (PlantUML only supports horizontal dividers between regions)
		//subStates+=EsmSubStateModel+ '}'
		public Group getGroup() { return cGroup; }
		
		//'concurrent'
		public Keyword getConcurrentKeyword_0() { return cConcurrentKeyword_0; }
		
		//kind=EsmStateKind?
		public Assignment getKindAssignment_1() { return cKindAssignment_1; }
		
		//EsmStateKind
		public RuleCall getKindEsmStateKindEnumRuleCall_1_0() { return cKindEsmStateKindEnumRuleCall_1_0; }
		
		//'state'?
		public Keyword getStateKeyword_2() { return cStateKeyword_2; }
		
		//state=[DState]
		public Assignment getStateAssignment_3() { return cStateAssignment_3; }
		
		//[DState]
		public CrossReference getStateDStateCrossReference_3_0() { return cStateDStateCrossReference_3_0; }
		
		//ID
		public RuleCall getStateDStateIDTerminalRuleCall_3_0_1() { return cStateDStateIDTerminalRuleCall_3_0_1; }
		
		//description=DRichText?
		public Assignment getDescriptionAssignment_4() { return cDescriptionAssignment_4; }
		
		//DRichText
		public RuleCall getDescriptionDRichTextParserRuleCall_4_0() { return cDescriptionDRichTextParserRuleCall_4_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }
		
		//// direction is always 'right' (PlantUML only supports horizontal dividers between regions)
		//subStates+=EsmSubStateModel+
		public Assignment getSubStatesAssignment_6() { return cSubStatesAssignment_6; }
		
		//EsmSubStateModel
		public RuleCall getSubStatesEsmSubStateModelParserRuleCall_6_0() { return cSubStatesEsmSubStateModelParserRuleCall_6_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	public class EsmSubStateModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.esm.Esm.EsmSubStateModel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSubstateKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cStatesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStatesEsmStateParserRuleCall_2_0 = (RuleCall)cStatesAssignment_2.eContents().get(0);
		private final Assignment cTransitionsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTransitionsEsmTransitionParserRuleCall_3_0 = (RuleCall)cTransitionsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//EsmSubStateModel:
		//	'substate'
		//	'{'
		//	// direction is always 'right' (PlantUML only supports horizontal dividers between regions)
		//	states+=EsmState+
		//	transitions+=EsmTransition+
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'substate' '{' // direction is always 'right' (PlantUML only supports horizontal dividers between regions)
		//states+=EsmState+ transitions+=EsmTransition+ '}'
		public Group getGroup() { return cGroup; }
		
		//'substate'
		public Keyword getSubstateKeyword_0() { return cSubstateKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//// direction is always 'right' (PlantUML only supports horizontal dividers between regions)
		//states+=EsmState+
		public Assignment getStatesAssignment_2() { return cStatesAssignment_2; }
		
		//EsmState
		public RuleCall getStatesEsmStateParserRuleCall_2_0() { return cStatesEsmStateParserRuleCall_2_0; }
		
		//transitions+=EsmTransition+
		public Assignment getTransitionsAssignment_3() { return cTransitionsAssignment_3; }
		
		//EsmTransition
		public RuleCall getTransitionsEsmTransitionParserRuleCall_3_0() { return cTransitionsEsmTransitionParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class EsmTransitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.esm.Esm.EsmTransition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTransitionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDirectionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDirectionEsmLayoutDirectionEnumRuleCall_1_0 = (RuleCall)cDirectionAssignment_1.eContents().get(0);
		private final Keyword cFromKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cFromAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cFromDStateCrossReference_3_0 = (CrossReference)cFromAssignment_3.eContents().get(0);
		private final RuleCall cFromDStateIDTerminalRuleCall_3_0_1 = (RuleCall)cFromDStateCrossReference_3_0.eContents().get(1);
		private final Keyword cToKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cToAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cToDStateCrossReference_5_0 = (CrossReference)cToAssignment_5.eContents().get(0);
		private final RuleCall cToDStateIDTerminalRuleCall_5_0_1 = (RuleCall)cToDStateCrossReference_5_0.eContents().get(1);
		private final Keyword cAsKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cEventAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final CrossReference cEventDStateEventCrossReference_7_0 = (CrossReference)cEventAssignment_7.eContents().get(0);
		private final RuleCall cEventDStateEventIDTerminalRuleCall_7_0_1 = (RuleCall)cEventDStateEventCrossReference_7_0.eContents().get(1);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cWhenKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Assignment cGuardAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final RuleCall cGuardDExpressionParserRuleCall_8_1_0 = (RuleCall)cGuardAssignment_8_1.eContents().get(0);
		
		//EsmTransition:
		//	'transition'
		//	direction=EsmLayoutDirection?
		//	'from'
		//	from=[DState]
		//	'to'
		//	to=[DState]
		//	'as' event=[DStateEvent] ('when'
		//	guard=DExpression)?;
		@Override public ParserRule getRule() { return rule; }
		
		//'transition' direction=EsmLayoutDirection? 'from' from=[DState] 'to' to=[DState] 'as' event=[DStateEvent] ('when'
		//guard=DExpression)?
		public Group getGroup() { return cGroup; }
		
		//'transition'
		public Keyword getTransitionKeyword_0() { return cTransitionKeyword_0; }
		
		//direction=EsmLayoutDirection?
		public Assignment getDirectionAssignment_1() { return cDirectionAssignment_1; }
		
		//EsmLayoutDirection
		public RuleCall getDirectionEsmLayoutDirectionEnumRuleCall_1_0() { return cDirectionEsmLayoutDirectionEnumRuleCall_1_0; }
		
		//'from'
		public Keyword getFromKeyword_2() { return cFromKeyword_2; }
		
		//from=[DState]
		public Assignment getFromAssignment_3() { return cFromAssignment_3; }
		
		//[DState]
		public CrossReference getFromDStateCrossReference_3_0() { return cFromDStateCrossReference_3_0; }
		
		//ID
		public RuleCall getFromDStateIDTerminalRuleCall_3_0_1() { return cFromDStateIDTerminalRuleCall_3_0_1; }
		
		//'to'
		public Keyword getToKeyword_4() { return cToKeyword_4; }
		
		//to=[DState]
		public Assignment getToAssignment_5() { return cToAssignment_5; }
		
		//[DState]
		public CrossReference getToDStateCrossReference_5_0() { return cToDStateCrossReference_5_0; }
		
		//ID
		public RuleCall getToDStateIDTerminalRuleCall_5_0_1() { return cToDStateIDTerminalRuleCall_5_0_1; }
		
		//'as'
		public Keyword getAsKeyword_6() { return cAsKeyword_6; }
		
		//event=[DStateEvent]
		public Assignment getEventAssignment_7() { return cEventAssignment_7; }
		
		//[DStateEvent]
		public CrossReference getEventDStateEventCrossReference_7_0() { return cEventDStateEventCrossReference_7_0; }
		
		//ID
		public RuleCall getEventDStateEventIDTerminalRuleCall_7_0_1() { return cEventDStateEventIDTerminalRuleCall_7_0_1; }
		
		//('when' guard=DExpression)?
		public Group getGroup_8() { return cGroup_8; }
		
		//'when'
		public Keyword getWhenKeyword_8_0() { return cWhenKeyword_8_0; }
		
		//guard=DExpression
		public Assignment getGuardAssignment_8_1() { return cGuardAssignment_8_1; }
		
		//DExpression
		public RuleCall getGuardDExpressionParserRuleCall_8_1_0() { return cGuardDExpressionParserRuleCall_8_1_0; }
	}
	public class DmxPrimaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.esm.Esm.DmxPrimaryExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDmxLiteralExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDmxParenthesizedExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cDmxFunctionCallParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cDmxContextReferenceParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cDmxIfExpressionParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//@Override
		//DmxPrimaryExpression DExpression:
		//	DmxLiteralExpression | DmxParenthesizedExpression | DmxFunctionCall | DmxContextReference | DmxIfExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//DmxLiteralExpression | DmxParenthesizedExpression | DmxFunctionCall | DmxContextReference | DmxIfExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//DmxLiteralExpression
		public RuleCall getDmxLiteralExpressionParserRuleCall_0() { return cDmxLiteralExpressionParserRuleCall_0; }
		
		//DmxParenthesizedExpression
		public RuleCall getDmxParenthesizedExpressionParserRuleCall_1() { return cDmxParenthesizedExpressionParserRuleCall_1; }
		
		//DmxFunctionCall
		public RuleCall getDmxFunctionCallParserRuleCall_2() { return cDmxFunctionCallParserRuleCall_2; }
		
		//DmxContextReference
		public RuleCall getDmxContextReferenceParserRuleCall_3() { return cDmxContextReferenceParserRuleCall_3; }
		
		//DmxIfExpression
		public RuleCall getDmxIfExpressionParserRuleCall_4() { return cDmxIfExpressionParserRuleCall_4; }
	}
	
	public class EsmStateKindElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.esm.Esm.EsmStateKind");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cINITIALEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cINITIALInitialKeyword_0_0 = (Keyword)cINITIALEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cFINALEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cFINALFinalKeyword_1_0 = (Keyword)cFINALEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum EsmStateKind:
		//	INITIAL='initial' | FINAL='final';
		public EnumRule getRule() { return rule; }
		
		//INITIAL='initial' | FINAL='final'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//INITIAL='initial'
		public EnumLiteralDeclaration getINITIALEnumLiteralDeclaration_0() { return cINITIALEnumLiteralDeclaration_0; }
		
		//'initial'
		public Keyword getINITIALInitialKeyword_0_0() { return cINITIALInitialKeyword_0_0; }
		
		//FINAL='final'
		public EnumLiteralDeclaration getFINALEnumLiteralDeclaration_1() { return cFINALEnumLiteralDeclaration_1; }
		
		//'final'
		public Keyword getFINALFinalKeyword_1_0() { return cFINALFinalKeyword_1_0; }
	}
	public class EsmLayoutDirectionElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "com.mimacom.ddd.dm.esm.Esm.EsmLayoutDirection");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cDOWNEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cDOWNDownKeyword_0_0 = (Keyword)cDOWNEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cLEFTEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cLEFTLeftKeyword_1_0 = (Keyword)cLEFTEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cUPEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cUPUpKeyword_2_0 = (Keyword)cUPEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cRIGHTEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cRIGHTRightKeyword_3_0 = (Keyword)cRIGHTEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum EsmLayoutDirection:
		//	DOWN="down" | LEFT="left" | UP="up" | RIGHT="right";
		public EnumRule getRule() { return rule; }
		
		//DOWN="down" | LEFT="left" | UP="up" | RIGHT="right"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//DOWN="down"
		public EnumLiteralDeclaration getDOWNEnumLiteralDeclaration_0() { return cDOWNEnumLiteralDeclaration_0; }
		
		//"down"
		public Keyword getDOWNDownKeyword_0_0() { return cDOWNDownKeyword_0_0; }
		
		//LEFT="left"
		public EnumLiteralDeclaration getLEFTEnumLiteralDeclaration_1() { return cLEFTEnumLiteralDeclaration_1; }
		
		//"left"
		public Keyword getLEFTLeftKeyword_1_0() { return cLEFTLeftKeyword_1_0; }
		
		//UP="up"
		public EnumLiteralDeclaration getUPEnumLiteralDeclaration_2() { return cUPEnumLiteralDeclaration_2; }
		
		//"up"
		public Keyword getUPUpKeyword_2_0() { return cUPUpKeyword_2_0; }
		
		//RIGHT="right"
		public EnumLiteralDeclaration getRIGHTEnumLiteralDeclaration_3() { return cRIGHTEnumLiteralDeclaration_3; }
		
		//"right"
		public Keyword getRIGHTRightKeyword_3_0() { return cRIGHTRightKeyword_3_0; }
	}
	
	private final EsmDomainElements pEsmDomain;
	private final EsmEntityStateModelElements pEsmEntityStateModel;
	private final DExpressionElements pDExpression;
	private final EsmStateElements pEsmState;
	private final EsmStateKindElements eEsmStateKind;
	private final EsmNormalStateElements pEsmNormalState;
	private final EsmDerivedStateElements pEsmDerivedState;
	private final EsmCompositeStateElements pEsmCompositeState;
	private final EsmConcurrentStateElements pEsmConcurrentState;
	private final EsmSubStateModelElements pEsmSubStateModel;
	private final EsmTransitionElements pEsmTransition;
	private final EsmLayoutDirectionElements eEsmLayoutDirection;
	private final DmxPrimaryExpressionElements pDmxPrimaryExpression;
	
	private final Grammar grammar;
	
	private final DmxGrammarAccess gaDmx;

	@Inject
	public EsmGrammarAccess(GrammarProvider grammarProvider,
			DmxGrammarAccess gaDmx) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaDmx = gaDmx;
		this.pEsmDomain = new EsmDomainElements();
		this.pEsmEntityStateModel = new EsmEntityStateModelElements();
		this.pDExpression = new DExpressionElements();
		this.pEsmState = new EsmStateElements();
		this.eEsmStateKind = new EsmStateKindElements();
		this.pEsmNormalState = new EsmNormalStateElements();
		this.pEsmDerivedState = new EsmDerivedStateElements();
		this.pEsmCompositeState = new EsmCompositeStateElements();
		this.pEsmConcurrentState = new EsmConcurrentStateElements();
		this.pEsmSubStateModel = new EsmSubStateModelElements();
		this.pEsmTransition = new EsmTransitionElements();
		this.eEsmLayoutDirection = new EsmLayoutDirectionElements();
		this.pDmxPrimaryExpression = new DmxPrimaryExpressionElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("com.mimacom.ddd.dm.esm.Esm".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public DmxGrammarAccess getDmxGrammarAccess() {
		return gaDmx;
	}

	
	//EsmDomain:
	//	imports+=DImport*
	//	'domain'
	//	name=DQualifiedName ('alias' aliases+=ID)*
	//	description=DRichText?
	//	stateModel=EsmEntityStateModel;
	public EsmDomainElements getEsmDomainAccess() {
		return pEsmDomain;
	}
	
	public ParserRule getEsmDomainRule() {
		return getEsmDomainAccess().getRule();
	}
	
	//EsmEntityStateModel:
	//	'state' 'model'
	//	name=DQualifiedName
	//	'for'
	//	forType=[DEntityType|DQualifiedName] description=DRichText?
	//	'{' ('direction' direction=EsmLayoutDirection)?
	//	states+=EsmState+
	//	transitions+=EsmTransition+
	//	'}';
	public EsmEntityStateModelElements getEsmEntityStateModelAccess() {
		return pEsmEntityStateModel;
	}
	
	public ParserRule getEsmEntityStateModelRule() {
		return getEsmEntityStateModelAccess().getRule();
	}
	
	//@Override
	//DExpression:
	//	DmxOrExpression | DRichText;
	public DExpressionElements getDExpressionAccess() {
		return pDExpression;
	}
	
	public ParserRule getDExpressionRule() {
		return getDExpressionAccess().getRule();
	}
	
	//EsmState IEsmState:
	//	EsmNormalState | EsmDerivedState | EsmCompositeState | EsmConcurrentState;
	public EsmStateElements getEsmStateAccess() {
		return pEsmState;
	}
	
	public ParserRule getEsmStateRule() {
		return getEsmStateAccess().getRule();
	}
	
	//enum EsmStateKind:
	//	INITIAL='initial' | FINAL='final';
	public EsmStateKindElements getEsmStateKindAccess() {
		return eEsmStateKind;
	}
	
	public EnumRule getEsmStateKindRule() {
		return getEsmStateKindAccess().getRule();
	}
	
	//EsmNormalState EsmState:
	//	(kind=EsmStateKind 'state'?
	//	| 'state') state=[DState] description=DRichText?;
	public EsmNormalStateElements getEsmNormalStateAccess() {
		return pEsmNormalState;
	}
	
	public ParserRule getEsmNormalStateRule() {
		return getEsmNormalStateAccess().getRule();
	}
	
	//EsmDerivedState:
	//	'derived'
	//	kind=EsmStateKind?
	//	'state'?
	//	state=[DState] description=DRichText?
	//	'when' expression=DExpression;
	public EsmDerivedStateElements getEsmDerivedStateAccess() {
		return pEsmDerivedState;
	}
	
	public ParserRule getEsmDerivedStateRule() {
		return getEsmDerivedStateAccess().getRule();
	}
	
	//EsmCompositeState:
	//	'composite'
	//	kind=EsmStateKind?
	//	'state'?
	//	state=[DState] description=DRichText?
	//	'{' ('direction' direction=EsmLayoutDirection)?
	//	states+=EsmState+
	//	transitions+=EsmTransition+
	//	'}';
	public EsmCompositeStateElements getEsmCompositeStateAccess() {
		return pEsmCompositeState;
	}
	
	public ParserRule getEsmCompositeStateRule() {
		return getEsmCompositeStateAccess().getRule();
	}
	
	//EsmConcurrentState:
	//	'concurrent'
	//	kind=EsmStateKind?
	//	'state'?
	//	state=[DState] description=DRichText?
	//	'{'
	//	// direction is always 'right' (PlantUML only supports horizontal dividers between regions)
	//	subStates+=EsmSubStateModel+
	//	'}';
	public EsmConcurrentStateElements getEsmConcurrentStateAccess() {
		return pEsmConcurrentState;
	}
	
	public ParserRule getEsmConcurrentStateRule() {
		return getEsmConcurrentStateAccess().getRule();
	}
	
	//EsmSubStateModel:
	//	'substate'
	//	'{'
	//	// direction is always 'right' (PlantUML only supports horizontal dividers between regions)
	//	states+=EsmState+
	//	transitions+=EsmTransition+
	//	'}';
	public EsmSubStateModelElements getEsmSubStateModelAccess() {
		return pEsmSubStateModel;
	}
	
	public ParserRule getEsmSubStateModelRule() {
		return getEsmSubStateModelAccess().getRule();
	}
	
	//EsmTransition:
	//	'transition'
	//	direction=EsmLayoutDirection?
	//	'from'
	//	from=[DState]
	//	'to'
	//	to=[DState]
	//	'as' event=[DStateEvent] ('when'
	//	guard=DExpression)?;
	public EsmTransitionElements getEsmTransitionAccess() {
		return pEsmTransition;
	}
	
	public ParserRule getEsmTransitionRule() {
		return getEsmTransitionAccess().getRule();
	}
	
	//enum EsmLayoutDirection:
	//	DOWN="down" | LEFT="left" | UP="up" | RIGHT="right";
	public EsmLayoutDirectionElements getEsmLayoutDirectionAccess() {
		return eEsmLayoutDirection;
	}
	
	public EnumRule getEsmLayoutDirectionRule() {
		return getEsmLayoutDirectionAccess().getRule();
	}
	
	//@Override
	//DmxPrimaryExpression DExpression:
	//	DmxLiteralExpression | DmxParenthesizedExpression | DmxFunctionCall | DmxContextReference | DmxIfExpression;
	public DmxPrimaryExpressionElements getDmxPrimaryExpressionAccess() {
		return pDmxPrimaryExpression;
	}
	
	public ParserRule getDmxPrimaryExpressionRule() {
		return getDmxPrimaryExpressionAccess().getRule();
	}
	
	//DmxNamespace:
	//	imports+=DImport*
	//	'namespace'
	//	name=DQualifiedName
	//	types+=DmxArchetype*
	//	filters+=DmxFilter*
	//	// For unit-testing purposes:
	//	tests+=DmxTest*;
	public DmxGrammarAccess.DmxNamespaceElements getDmxNamespaceAccess() {
		return gaDmx.getDmxNamespaceAccess();
	}
	
	public ParserRule getDmxNamespaceRule() {
		return getDmxNamespaceAccess().getRule();
	}
	
	//DImport:
	//	'import' importedNamespace=DQualifiedNameWithWildcard;
	public DmxGrammarAccess.DImportElements getDImportAccess() {
		return gaDmx.getDImportAccess();
	}
	
	public ParserRule getDImportRule() {
		return getDImportAccess().getRule();
	}
	
	///* 
	// * Testing
	// */ DmxTest:
	//	'test'
	//	name=ID ('context'
	//	context+=DmxTestContext (',' context+=DmxTestContext)*)?
	//	'{'
	//	expr=super::DExpression
	//	'}';
	public DmxGrammarAccess.DmxTestElements getDmxTestAccess() {
		return gaDmx.getDmxTestAccess();
	}
	
	public ParserRule getDmxTestRule() {
		return getDmxTestAccess().getRule();
	}
	
	//DmxTestContext:
	//	name=ID
	//	':'
	//	type=[DType] multiplicity=DMultiplicity? (':=' (value=DmxLiteralExpression | value=DmxLiteralListExpression))?;
	public DmxGrammarAccess.DmxTestContextElements getDmxTestContextAccess() {
		return gaDmx.getDmxTestContextAccess();
	}
	
	public ParserRule getDmxTestContextRule() {
		return getDmxTestContextAccess().getRule();
	}
	
	//enum DmxBaseType:
	//	VOID | BOOLEAN | NUMBER | TEXT | IDENTIFIER | TIMEPOINT | STATE /*transition*/ | STATE_EVENT | COMPLEX | NOTIFICATION
	//	/*sent* */ | SERVICE /*invoked* */;
	public DmxGrammarAccess.DmxBaseTypeElements getDmxBaseTypeAccess() {
		return gaDmx.getDmxBaseTypeAccess();
	}
	
	public EnumRule getDmxBaseTypeRule() {
		return getDmxBaseTypeAccess().getRule();
	}
	
	//DmxBaseTypeSet:
	//	name=ID
	//	'in'
	//	'(' members+=DmxBaseType (',' members+=DmxBaseType)+ ')';
	public DmxGrammarAccess.DmxBaseTypeSetElements getDmxBaseTypeSetAccess() {
		return gaDmx.getDmxBaseTypeSetAccess();
	}
	
	public ParserRule getDmxBaseTypeSetRule() {
		return getDmxBaseTypeSetAccess().getRule();
	}
	
	//DmxArchetype:
	//	'archetype'
	//	name=ID
	//	'is'
	//	baseType=DmxBaseType
	//	description=DRichText?;
	public DmxGrammarAccess.DmxArchetypeElements getDmxArchetypeAccess() {
		return gaDmx.getDmxArchetypeAccess();
	}
	
	public ParserRule getDmxArchetypeRule() {
		return getDmxArchetypeAccess().getRule();
	}
	
	//DmxFilter:
	//	'filter'
	//	name=ID
	//	'(' (parameters+=DmxFilterParameter (',' parameters+=DmxFilterParameter)*)? ')'
	//	':'
	//	typeDesc=DmxFilterTypeDescriptor ('with' withTypeSet=DmxBaseTypeSet)?;
	public DmxGrammarAccess.DmxFilterElements getDmxFilterAccess() {
		return gaDmx.getDmxFilterAccess();
	}
	
	public ParserRule getDmxFilterRule() {
		return getDmxFilterAccess().getRule();
	}
	
	//DmxFilterTypeDescriptor:
	//	(single=DmxBaseType
	//	| multiple=[DmxBaseTypeSet]) collection?='*'?;
	public DmxGrammarAccess.DmxFilterTypeDescriptorElements getDmxFilterTypeDescriptorAccess() {
		return gaDmx.getDmxFilterTypeDescriptorAccess();
	}
	
	public ParserRule getDmxFilterTypeDescriptorRule() {
		return getDmxFilterTypeDescriptorAccess().getRule();
	}
	
	//DmxFilterParameter:
	//	name=ID
	//	':'
	//	typeDesc=DmxFilterTypeDescriptor;
	public DmxGrammarAccess.DmxFilterParameterElements getDmxFilterParameterAccess() {
		return gaDmx.getDmxFilterParameterAccess();
	}
	
	public ParserRule getDmxFilterParameterRule() {
		return getDmxFilterParameterAccess().getRule();
	}
	
	//DRichText:
	//	segments+=DmxTextOnly
	//	| segments+=DmxTextStart
	//	segments+=super::DExpression (segments+=DmxTextMiddle segments+=super::DExpression)*
	//	segments+=DmxTextEnd;
	public DmxGrammarAccess.DRichTextElements getDRichTextAccess() {
		return gaDmx.getDRichTextAccess();
	}
	
	public ParserRule getDRichTextRule() {
		return getDRichTextAccess().getRule();
	}
	
	//DmxTextOnly DTextSegment:
	//	value=PLAIN_TEXT_ONLY;
	public DmxGrammarAccess.DmxTextOnlyElements getDmxTextOnlyAccess() {
		return gaDmx.getDmxTextOnlyAccess();
	}
	
	public ParserRule getDmxTextOnlyRule() {
		return getDmxTextOnlyAccess().getRule();
	}
	
	//DmxTextStart DTextSegment:
	//	value=PLAIN_TEXT_START;
	public DmxGrammarAccess.DmxTextStartElements getDmxTextStartAccess() {
		return gaDmx.getDmxTextStartAccess();
	}
	
	public ParserRule getDmxTextStartRule() {
		return getDmxTextStartAccess().getRule();
	}
	
	//DmxTextMiddle DTextSegment:
	//	value=PLAIN_TEXT_MIDDLE;
	public DmxGrammarAccess.DmxTextMiddleElements getDmxTextMiddleAccess() {
		return gaDmx.getDmxTextMiddleAccess();
	}
	
	public ParserRule getDmxTextMiddleRule() {
		return getDmxTextMiddleAccess().getRule();
	}
	
	//DmxTextEnd DTextSegment:
	//	value=PLAIN_TEXT_END;
	public DmxGrammarAccess.DmxTextEndElements getDmxTextEndAccess() {
		return gaDmx.getDmxTextEndAccess();
	}
	
	public ParserRule getDmxTextEndRule() {
		return getDmxTextEndAccess().getRule();
	}
	
	//DmxNavigableMemberReference DExpression:
	//	super::DmxPrimaryExpression (=> ({DmxAssignment.precedingNavigationSegment=current} '.'
	//	assignToMember=[DNavigableMember] DmxOpSingleAssign) value=DmxOrExpression
	//	| => ({DmxMemberNavigation.precedingNavigationSegment=current} '.') member=[DNavigableMember] (=>
	//	explicitOperationCall?='(' // => boolean => has 0.n explicit arguments
	//	callArguments=DmxCallArguments
	//	')'
	//	| before?="@before")?)*;
	public DmxGrammarAccess.DmxNavigableMemberReferenceElements getDmxNavigableMemberReferenceAccess() {
		return gaDmx.getDmxNavigableMemberReferenceAccess();
	}
	
	public ParserRule getDmxNavigableMemberReferenceRule() {
		return getDmxNavigableMemberReferenceAccess().getRule();
	}
	
	//DmxCallArguments:
	//	{DmxCallArguments} (arguments+=DmxPredicateWithCorrelationVariable (','
	//	arguments+=DmxPredicateWithCorrelationVariable)*)?;
	public DmxGrammarAccess.DmxCallArgumentsElements getDmxCallArgumentsAccess() {
		return gaDmx.getDmxCallArgumentsAccess();
	}
	
	public ParserRule getDmxCallArgumentsRule() {
		return getDmxCallArgumentsAccess().getRule();
	}
	
	//DmxAssignment DExpression:
	//	{DmxAssignment} assignToMember=[DNavigableMember] DmxOpSingleAssign value=DmxOrExpression;
	public DmxGrammarAccess.DmxAssignmentElements getDmxAssignmentAccess() {
		return gaDmx.getDmxAssignmentAccess();
	}
	
	public ParserRule getDmxAssignmentRule() {
		return getDmxAssignmentAccess().getRule();
	}
	
	//DmxOpSingleAssign:
	//	':=';
	public DmxGrammarAccess.DmxOpSingleAssignElements getDmxOpSingleAssignAccess() {
		return gaDmx.getDmxOpSingleAssignAccess();
	}
	
	public ParserRule getDmxOpSingleAssignRule() {
		return getDmxOpSingleAssignAccess().getRule();
	}
	
	//DmxPredicateWithCorrelationVariable DExpression:
	//	{DmxPredicateWithCorrelationVariable} correlationVariable=DmxCorrelationVariable
	//	'|'
	//	predicate=DmxOrExpression
	//	| DmxOrExpression;
	public DmxGrammarAccess.DmxPredicateWithCorrelationVariableElements getDmxPredicateWithCorrelationVariableAccess() {
		return gaDmx.getDmxPredicateWithCorrelationVariableAccess();
	}
	
	public ParserRule getDmxPredicateWithCorrelationVariableRule() {
		return getDmxPredicateWithCorrelationVariableAccess().getRule();
	}
	
	//DmxCorrelationVariable:
	//	name=ID;
	public DmxGrammarAccess.DmxCorrelationVariableElements getDmxCorrelationVariableAccess() {
		return gaDmx.getDmxCorrelationVariableAccess();
	}
	
	public ParserRule getDmxCorrelationVariableRule() {
		return getDmxCorrelationVariableAccess().getRule();
	}
	
	////	(':' type=[DType])? => type is always NULL!
	//DmxOrExpression DExpression:
	//	DmxAndExpression (=> ({DmxBinaryOperation.leftOperand=current} operator=DmxOpOr) rightOperand=DmxAndExpression)*;
	public DmxGrammarAccess.DmxOrExpressionElements getDmxOrExpressionAccess() {
		return gaDmx.getDmxOrExpressionAccess();
	}
	
	public ParserRule getDmxOrExpressionRule() {
		return getDmxOrExpressionAccess().getRule();
	}
	
	//enum DmxOpOr returns DmxBinaryOperator:
	//	OR | OR='or' | XOR | XOR='xor';
	public DmxGrammarAccess.DmxOpOrElements getDmxOpOrAccess() {
		return gaDmx.getDmxOpOrAccess();
	}
	
	public EnumRule getDmxOpOrRule() {
		return getDmxOpOrAccess().getRule();
	}
	
	//DmxAndExpression DExpression:
	//	DmxEqualityExpression (=> ({DmxBinaryOperation.leftOperand=current} operator=DmxOpAnd)
	//	rightOperand=DmxEqualityExpression)*;
	public DmxGrammarAccess.DmxAndExpressionElements getDmxAndExpressionAccess() {
		return gaDmx.getDmxAndExpressionAccess();
	}
	
	public ParserRule getDmxAndExpressionRule() {
		return getDmxAndExpressionAccess().getRule();
	}
	
	//enum DmxOpAnd returns DmxBinaryOperator:
	//	AND | AND='and';
	public DmxGrammarAccess.DmxOpAndElements getDmxOpAndAccess() {
		return gaDmx.getDmxOpAndAccess();
	}
	
	public EnumRule getDmxOpAndRule() {
		return getDmxOpAndAccess().getRule();
	}
	
	//DmxEqualityExpression DExpression:
	//	DmxRelationalExpression (=> ({DmxBinaryOperation.leftOperand=current} operator=DmxOpEquality)
	//	rightOperand=DmxRelationalExpression)*;
	public DmxGrammarAccess.DmxEqualityExpressionElements getDmxEqualityExpressionAccess() {
		return gaDmx.getDmxEqualityExpressionAccess();
	}
	
	public ParserRule getDmxEqualityExpressionRule() {
		return getDmxEqualityExpressionAccess().getRule();
	}
	
	//enum DmxOpEquality returns DmxBinaryOperator:
	//	EQUAL='=' | NOT_EQUAL='!=' | NOT_EQUAL='<>';
	public DmxGrammarAccess.DmxOpEqualityElements getDmxOpEqualityAccess() {
		return gaDmx.getDmxOpEqualityAccess();
	}
	
	public EnumRule getDmxOpEqualityRule() {
		return getDmxOpEqualityAccess().getRule();
	}
	
	//DmxRelationalExpression DExpression:
	//	DmxOtherOperatorExpression (=> ({DmxInstanceOfExpression.expression=current} DmxOpInstanceOf) type=[DType] | =>
	//	({DmxBinaryOperation.leftOperand=current} operator=OpCompare) rightOperand=DmxOtherOperatorExpression)*;
	public DmxGrammarAccess.DmxRelationalExpressionElements getDmxRelationalExpressionAccess() {
		return gaDmx.getDmxRelationalExpressionAccess();
	}
	
	public ParserRule getDmxRelationalExpressionRule() {
		return getDmxRelationalExpressionAccess().getRule();
	}
	
	//DmxOpInstanceOf:
	//	'ISA' | 'isa';
	public DmxGrammarAccess.DmxOpInstanceOfElements getDmxOpInstanceOfAccess() {
		return gaDmx.getDmxOpInstanceOfAccess();
	}
	
	public ParserRule getDmxOpInstanceOfRule() {
		return getDmxOpInstanceOfAccess().getRule();
	}
	
	//enum OpCompare returns DmxBinaryOperator:
	//	LESS='<' | LESS_OR_EQUAL='<=' | LESS_OR_EQUAL='≤' | GREATER_OR_EQUAL='>=' | GREATER_OR_EQUAL='≥' | GREATER='>';
	public DmxGrammarAccess.OpCompareElements getOpCompareAccess() {
		return gaDmx.getOpCompareAccess();
	}
	
	public EnumRule getOpCompareRule() {
		return getOpCompareAccess().getRule();
	}
	
	//DmxOtherOperatorExpression DExpression:
	//	DmxAdditiveExpression (=> ({DmxBinaryOperation.leftOperand=current} operator=OpOther)
	//	rightOperand=DmxAdditiveExpression)*;
	public DmxGrammarAccess.DmxOtherOperatorExpressionElements getDmxOtherOperatorExpressionAccess() {
		return gaDmx.getDmxOtherOperatorExpressionAccess();
	}
	
	public ParserRule getDmxOtherOperatorExpressionRule() {
		return getDmxOtherOperatorExpressionAccess().getRule();
	}
	
	//enum OpOther returns DmxBinaryOperator:
	//	IN | IN='in' | UNTIL='..' | SINGLE_ARROW='->' | DOUBLE_ARROW='=>';
	public DmxGrammarAccess.OpOtherElements getOpOtherAccess() {
		return gaDmx.getOpOtherAccess();
	}
	
	public EnumRule getOpOtherRule() {
		return getOpOtherAccess().getRule();
	}
	
	//DmxAdditiveExpression DExpression:
	//	DmxMultiplicativeExpression (=> ({DmxBinaryOperation.leftOperand=current} operator=OpAdd)
	//	rightOperand=DmxMultiplicativeExpression)*;
	public DmxGrammarAccess.DmxAdditiveExpressionElements getDmxAdditiveExpressionAccess() {
		return gaDmx.getDmxAdditiveExpressionAccess();
	}
	
	public ParserRule getDmxAdditiveExpressionRule() {
		return getDmxAdditiveExpressionAccess().getRule();
	}
	
	//enum OpAdd returns DmxBinaryOperator:
	//	ADD='+' | SUBTRACT='-';
	public DmxGrammarAccess.OpAddElements getOpAddAccess() {
		return gaDmx.getOpAddAccess();
	}
	
	public EnumRule getOpAddRule() {
		return getOpAddAccess().getRule();
	}
	
	//DmxMultiplicativeExpression DExpression:
	//	DmxUnaryOperation (=> ({DmxBinaryOperation.leftOperand=current} operator=OpMulti) rightOperand=DmxUnaryOperation)*;
	public DmxGrammarAccess.DmxMultiplicativeExpressionElements getDmxMultiplicativeExpressionAccess() {
		return gaDmx.getDmxMultiplicativeExpressionAccess();
	}
	
	public ParserRule getDmxMultiplicativeExpressionRule() {
		return getDmxMultiplicativeExpressionAccess().getRule();
	}
	
	//enum OpMulti returns DmxBinaryOperator:
	//	MULTIPLY='*' | DIVIDE='/' | POWER='**' | MODULO='%';
	public DmxGrammarAccess.OpMultiElements getOpMultiAccess() {
		return gaDmx.getOpMultiAccess();
	}
	
	public EnumRule getOpMultiRule() {
		return getOpMultiAccess().getRule();
	}
	
	//DmxUnaryOperation DExpression:
	//	{DmxUnaryOperation} operator=OpUnary operand=DmxUnaryOperation
	//	| DmxCastExpression;
	public DmxGrammarAccess.DmxUnaryOperationElements getDmxUnaryOperationAccess() {
		return gaDmx.getDmxUnaryOperationAccess();
	}
	
	public ParserRule getDmxUnaryOperationRule() {
		return getDmxUnaryOperationAccess().getRule();
	}
	
	//enum OpUnary returns DmxUnaryOperator:
	//	PLUS='+' | MINUS='-' | NOT='!' | NOT | NOT='not';
	public DmxGrammarAccess.OpUnaryElements getOpUnaryAccess() {
		return gaDmx.getOpUnaryAccess();
	}
	
	public EnumRule getOpUnaryRule() {
		return getOpUnaryAccess().getRule();
	}
	
	//DmxCastExpression DExpression:
	//	DmxNavigableMemberReference (=> ({DmxCastExpression.target=current} DmxOpCast) type=[DType])?;
	public DmxGrammarAccess.DmxCastExpressionElements getDmxCastExpressionAccess() {
		return gaDmx.getDmxCastExpressionAccess();
	}
	
	public ParserRule getDmxCastExpressionRule() {
		return getDmxCastExpressionAccess().getRule();
	}
	
	//DmxOpCast:
	//	'AS' | 'as';
	public DmxGrammarAccess.DmxOpCastElements getDmxOpCastAccess() {
		return gaDmx.getDmxOpCastAccess();
	}
	
	public ParserRule getDmxOpCastRule() {
		return getDmxOpCastAccess().getRule();
	}
	
	//DmxLiteralExpression DExpression:
	//	DmxBooleanLiteral | DmxStringLiteral | DmxNaturalLiteral | DmxDecimalLiteral | DmxUndefinedLiteral | DmxEntity |
	//	DmxDetail;
	public DmxGrammarAccess.DmxLiteralExpressionElements getDmxLiteralExpressionAccess() {
		return gaDmx.getDmxLiteralExpressionAccess();
	}
	
	public ParserRule getDmxLiteralExpressionRule() {
		return getDmxLiteralExpressionAccess().getRule();
	}
	
	//DmxParenthesizedExpression DExpression:
	//	'(' super::DExpression ')';
	public DmxGrammarAccess.DmxParenthesizedExpressionElements getDmxParenthesizedExpressionAccess() {
		return gaDmx.getDmxParenthesizedExpressionAccess();
	}
	
	public ParserRule getDmxParenthesizedExpressionRule() {
		return getDmxParenthesizedExpressionAccess().getRule();
	}
	
	//DmxListExpression DExpression:
	//	{DmxListExpression}
	//	'{' (elements+=super::DExpression (',' elements+=super::DExpression)*)?
	//	'}';
	public DmxGrammarAccess.DmxListExpressionElements getDmxListExpressionAccess() {
		return gaDmx.getDmxListExpressionAccess();
	}
	
	public ParserRule getDmxListExpressionRule() {
		return getDmxListExpressionAccess().getRule();
	}
	
	//DmxLiteralListExpression DExpression:
	//	{DmxListExpression}
	//	'{' (elements+=DmxLiteralExpression (',' elements+=DmxLiteralExpression)*)?
	//	'}';
	public DmxGrammarAccess.DmxLiteralListExpressionElements getDmxLiteralListExpressionAccess() {
		return gaDmx.getDmxLiteralListExpressionAccess();
	}
	
	public ParserRule getDmxLiteralListExpressionRule() {
		return getDmxLiteralListExpressionAccess().getRule();
	}
	
	//DmxFunctionCall DExpression:
	//	{DmxFunctionCall} function=[DmxFilter]
	//	'('
	//	callArguments=DmxFunctionCallArguments
	//	')';
	public DmxGrammarAccess.DmxFunctionCallElements getDmxFunctionCallAccess() {
		return gaDmx.getDmxFunctionCallAccess();
	}
	
	public ParserRule getDmxFunctionCallRule() {
		return getDmxFunctionCallAccess().getRule();
	}
	
	//DmxFunctionCallArguments DmxCallArguments:
	//	{DmxCallArguments} (arguments+=super::DExpression (',' arguments+=super::DExpression)*)?;
	public DmxGrammarAccess.DmxFunctionCallArgumentsElements getDmxFunctionCallArgumentsAccess() {
		return gaDmx.getDmxFunctionCallArgumentsAccess();
	}
	
	public ParserRule getDmxFunctionCallArgumentsRule() {
		return getDmxFunctionCallArgumentsAccess().getRule();
	}
	
	//DmxEntity:
	//	'entity'
	//	DmxComplexObject;
	public DmxGrammarAccess.DmxEntityElements getDmxEntityAccess() {
		return gaDmx.getDmxEntityAccess();
	}
	
	public ParserRule getDmxEntityRule() {
		return getDmxEntityAccess().getRule();
	}
	
	//DmxDetail:
	//	'detail'
	//	DmxComplexObject;
	public DmxGrammarAccess.DmxDetailElements getDmxDetailAccess() {
		return gaDmx.getDmxDetailAccess();
	}
	
	public ParserRule getDmxDetailRule() {
		return getDmxDetailAccess().getRule();
	}
	
	//fragment DmxComplexObject:
	//	type=[DComplexType] DomFieldListStartSymbol
	//	fields+=DmxField*
	//	'}';
	public DmxGrammarAccess.DmxComplexObjectElements getDmxComplexObjectAccess() {
		return gaDmx.getDmxComplexObjectAccess();
	}
	
	public ParserRule getDmxComplexObjectRule() {
		return getDmxComplexObjectAccess().getRule();
	}
	
	//DmxField:
	//	feature=[DFeature] "=" value=super::DExpression;
	public DmxGrammarAccess.DmxFieldElements getDmxFieldAccess() {
		return gaDmx.getDmxFieldAccess();
	}
	
	public ParserRule getDmxFieldRule() {
		return getDmxFieldAccess().getRule();
	}
	
	//DmxStaticReference DExpression:
	//	{DmxStaticReference}
	//	'['
	//	target=[IStaticReferenceTarget|DQualifiedName] ('#' member=[DNavigableMember])? ("|" (displayName=ID | plural?="*"))?
	//	-> ']';
	public DmxGrammarAccess.DmxStaticReferenceElements getDmxStaticReferenceAccess() {
		return gaDmx.getDmxStaticReferenceAccess();
	}
	
	public ParserRule getDmxStaticReferenceRule() {
		return getDmxStaticReferenceAccess().getRule();
	}
	
	//// '->' gives precedence to this ']' over PLAIN_TEXT_MIDDLE ('=>' works too but generates more lookahead overhead)
	//DmxContextReference DExpression:
	//	{DmxContextReference} target=[DNamedElement] (before?="@before"
	//	| '.' all?='all')?;
	public DmxGrammarAccess.DmxContextReferenceElements getDmxContextReferenceAccess() {
		return gaDmx.getDmxContextReferenceAccess();
	}
	
	public ParserRule getDmxContextReferenceRule() {
		return getDmxContextReferenceAccess().getRule();
	}
	
	//DmxIfExpression DExpression:
	//	{DmxIfExpression}
	//	'if' if=super::DExpression
	//	'then' then=super::DExpression (=> 'else' else=super::DExpression)?
	//	'end';
	public DmxGrammarAccess.DmxIfExpressionElements getDmxIfExpressionAccess() {
		return gaDmx.getDmxIfExpressionAccess();
	}
	
	public ParserRule getDmxIfExpressionRule() {
		return getDmxIfExpressionAccess().getRule();
	}
	
	//DMultiplicity:
	//	shorthand=DMultiplicityShorthand | '(' minOccurs=NATURAL '..' maxOccurs=MULTIPLICITY ')';
	public DmxGrammarAccess.DMultiplicityElements getDMultiplicityAccess() {
		return gaDmx.getDMultiplicityAccess();
	}
	
	public ParserRule getDMultiplicityRule() {
		return getDMultiplicityAccess().getRule();
	}
	
	//enum DMultiplicityShorthand:
	//	ZERO_OR_ONE='?' | ONE_OR_MORE='+' | ZERO_OR_MORE='*';
	public DmxGrammarAccess.DMultiplicityShorthandElements getDMultiplicityShorthandAccess() {
		return gaDmx.getDMultiplicityShorthandAccess();
	}
	
	public EnumRule getDMultiplicityShorthandRule() {
		return getDMultiplicityShorthandAccess().getRule();
	}
	
	//MULTIPLICITY ecore::EInt:
	//	NATURAL | '*';
	public DmxGrammarAccess.MULTIPLICITYElements getMULTIPLICITYAccess() {
		return gaDmx.getMULTIPLICITYAccess();
	}
	
	public ParserRule getMULTIPLICITYRule() {
		return getMULTIPLICITYAccess().getRule();
	}
	
	//DmxBooleanLiteral DExpression:
	//	{DmxBooleanLiteral} (value?='TRUE' | value?='true' | 'FALSE' | 'false');
	public DmxGrammarAccess.DmxBooleanLiteralElements getDmxBooleanLiteralAccess() {
		return gaDmx.getDmxBooleanLiteralAccess();
	}
	
	public ParserRule getDmxBooleanLiteralRule() {
		return getDmxBooleanLiteralAccess().getRule();
	}
	
	//DmxNaturalLiteral DExpression:
	//	{DmxNaturalLiteral} value=NATURAL;
	public DmxGrammarAccess.DmxNaturalLiteralElements getDmxNaturalLiteralAccess() {
		return gaDmx.getDmxNaturalLiteralAccess();
	}
	
	public ParserRule getDmxNaturalLiteralRule() {
		return getDmxNaturalLiteralAccess().getRule();
	}
	
	//DmxDecimalLiteral DExpression:
	//	{DmxDecimalLiteral} value=DECIMAL;
	public DmxGrammarAccess.DmxDecimalLiteralElements getDmxDecimalLiteralAccess() {
		return gaDmx.getDmxDecimalLiteralAccess();
	}
	
	public ParserRule getDmxDecimalLiteralRule() {
		return getDmxDecimalLiteralAccess().getRule();
	}
	
	//DmxStringLiteral DExpression:
	//	{DmxStringLiteral} value=STRING;
	public DmxGrammarAccess.DmxStringLiteralElements getDmxStringLiteralAccess() {
		return gaDmx.getDmxStringLiteralAccess();
	}
	
	public ParserRule getDmxStringLiteralRule() {
		return getDmxStringLiteralAccess().getRule();
	}
	
	//DmxUndefinedLiteral DExpression:
	//	{DmxUndefinedLiteral} ('UNDEFINED' | 'undefined');
	public DmxGrammarAccess.DmxUndefinedLiteralElements getDmxUndefinedLiteralAccess() {
		return gaDmx.getDmxUndefinedLiteralAccess();
	}
	
	public ParserRule getDmxUndefinedLiteralRule() {
		return getDmxUndefinedLiteralAccess().getRule();
	}
	
	//DECIMAL:
	//	NATURAL '.' NATURAL (('E' | 'e') ('+' | '-')? NATURAL)?;
	public DmxGrammarAccess.DECIMALElements getDECIMALAccess() {
		return gaDmx.getDECIMALAccess();
	}
	
	public ParserRule getDECIMALRule() {
		return getDECIMALAccess().getRule();
	}
	
	//DomFieldListStartSymbol:
	//	'{';
	public DmxGrammarAccess.DomFieldListStartSymbolElements getDomFieldListStartSymbolAccess() {
		return gaDmx.getDomFieldListStartSymbolAccess();
	}
	
	public ParserRule getDomFieldListStartSymbolRule() {
		return getDomFieldListStartSymbolAccess().getRule();
	}
	
	//DQualifiedNameWithWildcard:
	//	DQualifiedName '.*'?;
	public DmxGrammarAccess.DQualifiedNameWithWildcardElements getDQualifiedNameWithWildcardAccess() {
		return gaDmx.getDQualifiedNameWithWildcardAccess();
	}
	
	public ParserRule getDQualifiedNameWithWildcardRule() {
		return getDQualifiedNameWithWildcardAccess().getRule();
	}
	
	//DQualifiedName:
	//	ID ('.' ID)*;
	public DmxGrammarAccess.DQualifiedNameElements getDQualifiedNameAccess() {
		return gaDmx.getDQualifiedNameAccess();
	}
	
	public ParserRule getDQualifiedNameRule() {
		return getDQualifiedNameAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? (LETTER | '_') (LETTER | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaDmx.getIDRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"';
	public TerminalRule getSTRINGRule() {
		return gaDmx.getSTRINGRule();
	}
	
	//terminal NATURAL returns ecore::EInt:
	//	'0'..'9'+ | '∞';
	public TerminalRule getNATURALRule() {
		return gaDmx.getNATURALRule();
	}
	
	//terminal fragment LETTER:
	//	'a'..'z' | 'A'..'Z' | '\\u00c0'..'\\u00d6' | '\\u00d8'..'\\u00f6' | '\\u00f8'..'\\u00ff';
	public TerminalRule getLETTERRule() {
		return gaDmx.getLETTERRule();
	}
	
	//terminal fragment PLAIN_TEXT:
	//	!('»' | ']' | '[');
	public TerminalRule getPLAIN_TEXTRule() {
		return gaDmx.getPLAIN_TEXTRule();
	}
	
	//terminal PLAIN_TEXT_ONLY:
	//	'«' PLAIN_TEXT* '»';
	public TerminalRule getPLAIN_TEXT_ONLYRule() {
		return gaDmx.getPLAIN_TEXT_ONLYRule();
	}
	
	//terminal PLAIN_TEXT_START:
	//	'«' PLAIN_TEXT* '[';
	public TerminalRule getPLAIN_TEXT_STARTRule() {
		return gaDmx.getPLAIN_TEXT_STARTRule();
	}
	
	//terminal PLAIN_TEXT_MIDDLE:
	//	']' PLAIN_TEXT* '[';
	public TerminalRule getPLAIN_TEXT_MIDDLERule() {
		return gaDmx.getPLAIN_TEXT_MIDDLERule();
	}
	
	//terminal PLAIN_TEXT_END:
	//	']' PLAIN_TEXT* '»';
	public TerminalRule getPLAIN_TEXT_ENDRule() {
		return gaDmx.getPLAIN_TEXT_ENDRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaDmx.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaDmx.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaDmx.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaDmx.getANY_OTHERRule();
	}
}
