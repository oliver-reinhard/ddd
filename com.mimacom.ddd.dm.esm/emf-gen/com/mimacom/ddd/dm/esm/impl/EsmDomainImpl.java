/**
 * generated by Xtext 2.17.1
 */
package com.mimacom.ddd.dm.esm.impl;

import com.mimacom.ddd.dm.base.DImport;

import com.mimacom.ddd.dm.base.impl.DNamedElementImpl;

import com.mimacom.ddd.dm.esm.EsmDomain;
import com.mimacom.ddd.dm.esm.EsmEntityStateModel;
import com.mimacom.ddd.dm.esm.EsmPackage;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Domain</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link com.mimacom.ddd.dm.esm.impl.EsmDomainImpl#getImports <em>Imports</em>}</li>
 *   <li>{@link com.mimacom.ddd.dm.esm.impl.EsmDomainImpl#getStateModel <em>State Model</em>}</li>
 * </ul>
 *
 * @generated
 */
public class EsmDomainImpl extends DNamedElementImpl implements EsmDomain
{
	/**
	 * The cached value of the '{@link #getImports() <em>Imports</em>}' containment reference list.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getImports()
	 * @generated
	 * @ordered
	 */
	protected EList<DImport> imports;

	/**
	 * The cached value of the '{@link #getStateModel() <em>State Model</em>}' containment reference.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getStateModel()
	 * @generated
	 * @ordered
	 */
	protected EsmEntityStateModel stateModel;

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EsmDomainImpl()
	{
		super();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	protected EClass eStaticClass()
	{
		return EsmPackage.Literals.ESM_DOMAIN;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public EList<DImport> getImports()
	{
		if (imports == null)
		{
			imports = new EObjectContainmentEList<DImport>(DImport.class, this, EsmPackage.ESM_DOMAIN__IMPORTS);
		}
		return imports;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public EsmEntityStateModel getStateModel()
	{
		return stateModel;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public NotificationChain basicSetStateModel(EsmEntityStateModel newStateModel, NotificationChain msgs)
	{
		EsmEntityStateModel oldStateModel = stateModel;
		stateModel = newStateModel;
		if (eNotificationRequired())
		{
			ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, EsmPackage.ESM_DOMAIN__STATE_MODEL, oldStateModel, newStateModel);
			if (msgs == null) msgs = notification; else msgs.add(notification);
		}
		return msgs;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void setStateModel(EsmEntityStateModel newStateModel)
	{
		if (newStateModel != stateModel)
		{
			NotificationChain msgs = null;
			if (stateModel != null)
				msgs = ((InternalEObject)stateModel).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - EsmPackage.ESM_DOMAIN__STATE_MODEL, null, msgs);
			if (newStateModel != null)
				msgs = ((InternalEObject)newStateModel).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - EsmPackage.ESM_DOMAIN__STATE_MODEL, null, msgs);
			msgs = basicSetStateModel(newStateModel, msgs);
			if (msgs != null) msgs.dispatch();
		}
		else if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, EsmPackage.ESM_DOMAIN__STATE_MODEL, newStateModel, newStateModel));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
	{
		switch (featureID)
		{
			case EsmPackage.ESM_DOMAIN__IMPORTS:
				return ((InternalEList<?>)getImports()).basicRemove(otherEnd, msgs);
			case EsmPackage.ESM_DOMAIN__STATE_MODEL:
				return basicSetStateModel(null, msgs);
		}
		return super.eInverseRemove(otherEnd, featureID, msgs);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object eGet(int featureID, boolean resolve, boolean coreType)
	{
		switch (featureID)
		{
			case EsmPackage.ESM_DOMAIN__IMPORTS:
				return getImports();
			case EsmPackage.ESM_DOMAIN__STATE_MODEL:
				return getStateModel();
		}
		return super.eGet(featureID, resolve, coreType);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@SuppressWarnings("unchecked")
	@Override
	public void eSet(int featureID, Object newValue)
	{
		switch (featureID)
		{
			case EsmPackage.ESM_DOMAIN__IMPORTS:
				getImports().clear();
				getImports().addAll((Collection<? extends DImport>)newValue);
				return;
			case EsmPackage.ESM_DOMAIN__STATE_MODEL:
				setStateModel((EsmEntityStateModel)newValue);
				return;
		}
		super.eSet(featureID, newValue);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void eUnset(int featureID)
	{
		switch (featureID)
		{
			case EsmPackage.ESM_DOMAIN__IMPORTS:
				getImports().clear();
				return;
			case EsmPackage.ESM_DOMAIN__STATE_MODEL:
				setStateModel((EsmEntityStateModel)null);
				return;
		}
		super.eUnset(featureID);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean eIsSet(int featureID)
	{
		switch (featureID)
		{
			case EsmPackage.ESM_DOMAIN__IMPORTS:
				return imports != null && !imports.isEmpty();
			case EsmPackage.ESM_DOMAIN__STATE_MODEL:
				return stateModel != null;
		}
		return super.eIsSet(featureID);
	}

} //EsmDomainImpl
