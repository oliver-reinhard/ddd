/**
 * generated by Xtext 2.17.1
 */
package com.mimacom.ddd.dm.esm.impl;

import com.mimacom.ddd.dm.esm.EsmConcurrentState;
import com.mimacom.ddd.dm.esm.EsmPackage;
import com.mimacom.ddd.dm.esm.EsmSubStateModel;

import java.util.Collection;

import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Concurrent State</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link com.mimacom.ddd.dm.esm.impl.EsmConcurrentStateImpl#getSubStates <em>Sub States</em>}</li>
 * </ul>
 *
 * @generated
 */
public class EsmConcurrentStateImpl extends IEsmStateImpl implements EsmConcurrentState
{
	/**
	 * The cached value of the '{@link #getSubStates() <em>Sub States</em>}' containment reference list.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getSubStates()
	 * @generated
	 * @ordered
	 */
	protected EList<EsmSubStateModel> subStates;

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EsmConcurrentStateImpl()
	{
		super();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	protected EClass eStaticClass()
	{
		return EsmPackage.Literals.ESM_CONCURRENT_STATE;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public EList<EsmSubStateModel> getSubStates()
	{
		if (subStates == null)
		{
			subStates = new EObjectContainmentEList<EsmSubStateModel>(EsmSubStateModel.class, this, EsmPackage.ESM_CONCURRENT_STATE__SUB_STATES);
		}
		return subStates;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
	{
		switch (featureID)
		{
			case EsmPackage.ESM_CONCURRENT_STATE__SUB_STATES:
				return ((InternalEList<?>)getSubStates()).basicRemove(otherEnd, msgs);
		}
		return super.eInverseRemove(otherEnd, featureID, msgs);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object eGet(int featureID, boolean resolve, boolean coreType)
	{
		switch (featureID)
		{
			case EsmPackage.ESM_CONCURRENT_STATE__SUB_STATES:
				return getSubStates();
		}
		return super.eGet(featureID, resolve, coreType);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@SuppressWarnings("unchecked")
	@Override
	public void eSet(int featureID, Object newValue)
	{
		switch (featureID)
		{
			case EsmPackage.ESM_CONCURRENT_STATE__SUB_STATES:
				getSubStates().clear();
				getSubStates().addAll((Collection<? extends EsmSubStateModel>)newValue);
				return;
		}
		super.eSet(featureID, newValue);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void eUnset(int featureID)
	{
		switch (featureID)
		{
			case EsmPackage.ESM_CONCURRENT_STATE__SUB_STATES:
				getSubStates().clear();
				return;
		}
		super.eUnset(featureID);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean eIsSet(int featureID)
	{
		switch (featureID)
		{
			case EsmPackage.ESM_CONCURRENT_STATE__SUB_STATES:
				return subStates != null && !subStates.isEmpty();
		}
		return super.eIsSet(featureID);
	}

} //EsmConcurrentStateImpl
