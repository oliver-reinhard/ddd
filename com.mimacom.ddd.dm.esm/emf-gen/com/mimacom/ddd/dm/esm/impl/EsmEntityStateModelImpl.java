/**
 * generated by Xtext 2.17.1
 */
package com.mimacom.ddd.dm.esm.impl;

import com.mimacom.ddd.dm.base.DEntityType;

import com.mimacom.ddd.dm.base.impl.DNamedElementImpl;

import com.mimacom.ddd.dm.esm.EsmEntityStateModel;
import com.mimacom.ddd.dm.esm.EsmPackage;
import com.mimacom.ddd.dm.esm.EsmState;
import com.mimacom.ddd.dm.esm.EsmTransition;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Entity State Model</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link com.mimacom.ddd.dm.esm.impl.EsmEntityStateModelImpl#getStates <em>States</em>}</li>
 *   <li>{@link com.mimacom.ddd.dm.esm.impl.EsmEntityStateModelImpl#getForType <em>For Type</em>}</li>
 *   <li>{@link com.mimacom.ddd.dm.esm.impl.EsmEntityStateModelImpl#getTransition <em>Transition</em>}</li>
 * </ul>
 *
 * @generated
 */
public class EsmEntityStateModelImpl extends DNamedElementImpl implements EsmEntityStateModel
{
	/**
	 * The cached value of the '{@link #getStates() <em>States</em>}' containment reference list.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getStates()
	 * @generated
	 * @ordered
	 */
	protected EList<EsmState> states;

	/**
	 * The cached value of the '{@link #getForType() <em>For Type</em>}' reference.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getForType()
	 * @generated
	 * @ordered
	 */
	protected DEntityType forType;

	/**
	 * The cached value of the '{@link #getTransition() <em>Transition</em>}' containment reference list.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getTransition()
	 * @generated
	 * @ordered
	 */
	protected EList<EsmTransition> transition;

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EsmEntityStateModelImpl()
	{
		super();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	protected EClass eStaticClass()
	{
		return EsmPackage.Literals.ESM_ENTITY_STATE_MODEL;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public EList<EsmState> getStates()
	{
		if (states == null)
		{
			states = new EObjectContainmentEList<EsmState>(EsmState.class, this, EsmPackage.ESM_ENTITY_STATE_MODEL__STATES);
		}
		return states;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public DEntityType getForType()
	{
		if (forType != null && forType.eIsProxy())
		{
			InternalEObject oldForType = (InternalEObject)forType;
			forType = (DEntityType)eResolveProxy(oldForType);
			if (forType != oldForType)
			{
				if (eNotificationRequired())
					eNotify(new ENotificationImpl(this, Notification.RESOLVE, EsmPackage.ESM_ENTITY_STATE_MODEL__FOR_TYPE, oldForType, forType));
			}
		}
		return forType;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public DEntityType basicGetForType()
	{
		return forType;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void setForType(DEntityType newForType)
	{
		DEntityType oldForType = forType;
		forType = newForType;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, EsmPackage.ESM_ENTITY_STATE_MODEL__FOR_TYPE, oldForType, forType));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public EList<EsmTransition> getTransition()
	{
		if (transition == null)
		{
			transition = new EObjectContainmentEList<EsmTransition>(EsmTransition.class, this, EsmPackage.ESM_ENTITY_STATE_MODEL__TRANSITION);
		}
		return transition;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
	{
		switch (featureID)
		{
			case EsmPackage.ESM_ENTITY_STATE_MODEL__STATES:
				return ((InternalEList<?>)getStates()).basicRemove(otherEnd, msgs);
			case EsmPackage.ESM_ENTITY_STATE_MODEL__TRANSITION:
				return ((InternalEList<?>)getTransition()).basicRemove(otherEnd, msgs);
		}
		return super.eInverseRemove(otherEnd, featureID, msgs);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object eGet(int featureID, boolean resolve, boolean coreType)
	{
		switch (featureID)
		{
			case EsmPackage.ESM_ENTITY_STATE_MODEL__STATES:
				return getStates();
			case EsmPackage.ESM_ENTITY_STATE_MODEL__FOR_TYPE:
				if (resolve) return getForType();
				return basicGetForType();
			case EsmPackage.ESM_ENTITY_STATE_MODEL__TRANSITION:
				return getTransition();
		}
		return super.eGet(featureID, resolve, coreType);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@SuppressWarnings("unchecked")
	@Override
	public void eSet(int featureID, Object newValue)
	{
		switch (featureID)
		{
			case EsmPackage.ESM_ENTITY_STATE_MODEL__STATES:
				getStates().clear();
				getStates().addAll((Collection<? extends EsmState>)newValue);
				return;
			case EsmPackage.ESM_ENTITY_STATE_MODEL__FOR_TYPE:
				setForType((DEntityType)newValue);
				return;
			case EsmPackage.ESM_ENTITY_STATE_MODEL__TRANSITION:
				getTransition().clear();
				getTransition().addAll((Collection<? extends EsmTransition>)newValue);
				return;
		}
		super.eSet(featureID, newValue);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void eUnset(int featureID)
	{
		switch (featureID)
		{
			case EsmPackage.ESM_ENTITY_STATE_MODEL__STATES:
				getStates().clear();
				return;
			case EsmPackage.ESM_ENTITY_STATE_MODEL__FOR_TYPE:
				setForType((DEntityType)null);
				return;
			case EsmPackage.ESM_ENTITY_STATE_MODEL__TRANSITION:
				getTransition().clear();
				return;
		}
		super.eUnset(featureID);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean eIsSet(int featureID)
	{
		switch (featureID)
		{
			case EsmPackage.ESM_ENTITY_STATE_MODEL__STATES:
				return states != null && !states.isEmpty();
			case EsmPackage.ESM_ENTITY_STATE_MODEL__FOR_TYPE:
				return forType != null;
			case EsmPackage.ESM_ENTITY_STATE_MODEL__TRANSITION:
				return transition != null && !transition.isEmpty();
		}
		return super.eIsSet(featureID);
	}

} //EsmEntityStateModelImpl
