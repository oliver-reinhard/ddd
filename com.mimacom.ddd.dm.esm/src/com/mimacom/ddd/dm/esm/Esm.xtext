grammar com.mimacom.ddd.dm.esm.Esm with com.mimacom.ddd.dm.dmx.Dmx

import "http://www.mimacom.com/ddd/dm/base"
import "http://www.mimacom.com/ddd/dm/dmx" 
import "http://www.mimacom.com/ddd/dm/esm"
import "http://www.mimacom.com/ddd/dm/dim"

@Override 
DNamespace:
	'domain'
	name=DQualifiedName
	(imports+=DImport)*
	model=EsmEntityStateModel;
	
EsmEntityStateModel:
	'state' 'model' 
	name=DQualifiedName
	'for'
	 forType=[DimEntityType|DQualifiedName]
	(description=DRichText)?
	(notes+=DNote)*
	'{'
	('direction' direction=EsmLayoutDirection)?
	(states+=EsmState)+
	(transitions+=EsmTransition)+
	'}';

@Override 
DExpression returns DExpression :
	DmxOrExpression | DRichText;
	
EsmState returns IEsmState:
	EsmNormalState | EsmDerivedState | EsmCompositeState | EsmConcurrentState;

enum EsmStateKind:
	INITIAL='initial' | FINAL='final';
		
EsmNormalState returns EsmState:
	(	kind=EsmStateKind ('state')?
	|	'state'
	)
	state=[DState|ID]
	(description=DRichText)?
	(notes+=DNote)*;
	
EsmDerivedState:
	'derived' 
	(kind=EsmStateKind)?
	('state')?
	state=[DState|ID]
	(description=DRichText)?
	(notes+=DNote)*
	'when' expression=DExpression;

EsmCompositeState:
	'composite'
	(kind=EsmStateKind)?
	('state')?
	state=[DState|ID]
	(description=DRichText)?
	(notes+=DNote)* 
	'{'
	('direction' direction=EsmLayoutDirection)?
	(states+=EsmState)+
	(transitions+=EsmTransition)+
	'}';
	
EsmConcurrentState:
	'concurrent'
	(kind=EsmStateKind)?
	('state')?
	state=[DState|ID]
	(description=DRichText)?
	(notes+=DNote)* 
	'{'
	// direction is always 'right' (PlantUML only supports horizontal dividers between regions)
	(subStates+=EsmSubStateModel)+
	'}';

EsmSubStateModel:
	'substate' 
	'{'
	// direction is always 'right' (PlantUML only supports horizontal dividers between regions)
	(states+=EsmState)+
	(transitions+=EsmTransition)+
	'}';


EsmTransition:
	'transition'
	(direction=EsmLayoutDirection)?
	'from'
	from=[DState|ID]
	'to'
	to=[DState|ID]
	'as' event=[DStateEvent|ID]
	(	'when'
		guard=DExpression
	)?
	(notes+=DNote)*;

enum EsmLayoutDirection:
	DOWN="down" | LEFT="left" | UP="up" | RIGHT="right";
	
@Override 
DmxPrimaryExpression returns DExpression:
	DmxLiteralExpression |
	DmxParenthesizedExpression |
	DmxFunctionCall |
	DmxContextReference |
	DmxIfExpression;