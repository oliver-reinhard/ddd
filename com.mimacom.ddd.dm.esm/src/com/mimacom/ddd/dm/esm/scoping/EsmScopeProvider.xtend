/*
 * generated by Xtext 2.17.1
 */
package com.mimacom.ddd.dm.esm.scoping

import com.mimacom.ddd.dm.base.INavigableMemberContainer
import com.mimacom.ddd.dm.esm.DEntityStateModel
import com.mimacom.ddd.dm.esm.DTransition
import com.mimacom.ddd.dm.esm.EsmPackage
import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.EReference
import org.eclipse.xtext.EcoreUtil2
import org.eclipse.xtext.scoping.IScope
import org.eclipse.xtext.scoping.Scopes

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
class EsmScopeProvider extends AbstractEsmScopeProvider {

//	static val BASE = BasePackage.eINSTANCE
	static val ESM = EsmPackage.eINSTANCE

	override getScope(EObject context, EReference reference) {

		if (context instanceof DTransition) {
			if (reference == ESM.DTransition_From || reference == ESM.DTransition_To) {
				val sm = EcoreUtil2.getContainerOfType(context, DEntityStateModel)
				return Scopes.scopeFor(sm.states)
			}
			
			if (reference == ESM.DTransition_Event) {
				val sm = EcoreUtil2.getContainerOfType(context, DEntityStateModel)
				return Scopes.scopeFor(sm.events)
			}
		}
		super.getScope(context, reference)
	}

	protected override IScope getEContainerNavigableMembersScopeSwitch(INavigableMemberContainer container, IScope outerScope) {
		val scope = switch container {
			DEntityStateModel: Scopes.scopeFor(container.getForType.features, outerScope)
			default: super.getEContainerNavigableMembersScopeSwitch(container, outerScope)
		}
		return scope	
	}
}
