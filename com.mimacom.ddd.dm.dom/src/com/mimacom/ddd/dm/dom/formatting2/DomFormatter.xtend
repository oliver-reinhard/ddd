/*
 * generated by Xtext 2.17.1
 */
package com.mimacom.ddd.dm.dom.formatting2

import com.google.inject.Inject
import com.mimacom.ddd.dm.dmx.formatting2.DmxFormatter
import com.mimacom.ddd.dm.dom.DomComplexObject
import com.mimacom.ddd.dm.dom.DomField
import com.mimacom.ddd.dm.dom.DomModel
import com.mimacom.ddd.dm.dom.DomNamedComplexObject
import com.mimacom.ddd.dm.dom.DomSnapshot
import com.mimacom.ddd.dm.dom.services.DomGrammarAccess
import org.eclipse.xtext.formatting2.IFormattableDocument

class DomFormatter extends DmxFormatter {
	
	@Inject extension DomGrammarAccess

	def dispatch void format(DomModel model, extension IFormattableDocument document) {
		
		for (i : model.imports) {
			i.append[if (i == model.imports.last) newLines=2 else newLine]
		}
		
		model.regionFor.assignment(domModelAccess.nameAssignment_2).append[newLines = 2]
		
		for (s : model.snapshots) {
			s.format
		}
	}

	def dispatch void format(DomSnapshot snapshot, extension IFormattableDocument document) {
		val open = snapshot.regionFor.keyword(domSnapshotAccess.leftCurlyBracketKeyword_2)
		val close = snapshot.regionFor.keyword(domSnapshotAccess.rightCurlyBracketKeyword_4)
		open.append[newLines=2]
		interior(open, close) [indent]
		
		for (o : snapshot.objects) {
			o.format
		}
		close.prepend[newLines=2]
	}
	
	def dispatch void format(DomNamedComplexObject obj, extension IFormattableDocument document) {
		obj.regionFor.assignment(domNamedComplexObjectAccess.nameAssignment_0).prepend[newLines=2]
		obj.regionFor.keyword(domNamedComplexObjectAccess.equalsSignKeyword_1).surround[oneSpace]
		obj.object.format
	}
	
	def dispatch void format(DomComplexObject obj, extension IFormattableDocument document) {
		obj.regionFor.assignment(domComplexObjectAccess.refAssignment_0).surround[oneSpace]
		val open = obj.regionFor.ruleCall(domComplexObjectAccess.domFieldListStartSymbolParserRuleCall_1)
		val close = obj.regionFor.keyword(domComplexObjectAccess.rightCurlyBracketKeyword_3)
		interior(open, close) [indent]
		
		for (f : obj.fields) {
			f.format
		}
		close.prepend[newLine].append[if (obj.eContainer instanceof DomField) newLine else newLines=2]
	}
	
	def dispatch void format(DomField field, extension IFormattableDocument document) {
		field.regionFor.assignment(domFieldAccess.refAssignment_0).prepend[newLine]
		field.regionFor.keyword(domFieldAccess.equalsSignKeyword_1).surround[oneSpace]
		field.value?.format	
	}
}
