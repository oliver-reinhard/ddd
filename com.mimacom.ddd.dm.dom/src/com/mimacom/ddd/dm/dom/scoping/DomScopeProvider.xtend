/*
 * generated by Xtext 2.17.1
 */
package com.mimacom.ddd.dm.dom.scoping

import com.mimacom.ddd.dm.base.DDetailType
import com.mimacom.ddd.dm.base.INavigableMemberContainer
import com.mimacom.ddd.dm.dom.DomComplexObject
import com.mimacom.ddd.dm.dom.DomField
import com.mimacom.ddd.dm.dom.DomPackage
import com.mimacom.ddd.dm.dom.DomSnapshot
import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.EReference
import org.eclipse.xtext.scoping.IScope
import org.eclipse.xtext.scoping.Scopes

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
class DomScopeProvider extends AbstractDomScopeProvider {
	
	val DOM = DomPackage.eINSTANCE

	override getScope(EObject context, EReference reference) {
		
		if (reference == DOM.domField_Ref) {
			if (context instanceof DomField) {
				val container = context.eContainer
				if (container instanceof DomComplexObject) {
					if (container.ref instanceof DDetailType) {
						return Scopes.scopeFor(container.ref.features)
					}
				}
			}
		}
		super.getScope(context, reference)
	}
	
	override protected getEContainerNavigableMembersScopeSwitch(INavigableMemberContainer container, IScope outerScope) {
		val scope = switch container {
			DomSnapshot: Scopes.scopeFor(container.objects, outerScope)
			DomComplexObject: Scopes.scopeFor(container.fields, outerScope)
			default: super.getEContainerNavigableMembersScopeSwitch(container, outerScope)
		}
		return scope
	}
	
}
