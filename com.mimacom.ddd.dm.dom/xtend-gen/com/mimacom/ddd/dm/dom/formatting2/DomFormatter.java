/**
 * generated by Xtext 2.17.1
 */
package com.mimacom.ddd.dm.dom.formatting2;

import com.google.common.base.Objects;
import com.google.inject.Inject;
import com.mimacom.ddd.dm.base.DExpression;
import com.mimacom.ddd.dm.base.DImport;
import com.mimacom.ddd.dm.base.DRichText;
import com.mimacom.ddd.dm.dmx.DmxComplexObject;
import com.mimacom.ddd.dm.dmx.DmxField;
import com.mimacom.ddd.dm.dmx.DmxNamespace;
import com.mimacom.ddd.dm.dmx.formatting2.DmxFormatter;
import com.mimacom.ddd.dm.dom.DomModel;
import com.mimacom.ddd.dm.dom.DomNamedComplexObject;
import com.mimacom.ddd.dm.dom.DomObject;
import com.mimacom.ddd.dm.dom.DomSnapshot;
import com.mimacom.ddd.dm.dom.services.DomGrammarAccess;
import java.util.Arrays;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.formatting2.IHiddenRegionFormatter;
import org.eclipse.xtext.formatting2.regionaccess.ISemanticRegion;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.eclipse.xtext.xbase.lib.Procedures.Procedure1;

@SuppressWarnings("all")
public class DomFormatter extends DmxFormatter {
  @Inject
  @Extension
  private DomGrammarAccess _domGrammarAccess;
  
  protected void _format(final DomModel model, @Extension final IFormattableDocument document) {
    EList<DImport> _imports = model.getImports();
    for (final DImport i : _imports) {
      final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
        DImport _last = IterableExtensions.<DImport>last(model.getImports());
        boolean _equals = Objects.equal(i, _last);
        if (_equals) {
          it.setNewLines(2);
        } else {
          it.newLine();
        }
      };
      document.<DImport>append(i, _function);
    }
    final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
      it.setNewLines(2);
    };
    document.append(this.textRegionExtensions.regionFor(model).assignment(this._domGrammarAccess.getDomModelAccess().getNameAssignment_2()), _function_1);
    EList<DomSnapshot> _snapshots = model.getSnapshots();
    for (final DomSnapshot s : _snapshots) {
      document.<DomSnapshot>format(s);
    }
  }
  
  protected void _format(final DomSnapshot snapshot, @Extension final IFormattableDocument document) {
    final ISemanticRegion open = this.textRegionExtensions.regionFor(snapshot).keyword(this._domGrammarAccess.getDomSnapshotAccess().getLeftCurlyBracketKeyword_2());
    final ISemanticRegion close = this.textRegionExtensions.regionFor(snapshot).keyword(this._domGrammarAccess.getDomSnapshotAccess().getRightCurlyBracketKeyword_4());
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.setNewLines(2);
    };
    document.append(open, _function);
    final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
      it.indent();
    };
    document.<ISemanticRegion, ISemanticRegion>interior(open, close, _function_1);
    EList<DomObject> _objects = snapshot.getObjects();
    for (final DomObject o : _objects) {
      document.<DomObject>format(o);
    }
    final Procedure1<IHiddenRegionFormatter> _function_2 = (IHiddenRegionFormatter it) -> {
      it.setNewLines(2);
    };
    document.prepend(close, _function_2);
  }
  
  protected void _format(final DomNamedComplexObject obj, @Extension final IFormattableDocument document) {
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.setNewLines(2);
    };
    document.prepend(this.textRegionExtensions.regionFor(obj).assignment(this._domGrammarAccess.getDomNamedComplexObjectAccess().getNameAssignment_0()), _function);
    final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
      it.oneSpace();
    };
    document.surround(this.textRegionExtensions.regionFor(obj).keyword(this._domGrammarAccess.getDomNamedComplexObjectAccess().getEqualsSignKeyword_1()), _function_1);
    document.<DmxComplexObject>format(obj.getObject());
  }
  
  protected void _format(final DmxComplexObject obj, @Extension final IFormattableDocument document) {
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.oneSpace();
    };
    document.surround(this.textRegionExtensions.regionFor(obj).assignment(this._domGrammarAccess.getDmxComplexObjectAccess().getTypeAssignment_0()), _function);
    final ISemanticRegion open = this.textRegionExtensions.regionFor(obj).ruleCall(this._domGrammarAccess.getDmxComplexObjectAccess().getDomFieldListStartSymbolParserRuleCall_1());
    final ISemanticRegion close = this.textRegionExtensions.regionFor(obj).keyword(this._domGrammarAccess.getDmxComplexObjectAccess().getRightCurlyBracketKeyword_3());
    final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
      it.indent();
    };
    document.<ISemanticRegion, ISemanticRegion>interior(open, close, _function_1);
    EList<DmxField> _fields = obj.getFields();
    for (final DmxField f : _fields) {
      document.<DmxField>format(f);
    }
    final Procedure1<IHiddenRegionFormatter> _function_2 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    final Procedure1<IHiddenRegionFormatter> _function_3 = (IHiddenRegionFormatter it) -> {
      EObject _eContainer = obj.eContainer();
      if ((_eContainer instanceof DmxField)) {
        it.newLine();
      } else {
        it.setNewLines(2);
      }
    };
    document.append(document.prepend(close, _function_2), _function_3);
  }
  
  protected void _format(final DmxField field, @Extension final IFormattableDocument document) {
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.prepend(this.textRegionExtensions.regionFor(field).assignment(this._domGrammarAccess.getDmxFieldAccess().getFeatureAssignment_0()), _function);
    final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
      it.oneSpace();
    };
    document.surround(this.textRegionExtensions.regionFor(field).keyword(this._domGrammarAccess.getDmxFieldAccess().getEqualsSignKeyword_1()), _function_1);
    DExpression _value = field.getValue();
    if (_value!=null) {
      document.<DExpression>format(_value);
    }
  }
  
  public void format(final Object obj, final IFormattableDocument document) {
    if (obj instanceof DomNamedComplexObject) {
      _format((DomNamedComplexObject)obj, document);
      return;
    } else if (obj instanceof DRichText) {
      _format((DRichText)obj, document);
      return;
    } else if (obj instanceof DmxComplexObject) {
      _format((DmxComplexObject)obj, document);
      return;
    } else if (obj instanceof DmxField) {
      _format((DmxField)obj, document);
      return;
    } else if (obj instanceof DmxNamespace) {
      _format((DmxNamespace)obj, document);
      return;
    } else if (obj instanceof DomModel) {
      _format((DomModel)obj, document);
      return;
    } else if (obj instanceof XtextResource) {
      _format((XtextResource)obj, document);
      return;
    } else if (obj instanceof DExpression) {
      _format((DExpression)obj, document);
      return;
    } else if (obj instanceof DomSnapshot) {
      _format((DomSnapshot)obj, document);
      return;
    } else if (obj instanceof EObject) {
      _format((EObject)obj, document);
      return;
    } else if (obj == null) {
      _format((Void)null, document);
      return;
    } else if (obj != null) {
      _format(obj, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(obj, document).toString());
    }
  }
}
