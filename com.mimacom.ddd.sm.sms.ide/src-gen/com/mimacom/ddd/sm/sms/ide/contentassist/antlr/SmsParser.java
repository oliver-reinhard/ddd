/*
 * generated by Xtext 2.16.0
 */
package com.mimacom.ddd.sm.sms.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import com.mimacom.ddd.sm.sms.ide.contentassist.antlr.internal.InternalSmsParser;
import com.mimacom.ddd.sm.sms.services.SmsGrammarAccess;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class SmsParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(SmsGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, SmsGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getSDomainAccess().getAlternatives_3(), "rule__SDomain__Alternatives_3");
			builder.put(grammarAccess.getSAggregateAccess().getAlternatives_1(), "rule__SAggregate__Alternatives_1");
			builder.put(grammarAccess.getSTypeAccess().getAlternatives(), "rule__SType__Alternatives");
			builder.put(grammarAccess.getSPrimitiveAccess().getAlternatives_2(), "rule__SPrimitive__Alternatives_2");
			builder.put(grammarAccess.getSPrimitiveAccess().getAlternatives_2_1_0(), "rule__SPrimitive__Alternatives_2_1_0");
			builder.put(grammarAccess.getSEnumerationAccess().getAlternatives_0(), "rule__SEnumeration__Alternatives_0");
			builder.put(grammarAccess.getSLiteralAccess().getAlternatives(), "rule__SLiteral__Alternatives");
			builder.put(grammarAccess.getSRootTypeAccess().getAlternatives_0(), "rule__SRootType__Alternatives_0");
			builder.put(grammarAccess.getSDetailTypeAccess().getAlternatives_0(), "rule__SDetailType__Alternatives_0");
			builder.put(grammarAccess.getSComplexTypeFeaturesAccess().getAlternatives_1(), "rule__SComplexTypeFeatures__Alternatives_1");
			builder.put(grammarAccess.getSFeatureAccess().getAlternatives(), "rule__SFeature__Alternatives");
			builder.put(grammarAccess.getSAssociationAccess().getAlternatives(), "rule__SAssociation__Alternatives");
			builder.put(grammarAccess.getSAssociationAccess().getAlternatives_0_1(), "rule__SAssociation__Alternatives_0_1");
			builder.put(grammarAccess.getSAssociationAccess().getAlternatives_1_1(), "rule__SAssociation__Alternatives_1_1");
			builder.put(grammarAccess.getSAssociationAccess().getAlternatives_2_1(), "rule__SAssociation__Alternatives_2_1");
			builder.put(grammarAccess.getSAssociationAccess().getAlternatives_3_1(), "rule__SAssociation__Alternatives_3_1");
			builder.put(grammarAccess.getSAttributeAccess().getAlternatives(), "rule__SAttribute__Alternatives");
			builder.put(grammarAccess.getSQueryAccess().getAlternatives(), "rule__SQuery__Alternatives");
			builder.put(grammarAccess.getSQueryAccess().getAlternatives_0_0(), "rule__SQuery__Alternatives_0_0");
			builder.put(grammarAccess.getSQueryAccess().getAlternatives_0_2(), "rule__SQuery__Alternatives_0_2");
			builder.put(grammarAccess.getSQueryParameterAccess().getAlternatives(), "rule__SQueryParameter__Alternatives");
			builder.put(grammarAccess.getMULTIPLICITYAccess().getAlternatives(), "rule__MULTIPLICITY__Alternatives");
			builder.put(grammarAccess.getSAssociationKindAccess().getAlternatives(), "rule__SAssociationKind__Alternatives");
			builder.put(grammarAccess.getSDomainAccess().getGroup(), "rule__SDomain__Group__0");
			builder.put(grammarAccess.getSImportAccess().getGroup(), "rule__SImport__Group__0");
			builder.put(grammarAccess.getSGrabEnumerationRuleAccess().getGroup(), "rule__SGrabEnumerationRule__Group__0");
			builder.put(grammarAccess.getSGrabEnumerationRuleAccess().getGroup_1(), "rule__SGrabEnumerationRule__Group_1__0");
			builder.put(grammarAccess.getSGrabEnumerationLiteralRuleAccess().getGroup(), "rule__SGrabEnumerationLiteralRule__Group__0");
			builder.put(grammarAccess.getSGrabEnumerationLiteralRuleAccess().getGroup_1(), "rule__SGrabEnumerationLiteralRule__Group_1__0");
			builder.put(grammarAccess.getSGrabComplexTypeRuleAccess().getGroup(), "rule__SGrabComplexTypeRule__Group__0");
			builder.put(grammarAccess.getSGrabComplexTypeRuleAccess().getGroup_1(), "rule__SGrabComplexTypeRule__Group_1__0");
			builder.put(grammarAccess.getSMorphComplexTypeRuleAccess().getGroup(), "rule__SMorphComplexTypeRule__Group__0");
			builder.put(grammarAccess.getSMorphComplexTypeRuleAccess().getGroup_1(), "rule__SMorphComplexTypeRule__Group_1__0");
			builder.put(grammarAccess.getSMorphComplexTypeRuleAccess().getGroup_2(), "rule__SMorphComplexTypeRule__Group_2__0");
			builder.put(grammarAccess.getSFuseComplexTypeRuleAccess().getGroup(), "rule__SFuseComplexTypeRule__Group__0");
			builder.put(grammarAccess.getSFuseComplexTypeRuleAccess().getGroup_3(), "rule__SFuseComplexTypeRule__Group_3__0");
			builder.put(grammarAccess.getSFuseComplexTypeRuleAccess().getGroup_4(), "rule__SFuseComplexTypeRule__Group_4__0");
			builder.put(grammarAccess.getSGrabFeatureRuleAccess().getGroup(), "rule__SGrabFeatureRule__Group__0");
			builder.put(grammarAccess.getSGrabFeatureRuleAccess().getGroup_1(), "rule__SGrabFeatureRule__Group_1__0");
			builder.put(grammarAccess.getSMorphFeatureRuleAccess().getGroup(), "rule__SMorphFeatureRule__Group__0");
			builder.put(grammarAccess.getSMorphFeatureRuleAccess().getGroup_1(), "rule__SMorphFeatureRule__Group_1__0");
			builder.put(grammarAccess.getSMorphFeatureRuleAccess().getGroup_2(), "rule__SMorphFeatureRule__Group_2__0");
			builder.put(grammarAccess.getSAggregateAccess().getGroup(), "rule__SAggregate__Group__0");
			builder.put(grammarAccess.getSAggregateAccess().getGroup_1_0(), "rule__SAggregate__Group_1_0__0");
			builder.put(grammarAccess.getSAggregateAccess().getGroup_1_1(), "rule__SAggregate__Group_1_1__0");
			builder.put(grammarAccess.getSConstraintAccess().getGroup(), "rule__SConstraint__Group__0");
			builder.put(grammarAccess.getSPrimitiveAccess().getGroup(), "rule__SPrimitive__Group__0");
			builder.put(grammarAccess.getSPrimitiveAccess().getGroup_2_0(), "rule__SPrimitive__Group_2_0__0");
			builder.put(grammarAccess.getSPrimitiveAccess().getGroup_2_1(), "rule__SPrimitive__Group_2_1__0");
			builder.put(grammarAccess.getSPrimitiveArchetypeAccess().getGroup(), "rule__SPrimitiveArchetype__Group__0");
			builder.put(grammarAccess.getSEnumerationAccess().getGroup(), "rule__SEnumeration__Group__0");
			builder.put(grammarAccess.getSEnumerationAccess().getGroup_0_0(), "rule__SEnumeration__Group_0_0__0");
			builder.put(grammarAccess.getSEnumerationAccess().getGroup_0_1(), "rule__SEnumeration__Group_0_1__0");
			builder.put(grammarAccess.getSEnumerationAccess().getGroup_2(), "rule__SEnumeration__Group_2__0");
			builder.put(grammarAccess.getSEnumerationAccess().getGroup_2_1(), "rule__SEnumeration__Group_2_1__0");
			builder.put(grammarAccess.getSLiteralAccess().getGroup_0(), "rule__SLiteral__Group_0__0");
			builder.put(grammarAccess.getSLiteralAccess().getGroup_1(), "rule__SLiteral__Group_1__0");
			builder.put(grammarAccess.getSRootTypeAccess().getGroup(), "rule__SRootType__Group__0");
			builder.put(grammarAccess.getSRootTypeAccess().getGroup_0_0(), "rule__SRootType__Group_0_0__0");
			builder.put(grammarAccess.getSRootTypeAccess().getGroup_0_1(), "rule__SRootType__Group_0_1__0");
			builder.put(grammarAccess.getSRootTypeAccess().getGroup_0_2(), "rule__SRootType__Group_0_2__0");
			builder.put(grammarAccess.getSRootTypeAccess().getGroup_0_3(), "rule__SRootType__Group_0_3__0");
			builder.put(grammarAccess.getSDetailTypeAccess().getGroup(), "rule__SDetailType__Group__0");
			builder.put(grammarAccess.getSDetailTypeAccess().getGroup_0_0(), "rule__SDetailType__Group_0_0__0");
			builder.put(grammarAccess.getSDetailTypeAccess().getGroup_0_1(), "rule__SDetailType__Group_0_1__0");
			builder.put(grammarAccess.getSDetailTypeAccess().getGroup_0_2(), "rule__SDetailType__Group_0_2__0");
			builder.put(grammarAccess.getSDetailTypeAccess().getGroup_0_3(), "rule__SDetailType__Group_0_3__0");
			builder.put(grammarAccess.getSComplexTypeExtendsAccess().getGroup(), "rule__SComplexTypeExtends__Group__0");
			builder.put(grammarAccess.getSComplexTypeFeaturesAccess().getGroup(), "rule__SComplexTypeFeatures__Group__0");
			builder.put(grammarAccess.getSAssociationAccess().getGroup_0(), "rule__SAssociation__Group_0__0");
			builder.put(grammarAccess.getSAssociationAccess().getGroup_1(), "rule__SAssociation__Group_1__0");
			builder.put(grammarAccess.getSAssociationAccess().getGroup_2(), "rule__SAssociation__Group_2__0");
			builder.put(grammarAccess.getSAssociationAccess().getGroup_3(), "rule__SAssociation__Group_3__0");
			builder.put(grammarAccess.getSAssociationAccess().getGroup_3_1_1(), "rule__SAssociation__Group_3_1_1__0");
			builder.put(grammarAccess.getSAttributeAccess().getGroup_0(), "rule__SAttribute__Group_0__0");
			builder.put(grammarAccess.getSAttributeAccess().getGroup_1(), "rule__SAttribute__Group_1__0");
			builder.put(grammarAccess.getSAttributeAccess().getGroup_2(), "rule__SAttribute__Group_2__0");
			builder.put(grammarAccess.getSAttributeAccess().getGroup_3(), "rule__SAttribute__Group_3__0");
			builder.put(grammarAccess.getSQueryAccess().getGroup_0(), "rule__SQuery__Group_0__0");
			builder.put(grammarAccess.getSQueryAccess().getGroup_0_0_0(), "rule__SQuery__Group_0_0_0__0");
			builder.put(grammarAccess.getSQueryAccess().getGroup_0_0_1(), "rule__SQuery__Group_0_0_1__0");
			builder.put(grammarAccess.getSQueryAccess().getGroup_0_2_1(), "rule__SQuery__Group_0_2_1__0");
			builder.put(grammarAccess.getSQueryAccess().getGroup_0_2_1_1(), "rule__SQuery__Group_0_2_1_1__0");
			builder.put(grammarAccess.getSQueryAccess().getGroup_1(), "rule__SQuery__Group_1__0");
			builder.put(grammarAccess.getSQueryAccess().getGroup_2(), "rule__SQuery__Group_2__0");
			builder.put(grammarAccess.getSQueryAccess().getGroup_2_2(), "rule__SQuery__Group_2_2__0");
			builder.put(grammarAccess.getSQueryAccess().getGroup_2_2_1(), "rule__SQuery__Group_2_2_1__0");
			builder.put(grammarAccess.getSQueryAccess().getGroup_2_7(), "rule__SQuery__Group_2_7__0");
			builder.put(grammarAccess.getSQueryParameterAccess().getGroup_0(), "rule__SQueryParameter__Group_0__0");
			builder.put(grammarAccess.getSQueryParameterAccess().getGroup_1(), "rule__SQueryParameter__Group_1__0");
			builder.put(grammarAccess.getSQueryParameterAccess().getGroup_2(), "rule__SQueryParameter__Group_2__0");
			builder.put(grammarAccess.getSQualifiedNameWithWildcardAccess().getGroup(), "rule__SQualifiedNameWithWildcard__Group__0");
			builder.put(grammarAccess.getSQualifiedNameAccess().getGroup(), "rule__SQualifiedName__Group__0");
			builder.put(grammarAccess.getSQualifiedNameAccess().getGroup_1(), "rule__SQualifiedName__Group_1__0");
			builder.put(grammarAccess.getSMultiplicityAccess().getGroup(), "rule__SMultiplicity__Group__0");
			builder.put(grammarAccess.getSDomainAccess().getNameAssignment_1(), "rule__SDomain__NameAssignment_1");
			builder.put(grammarAccess.getSDomainAccess().getImportsAssignment_2(), "rule__SDomain__ImportsAssignment_2");
			builder.put(grammarAccess.getSDomainAccess().getTypesAssignment_3_0(), "rule__SDomain__TypesAssignment_3_0");
			builder.put(grammarAccess.getSDomainAccess().getAggregatesAssignment_3_1(), "rule__SDomain__AggregatesAssignment_3_1");
			builder.put(grammarAccess.getSImportAccess().getImportedNamespaceAssignment_1(), "rule__SImport__ImportedNamespaceAssignment_1");
			builder.put(grammarAccess.getSGrabAggregateRuleAccess().getSourceAssignment(), "rule__SGrabAggregateRule__SourceAssignment");
			builder.put(grammarAccess.getSGrabEnumerationRuleAccess().getSourceAssignment_0(), "rule__SGrabEnumerationRule__SourceAssignment_0");
			builder.put(grammarAccess.getSGrabEnumerationRuleAccess().getRenameToAssignment_1_2(), "rule__SGrabEnumerationRule__RenameToAssignment_1_2");
			builder.put(grammarAccess.getSGrabEnumerationLiteralRuleAccess().getSourceAssignment_0(), "rule__SGrabEnumerationLiteralRule__SourceAssignment_0");
			builder.put(grammarAccess.getSGrabEnumerationLiteralRuleAccess().getRenameToAssignment_1_2(), "rule__SGrabEnumerationLiteralRule__RenameToAssignment_1_2");
			builder.put(grammarAccess.getSDitchEnumerationLiteralRuleAccess().getSourceAssignment(), "rule__SDitchEnumerationLiteralRule__SourceAssignment");
			builder.put(grammarAccess.getSGrabComplexTypeRuleAccess().getSourceAssignment_0(), "rule__SGrabComplexTypeRule__SourceAssignment_0");
			builder.put(grammarAccess.getSGrabComplexTypeRuleAccess().getRenameToAssignment_1_2(), "rule__SGrabComplexTypeRule__RenameToAssignment_1_2");
			builder.put(grammarAccess.getSMorphComplexTypeRuleAccess().getSourceAssignment_0(), "rule__SMorphComplexTypeRule__SourceAssignment_0");
			builder.put(grammarAccess.getSMorphComplexTypeRuleAccess().getRenameToAssignment_1_2(), "rule__SMorphComplexTypeRule__RenameToAssignment_1_2");
			builder.put(grammarAccess.getSMorphComplexTypeRuleAccess().getRetypeToAssignment_2_2(), "rule__SMorphComplexTypeRule__RetypeToAssignment_2_2");
			builder.put(grammarAccess.getSFuseComplexTypeRuleAccess().getSourceAssignment_0(), "rule__SFuseComplexTypeRule__SourceAssignment_0");
			builder.put(grammarAccess.getSFuseComplexTypeRuleAccess().getSource2Assignment_2(), "rule__SFuseComplexTypeRule__Source2Assignment_2");
			builder.put(grammarAccess.getSFuseComplexTypeRuleAccess().getRenameToAssignment_3_2(), "rule__SFuseComplexTypeRule__RenameToAssignment_3_2");
			builder.put(grammarAccess.getSFuseComplexTypeRuleAccess().getExtendFromAssignment_4_2(), "rule__SFuseComplexTypeRule__ExtendFromAssignment_4_2");
			builder.put(grammarAccess.getSGrabFeatureRuleAccess().getSourceAssignment_0(), "rule__SGrabFeatureRule__SourceAssignment_0");
			builder.put(grammarAccess.getSGrabFeatureRuleAccess().getRenameToAssignment_1_2(), "rule__SGrabFeatureRule__RenameToAssignment_1_2");
			builder.put(grammarAccess.getSMorphFeatureRuleAccess().getSourceAssignment_0(), "rule__SMorphFeatureRule__SourceAssignment_0");
			builder.put(grammarAccess.getSMorphFeatureRuleAccess().getRenameToAssignment_1_2(), "rule__SMorphFeatureRule__RenameToAssignment_1_2");
			builder.put(grammarAccess.getSMorphFeatureRuleAccess().getRetypeToAssignment_2_2(), "rule__SMorphFeatureRule__RetypeToAssignment_2_2");
			builder.put(grammarAccess.getSMorphFeatureRuleAccess().getRemultiplyToAssignment_2_3(), "rule__SMorphFeatureRule__RemultiplyToAssignment_2_3");
			builder.put(grammarAccess.getSDitchFeatureRuleAccess().getSourceAssignment(), "rule__SDitchFeatureRule__SourceAssignment");
			builder.put(grammarAccess.getSAggregateAccess().getDeductionRuleAssignment_1_0_2(), "rule__SAggregate__DeductionRuleAssignment_1_0_2");
			builder.put(grammarAccess.getSAggregateAccess().getTypesAssignment_1_1_2(), "rule__SAggregate__TypesAssignment_1_1_2");
			builder.put(grammarAccess.getSConstraintAccess().getNameAssignment_1(), "rule__SConstraint__NameAssignment_1");
			builder.put(grammarAccess.getSConstraintAccess().getConditionAssignment_3(), "rule__SConstraint__ConditionAssignment_3");
			builder.put(grammarAccess.getSPrimitiveAccess().getNameAssignment_1(), "rule__SPrimitive__NameAssignment_1");
			builder.put(grammarAccess.getSPrimitiveAccess().getRedefinesAssignment_2_0_1(), "rule__SPrimitive__RedefinesAssignment_2_0_1");
			builder.put(grammarAccess.getSPrimitiveAccess().getRealizesAssignment_2_1_1(), "rule__SPrimitive__RealizesAssignment_2_1_1");
			builder.put(grammarAccess.getSPrimitiveAccess().getConstraintsAssignment_4(), "rule__SPrimitive__ConstraintsAssignment_4");
			builder.put(grammarAccess.getSPrimitiveArchetypeAccess().getNameAssignment_1(), "rule__SPrimitiveArchetype__NameAssignment_1");
			builder.put(grammarAccess.getSPrimitiveArchetypeAccess().getConstraintsAssignment_3(), "rule__SPrimitiveArchetype__ConstraintsAssignment_3");
			builder.put(grammarAccess.getSEnumerationAccess().getDeductionRuleAssignment_0_0_2(), "rule__SEnumeration__DeductionRuleAssignment_0_0_2");
			builder.put(grammarAccess.getSEnumerationAccess().getNameAssignment_0_1_1(), "rule__SEnumeration__NameAssignment_0_1_1");
			builder.put(grammarAccess.getSEnumerationAccess().getLiteralsAssignment_2_0(), "rule__SEnumeration__LiteralsAssignment_2_0");
			builder.put(grammarAccess.getSEnumerationAccess().getLiteralsAssignment_2_1_1(), "rule__SEnumeration__LiteralsAssignment_2_1_1");
			builder.put(grammarAccess.getSEnumerationAccess().getConstraintsAssignment_3(), "rule__SEnumeration__ConstraintsAssignment_3");
			builder.put(grammarAccess.getSLiteralAccess().getDeductionRuleAssignment_0_1(), "rule__SLiteral__DeductionRuleAssignment_0_1");
			builder.put(grammarAccess.getSLiteralAccess().getDeductionRuleAssignment_1_1(), "rule__SLiteral__DeductionRuleAssignment_1_1");
			builder.put(grammarAccess.getSLiteralAccess().getNameAssignment_2(), "rule__SLiteral__NameAssignment_2");
			builder.put(grammarAccess.getSRootTypeAccess().getAbstractAssignment_0_0_1(), "rule__SRootType__AbstractAssignment_0_0_1");
			builder.put(grammarAccess.getSRootTypeAccess().getDeductionRuleAssignment_0_0_3(), "rule__SRootType__DeductionRuleAssignment_0_0_3");
			builder.put(grammarAccess.getSRootTypeAccess().getAbstractAssignment_0_1_1(), "rule__SRootType__AbstractAssignment_0_1_1");
			builder.put(grammarAccess.getSRootTypeAccess().getDeductionRuleAssignment_0_1_3(), "rule__SRootType__DeductionRuleAssignment_0_1_3");
			builder.put(grammarAccess.getSRootTypeAccess().getAbstractAssignment_0_2_1(), "rule__SRootType__AbstractAssignment_0_2_1");
			builder.put(grammarAccess.getSRootTypeAccess().getDeductionRuleAssignment_0_2_3(), "rule__SRootType__DeductionRuleAssignment_0_2_3");
			builder.put(grammarAccess.getSRootTypeAccess().getAbstractAssignment_0_3_0(), "rule__SRootType__AbstractAssignment_0_3_0");
			builder.put(grammarAccess.getSRootTypeAccess().getNameAssignment_0_3_2(), "rule__SRootType__NameAssignment_0_3_2");
			builder.put(grammarAccess.getSDetailTypeAccess().getAbstractAssignment_0_0_1(), "rule__SDetailType__AbstractAssignment_0_0_1");
			builder.put(grammarAccess.getSDetailTypeAccess().getDeductionRuleAssignment_0_0_3(), "rule__SDetailType__DeductionRuleAssignment_0_0_3");
			builder.put(grammarAccess.getSDetailTypeAccess().getAbstractAssignment_0_1_1(), "rule__SDetailType__AbstractAssignment_0_1_1");
			builder.put(grammarAccess.getSDetailTypeAccess().getDeductionRuleAssignment_0_1_3(), "rule__SDetailType__DeductionRuleAssignment_0_1_3");
			builder.put(grammarAccess.getSDetailTypeAccess().getAbstractAssignment_0_2_1(), "rule__SDetailType__AbstractAssignment_0_2_1");
			builder.put(grammarAccess.getSDetailTypeAccess().getDeductionRuleAssignment_0_2_3(), "rule__SDetailType__DeductionRuleAssignment_0_2_3");
			builder.put(grammarAccess.getSDetailTypeAccess().getAbstractAssignment_0_3_0(), "rule__SDetailType__AbstractAssignment_0_3_0");
			builder.put(grammarAccess.getSDetailTypeAccess().getNameAssignment_0_3_2(), "rule__SDetailType__NameAssignment_0_3_2");
			builder.put(grammarAccess.getSComplexTypeExtendsAccess().getSuperTypeAssignment_1(), "rule__SComplexTypeExtends__SuperTypeAssignment_1");
			builder.put(grammarAccess.getSComplexTypeFeaturesAccess().getFeaturesAssignment_1_0(), "rule__SComplexTypeFeatures__FeaturesAssignment_1_0");
			builder.put(grammarAccess.getSComplexTypeFeaturesAccess().getConstraintsAssignment_1_1(), "rule__SComplexTypeFeatures__ConstraintsAssignment_1_1");
			builder.put(grammarAccess.getSAssociationAccess().getDeductionRuleAssignment_0_2(), "rule__SAssociation__DeductionRuleAssignment_0_2");
			builder.put(grammarAccess.getSAssociationAccess().getDeductionRuleAssignment_1_2(), "rule__SAssociation__DeductionRuleAssignment_1_2");
			builder.put(grammarAccess.getSAssociationAccess().getDeductionRuleAssignment_2_2(), "rule__SAssociation__DeductionRuleAssignment_2_2");
			builder.put(grammarAccess.getSAssociationAccess().getDerivedAssignment_3_0(), "rule__SAssociation__DerivedAssignment_3_0");
			builder.put(grammarAccess.getSAssociationAccess().getKindAssignment_3_1_0(), "rule__SAssociation__KindAssignment_3_1_0");
			builder.put(grammarAccess.getSAssociationAccess().getKindAssignment_3_1_1_0(), "rule__SAssociation__KindAssignment_3_1_1_0");
			builder.put(grammarAccess.getSAssociationAccess().getNameAssignment_3_2(), "rule__SAssociation__NameAssignment_3_2");
			builder.put(grammarAccess.getSAssociationAccess().getTypeAssignment_3_4(), "rule__SAssociation__TypeAssignment_3_4");
			builder.put(grammarAccess.getSAssociationAccess().getMultiplicityAssignment_3_5(), "rule__SAssociation__MultiplicityAssignment_3_5");
			builder.put(grammarAccess.getSAttributeAccess().getDetailAssignment_0_1(), "rule__SAttribute__DetailAssignment_0_1");
			builder.put(grammarAccess.getSAttributeAccess().getDeductionRuleAssignment_0_2(), "rule__SAttribute__DeductionRuleAssignment_0_2");
			builder.put(grammarAccess.getSAttributeAccess().getDetailAssignment_1_1(), "rule__SAttribute__DetailAssignment_1_1");
			builder.put(grammarAccess.getSAttributeAccess().getDeductionRuleAssignment_1_2(), "rule__SAttribute__DeductionRuleAssignment_1_2");
			builder.put(grammarAccess.getSAttributeAccess().getDetailAssignment_2_1(), "rule__SAttribute__DetailAssignment_2_1");
			builder.put(grammarAccess.getSAttributeAccess().getDeductionRuleAssignment_2_2(), "rule__SAttribute__DeductionRuleAssignment_2_2");
			builder.put(grammarAccess.getSAttributeAccess().getDetailAssignment_3_0(), "rule__SAttribute__DetailAssignment_3_0");
			builder.put(grammarAccess.getSAttributeAccess().getNameAssignment_3_1(), "rule__SAttribute__NameAssignment_3_1");
			builder.put(grammarAccess.getSAttributeAccess().getTypeAssignment_3_3(), "rule__SAttribute__TypeAssignment_3_3");
			builder.put(grammarAccess.getSAttributeAccess().getMultiplicityAssignment_3_4(), "rule__SAttribute__MultiplicityAssignment_3_4");
			builder.put(grammarAccess.getSAttributeAccess().getKeyAssignment_3_5(), "rule__SAttribute__KeyAssignment_3_5");
			builder.put(grammarAccess.getSQueryAccess().getDeductionRuleAssignment_0_0_0_2(), "rule__SQuery__DeductionRuleAssignment_0_0_0_2");
			builder.put(grammarAccess.getSQueryAccess().getDeductionRuleAssignment_0_0_1_2(), "rule__SQuery__DeductionRuleAssignment_0_0_1_2");
			builder.put(grammarAccess.getSQueryAccess().getParametersAssignment_0_2_1_0(), "rule__SQuery__ParametersAssignment_0_2_1_0");
			builder.put(grammarAccess.getSQueryAccess().getParametersAssignment_0_2_1_1_1(), "rule__SQuery__ParametersAssignment_0_2_1_1_1");
			builder.put(grammarAccess.getSQueryAccess().getDeductionRuleAssignment_1_2(), "rule__SQuery__DeductionRuleAssignment_1_2");
			builder.put(grammarAccess.getSQueryAccess().getNameAssignment_2_0(), "rule__SQuery__NameAssignment_2_0");
			builder.put(grammarAccess.getSQueryAccess().getParametersAssignment_2_2_0(), "rule__SQuery__ParametersAssignment_2_2_0");
			builder.put(grammarAccess.getSQueryAccess().getParametersAssignment_2_2_1_1(), "rule__SQuery__ParametersAssignment_2_2_1_1");
			builder.put(grammarAccess.getSQueryAccess().getTypeAssignment_2_5(), "rule__SQuery__TypeAssignment_2_5");
			builder.put(grammarAccess.getSQueryAccess().getMultiplicityAssignment_2_6(), "rule__SQuery__MultiplicityAssignment_2_6");
			builder.put(grammarAccess.getSQueryAccess().getReturnsAssignment_2_7_1(), "rule__SQuery__ReturnsAssignment_2_7_1");
			builder.put(grammarAccess.getSQueryParameterAccess().getDeductionRuleAssignment_0_1(), "rule__SQueryParameter__DeductionRuleAssignment_0_1");
			builder.put(grammarAccess.getSQueryParameterAccess().getDeductionRuleAssignment_1_1(), "rule__SQueryParameter__DeductionRuleAssignment_1_1");
			builder.put(grammarAccess.getSQueryParameterAccess().getDeductionRuleAssignment_2_1(), "rule__SQueryParameter__DeductionRuleAssignment_2_1");
			builder.put(grammarAccess.getSQueryParameterAccess().getNameAssignment_2_2(), "rule__SQueryParameter__NameAssignment_2_2");
			builder.put(grammarAccess.getSQueryParameterAccess().getTypeAssignment_2_4(), "rule__SQueryParameter__TypeAssignment_2_4");
			builder.put(grammarAccess.getSQueryParameterAccess().getMultiplicityAssignment_2_5(), "rule__SQueryParameter__MultiplicityAssignment_2_5");
			builder.put(grammarAccess.getSExpressionAccess().getExprAssignment(), "rule__SExpression__ExprAssignment");
			builder.put(grammarAccess.getSMultiplicityAccess().getMinOccursAssignment_1(), "rule__SMultiplicity__MinOccursAssignment_1");
			builder.put(grammarAccess.getSMultiplicityAccess().getMaxOccursAssignment_3(), "rule__SMultiplicity__MaxOccursAssignment_3");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private SmsGrammarAccess grammarAccess;

	@Override
	protected InternalSmsParser createParser() {
		InternalSmsParser result = new InternalSmsParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public SmsGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(SmsGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
