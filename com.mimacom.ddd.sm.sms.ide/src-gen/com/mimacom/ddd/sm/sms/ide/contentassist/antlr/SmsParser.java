/*
 * generated by Xtext 2.16.0
 */
package com.mimacom.ddd.sm.sms.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import com.mimacom.ddd.sm.sms.ide.contentassist.antlr.internal.InternalSmsParser;
import com.mimacom.ddd.sm.sms.services.SmsGrammarAccess;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class SmsParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(SmsGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, SmsGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getSDomainAccess().getAlternatives_3(), "rule__SDomain__Alternatives_3");
			builder.put(grammarAccess.getSTransformAccess().getAlternatives(), "rule__STransform__Alternatives");
			builder.put(grammarAccess.getSTypeAccess().getAlternatives(), "rule__SType__Alternatives");
			builder.put(grammarAccess.getSPrimitiveAccess().getAlternatives(), "rule__SPrimitive__Alternatives");
			builder.put(grammarAccess.getSRootTypeAccess().getAlternatives_0(), "rule__SRootType__Alternatives_0");
			builder.put(grammarAccess.getSDetailTypeAccess().getAlternatives_0(), "rule__SDetailType__Alternatives_0");
			builder.put(grammarAccess.getSComplexTypeAccess().getAlternatives_2(), "rule__SComplexType__Alternatives_2");
			builder.put(grammarAccess.getSFeatureAccess().getAlternatives(), "rule__SFeature__Alternatives");
			builder.put(grammarAccess.getSAssociationAccess().getAlternatives_1(), "rule__SAssociation__Alternatives_1");
			builder.put(grammarAccess.getSAttributeAccess().getAlternatives(), "rule__SAttribute__Alternatives");
			builder.put(grammarAccess.getMULTIPLICITYAccess().getAlternatives(), "rule__MULTIPLICITY__Alternatives");
			builder.put(grammarAccess.getSAssociationKindAccess().getAlternatives(), "rule__SAssociationKind__Alternatives");
			builder.put(grammarAccess.getSDomainAccess().getGroup(), "rule__SDomain__Group__0");
			builder.put(grammarAccess.getSImportAccess().getGroup(), "rule__SImport__Group__0");
			builder.put(grammarAccess.getSDeductionRuleAccess().getGroup(), "rule__SDeductionRule__Group__0");
			builder.put(grammarAccess.getSMemberDeductionRuleAccess().getGroup(), "rule__SMemberDeductionRule__Group__0");
			builder.put(grammarAccess.getSSpoofTransformAccess().getGroup(), "rule__SSpoofTransform__Group__0");
			builder.put(grammarAccess.getSMorphTransformAccess().getGroup(), "rule__SMorphTransform__Group__0");
			builder.put(grammarAccess.getSMorphTransformAccess().getGroup_2(), "rule__SMorphTransform__Group_2__0");
			builder.put(grammarAccess.getSMorphTransformAccess().getGroup_3(), "rule__SMorphTransform__Group_3__0");
			builder.put(grammarAccess.getSAggregateAccess().getGroup(), "rule__SAggregate__Group__0");
			builder.put(grammarAccess.getSConstraintAccess().getGroup(), "rule__SConstraint__Group__0");
			builder.put(grammarAccess.getSPrimitiveAccess().getGroup_0(), "rule__SPrimitive__Group_0__0");
			builder.put(grammarAccess.getSPrimitiveAccess().getGroup_1(), "rule__SPrimitive__Group_1__0");
			builder.put(grammarAccess.getSPrimitiveAccess().getGroup_1_3_0(), "rule__SPrimitive__Group_1_3_0__0");
			builder.put(grammarAccess.getSPrimitiveAccess().getGroup_1_3_1(), "rule__SPrimitive__Group_1_3_1__0");
			builder.put(grammarAccess.getSEnumerationAccess().getGroup(), "rule__SEnumeration__Group__0");
			builder.put(grammarAccess.getSEnumerationAccess().getGroup_3(), "rule__SEnumeration__Group_3__0");
			builder.put(grammarAccess.getSEnumerationAccess().getGroup_3_1(), "rule__SEnumeration__Group_3_1__0");
			builder.put(grammarAccess.getSRootTypeAccess().getGroup(), "rule__SRootType__Group__0");
			builder.put(grammarAccess.getSRootTypeAccess().getGroup_0_0(), "rule__SRootType__Group_0_0__0");
			builder.put(grammarAccess.getSRootTypeAccess().getGroup_0_1(), "rule__SRootType__Group_0_1__0");
			builder.put(grammarAccess.getSDetailTypeAccess().getGroup(), "rule__SDetailType__Group__0");
			builder.put(grammarAccess.getSDetailTypeAccess().getGroup_0_0(), "rule__SDetailType__Group_0_0__0");
			builder.put(grammarAccess.getSDetailTypeAccess().getGroup_0_1(), "rule__SDetailType__Group_0_1__0");
			builder.put(grammarAccess.getSComplexTypeAccess().getGroup(), "rule__SComplexType__Group__0");
			builder.put(grammarAccess.getSComplexTypeAccess().getGroup_0(), "rule__SComplexType__Group_0__0");
			builder.put(grammarAccess.getSAssociationAccess().getGroup(), "rule__SAssociation__Group__0");
			builder.put(grammarAccess.getSAssociationAccess().getGroup_1_1(), "rule__SAssociation__Group_1_1__0");
			builder.put(grammarAccess.getSAttributeAccess().getGroup_0(), "rule__SAttribute__Group_0__0");
			builder.put(grammarAccess.getSAttributeAccess().getGroup_1(), "rule__SAttribute__Group_1__0");
			builder.put(grammarAccess.getSQueryAccess().getGroup(), "rule__SQuery__Group__0");
			builder.put(grammarAccess.getSQueryAccess().getGroup_2(), "rule__SQuery__Group_2__0");
			builder.put(grammarAccess.getSQueryAccess().getGroup_2_1(), "rule__SQuery__Group_2_1__0");
			builder.put(grammarAccess.getSQueryAccess().getGroup_7(), "rule__SQuery__Group_7__0");
			builder.put(grammarAccess.getSQueryParameterAccess().getGroup(), "rule__SQueryParameter__Group__0");
			builder.put(grammarAccess.getSQualifiedNameWithWildcardAccess().getGroup(), "rule__SQualifiedNameWithWildcard__Group__0");
			builder.put(grammarAccess.getSQualifiedNameAccess().getGroup(), "rule__SQualifiedName__Group__0");
			builder.put(grammarAccess.getSQualifiedNameAccess().getGroup_1(), "rule__SQualifiedName__Group_1__0");
			builder.put(grammarAccess.getSMultiplicityAccess().getGroup(), "rule__SMultiplicity__Group__0");
			builder.put(grammarAccess.getSDomainAccess().getNameAssignment_1(), "rule__SDomain__NameAssignment_1");
			builder.put(grammarAccess.getSDomainAccess().getImportsAssignment_2(), "rule__SDomain__ImportsAssignment_2");
			builder.put(grammarAccess.getSDomainAccess().getTypesAssignment_3_0(), "rule__SDomain__TypesAssignment_3_0");
			builder.put(grammarAccess.getSDomainAccess().getAggregatesAssignment_3_1(), "rule__SDomain__AggregatesAssignment_3_1");
			builder.put(grammarAccess.getSImportAccess().getImportedNamespaceAssignment_1(), "rule__SImport__ImportedNamespaceAssignment_1");
			builder.put(grammarAccess.getSDeductionRuleAccess().getSourceAssignment_0(), "rule__SDeductionRule__SourceAssignment_0");
			builder.put(grammarAccess.getSDeductionRuleAccess().getTransformAssignment_1(), "rule__SDeductionRule__TransformAssignment_1");
			builder.put(grammarAccess.getSMemberDeductionRuleAccess().getSourceAssignment_0(), "rule__SMemberDeductionRule__SourceAssignment_0");
			builder.put(grammarAccess.getSMemberDeductionRuleAccess().getTransformAssignment_1(), "rule__SMemberDeductionRule__TransformAssignment_1");
			builder.put(grammarAccess.getSMorphTransformAccess().getRenameToAssignment_2_2(), "rule__SMorphTransform__RenameToAssignment_2_2");
			builder.put(grammarAccess.getSMorphTransformAccess().getRetypeToAssignment_3_2(), "rule__SMorphTransform__RetypeToAssignment_3_2");
			builder.put(grammarAccess.getSMorphTransformAccess().getRemultiplyToAssignment_3_3(), "rule__SMorphTransform__RemultiplyToAssignment_3_3");
			builder.put(grammarAccess.getSAggregateAccess().getTypesAssignment_3(), "rule__SAggregate__TypesAssignment_3");
			builder.put(grammarAccess.getSConstraintAccess().getNameAssignment_1(), "rule__SConstraint__NameAssignment_1");
			builder.put(grammarAccess.getSConstraintAccess().getConditionAssignment_3(), "rule__SConstraint__ConditionAssignment_3");
			builder.put(grammarAccess.getSPrimitiveAccess().getDeductionRuleAssignment_0_2(), "rule__SPrimitive__DeductionRuleAssignment_0_2");
			builder.put(grammarAccess.getSPrimitiveAccess().getNameAssignment_1_1(), "rule__SPrimitive__NameAssignment_1_1");
			builder.put(grammarAccess.getSPrimitiveAccess().getRedefinesAssignment_1_3_0_1(), "rule__SPrimitive__RedefinesAssignment_1_3_0_1");
			builder.put(grammarAccess.getSPrimitiveAccess().getRealizesAssignment_1_3_1_1(), "rule__SPrimitive__RealizesAssignment_1_3_1_1");
			builder.put(grammarAccess.getSPrimitiveAccess().getConstraintsAssignment_1_4(), "rule__SPrimitive__ConstraintsAssignment_1_4");
			builder.put(grammarAccess.getSEnumerationAccess().getNameAssignment_1(), "rule__SEnumeration__NameAssignment_1");
			builder.put(grammarAccess.getSEnumerationAccess().getLiteralsAssignment_3_0(), "rule__SEnumeration__LiteralsAssignment_3_0");
			builder.put(grammarAccess.getSEnumerationAccess().getLiteralsAssignment_3_1_1(), "rule__SEnumeration__LiteralsAssignment_3_1_1");
			builder.put(grammarAccess.getSEnumerationAccess().getConstraintsAssignment_4(), "rule__SEnumeration__ConstraintsAssignment_4");
			builder.put(grammarAccess.getSLiteralAccess().getNameAssignment(), "rule__SLiteral__NameAssignment");
			builder.put(grammarAccess.getSRootTypeAccess().getAbstractAssignment_0_0_1(), "rule__SRootType__AbstractAssignment_0_0_1");
			builder.put(grammarAccess.getSRootTypeAccess().getDeductionRuleAssignment_0_0_3(), "rule__SRootType__DeductionRuleAssignment_0_0_3");
			builder.put(grammarAccess.getSRootTypeAccess().getAbstractAssignment_0_1_0(), "rule__SRootType__AbstractAssignment_0_1_0");
			builder.put(grammarAccess.getSRootTypeAccess().getNameAssignment_0_1_2(), "rule__SRootType__NameAssignment_0_1_2");
			builder.put(grammarAccess.getSDetailTypeAccess().getAbstractAssignment_0_0_1(), "rule__SDetailType__AbstractAssignment_0_0_1");
			builder.put(grammarAccess.getSDetailTypeAccess().getDeductionRuleAssignment_0_0_3(), "rule__SDetailType__DeductionRuleAssignment_0_0_3");
			builder.put(grammarAccess.getSDetailTypeAccess().getAbstractAssignment_0_1_0(), "rule__SDetailType__AbstractAssignment_0_1_0");
			builder.put(grammarAccess.getSDetailTypeAccess().getNameAssignment_0_1_2(), "rule__SDetailType__NameAssignment_0_1_2");
			builder.put(grammarAccess.getSComplexTypeAccess().getSuperTypeAssignment_0_1(), "rule__SComplexType__SuperTypeAssignment_0_1");
			builder.put(grammarAccess.getSComplexTypeAccess().getFeaturesAssignment_2_0(), "rule__SComplexType__FeaturesAssignment_2_0");
			builder.put(grammarAccess.getSComplexTypeAccess().getConstraintsAssignment_2_1(), "rule__SComplexType__ConstraintsAssignment_2_1");
			builder.put(grammarAccess.getSAssociationAccess().getDerivedAssignment_0(), "rule__SAssociation__DerivedAssignment_0");
			builder.put(grammarAccess.getSAssociationAccess().getKindAssignment_1_0(), "rule__SAssociation__KindAssignment_1_0");
			builder.put(grammarAccess.getSAssociationAccess().getKindAssignment_1_1_0(), "rule__SAssociation__KindAssignment_1_1_0");
			builder.put(grammarAccess.getSAssociationAccess().getNameAssignment_2(), "rule__SAssociation__NameAssignment_2");
			builder.put(grammarAccess.getSAssociationAccess().getTypeAssignment_4(), "rule__SAssociation__TypeAssignment_4");
			builder.put(grammarAccess.getSAssociationAccess().getMultiplicityAssignment_5(), "rule__SAssociation__MultiplicityAssignment_5");
			builder.put(grammarAccess.getSAttributeAccess().getDetailAssignment_0_1(), "rule__SAttribute__DetailAssignment_0_1");
			builder.put(grammarAccess.getSAttributeAccess().getDeductionRuleAssignment_0_2(), "rule__SAttribute__DeductionRuleAssignment_0_2");
			builder.put(grammarAccess.getSAttributeAccess().getDetailAssignment_1_0(), "rule__SAttribute__DetailAssignment_1_0");
			builder.put(grammarAccess.getSAttributeAccess().getNameAssignment_1_1(), "rule__SAttribute__NameAssignment_1_1");
			builder.put(grammarAccess.getSAttributeAccess().getTypeAssignment_1_3(), "rule__SAttribute__TypeAssignment_1_3");
			builder.put(grammarAccess.getSAttributeAccess().getMultiplicityAssignment_1_4(), "rule__SAttribute__MultiplicityAssignment_1_4");
			builder.put(grammarAccess.getSAttributeAccess().getKeyAssignment_1_5(), "rule__SAttribute__KeyAssignment_1_5");
			builder.put(grammarAccess.getSQueryAccess().getNameAssignment_0(), "rule__SQuery__NameAssignment_0");
			builder.put(grammarAccess.getSQueryAccess().getParametersAssignment_2_0(), "rule__SQuery__ParametersAssignment_2_0");
			builder.put(grammarAccess.getSQueryAccess().getParametersAssignment_2_1_1(), "rule__SQuery__ParametersAssignment_2_1_1");
			builder.put(grammarAccess.getSQueryAccess().getTypeAssignment_5(), "rule__SQuery__TypeAssignment_5");
			builder.put(grammarAccess.getSQueryAccess().getMultiplicityAssignment_6(), "rule__SQuery__MultiplicityAssignment_6");
			builder.put(grammarAccess.getSQueryAccess().getReturnsAssignment_7_1(), "rule__SQuery__ReturnsAssignment_7_1");
			builder.put(grammarAccess.getSQueryParameterAccess().getNameAssignment_0(), "rule__SQueryParameter__NameAssignment_0");
			builder.put(grammarAccess.getSQueryParameterAccess().getTypeAssignment_2(), "rule__SQueryParameter__TypeAssignment_2");
			builder.put(grammarAccess.getSQueryParameterAccess().getMultiplicityAssignment_3(), "rule__SQueryParameter__MultiplicityAssignment_3");
			builder.put(grammarAccess.getSExpressionAccess().getExprAssignment(), "rule__SExpression__ExprAssignment");
			builder.put(grammarAccess.getSMultiplicityAccess().getMinOccursAssignment_1(), "rule__SMultiplicity__MinOccursAssignment_1");
			builder.put(grammarAccess.getSMultiplicityAccess().getMaxOccursAssignment_3(), "rule__SMultiplicity__MaxOccursAssignment_3");
			builder.put(grammarAccess.getSPrimitiveAccess().getUnorderedGroup_1_3(), "rule__SPrimitive__UnorderedGroup_1_3");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private SmsGrammarAccess grammarAccess;

	@Override
	protected InternalSmsParser createParser() {
		InternalSmsParser result = new InternalSmsParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public SmsGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(SmsGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
