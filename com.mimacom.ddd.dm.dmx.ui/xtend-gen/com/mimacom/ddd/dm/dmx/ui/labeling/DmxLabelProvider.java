/**
 * generated by Xtext 2.16.0
 */
package com.mimacom.ddd.dm.dmx.ui.labeling;

import com.google.inject.Inject;
import com.mimacom.ddd.dm.base.TypesUtil;
import com.mimacom.ddd.dm.base.base.DComplexType;
import com.mimacom.ddd.dm.base.base.DExpression;
import com.mimacom.ddd.dm.base.base.DNamedElement;
import com.mimacom.ddd.dm.dmx.DmxBinaryOperation;
import com.mimacom.ddd.dm.dmx.DmxBooleanLiteral;
import com.mimacom.ddd.dm.dmx.DmxCallArguments;
import com.mimacom.ddd.dm.dmx.DmxDecimalLiteral;
import com.mimacom.ddd.dm.dmx.DmxDetail;
import com.mimacom.ddd.dm.dmx.DmxEntity;
import com.mimacom.ddd.dm.dmx.DmxNaturalLiteral;
import com.mimacom.ddd.dm.dmx.DmxStringLiteral;
import com.mimacom.ddd.dm.dmx.DmxUnaryOperation;
import com.mimacom.ddd.dm.dmx.DmxUndefinedLiteral;
import org.eclipse.emf.edit.ui.provider.AdapterFactoryLabelProvider;
import org.eclipse.xtext.ui.label.DefaultEObjectLabelProvider;
import org.eclipse.xtext.xbase.lib.Extension;

/**
 * Provides labels for EObjects.
 * 
 * See https://www.eclipse.org/Xtext/documentation/304_ide_concepts.html#label-provider
 */
@SuppressWarnings("all")
public class DmxLabelProvider extends DefaultEObjectLabelProvider {
  @Inject
  @Extension
  private TypesUtil _typesUtil;
  
  @Inject
  public DmxLabelProvider(final AdapterFactoryLabelProvider delegate) {
    super(delegate);
  }
  
  public String text(final DNamedElement e) {
    String _simpleClassName = this._typesUtil.simpleClassName(e);
    String _plus = (_simpleClassName + " ");
    String _name = e.getName();
    return (_plus + _name);
  }
  
  public String text(final DExpression e) {
    return this._typesUtil.simpleClassName(e);
  }
  
  public String text(final DmxBinaryOperation e) {
    String _simpleClassName = this._typesUtil.simpleClassName(e);
    String _plus = (_simpleClassName + " ");
    String _name = e.getOperator().getName();
    return (_plus + _name);
  }
  
  public String text(final DmxUnaryOperation e) {
    String _simpleClassName = this._typesUtil.simpleClassName(e);
    String _plus = (_simpleClassName + " ");
    String _name = e.getOperator().getName();
    return (_plus + _name);
  }
  
  public String text(final DmxBooleanLiteral e) {
    String _simpleClassName = this._typesUtil.simpleClassName(e);
    String _plus = (_simpleClassName + " ");
    boolean _isValue = e.isValue();
    return (_plus + Boolean.valueOf(_isValue));
  }
  
  public String text(final DmxStringLiteral e) {
    String _simpleClassName = this._typesUtil.simpleClassName(e);
    String _plus = (_simpleClassName + " ");
    String _value = e.getValue();
    return (_plus + _value);
  }
  
  public String text(final DmxNaturalLiteral e) {
    String _simpleClassName = this._typesUtil.simpleClassName(e);
    String _plus = (_simpleClassName + " ");
    int _value = e.getValue();
    return (_plus + Integer.valueOf(_value));
  }
  
  public String text(final DmxDecimalLiteral e) {
    String _simpleClassName = this._typesUtil.simpleClassName(e);
    String _plus = (_simpleClassName + " ");
    String _value = e.getValue();
    return (_plus + _value);
  }
  
  public String text(final DmxUndefinedLiteral e) {
    return this._typesUtil.simpleClassName(e);
  }
  
  public String text(final DmxEntity e) {
    DComplexType _type = e.getType();
    String _name = null;
    if (_type!=null) {
      _name=_type.getName();
    }
    return ("Entity " + _name);
  }
  
  public String text(final DmxDetail d) {
    DComplexType _type = d.getType();
    String _name = null;
    if (_type!=null) {
      _name=_type.getName();
    }
    return ("Detail " + _name);
  }
  
  public String text(final DmxCallArguments d) {
    return "DmxCallArguments";
  }
  
  @Override
  public String text(final Object obj) {
    return this._typesUtil.simpleClassName(obj);
  }
}
