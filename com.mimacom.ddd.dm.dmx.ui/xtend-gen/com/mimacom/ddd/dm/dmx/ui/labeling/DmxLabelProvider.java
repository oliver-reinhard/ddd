/**
 * generated by Xtext 2.16.0
 */
package com.mimacom.ddd.dm.dmx.ui.labeling;

import com.google.inject.Inject;
import com.mimacom.ddd.dm.base.DExpression;
import com.mimacom.ddd.dm.base.DNamedElement;
import com.mimacom.ddd.dm.dmx.DmxBinaryOperation;
import com.mimacom.ddd.dm.dmx.DmxBooleanLiteral;
import com.mimacom.ddd.dm.dmx.DmxCallArguments;
import com.mimacom.ddd.dm.dmx.DmxDecimalLiteral;
import com.mimacom.ddd.dm.dmx.DmxNaturalLiteral;
import com.mimacom.ddd.dm.dmx.DmxStringLiteral;
import com.mimacom.ddd.dm.dmx.DmxUnaryOperation;
import com.mimacom.ddd.dm.dmx.DmxUndefinedLiteral;
import org.eclipse.emf.edit.ui.provider.AdapterFactoryLabelProvider;
import org.eclipse.xtext.ui.label.DefaultEObjectLabelProvider;

/**
 * Provides labels for EObjects.
 * 
 * See https://www.eclipse.org/Xtext/documentation/304_ide_concepts.html#label-provider
 */
@SuppressWarnings("all")
public class DmxLabelProvider extends DefaultEObjectLabelProvider {
  @Inject
  public DmxLabelProvider(final AdapterFactoryLabelProvider delegate) {
    super(delegate);
  }
  
  public String text(final DNamedElement e) {
    String _simpleName = this.simpleName(e);
    String _plus = (_simpleName + " ");
    String _name = e.getName();
    return (_plus + _name);
  }
  
  public String text(final DExpression e) {
    return this.simpleName(e);
  }
  
  public String text(final DmxBinaryOperation e) {
    String _simpleName = this.simpleName(e);
    String _plus = (_simpleName + " ");
    String _name = e.getOperator().getName();
    return (_plus + _name);
  }
  
  public String text(final DmxUnaryOperation e) {
    String _simpleName = this.simpleName(e);
    String _plus = (_simpleName + " ");
    String _name = e.getOperator().getName();
    return (_plus + _name);
  }
  
  public String text(final DmxBooleanLiteral e) {
    String _simpleName = this.simpleName(e);
    String _plus = (_simpleName + " ");
    boolean _isValue = e.isValue();
    return (_plus + Boolean.valueOf(_isValue));
  }
  
  public String text(final DmxStringLiteral e) {
    String _simpleName = this.simpleName(e);
    String _plus = (_simpleName + " ");
    String _value = e.getValue();
    return (_plus + _value);
  }
  
  public String text(final DmxNaturalLiteral e) {
    String _simpleName = this.simpleName(e);
    String _plus = (_simpleName + " ");
    int _value = e.getValue();
    return (_plus + Integer.valueOf(_value));
  }
  
  public String text(final DmxDecimalLiteral e) {
    String _simpleName = this.simpleName(e);
    String _plus = (_simpleName + " ");
    String _value = e.getValue();
    return (_plus + _value);
  }
  
  public String text(final DmxUndefinedLiteral e) {
    return this.simpleName(e);
  }
  
  public String text(final DmxCallArguments d) {
    return "DmxCallArguments";
  }
  
  protected String simpleName(final Object obj) {
    final String name = obj.getClass().getSimpleName();
    boolean _endsWith = name.endsWith("Impl");
    if (_endsWith) {
      int _length = name.length();
      int _minus = (_length - 4);
      return name.substring(0, _minus);
    } else {
      boolean _endsWith_1 = name.endsWith("ImplCustom");
      if (_endsWith_1) {
        int _length_1 = name.length();
        int _minus_1 = (_length_1 - 10);
        return name.substring(0, _minus_1);
      }
    }
    return name;
  }
}
